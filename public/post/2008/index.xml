<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2008onRandom Geekery</title>
    <link>https://randomgeekery.org/post/2008/</link>
    <description>
      Recent contentin2008 on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Mon, 22 Jan 2024 14:33:48 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/post/2008/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Natalie&#39;s Hat</title>
  <link>https://randomgeekery.org/post/2008/10/natalies-hat/</link>
  <pubDate>Wed, 01 Oct 2008 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2008/10/natalies-hat/</guid>
  <description>Now for a hat using the same yarn I used for her sweater.</description>
   <category>post</category> 
   <category>post</category> 
   <category>knitting</category>  <category>hat</category>  <category>craft</category> 
  <content:encoded><![CDATA[<p>Now for a hat using the same yarn I used for her sweater.</p>
<p><figure>
    <img src="/../../../attachments/img/cover-2008-10-01.jpg" alt="attachments/img/cover-2008-10-01.jpg"/></figure></p>
]]></content:encoded>
</item>
<item>
  <title>Post: Natalie&#39;s Sweater</title>
  <link>https://randomgeekery.org/post/2008/09/natalies-sweater/</link>
  <pubDate>Sat, 27 Sep 2008 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2008/09/natalies-sweater/</guid>
  <description>I realized after finishing it up that I didn’t knit the sweater quite right. I was supposed to increase twice every 6th row on the sleeves, and I only increased once per 6 rows. So that’s why the sleeves looked funky.</description>
   <category>post</category> 
   <category>post</category> 
   <category>knitting</category>  <category>craft</category> 
  <content:encoded><![CDATA[<p>I realized after finishing it up that I didn’t knit the sweater quite right. I was supposed to increase twice every 6th row on the sleeves, and I only increased once per 6 rows. So that’s why the sleeves looked funky.</p>
<p><figure>
    <img src="/../../../attachments/img/cover-2008-09-27.jpg" alt="attachments/img/cover-2008-09-27.jpg"/></figure></p>
]]></content:encoded>
</item>
<item>
  <title>Post: JQuery UI&#39;s getting fancy</title>
  <link>https://randomgeekery.org/post/2008/05/jquery-uis-getting-fancy/</link>
  <pubDate>Wed, 28 May 2008 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2008/05/jquery-uis-getting-fancy/</guid>
  <description>&lt;p&gt;&lt;a href=&#34;http://jquery.com/&#34;&gt;JQuery&lt;/a&gt;’s my favorite &lt;a href=&#34;https://randomgeekery.org/card/javascript/&#34;&gt;JavaScript&lt;/a&gt; library by a long shot (very straightforward approach to manipulating page elements), and the &lt;a href=&#34;http://ui.jquery.com/&#34;&gt;JQuery UI&lt;/a&gt; makes it even better (so much shiny). I’m looking forward to using it in future projects.&lt;/p&gt;
&lt;p&gt;Sadly, I need to hunker down at work and get back to my &lt;a href=&#34;http://developer.yahoo.com/yui/&#34;&gt;YUI&lt;/a&gt; stuff. YUI’s nice, but it is a lot more complex than JQuery. I’m still trying to figure out if it’s worth the extra overhead, or if I’m missing some way to make things easier.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>javascript</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p><a href="http://jquery.com/">JQuery</a>&rsquo;s my favorite <a href="/card/javascript/">JavaScript</a> library by a long shot (very straightforward approach to manipulating page elements), and the <a href="http://ui.jquery.com/">JQuery UI</a> makes it even better (so much shiny). I&rsquo;m looking forward to using it in future projects.</p>
<p>Sadly, I need to hunker down at work and get back to my <a href="http://developer.yahoo.com/yui/">YUI</a> stuff. YUI&rsquo;s nice, but it is a lot more complex than JQuery. I&rsquo;m still trying to figure out if it&rsquo;s worth the extra overhead, or if I&rsquo;m missing some way to make things easier.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Lots of Nifty Newness for the Church Site</title>
  <link>https://randomgeekery.org/post/2008/02/lots-of-nifty-newness-for-the-church-site/</link>
  <pubDate>Thu, 14 Feb 2008 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2008/02/lots-of-nifty-newness-for-the-church-site/</guid>
  <description>I volunteered a little while ago to be the maintainer for the Green Lake United Methodist Church. One limitation of the site is the fact that the Webmaster was a barrier to getting new content online. It’s a common problem, and had nothing to do with the maliciousness of the Webmaster. It’s just the simple fact that the Web dude is the only person who can post content. If the office manager wants to post the Worship schedule, she has to ask the Webmaster.</description>
   <category>post</category> 
   <category>post</category> 
   <category>wordpress</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>I volunteered a little while ago to be the maintainer for the <a href="https://greenlakeumc.org">Green Lake United Methodist Church</a>. One limitation of the site is the fact that the Webmaster was a barrier to getting new content online. It’s a common problem, and had nothing to do with the maliciousness of the Webmaster. It’s just the simple fact that the Web dude is the only person who can post content. If the office manager wants to post the Worship schedule, she has to ask the Webmaster. If the pastor wants to present a message, she has to talk to the Webmaster. And it goes on and on. Eventually the Webmaster implodes, because you can only handle being the bottleneck for so long. The pressure becomes especially great when there is time-sensitive information that needs to be posted. You end up with a site that looks essentially static for months at a time.</p>
<p><figure>
    <img src="/attachments/img/2008/glumc-org-01.png" alt="greenlakeumc.org in 2006"/></figure></p>
<p>A blog seems like the most straightforward solution to the problem of allowing non-technical people to post content including material that is time-sensitive. I can worry about technical and design decisions, and everybody else can worry about content. I installed <a href="http://wordpress.org">WordPress</a> because it seemed like the best fit for this site. WordPress has a large userbase, is easy to install and maintain, and has plentiful plugins for extending functionality. They would probably be able to find free or cheap help on the site if I get hit by a bus or something. I added plugins for event scheduling and reader feedback, a nice looking template, and fine-tuned one of my own pictures of the church.</p>
<p>I do plan on adjusting things soon, but Worse-Is-Better so I’m making what we have available as soon as possible. I’ve received kind words about the new version on its first day live. It would be nice to make things more distinctive, but that template is a great start.</p>
<p><figure>
    <img src="/attachments/img/2008/glumc-org-02.png" alt="greenlakeumc.org in 2008"/></figure></p>
]]></content:encoded>
</item>
<item>
  <title>Post: Updating coolnamehere&#39;s design</title>
  <link>https://randomgeekery.org/post/2008/02/updating-coolnameheres-design/</link>
  <pubDate>Fri, 01 Feb 2008 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2008/02/updating-coolnameheres-design/</guid>
  <description>It’s time to revamp coolnamehere.
I’ve been using a tweaked version of the Greenery template from OSWD for a couple of years now. I think it’s time for a change. This time I actually concocted my own design using one of my photos and Yahoo’s YUI. I had so much fun with YUI on my church site that I had to try it out on my own site.
Here’s a screenshot of the old design:</description>
   <category>post</category> 
   <category>post</category> 
   <category>site</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<h2>One time when I revamped my old site</h2><p>It’s time to revamp <a href="/card/coolnamehere/">coolnamehere</a>.</p>
<p>I’ve been using a tweaked version of the <a href="http://www.oswd.org/design/information/id/2448">Greenery</a> template from <a href="http://oswd.org">OSWD</a> for a couple of years now. I think it’s time for a change. This time I actually concocted my own design using one of my photos and <a href="http://developer.yahoo.com/yui">Yahoo’s YUI</a>. I had so much fun with YUI on <a href="http://greenlakeumc.org">my church site</a> that I had to try it out on my own site.</p>
<p>Here’s a screenshot of the old design:</p>
<p><figure>
    <img src="/attachments/img/2008/coolnamehere-20080128.png" alt="old OSWD design"/></figure></p>
<p>There are a lot of things I liked about this design. The grass image dividing the columns gave the site an attractive and natural touch that had been missing before. On the other hand, I felt the need to tweak it so that it would work in all the browsers I used. It’s nice, though. Much better than the designs I had been coming up with on my own.</p>
<p>The new design has been widely praised by my sample group of two incredibly non-biased people: my wife and my brother. Okay, I will concede that they may have a bias. I like it in general, though. It’s very … Seattle. Clouds, water, scotch bloom.</p>
<p><figure>
    <img src="/attachments/img/2008/coolnamehere-2008-0128-2.png" alt="new design"/></figure></p>
<p>The design is still in progress. For starters, I <em>hate</em> the navtree menu. That navtree is starting to look a little cumbersome, actually, and is making me rethink how I want to handle navigation through the site. Maybe a simple subpage listing such as the one generated by ZenWeb. I’m also looking at new publishing options, and the one that is most attractive to me right now is <a href="http://www.blosxom.com">Blosxom</a>. It’s relatively old. It is also ridiculously easy to use and fairly
straightforward to enhance.</p>
<p>Oh, and I need to sort through the CSS, and probably the content itself. Oh well, at least all the pages are in order.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: PHPs extract and compact functions</title>
  <link>https://randomgeekery.org/post/2008/01/phps-extract-and-compact-functions/</link>
  <pubDate>Wed, 30 Jan 2008 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2008/01/phps-extract-and-compact-functions/</guid>
  <description>&lt;p&gt;I’ve been brushing up on my &lt;a href=&#34;https://randomgeekery.org/card/php/&#34;&gt;PHP&lt;/a&gt; basics lately. Why? Well, it never hurts to revisit things you think you already know. There is a good chance you will discover something you didn’t know after all. For example: this time I learned about &lt;a href=&#34;http://php.net&#34;&gt;PHP&lt;/a&gt;’s &lt;code&gt;extract&lt;/code&gt; and &lt;code&gt;compact&lt;/code&gt; functions.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>php</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>I&rsquo;ve been brushing up on my <a href="/card/php/">PHP</a> basics lately. Why? Well, it never hurts to revisit things you think you already know. There is a good chance you will discover something you didn&rsquo;t know after all. For example: this time I learned about <a href="http://php.net">PHP</a>&rsquo;s <code>extract</code> and <code>compact</code> functions.</p>
<p><a href="http://us3.php.net/manual/en/function.extract.php"><code>extract</code></a> takes an associative array and creates local variables on the fly, named for the keys in the array and with the corresponding values matched up. <a href="http://us3.php.net/manual/en/function.compact.php"><code>compact</code></a> is the corresponding function for taking a collection of variables and stuffing them into an associative array.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$book</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;title&#34;</span>     <span class="o">=&gt;</span> <span class="s2">&#34;Dad&#39;s Own Cookbook&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;author&#34;</span>    <span class="o">=&gt;</span> <span class="s2">&#34;Bob Sloan&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">extract</span><span class="p">(</span><span class="nv">$book</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">echo</span> <span class="nv">$title</span> <span class="o">.</span> <span class="s2">&#34; was written by &#34;</span> <span class="o">.</span> <span class="nv">$author</span> <span class="o">.</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nv">$first</span> <span class="o">=</span> <span class="s2">&#34;Brian&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$last</span>  <span class="o">=</span> <span class="s2">&#34;Wisti&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$keys</span>  <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&#34;first&#34;</span><span class="p">,</span> <span class="s2">&#34;last&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$my_name</span> <span class="o">=</span> <span class="nx">compact</span><span class="p">(</span><span class="nv">$keys</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">print_r</span><span class="p">(</span><span class="nv">$my_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre>
</figure><p>Running this code:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ php -f extract-compact.php
Dad&#39;s Own Cookbook was written by Bob Sloan
Array
(
    [first] =&gt; Brian
    [last] =&gt; Wisti
)</code></pre>
</figure><p><code>extract</code> is the more immediately useful of the two for my purposes, because it simplifies a common tactic I use for creating local variables based on database lookups.</p>
<p>Instead of manually creating local variables, like this:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span><span class="nv">$row</span> <span class="o">=</span> <span class="nx">mysql_fetch_array</span><span class="p">(</span><span class="nv">$result</span><span class="p">,</span> <span class="nx">MYSQL_ASSOC</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$author</span> <span class="o">=</span> <span class="nv">$row</span><span class="p">[</span><span class="s2">&#34;author&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$title</span>  <span class="o">=</span> <span class="nv">$row</span><span class="p">[</span><span class="s2">&#34;title&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre>
</figure><p>I can save myself a little effort with <code>extract</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span><span class="nv">$row</span> <span class="o">=</span> <span class="nx">mysql_fetch_array</span><span class="p">(</span><span class="nv">$result</span><span class="p">,</span> <span class="nx">MYSQL_ASSOC</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">extract</span><span class="p">(</span><span class="nv">$row</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre>
</figure><p>I realize that there may be an even easier way to do it, but just this will make my life noticeably easier as long as I don&rsquo;t abuse it. I would mainly tuck a call like this off in a function and probably use it in conjunction with a SQL query or something else where I knew exactly what names I would end up with.</p>
<p>Why didn&rsquo;t I know about this before? Well, the manual approach was good enough. And since what I had was good enough, I didn&rsquo;t think of looking for a better approach. Then again, finds like this are exactly why I <em>do</em> go back and review what I thought I already knew.</p>]]></content:encoded>
</item>
<item>
  <title>Post: REBOL 3 alpha released</title>
  <link>https://randomgeekery.org/post/2008/01/rebol-3-alpha-released/</link>
  <pubDate>Tue, 08 Jan 2008 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2008/01/rebol-3-alpha-released/</guid>
  <description>&lt;p&gt;I just saw Petr Krenzelok’s giddy announcement on the &lt;a href=&#34;https://randomgeekery.org/card/rebol/&#34;&gt;REBOL&lt;/a&gt; mailing list that a public alpha of REBOL 3 is available today. I’ve been waiting to see this for a while and can’t even begin to describe how excited I am.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>rebol</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>I just saw Petr Krenzelok&rsquo;s giddy announcement on the <a href="/card/rebol/">REBOL</a> mailing list that a public alpha of REBOL 3 is available today. I&rsquo;ve been waiting to see this for a while and can&rsquo;t even begin to describe how excited I am.</p>
<p>The official announcement is <a href="http://www.rebol.com/article/0347.html">here</a> I just need to remember that it&rsquo;s an alpha. Pieces aren&rsquo;t going to work. Things will be strange. But it&rsquo;s out there for the bold to play with.</p>
<p>Of course I gotta get some work done, but you can be sure I&rsquo;ll be poking at this over the next couple of days.</p>]]></content:encoded>
</item>
<item>
  <title>Post: PageTemplate for Site Generation Part 2</title>
  <link>https://randomgeekery.org/post/2008/01/pagetemplate-for-site-generation-part-2/</link>
  <pubDate>Mon, 07 Jan 2008 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2008/01/pagetemplate-for-site-generation-part-2/</guid>
  <description>&lt;p&gt;I’ve got my &lt;a href=&#34;https://randomgeekery.org/card/ruby/&#34;&gt;Ruby&lt;/a&gt; code &lt;a href=&#34;https://randomgeekery.org/post/2008/01/pagetemplate-for-site-generation/&#34;&gt;filtering Markdown&lt;/a&gt; and now I want to stuff that filtered content into an HTML page. I could just use &lt;code&gt;maruku#to_html_document&lt;/code&gt;, but I need the ability to add details like a title and site-related links.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>pagetemplate</category>  <category>ruby</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>I&rsquo;ve got my <a href="/card/ruby/">Ruby</a> code <a href="/post/2008/01/pagetemplate-for-site-generation/">filtering Markdown</a> and now I want to stuff that filtered content into an HTML page. I could just use <code>maruku#to_html_document</code>, but I need the ability to add details like a title and site-related links.</p>
<p>I could use a format similar to my <a href="/post/2007/12/python-loves-blogger-part-1/">Python blog files</a>. I won&rsquo;t really need PageTemplate if I do that, though. Not for the content file, anyways. That&rsquo;s okay, though. The Maruku filter was more of a proof-of-concept, anyways. PageTemplate will be useful for fitting the generated content into an actual template, though.</p>
<p>That means I&rsquo;m starting over on my content files.</p>
<p>Given a content file that looks like this:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >title: A Simple Page
--
This page intentionally left blank.</code></pre>
</figure><p>I want an object that makes the title available in some way (simple Hash style access is fine), and makes the HTML-formatted content available. After a few minutes of fiddling and poking around, I end up with tests and application code.</p>
<h4 id="article-test-code">Article Test Code</h4>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="ch">#!/usr/local/bin/ruby</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;test/unit&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;SiteTemplate&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TC_Article</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_article_file</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">article_file</span> <span class="o">=</span> <span class="s1">&#39;simple.txt&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">assert</span><span class="p">(</span><span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">article_file</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">assert_equal</span><span class="p">(</span><span class="n">article_file</span><span class="p">,</span> <span class="n">article</span><span class="o">.</span><span class="n">source_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">assert_equal</span><span class="p">(</span><span class="s1">&#39;A Simple Page&#39;</span><span class="p">,</span> <span class="n">article</span><span class="o">.</span><span class="n">metadata</span><span class="o">[</span><span class="s1">&#39;title&#39;</span><span class="o">]</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">assert</span><span class="p">(</span><span class="n">article</span><span class="o">.</span><span class="n">content</span> <span class="o">=~</span> <span class="sr">%r{&lt;p&gt;This page intentionally left blank.&lt;/p&gt;}</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><h4 id="the-application-code">The Application Code</h4>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="ch">#!/usr/local/bin/ruby</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;maruku&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># A single HTML page generated by a content file</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Content files usually look like this:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#    title: My Title</span>
</span></span><span class="line"><span class="cl"><span class="c1">#    --</span>
</span></span><span class="line"><span class="cl"><span class="c1">#    Article contents</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Article</span>
</span></span><span class="line"><span class="cl">    <span class="kp">attr_reader</span> <span class="ss">:source_file</span><span class="p">,</span> <span class="ss">:metadata</span><span class="p">,</span> <span class="ss">:content</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="vi">@metadata</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="n">parse!</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parse!</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="vi">@source_file</span> <span class="o">=</span> <span class="n">filename</span>
</span></span><span class="line"><span class="cl">        <span class="n">content</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">in_content</span> <span class="o">=</span> <span class="kp">false</span>
</span></span><span class="line"><span class="cl">        <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">in_content</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">                <span class="n">content</span> <span class="o">&lt;&lt;</span> <span class="n">line</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">line</span> <span class="o">=~</span> <span class="sr">/^--$/</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">                    <span class="n">in_content</span> <span class="o">=</span> <span class="kp">true</span>
</span></span><span class="line"><span class="cl">                    <span class="k">next</span>
</span></span><span class="line"><span class="cl">                <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">line</span> <span class="o">=~</span> <span class="sr">/^(\w+?):\s*(.+)$/</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">                    <span class="n">key</span> <span class="o">=</span> <span class="vg">$1</span>
</span></span><span class="line"><span class="cl">                    <span class="n">value</span> <span class="o">=</span> <span class="vg">$2</span>
</span></span><span class="line"><span class="cl">                    <span class="vi">@metadata</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span>
</span></span><span class="line"><span class="cl">                <span class="k">end</span>
</span></span><span class="line"><span class="cl">            <span class="k">end</span>
</span></span><span class="line"><span class="cl">        <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="vi">@content</span> <span class="o">=</span> <span class="no">Maruku</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">content</span><span class="p">)</span><span class="o">.</span><span class="n">to_html</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>It&rsquo;s a really simple, slow parser, but it works. I won&rsquo;t try to optimize it before I&rsquo;ve actually figured out what it&rsquo;s supposed to be doing.</p>
<h3 id="the-template">The Template</h3>
<p>The next target is stuffing this content into a template. That&rsquo;s <em>easy</em>. Here&rsquo;s the template:</p>
<h4 id="simplehtml-template-file">simple.html Template File</h4>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>[%var title%]<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>[%var title%]<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        [%var content%]
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>I could assemble my page manually if I felt like it. As a matter of fact, let&rsquo;s do that in one of the tests.</p>
<h4 id="manual-page-generation-test">Manual Page Generation Test</h4>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;PageTemplate&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TC_HTML_Page</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_manual_page_generation</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">article_file</span> <span class="o">=</span> <span class="s1">&#39;simple.txt&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">template</span> <span class="o">=</span> <span class="no">PageTemplate</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">template</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s1">&#39;simple.html&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">article_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">template</span><span class="o">[</span><span class="s1">&#39;title&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">article</span><span class="o">.</span><span class="n">metadata</span><span class="o">[</span><span class="s1">&#39;title&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">template</span><span class="o">[</span><span class="s1">&#39;content&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">article</span><span class="o">.</span><span class="n">content</span>
</span></span><span class="line"><span class="cl">        <span class="n">assert_match</span><span class="p">(</span><span class="sr">%r{&lt;title&gt;A Simple Page&lt;/title&gt;}</span><span class="p">,</span> <span class="n">template</span><span class="o">.</span><span class="n">output</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>Do I really want to manually apply even that little bit of code, though? No, I don&rsquo;t.</p>
<h4 id="automatic-page-generation-test">Automatic Page Generation Test</h4>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TC_HTML_Page</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_standard_page_generation</span>
</span></span><span class="line"><span class="cl">        <span class="n">article_file</span> <span class="o">=</span> <span class="s1">&#39;simple.txt&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">template_file</span> <span class="o">=</span> <span class="s1">&#39;simple.html&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">assert</span><span class="p">(</span><span class="n">html_page</span> <span class="o">=</span> <span class="no">HTML_Page</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:article</span> <span class="o">=&gt;</span> <span class="n">article_file</span><span class="p">,</span> <span class="ss">:template</span> <span class="o">=&gt;</span> <span class="n">template_file</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">assert_match</span><span class="p">(</span><span class="sr">%r{&lt;title&gt;A Simple Page&lt;/title&gt;}</span><span class="p">,</span> <span class="n">html_page</span><span class="o">.</span><span class="n">to_html</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">assert_match</span><span class="p">(</span><span class="sr">%r{&lt;p&gt;This page}</span><span class="p">,</span> <span class="n">html_page</span><span class="o">.</span><span class="n">to_html</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><h4 id="automatic-page-generation-code">Automatic Page Generation Code</h4>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;PageTemplate&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">HTML_Page</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">opts</span> <span class="o">=</span> <span class="p">{})</span>
</span></span><span class="line"><span class="cl">        <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">opts</span><span class="o">[</span><span class="ss">:article</span><span class="o">]</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="vi">@template</span> <span class="o">=</span> <span class="no">PageTemplate</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="vi">@template</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">opts</span><span class="o">[</span><span class="ss">:template</span><span class="o">]</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">to_html</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="vi">@template</span><span class="o">[</span><span class="s1">&#39;title&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@article</span><span class="o">.</span><span class="n">metadata</span><span class="o">[</span><span class="s1">&#39;title&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">        <span class="vi">@template</span><span class="o">[</span><span class="s1">&#39;content&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@article</span><span class="o">.</span><span class="n">content</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="vi">@template</span><span class="o">.</span><span class="n">output</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><h3 id="saving-a-file">Saving a File</h3>
<p>Okay, now I have article files with content and metadata being consumed, formatted, and handed off to PageTemplate for wrapping into a pretty HTML page. The only thing remaining at this stage is to actually <em>write</em> the file.</p>
<h4 id="test-writes">Test Writes</h4>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TC_HTML_Page</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test_standard_page_generation</span>
</span></span><span class="line"><span class="cl">        <span class="n">article_file</span> <span class="o">=</span> <span class="s1">&#39;simple.txt&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">template_file</span> <span class="o">=</span> <span class="s1">&#39;simple.html&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_file</span>   <span class="o">=</span> <span class="s1">&#39;test/out.simple.html&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="no">FileUtils</span><span class="o">::</span><span class="n">rm_rf</span><span class="p">(</span><span class="n">output_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">assert</span><span class="p">(</span><span class="n">html_page</span> <span class="o">=</span> <span class="no">HTML_Page</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="ss">:article</span>     <span class="o">=&gt;</span> <span class="n">article_file</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="ss">:template</span>    <span class="o">=&gt;</span> <span class="n">template_file</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="ss">:output_file</span> <span class="o">=&gt;</span> <span class="n">output_file</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">assert_match</span><span class="p">(</span><span class="sr">%r{&lt;title&gt;A Simple Page&lt;/title&gt;}</span><span class="p">,</span> <span class="n">html_page</span><span class="o">.</span><span class="n">to_html</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">assert_match</span><span class="p">(</span><span class="sr">%r{&lt;p&gt;This page}</span><span class="p">,</span> <span class="n">html_page</span><span class="o">.</span><span class="n">to_html</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">html_page</span><span class="o">.</span><span class="n">write_to_file</span>
</span></span><span class="line"><span class="cl">        <span class="n">assert</span><span class="p">(</span><span class="n">saved_html</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">output_file</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">assert_match</span><span class="p">(</span><span class="sr">%r{&lt;title&gt;A Simple Page&lt;/title&gt;}</span><span class="p">,</span> <span class="n">saved_html</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">assert_match</span><span class="p">(</span><span class="sr">%r{&lt;p&gt;This page}</span><span class="p">,</span> <span class="n">saved_html</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="no">FileUtils</span><span class="o">::</span><span class="n">rm_rf</span><span class="p">(</span><span class="n">output_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><h4 id="code-to-make-the-writes-happen">Code to Make the Writes Happen</h4>
<p>Oh heck, just take the whole thing. This is what my <code>SiteTemplate.rb</code> file looks like right now.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="ch">#!/usr/local/bin/ruby</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;maruku&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;PageTemplate&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># A single HTML page generated by a content file</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Content files usually look like this:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#    title: My Title</span>
</span></span><span class="line"><span class="cl"><span class="c1">#    --</span>
</span></span><span class="line"><span class="cl"><span class="c1">#    Article contents</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Article</span>
</span></span><span class="line"><span class="cl">    <span class="kp">attr_reader</span> <span class="ss">:source_file</span><span class="p">,</span> <span class="ss">:metadata</span><span class="p">,</span> <span class="ss">:content</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="vi">@metadata</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="n">parse!</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parse!</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="vi">@source_file</span> <span class="o">=</span> <span class="n">filename</span>
</span></span><span class="line"><span class="cl">        <span class="n">content</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">in_content</span> <span class="o">=</span> <span class="kp">false</span>
</span></span><span class="line"><span class="cl">        <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">in_content</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">                <span class="n">content</span> <span class="o">&lt;&lt;</span> <span class="n">line</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">line</span> <span class="o">=~</span> <span class="sr">/^--$/</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">                    <span class="n">in_content</span> <span class="o">=</span> <span class="kp">true</span>
</span></span><span class="line"><span class="cl">                    <span class="k">next</span>
</span></span><span class="line"><span class="cl">                <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">line</span> <span class="o">=~</span> <span class="sr">/^(\w+?):\s*(.+)$/</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">                    <span class="n">key</span> <span class="o">=</span> <span class="vg">$1</span>
</span></span><span class="line"><span class="cl">                    <span class="n">value</span> <span class="o">=</span> <span class="vg">$2</span>
</span></span><span class="line"><span class="cl">                    <span class="vi">@metadata</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span>
</span></span><span class="line"><span class="cl">                <span class="k">end</span>
</span></span><span class="line"><span class="cl">            <span class="k">end</span>
</span></span><span class="line"><span class="cl">        <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="vi">@content</span> <span class="o">=</span> <span class="no">Maruku</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">content</span><span class="p">)</span><span class="o">.</span><span class="n">to_html</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Takes an Article and a PageTemplate and mushes them together</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Note: This version still assumes that needed metadata will</span>
</span></span><span class="line"><span class="cl"><span class="c1"># be available. This is not a safe assumption.</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">HTML_Page</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">opts</span> <span class="o">=</span> <span class="p">{})</span>
</span></span><span class="line"><span class="cl">        <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">opts</span><span class="o">[</span><span class="ss">:article</span><span class="o">]</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="vi">@template</span> <span class="o">=</span> <span class="no">PageTemplate</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="vi">@template</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">opts</span><span class="o">[</span><span class="ss">:template</span><span class="o">]</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="vi">@output_file</span> <span class="o">=</span> <span class="n">opts</span><span class="o">[</span><span class="ss">:output_file</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">to_html</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="vi">@template</span><span class="o">[</span><span class="s1">&#39;title&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@article</span><span class="o">.</span><span class="n">metadata</span><span class="o">[</span><span class="s1">&#39;title&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">        <span class="vi">@template</span><span class="o">[</span><span class="s1">&#39;content&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@article</span><span class="o">.</span><span class="n">content</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="vi">@template</span><span class="o">.</span><span class="n">output</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">write_to_file</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="no">FileUtils</span><span class="o">::</span><span class="n">mkdir_p</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="vi">@output_file</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="vi">@output_file</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">print</span> <span class="n">to_html</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><h3 id="wrapup">Wrapup</h3>
<p>This stage is done. We&rsquo;ve taken some article files that look a lot like my blog files and turned them into fully-fleshed HTML files. They will fit into a PageTemplate that&rsquo;s been defined by the site maintainer, guaranteeing a standard look for the site.</p>
<p>My next post on this topic will deal with putting an <code>HTML_Page</code> into the context of a larger site.</p>]]></content:encoded>
</item>
<item>
  <title>Post: PageTemplate for Site Generation</title>
  <link>https://randomgeekery.org/post/2008/01/pagetemplate-for-site-generation/</link>
  <pubDate>Sun, 06 Jan 2008 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2008/01/pagetemplate-for-site-generation/</guid>
  <description>&lt;p&gt;So I was looking at my &lt;a href=&#34;https://randomgeekery.org/post/2007/12/python-loves-blogger-part-1/&#34;&gt;Python Blogger client&lt;/a&gt; and I tried implementing the same thing in &lt;a href=&#34;https://randomgeekery.org/card/ruby/&#34;&gt;Ruby&lt;/a&gt;. &lt;a href=&#34;https://code.google.com/p/gdata-ruby-util/&#34;&gt;gdata-ruby&lt;/a&gt; confusion stymied me. I still don’t know whether library issues or my own ignorance blocked me.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>pagetemplate</category>  <category>ruby</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>So I was looking at my <a href="/post/2007/12/python-loves-blogger-part-1/">Python Blogger client</a> and I tried implementing the same thing in <a href="/card/ruby/">Ruby</a>. <a href="https://code.google.com/p/gdata-ruby-util/">gdata-ruby</a> confusion stymied me. I still don&rsquo;t know whether library issues or my own ignorance blocked me.</p>
<p>That, of course, set me off on yet another thought. What if I tried to define my posts in a <a href="/post/2002/06/pagetemplate/">pagetemplate</a> file and used filters to handle the dirty work? Well, that might be a little challenge. But what if I used this approach to generate a whole Web site? Okay, yeah. That may have come out of nowhere for you. The truth is that I love static site generation tools, from <a href="http://zenspider.com/ZSS/Products/ZenWeb/index.html">ZenWeb</a> to <a href="http://webmake.taint.org">WebMake</a>. These tools appeal to me because <a href="/card/coolnamehere/">coolnamehere</a> is a static site and I love anything which can give that pile of pages a common format without making heavy server demands. Honestly, loading up PHP just so I can have a templated site seems like overkill.</p>
<p>Let&rsquo;s see if I can build a site like coolnamehere with Ruby and PageTemplate. I plan to borrow heavily from ZenWeb, since there are a lot of things to like about the ZenSpider approach. I especially like   building a site from a collection of pages and a chain of filters. Hey, PageTemplate has filters thanks to Greg Millam. Why don&rsquo;t I try <em>using</em> them?</p>
<h2 id="start-small">Start Small</h2>
<p>I am going to start small, by teaching SiteTemplate about <a href="https://github.com/bhollis/maruku">Maruku</a>.</p>
<p>It took me a bit of time to get that much done, because I needed to relearn how PageTemplate initializes. <em>Note to self: don&rsquo;t ever go a full year without using your own library.</em></p>
<p>The test is simple: create a template using the Maruku filter. Compare the output of that template with the text minus PageTemplate directives and fed into Maruku. The test passes if they look alike, or close enough.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="ch">#!/usr/local/bin/ruby</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;test/unit&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;sitetemplate&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TC_MarukuFilter</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span></span><span class="line"><span class="cl">  <span class="nb">require</span> <span class="s1">&#39;maruku&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="nf">test_maruku_filter</span>
</span></span><span class="line"><span class="cl">    <span class="n">content</span> <span class="o">=</span> <span class="s2">&#34;This is a paragraph&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># template_file contains the text &#34;[%filter :maruku%]This is a paragraph[%end%]&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">template_file</span> <span class="o">=</span> <span class="s2">&#34;maruku.txt&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">maruku_doc</span> <span class="o">=</span> <span class="no">Maruku</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pt</span> <span class="o">=</span> <span class="no">PageTemplate</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">pt</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">template_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert_equal</span><span class="p">(</span><span class="n">maruku_doc</span><span class="o">.</span><span class="n">to_html</span> <span class="o">+</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pt</span><span class="o">.</span><span class="n">output</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;Check if Maruku filter ran successfully&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>Then the code I needed to make that test pass:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="ch">#!/usr/local/bin/ruby</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Utility for generating a static site with PageTemplate</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;maruku&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;pagetemplate&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PageTemplate</span>
</span></span><span class="line"><span class="cl">  <span class="k">class</span> <span class="nc">DefaultPreprocessor</span>
</span></span><span class="line"><span class="cl">    <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span></span><span class="line"><span class="cl">      <span class="k">def</span> <span class="nf">maruku</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="no">Maruku</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">to_html</span>
</span></span><span class="line"><span class="cl">      <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>I cut corners by adding the <code>maruku</code> filter method to PageTemplate&rsquo;s DefaultPreprocessor. PageTemplate&rsquo;s internals need a little work, since this isn&rsquo;t the prettiest way a person might want to add filters. It works well, but it&rsquo;s not pretty.</p>
<p>That works well enough. Next time I&rsquo;ll try a template filter, which puts the Maruku output into a template file of my choosing. That way we get the standard look for pages.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Another Link</title>
  <link>https://randomgeekery.org/post/2008/01/another-link/</link>
  <pubDate>Fri, 04 Jan 2008 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2008/01/another-link/</guid>
  <description>The Ruby on Windows blog may well be the single best resource ever created for those of use who are learning how to automate Windows with Ruby.</description>
   <category>post</category> 
   <category>post</category> 
   <category>links</category>  <category>ruby</category>  <category>windows</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>The <a href="http://rubyonwindows.blogspot.com/">Ruby on Windows</a> blog may well be the single best resource ever created for those of use who are learning how to automate <em>Windows</em> with <a href="/card/ruby/">Ruby</a>.</p>
]]></content:encoded>
</item>
</channel>
</rss>
