<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2020onRandom Geekery</title>
    <link>https://randomgeekery.org/post/2020/</link>
    <description>
      Recent contentin2020 on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Mon, 22 Jan 2024 14:33:48 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/post/2020/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: My first Julia script</title>
  <link>https://randomgeekery.org/post/2020/12/my-first-julia-script/</link>
  <pubDate>Fri, 25 Dec 2020 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/my-first-julia-script/</guid>
  <description>Drawn with Luxor.jl
Merry Christmas! I wrote a little Julia code.
The inspiration Been getting frustrated with card/Python’s type hinting system. I usually start with loose and informal code, but eventually I specify types. And when I do, I want the language to check my work. I dislike relying on an external tool like MyPy that runs separately.
I’ve also been looking at Pandas a lot recently for work stuff.</description>
   <category>post</category> 
   <category>post</category> 
   <category>julialang</category>  <category>literateprogramming</category>  <category>literateblogging</category>  <category>site</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Weaving code in Hugo posts with Julia</h2><p><figure>
    <img src="/../../../attachments/img/2020/cover-2020-12-25.png" alt="attachments/img/2020/cover-2020-12-25.png"/></figure>
Drawn with <a href="http://juliagraphics.github.io/Luxor.jl/stable/">Luxor.jl</a></p>
<p>Merry Christmas! I wrote a little <a href="https://julialang.org">Julia</a> code.</p>
<h2 id="the-inspiration">The inspiration</h2>
<p>Been getting frustrated with <a href="/card/python/">card/Python</a>&rsquo;s type hinting system. I usually start with loose and informal code, but eventually I specify types. And when I do, I want the language to check my work. I dislike relying on an external tool like <a href="https://mypy.readthedocs.io/en/stable/">MyPy</a> that runs separately.</p>
<p>I&rsquo;ve also been looking at <a href="https://pandas.pydata.org">Pandas</a> a lot recently for work stuff. Okay, Pandas looks interesting to my non-data science brain. I mainly use it to filter Excel files for database updates. But I can&rsquo;t help noticing how often the Julia programming language comes up in those posts about Data Science in Python.</p>
<p>So I check out Julia. It intrigues me. The type system and concurrency tools look nice, of course. But what&rsquo;s this? Math code that looks more like math?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="o">√</span><span class="mi">2</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span> <span class="n">with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span><span class="o">-</span><span class="n">element</span> <span class="kt">Vector</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="o">-</span><span class="mf">5.0</span>
</span></span><span class="line"><span class="cl"> <span class="o">-</span><span class="mf">3.585786437626905</span>
</span></span><span class="line"><span class="cl">  <span class="mf">0.6568542494923806</span>
</span></span><span class="line"><span class="cl">  <span class="mf">7.727922061357857</span></span></span></code></pre>
</figure><p>By way of contrast, this is Python&rsquo;s equivalent of those two lines of Julia code.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sqrt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">x</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span></span></span></code></pre>
</figure><p>It&rsquo;s similar enough that I don&rsquo;t feel massively disoriented. But the math stuff is just a little bit friendlier.</p>
<p>Time to run through the &ldquo;is this language worth my time&rdquo; checklist.</p>
<ul>
<li>Julia is <a href="https://docs.julialang.org/en/v1/">well-documented</a></li>
<li>even though scientific programming is Julia&rsquo;s main niche, it includes a solid  base and standard library for the general-purpose utility code I write</li>
<li>the <a href="https://juliapackages.com">package ecosystem</a> looks healthy</li>
<li>I found at least one useful-looking <a href="https://www.genieframework.com">Web framework</a></li>
<li>I found at least one <a href="https://juliapackages.com/p/octo">high-level library</a> to interact with assorted database
servers</li>
<li>and — of course — somebody&rsquo;s written a <a href="/card/static-site-generator/">card/Static Site Generator</a> in Julia, called <a href="https://franklinjl.org">Franklin.jl</a></li>
</ul>
<p>So yeah. I can poke around a little more.</p>
<p>I love <a href="http://literateprogramming.com/index.html">literate programming</a>. One of the first things I did was look to see if someone in the Julia world did too. And they do!</p>
<p>There&rsquo;s <a href="https://fredrikekre.github.io/Literate.jl/v2/">Literate.jl</a>, which processes Markdown and code in Julia scripts. <a href="http://weavejl.mpastell.com/stable/">Weave.jl</a> is more my style, processing Julia code in Markdown files. I can write my post and weave it into an ordinary-looking Markdown file. <a href="/card/hugo/">card/Hugo</a> won&rsquo;t have to know the difference.</p>
<h2 id="the-setup">The setup</h2>
<p>Julia treats environment and package management as core functionality. Everything I need is in <a href="https://docs.julialang.org/en/v1/stdlib/Pkg/">Pkg</a>. Not to pick too much on Python — it really is a great language — but its environment management options are <a href="https://xkcd.com/1987/">infamously byzantine</a>.</p>
<p>To set up a package for my existing site, I drop into the REPL&rsquo;s <code>pkg</code> mode.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">julia&gt; ]</span></span></code></pre>
</figure><p>Here I can initialize my project and add dependencies.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >(v1.5) pkg&gt; initialize .
(rgb-hugo-legacy)&gt; add Weave
...</code></pre>
</figure><p>Now I have <code>Project.toml</code> and <code>Manifest.toml</code> files describing my Hugo site&rsquo;s new Julia needs. I can start writing this post.</p>
<h3 id="writing-with-weave">Writing with Weave</h3>
<p>Write the stuff you want to write, using <a href="https://docs.julialang.org/en/v1/stdlib/Markdown/">Julia-flavored Markdown</a>. Any code block fenceposted with triple backticks and labeled as &ldquo;julia&rdquo; gets evaluated by
Weave.</p>
<p>Set different <a href="http://weavejl.mpastell.com/stable/chunk_options/">chunk options</a> for the block if you want to tweak the code&rsquo;s treatment.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >```julia; term = true
f(x) = √2x^2 - 5
[f(x) for x in [0, 1, 2, 3]]
```</code></pre>
</figure><p>Weave does its thing, and produces something interesting depending on what output options you use.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >```julia
julia&gt; f(x) = √2x^2 - 5
f (generic function with 1 method)

julia&gt; [f(x) for x in [0, 1, 2, 3]]
4-element Array{Float64,1}:
-5.0
-3.585786437626905
0.6568542494923806
7.727922061357857
```</code></pre>
</figure><h2 id="the-script">The script</h2>
<p>AKA the point of this blog post. It looks in my content folder for recently modified <code>.jmd</code> files. Anything found gets handed off to <code>weave</code>, which does the hard work. Heck, <code>weave</code> even has a <code>hugo</code> option so I can generate Markdown specifically formatted to satisfy Hugo.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Logging</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Weave</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">content_folder</span> <span class="o">=</span> <span class="s">&#34;content&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">weave_extensions</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#34;.jmd&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">weave_files</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@debug</span> <span class="s">&#34;content is in </span><span class="si">$content_folder</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span><span class="p">)</span> <span class="k">in</span> <span class="n">walkdir</span><span class="p">(</span><span class="n">content_folder</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">file</span> <span class="k">in</span> <span class="n">files</span>
</span></span><span class="line"><span class="cl">            <span class="n">ext</span> <span class="o">=</span> <span class="n">splitext</span><span class="p">(</span><span class="n">file</span><span class="p">)[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">ext</span> <span class="k">in</span> <span class="n">weave_extensions</span>
</span></span><span class="line"><span class="cl">                <span class="n">weave_file</span> <span class="o">=</span> <span class="n">joinpath</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nd">@debug</span> <span class="s">&#34;Found weave file&#34;</span> <span class="n">weave_file</span>
</span></span><span class="line"><span class="cl">                <span class="n">target_file</span> <span class="o">=</span> <span class="n">joinpath</span><span class="p">(</span><span class="n">dirname</span><span class="p">(</span><span class="n">weave_file</span><span class="p">),</span> <span class="s">&#34;index.md&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">isfile</span><span class="p">(</span><span class="n">target_file</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">mtime</span><span class="p">(</span><span class="n">weave_file</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">mtime</span><span class="p">(</span><span class="n">target_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">push!</span><span class="p">(</span><span class="n">weave_files</span><span class="p">,</span> <span class="n">weave_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">end</span>
</span></span><span class="line"><span class="cl">            <span class="k">end</span>
</span></span><span class="line"><span class="cl">        <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@info</span> <span class="s">&#34;Weave-able files found:&#34;</span> <span class="n">weave_files</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">weave_file</span> <span class="k">in</span> <span class="n">weave_files</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@info</span> <span class="s">&#34;Weaving&#34;</span> <span class="n">weave_file</span>
</span></span><span class="line"><span class="cl">        <span class="n">weave</span><span class="p">(</span><span class="n">weave_file</span><span class="p">;</span> <span class="n">out_path</span><span class="o">=</span><span class="ss">:doc</span><span class="p">,</span> <span class="n">doctype</span><span class="o">=</span><span class="s">&#34;hugo&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@info</span> <span class="s">&#34;Done?&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">main</span><span class="p">()</span></span></span></code></pre>
</figure><p>This is probably not idiomatic Julia. Maybe it&rsquo;ll get there when I learn what idiomatic Julia even looks like.</p>
<p>Obviously there&rsquo;s no error handlng of any kind. That can come later.</p>
<p>A few things I noticed:</p>
<ul>
<li>functions like <code>walkdir</code> end up making the flow look a bit like Python</li>
<li>I kept making my code more complicated than it needed to be, when both Julia and Weave were ready with reasonable defaults</li>
<li>especially in regard to types; everything works fine without specifying  details; I can find out what happens when I add details later</li>
</ul>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >❯ just weave
julia --project=. scripts/weave-content.jl
┌ Info: Files that need weaving:
│   weave_files =
│    1-element Array{Any,1}:
└     &#34;content/post/2020/12/my-first-julia-script/index.jmd&#34;
┌ Info: Weaving
└   weave_file = &#34;content/post/2020/12/my-first-julia-script/index.jmd&#34;
┌ Info: Weaving chunk 1 from line 45
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 163
└   progress = 0.3333333333333333
┌ Info: Weaving chunk 3 from line 249
└   progress = 0.6666666666666666
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Weaved to /home/random/Sites/rgb-hugo-legacy/content/post/2020/12/my-first-julia-script/index.md
[ Info: Done?</code></pre>
</figure><p>Okay. That&rsquo;s great. I mean — all that so I could do a little math, but whatever.</p>
<h2 id="thats-it">That&rsquo;s it?</h2>
<p>Hey. Maybe we could do something cool. Make a cover image for this post with <a href="http://juliagraphics.github.io/Luxor.jl/stable/">Luxor</a>.</p>
<p>Let&rsquo;s try it out. I&rsquo;ll borrow heavily from the Luxor manual since I don&rsquo;t really know what I&rsquo;m doing,</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Colors</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Luxor</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">draw</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">foregroundcolors</span> <span class="o">=</span> <span class="n">Colors</span><span class="o">.</span><span class="n">diverging_palette</span><span class="p">(</span><span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">:</span><span class="mi">360</span><span class="p">),</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">:</span><span class="mi">360</span><span class="p">),</span> <span class="mi">200</span><span class="p">,</span> <span class="n">s</span> <span class="o">=</span> <span class="mf">0.99</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mf">0.8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">gsave</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">translate</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">-</span><span class="mi">150</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">julialogo</span><span class="p">(</span><span class="n">action</span><span class="o">=</span><span class="ss">:clip</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">500</span>
</span></span><span class="line"><span class="cl">        <span class="n">sethue</span><span class="p">(</span><span class="n">foregroundcolors</span><span class="p">[</span><span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">:</span><span class="k">end</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">        <span class="n">circle</span><span class="p">(</span><span class="n">rand</span><span class="p">(</span><span class="o">-</span><span class="mi">50</span><span class="o">:</span><span class="mi">350</span><span class="p">),</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">:</span><span class="mi">300</span><span class="p">),</span> <span class="mi">15</span><span class="p">,</span> <span class="ss">:fillstroke</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">clipreset</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">sethue</span><span class="p">(</span><span class="s">&#34;black&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">julialogo</span><span class="p">(</span><span class="n">action</span><span class="o">=</span><span class="ss">:stroke</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">translate</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">125</span><span class="p">,</span> <span class="n">y</span><span class="o">+</span><span class="mi">150</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">spiral</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">period</span><span class="o">=</span><span class="mi">20</span><span class="nb">π</span><span class="p">,</span> <span class="ss">:stroke</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">grestore</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">currentwidth</span> <span class="o">=</span> <span class="mi">850</span>
</span></span><span class="line"><span class="cl"><span class="n">currentheight</span> <span class="o">=</span> <span class="mi">500</span>
</span></span><span class="line"><span class="cl"><span class="n">Drawing</span><span class="p">(</span><span class="n">currentwidth</span><span class="p">,</span> <span class="n">currentheight</span><span class="p">,</span> <span class="s">&#34;cover.png&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">origin</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">background</span><span class="p">(</span><span class="s">&#34;white&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">setopacity</span><span class="p">(</span><span class="mf">.4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">scale</span><span class="p">(</span><span class="mf">1.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">draw</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">finish</span><span class="p">()</span></span></span></code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>First off, PNG format works better than SVG when you&rsquo;re drawing 500 random circles.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ exa -l content/post/2020/12/my-first-julia-script/cover*
</span></span><span class="line"><span class="cl">.rw-r--r--  99k random <span class="m">25</span> Dec 12:42 cover.png
</span></span><span class="line"><span class="cl">.rw-r--r-- 4.8M random <span class="m">25</span> Dec 12:37 cover.svg</span></span></code></pre>
</figure><p>Second, I added an <code>eval = false</code> chunk option after the image was good enough. No point regenerating the cover every time I fix a typo.</p>
</blockquote>
<p>That&rsquo;s enough writing about writing with Julia. I have a couple other drafts I want to revisit now.</p>
<p>Besides, it&rsquo;s Christmas! Christmas 2020. Which means my only regret is forgetting to order Christmas-themed face masks.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Project dependencies in Julia</title>
  <link>https://randomgeekery.org/post/2020/12/bkamins-github-io/</link>
  <pubDate>Wed, 23 Dec 2020 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/bkamins-github-io/</guid>
  <description>Step by step breakdown for setting up a project environment in card/Julia, using the REPL. I’ve only been looking close at Julia for a couple days, but they sure do love their REPL!
My practices for managing project dependencies in Julia</description>
   <category>post</category> 
   <category>bookmark</category> 
   <category>julialang</category> 
  <content:encoded><![CDATA[<p>Step by step breakdown for setting up a project environment in <a href="/card/julia/">card/Julia</a>, using the REPL. I&rsquo;ve only been looking close at Julia for a couple days, but they sure do love their REPL!</p>
<p><a href="https://bkamins.github.io/julialang/2020/05/18/project-workflow.html">My practices for managing project dependencies in Julia</a></p>
]]></content:encoded>
</item>
<item>
  <title>Post: Learning a little elisp</title>
  <link>https://randomgeekery.org/post/2020/12/learning-a-little-elisp/</link>
  <pubDate>Sat, 19 Dec 2020 16:30:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/learning-a-little-elisp/</guid>
  <description>&lt;p&gt;Excuse me while I share a sleep-deprived ramble from last night through about five lines of &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html%5Fnode/eintr/index.html&#34;&gt;Emacs Lisp&lt;/a&gt;, the extension language for &lt;a href=&#34;https://randomgeekery.org/card/emacs/&#34;&gt;Emacs&lt;/a&gt;&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>elisp</category>  <category>emacs</category>  <category>org-mode</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Don't get impressed yet</h2><p>Excuse me while I share a sleep-deprived ramble from last night through about five lines of <a href="https://www.gnu.org/software/emacs/manual/html%5Fnode/eintr/index.html">Emacs Lisp</a>, the extension language for <a href="/card/emacs/">Emacs</a></p>
<p>There&rsquo;s <a href="https://www.gnu.org/software/emacs/manual/html%5Fnode/eintr/index.html">tons</a> of <a href="https://caiorss.github.io/Emacs-Elisp-Programming/">detailed</a> information about Emacs LISP — aka Emacs Lisp, elisp, ELisp, and &ldquo;oh my god they love parentheses&rdquo; — out there.  I just want my old &ldquo;Babysteps&rdquo; approach, so all the detailed sites won&rsquo;t be so intimidating.</p>
<p>Gotta do it myself, I guess.</p>
<h2 id="why">Why</h2>
<p>So far I have treated elisp as an arcane configuration language.  But it’s so much more than that.  It’s also an arcane <em>programming</em> language.  I do love learning programming languages.</p>
<p>I’ll have an easier time configuring Emacs, and most likely get strange new ideas for ways to extend my frenemy text editing environment.</p>
<h2 id="how">How</h2>
<p>Using <a href="https://www.gnu.org/software/emacs/">Emacs</a>, of course!  A little bit with the deep integration for both <a href="https://www.gnu.org/software/emacs/manual/html%5Fnode/emacs/Lisp-Eval.html#Lisp-Eva">evaluation</a> and documentation_ of Lisp.  Probably a bit more with <a href="https://orgmode.org/worg/org-contrib/babel/intro.html">Org Babel</a>, which provides a layer for evaluating code and exporting the results — say, for example, to a blog post like this one.</p>
<p>Expect side notes about <a href="https://github.com/hlissner/doom-emacs">Doom Emacs</a>, since that’s the flavor I use lately.</p>
<h2 id="lets-get-started">Let’s get started</h2>
<p>I looked up &ldquo;Hello World in ELisp&rdquo; and found something like this.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nf">message</span> <span class="s">&#34;Hey World!&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><h3 id="elisp-evaluation">ELisp evaluation</h3>
<p>Want to write some Emacs Lisp? Here you go.</p>
<ul>
<li>open Emacs</li>
<li>type <code>(message &quot;Hey World!&quot;)</code></li>
<li>put your cursor — the <em>point</em> — just outside the closing parenthesis.</li>
<li>Hit <em>C-x e</em></li>
<li>Emacs prints <code>Hey World!</code></li>
</ul>
<p>Boom.  Done.</p>
<p>The <code>()</code> indicate an <a href="https://en.wikipedia.org/wiki/S-expression">s-expression</a>.  That’s a <em>symbolic expression</em>, or <em>sexpr</em> if you’re cool.  S-expressions aren’t quite the atoms of a Lisp program.  There are smaller bits, like the symbol <code>message</code> or the value <code>&quot;Hey World!&quot;</code>.  But it’s the smallest <em>useful</em> element.  Oh I know.  S-expressions are the <em>molecules</em> of a Lisp program.</p>
<p>No?  How about words vs sentences?  Okay, whatever.</p>
<p>This particular s-expression holds an <em>ordered pair</em>, <code>message</code> and <code>&quot;Hey World!&quot;</code>.  <em>Pair</em> because there are two items.  <em>Ordered</em> because the order matters.</p>
<p>When ELisp sees an ordered pair, it knows what to do:</p>
<ul>
<li>figure out what it gets from the second thing</li>
<li>hand that to the first thing</li>
<li>hand <em>that</em> result to you</li>
</ul>
<p>The part that feels magic is each of the items in the pair can be s-expressions too!  Try <code>(sqrt (* 37 37))</code>.  <code>37.0</code>, right?</p>
<p>That <code>*</code> is for multiplication.  So we’re multiplying <code>37</code> by <code>37</code> and proving to ourselves that <code>sqrt</code> hands us back <code>37</code>.  It’s a bit of a pointless example, but hey welcome to me learning stuff.  And there’s my first lesson:</p>
<p>A Lisp program is pretty much just infinitely nested s-expressions.</p>
<p>And macros.  Macros, near as I can tell, are infinitely nested s-expressions with gloves and a nice hat.</p>
<p>BTW I don’t know Lisp.  I hope you did not come here expecting a tutorial.</p>
<h3 id="elisp-documentation">ELisp documentation</h3>
<p>When we have a question about ELisp functions, we don’t need to look everything up online.  Emacs comes with notes.</p>
<ul>
<li>put <em>point</em> over <code>message</code> in <code>(message &quot;Hey world!&quot;)</code></li>
<li>hit <code>C-h f</code></li>
<li>see the prompt asking me to specify a function, with <code>message</code> pre-filled</li>
<li>hit <code>ENTER</code></li>
<li>Learn things!</li>
</ul>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Doom uses <kbd>SPC h f</kbd> to fetch function descriptions.  Oh hey, while you’re at it try <kbd>SPC h d h</kbd> for general Doom help, or <kbd>SPC h d m</kbd> for help with a specific mode!</p>
</blockquote>
<h3 id="elisp-in-org-babel">ELisp in Org Babel</h3>
<p>This is great and all, but I am less concerned about live evaluation of ELisp. Org mode is more interesting to me.  I could make my <a href="/config/">Config</a> smarter.  For example, only tangle a section if it’s relevant for that machine.</p>
<p>And, of course, really handy for blogging about ELisp.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Configuration of Org and Babel is traditionally an elaborate ritual.  In Doom, it’s enough for this post to enable <code>org</code>.</p>
<p>Somewhere in my <code>init.el</code> I have these lines.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="nb">:lang</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nv">org</span> <span class="nv">+roam</span> <span class="nv">+hugo</span><span class="p">)</span></span></span></code></pre>
</figure><p>Okay, I added <code>+hugo</code> since I’m using <code>ox-hugo</code> to integrate with my workflow. And <code>+roam</code> because <a href="https://www.orgroam.com/">org-roam</a> is kinda cool.  But not relevant for today.</p>
</blockquote>
<p>I need a code block written in a language that Babel knows.  It should not
surprise us that Babel knows ELisp.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">#+begin_src elisp
</span></span><span class="line"><span class="cl">(message &#34;Hey World!&#34;)
</span></span><span class="line"><span class="cl">#+end_src</span></span></code></pre>
</figure><p>I press <kbd>C-c C-c</kbd> with <em>point</em> over the code block.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Or <kbd>ENTER</kbd> in Doom.</p>
</blockquote>
<p>Suddenly: a <code>#+RESULTS:</code> block!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">#+RESULTS:
</span></span><span class="line"><span class="cl">: Hey World!</span></span></code></pre>
</figure><p>I can also write my ELisp inline:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">src_elisp{(sqrt (* 37 37))}, right?</span></span></code></pre>
</figure><p>Written like this, Babel replaces my code with its result when <code>ox-hugo</code> exports the post.</p>
<p>All right. That’s the very basics of evaluating ELisp in Emacs generally and Org mode in particular.</p>
<p>Let’s get back to the code, please. How do I do variables?</p>
<h2 id="displaying-a-variable">Displaying a variable</h2>
<p>Let’s see. <code>setq</code> to set a variable for my name. identifiers can be pretty much whatever. I’ll use lowercase letters and a hyphen.</p>
<p>Looks like <code>format</code> can smush it into a string for <code>message</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">my-name</span> <span class="s">&#34;Brian&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">message</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nf">format</span> <span class="s">&#34;hello %s&#34;</span> <span class="nv">my-name</span><span class="p">))</span></span></span></code></pre>
</figure><p><code>format</code> does its work and hands the result back to <code>message</code>, which displays the result.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">hello Brian</span></span></code></pre>
</figure><p>Thing is, now <code>my-name</code> is floating around forever what with being a global variable.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nf">message</span> <span class="nv">my-name</span><span class="p">)</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">Brian</span></span></code></pre>
</figure><p>What if I used a local variable instead?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">new-name</span> <span class="s">&#34;Whozzomongo&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nf">message</span> <span class="nv">new-name</span><span class="p">))</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">Whozzomongo</span></span></code></pre>
</figure><p>But back out here it doesn’t exist.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">new-name</span><span class="p">)</span></span></span></code></pre>
</figure><p>You don’t see anything out here, but when I tried to <kbd>C-c C-c</kbd> that, Emacs complained:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">Symbol’s function definition is void: new-name</span></span></code></pre>
</figure><p>I consider that a good thing. Global variables make me nervous, especially in long-running applications.</p>
<p>So I know how to set global or local variables.  I know how to display them.</p>
<p>How to get them from the user?</p>
<h2 id="getting-user-input">Getting user input</h2>
<p><a href="http://www.ergoemacs.org/emacs/elisp%5Fidioms%5Fprompting%5Finput.html">Xah Lee</a> gives a nice rundown on how to get user input. <code>read-string</code> is the one I want.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nf">read-string</span> <span class="s">&#34;What&#39;s your name? &#34;</span><span class="p">)</span></span></span></code></pre>
</figure><p><code>read-string</code> returns whatever I answer.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">Waffle Smasher The Magnificent Pineapple</span></span></code></pre>
</figure><p>Let’s make a question prompt.  The inside-out approach of nested evaluation confuses me a bit, so I’ll happily let Emacs indent things however it wants.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nf">message</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nb">let</span>
</span></span><span class="line"><span class="cl">     <span class="p">((</span><span class="nv">question</span> <span class="s">&#34;What&#39;s your name?&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nf">message</span> <span class="s">&#34;Go to bed, %s!&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nf">format</span> <span class="nf">message</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="nf">read-string</span> <span class="p">(</span><span class="nf">format</span> <span class="s">&#34;%s &#34;</span> <span class="nv">question</span><span class="p">)))))</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">Go to bed, Dude!</span></span></code></pre>
</figure><p>I did some things.  <code>read-string</code> puts the cursor right after the <code>question</code> prompt.  So to help myself while I’m figuring all this out, I created some local variables.  <code>question</code> holds the question to be answered. <code>message</code> holds the —</p>
<p>Wait, there’s already a global <em>standard</em> function called <code>message</code>!</p>
<p>It’s cool.  By the time I need the function, <code>let</code> is done and my variable
doesn’t exist.  Still.  I shouldn’t make this a habit.</p>
<h2 id="wrapping-it-in-a-function">Wrapping it in a function</h2>
<p>I wasn’t planning on looking at functions today, but I’m more than halfway there already.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">ask-and-respond</span> <span class="p">(</span><span class="nv">question-for-user</span> <span class="nv">our-response</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Ask the user a question and show them a response.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">interactive</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">message</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nf">format</span> <span class="nv">our-response</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="nf">read-string</span> <span class="p">(</span><span class="nf">format</span> <span class="s">&#34;%s &#34;</span> <span class="nv">question-for-user</span><span class="p">)))))</span></span></span></code></pre>
</figure><p>Use the <a href="https://www.gnu.org/software/emacs/manual/html%5Fnode/eintr/defun.html#defun">defun</a> macro to <em>define functions</em>. It’s similar enough to function definitions in other languages.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">NAME</span> <span class="p">(</span><span class="nv">ARGUMENTS</span><span class="err">…</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;A docstring&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">THE</span> <span class="nv">CODE</span><span class="p">)</span></span></span></code></pre>
</figure><p>Though there are some differences right off the bat.  <code>ask-and-respond</code> needs user input.  ELisp requires I mark those as interactive_.</p>
<p>Other than <em>that</em> it’s similar enough to function definitions in other languages.</p>
<p>I already know how to call a function.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">ask-and-respond</span> <span class="s">&#34;What&#39;s your name?&#34;</span> <span class="s">&#34;Goodnight, %s!&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">Goodnight, Brian!</span></span></code></pre>
</figure><p>Okay, time to take my own hint.  Good night!</p>]]></content:encoded>
</item>
<item>
  <title>Post: Something new to color</title>
  <link>https://randomgeekery.org/post/2020/12/something-new-to-color/</link>
  <pubDate>Fri, 18 Dec 2020 23:15:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/something-new-to-color/</guid>
  <description> Roughly four hours of bedtime drawing over the last few days. The challenge of a brain that has to timeshare hobbies.
But hey, I remembered to leave the linework layer alone this time. You can color your own if you want!
2020-12-15-linework.jpg image/jpeg 1050 pixels wide, 1050 pixels high Licensed under Attribution 4.0 International (CC BY 4.0) </description>
   <category>post</category> 
   <category>note</category> 
   <category>drawing</category>  <category>symmetry</category>  <category>color-me</category>  <category>procreate</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2020/cover-2020-12-18.jpg" alt="attachments/img/2020/cover-2020-12-18.jpg"/></figure></p>
<p>Roughly four hours of bedtime drawing over the last few days. The challenge of a brain that has to timeshare hobbies.</p>
<p>But hey, I remembered to leave the linework layer alone this time. You can color your own if you want!</p>
<div class="image-link">
  <div class="image-link-preview">
    <a href="2020-12-15-linework.jpg">
      <img src="2020-12-15-linework-96x96.jpg" alt="thumbnail of linked image">
    </a>
  </div>
  <div class="image-link-details">
    <ul>
      <li>
        <a href="2020-12-15-linework.jpg">
          <tt>2020-12-15-linework.jpg</tt>
        </a>
      </li>
      <li>image/jpeg</li>
      <li>1050 pixels wide, 1050 pixels high</li>
      <li>Licensed under <a href="https://creativecommons.org/licenses/by/4.0/">Attribution 4.0 International (CC BY 4.0)</a></li>
    </ul>
  </div>
</div>
]]></content:encoded>
</item>
<item>
  <title>Post: Great workflow you got there</title>
  <link>https://randomgeekery.org/post/2020/12/great-workflow-you-got-there/</link>
  <pubDate>Sun, 13 Dec 2020 15:18:34 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/great-workflow-you-got-there/</guid>
  <description>Thirty seconds to add a bookmark link. Three hours to tweak a bunch of minor layout issues.
I’m like a machine. A machine held together by duct tape and glitter glue.</description>
   <category>post</category> 
   <category>note</category> 
   <category>efficiency</category>  <category>productivity</category>  <category>and-other-delusions</category>  <category>still-feels-good</category>  <category>site</category> 
  <content:encoded><![CDATA[<p>Thirty seconds to add a bookmark link. Three hours to tweak a bunch of minor layout issues.</p>
<p>I&rsquo;m like a machine. A machine held together by duct tape and glitter glue.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Emacs in a Box</title>
  <link>https://randomgeekery.org/post/2020/12/caiorss-github-io/</link>
  <pubDate>Sun, 13 Dec 2020 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/caiorss-github-io/</guid>
  <description>Emacs In a Box - Elisp Programming and Customization
Maybe the bookmark should have been to the Elisp Snippets page. That’s the one I keep going back to. The whole site is a well-organized collection of notes on using and extending Emacs.</description>
   <category>post</category> 
   <category>bookmark</category> 
   <category>emacs</category>  <category>elisp</category> 
  <content:encoded><![CDATA[<p><a href="https://caiorss.github.io/Emacs-Elisp-Programming/">Emacs In a Box - Elisp Programming and Customization</a></p>
<p>Maybe the bookmark should have been to the <a href="https://caiorss.github.io/Emacs-Elisp-Programming/Elisp_Snippets.html">Elisp Snippets</a> page.
That&rsquo;s the one I keep going back to. The whole site is a well-organized collection of notes on using and extending <a href="/card/emacs/">Emacs</a>.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Emacs Prelude Documentation</title>
  <link>https://randomgeekery.org/post/2020/12/prelude-emacsredux-com/</link>
  <pubDate>Tue, 08 Dec 2020 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/prelude-emacsredux-com/</guid>
  <description>Home - Prelude: A sleek, modern, simple and powerful Emacs experience for everyone
A starter kit for Emacs</description>
   <category>post</category> 
   <category>bookmark</category> 
   <category>emacs</category> 
  <content:encoded><![CDATA[<p><a href="https://prelude.emacsredux.com">Home - Prelude: A sleek, modern, simple and powerful Emacs experience for everyone</a></p>
<p>A starter kit for <a href="/card/emacs/">Emacs</a></p>
]]></content:encoded>
</item>
<item>
  <title>Post: New theme for 2021</title>
  <link>https://randomgeekery.org/post/2020/12/new-theme-for-2021/</link>
  <pubDate>Mon, 07 Dec 2020 07:16:55 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/new-theme-for-2021/</guid>
  <description>I don’t care if it’s not 2021 yet. I’m starting now, with Picnic CSS for the foundation.
Funny thing about 20-year old sites. They take more than a weekend to revamp. Still kind of funky, but I’ll fix it eventually.
2022 at the latest.</description>
   <category>post</category> 
   <category>note</category> 
   <category>css</category>  <category>spring-cleaning-for-websites</category>  <category>site</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2020/cover-2020-12-07.png" alt="attachments/img/2020/cover-2020-12-07.png"/></figure></p>
<p>I don&rsquo;t care if it&rsquo;s not 2021 yet. I&rsquo;m starting now, with <a href="https://picnicss.com">Picnic CSS</a> for the foundation.</p>
<p>Funny thing about 20-year old sites. They take more than a weekend to revamp. Still kind of funky, but I&rsquo;ll fix it eventually.</p>
<p>2022 at the latest.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Command Line Interface Guidelines</title>
  <link>https://randomgeekery.org/post/2020/12/clig-dev/</link>
  <pubDate>Sat, 05 Dec 2020 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/clig-dev/</guid>
  <description>Command Line Interface Guidelines
An open-source guide to help you write better command-line programs, taking traditional UNIX principles and updating them for the modern day.</description>
   <category>post</category> 
   <category>bookmark</category> 
   <category>cli</category>  <category>shell</category>  <category>ux</category> 
  <content:encoded><![CDATA[<p><a href="https://clig.dev/">Command Line Interface Guidelines</a></p>
<blockquote>
<p>An open-source guide to help you write better command-line programs, taking traditional UNIX principles and updating them for the modern day.</p>
</blockquote>
]]></content:encoded>
</item>
<item>
  <title>Post: IndieWeb bookmarking reference</title>
  <link>https://randomgeekery.org/post/2020/12/bookmark-indieweb/</link>
  <pubDate>Fri, 04 Dec 2020 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/bookmark-indieweb/</guid>
  <description>Not formally part of card/microformats, but I need it for ideas on how to format my bookmarks.
bookmark — IndieWeb</description>
   <category>post</category> 
   <category>bookmark</category> 
   <category>indieweb</category> 
  <content:encoded><![CDATA[<p>Not formally part of <a href="/card/microformats/">card/microformats</a>, but I need it for ideas on how to format my bookmarks.</p>
<p><a href="https://indieweb.org/bookmark">bookmark — IndieWeb</a></p>
]]></content:encoded>
</item>
</channel>
</rss>
