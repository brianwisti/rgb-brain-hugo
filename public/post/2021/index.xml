<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2021onRandom Geekery</title>
    <link>https://randomgeekery.org/post/2021/</link>
    <description>
      Recent contentin2021 on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Mon, 22 Jan 2024 14:33:49 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/post/2021/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: meanwhile, weather</title>
  <link>https://randomgeekery.org/post/2021/12/meanwhile-weather/</link>
  <pubDate>Thu, 30 Dec 2021 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/12/meanwhile-weather/</guid>
  <description>hey we got some snow
Would you look at that? We got some actual weather.
What else?
Been keeping myself busy with the JavaScript static site generators. Last week’s card/Astro experiment got slow so I’ve been messing with card/Eleventy.
Probably my last note of the year, so: Happy New Year!</description>
   <category>post</category> 
   <category>note</category> 
   <category>in-local-news</category>  <category>seattle</category>  <category>ok-just-outside-seattle</category>  <category>now</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2021/cover-2021-12-30.jpg" alt="attachments/img/2021/cover-2021-12-30.jpg"/></figure>
hey we got some snow</p>
<p>Would you look at that? We got some actual weather.</p>
<p>What else?</p>
<p>Been keeping myself busy with the JavaScript static site generators. Last week&rsquo;s <a href="/card/astro/">card/Astro</a> experiment got slow so I&rsquo;ve been messing with <a href="/card/eleventy/">card/Eleventy</a>.</p>
<p>Probably my last note of the year, so: Happy New Year!</p>
]]></content:encoded>
</item>
<item>
  <title>Post: I got Astro working!</title>
  <link>https://randomgeekery.org/post/2021/12/i-got-astro-working/</link>
  <pubDate>Thu, 23 Dec 2021 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/12/i-got-astro-working/</guid>
  <description>this time you get a screenshot
card/Astro is great once you get started. A bit funky if you have twenty years of legacy content.
Rather than do my usual — a screenshot and maybe a “lesson learned” post — this time around I made a public repo and live instance of this in-progress experiment available for your entertainment and edification.
Oh and lesson learned: components are fussy, and the errors don’t always happen where you expect.</description>
   <category>post</category> 
   <category>note</category> 
   <category>astro-dot-build</category>  <category>ssg</category>  <category>site</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2021/cover-2021-12-23.png" alt="attachments/img/2021/cover-2021-12-23.png"/></figure>
this time you get a screenshot</p>
<p><a href="/card/astro/">card/Astro</a> is great once you get started. A bit funky if you have twenty years of legacy content.</p>
<p>Rather than do my usual — a screenshot and <em>maybe</em> a &ldquo;lesson learned&rdquo; post — this time around I made a public <a href="https://github.com/brianwisti/rgb-astro">repo</a> and <a href="https://quirky-wozniak-e4e36f.netlify.app">live instance</a> of this in-progress experiment available for your entertainment and edification.</p>
<p>Oh and lesson learned: components are <em>fussy</em>, and the errors don&rsquo;t always happen where you expect. Treat all your imported HTML as XHTML, and look for stray <code>{</code> characters. You might need to convert those to <code>&amp;#123;</code>.</p>
<p>Took me months to figure that out. Hopefully it saves you a few hours of confusion.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Logseq sure does work hard at being friendly</title>
  <link>https://randomgeekery.org/post/2021/11/logseq-sure-does-work-hard-at-being-friendly/</link>
  <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/11/logseq-sure-does-work-hard-at-being-friendly/</guid>
  <description>This note in Logseq document mode, using the Bonofix theme
Talking about card/Logseq, a knowledge management tool roughly equivalent to card/Obsidian or Org-roam.
There’s just so many little affordances. Not even talking about the built-in query language or graph view. Those are full-on features, which other tools match or sometimes exceed. I’m talking about little things like t t to toggle between the light and dark mode of your current theme.</description>
   <category>post</category> 
   <category>note</category> 
   <category>logseq</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2021/cover-2021-11-14.png" alt="attachments/img/2021/cover-2021-11-14.png"/></figure>
This note in Logseq document mode, using the <a href="https://github.com/sansui233/logseq-bonofix-theme">Bonofix</a> theme</p>
<p>Talking about <a href="/card/logseq/">card/Logseq</a>, a knowledge management tool roughly equivalent to <a href="/card/obsidian/">card/Obsidian</a> or <a href="https://www.orgroam.com">Org-roam</a>.</p>
<p>There&rsquo;s just so many little affordances. Not even talking about the built-in query language or graph view. Those are full-on features, which other tools match or sometimes exceed. I&rsquo;m talking about little things like <code>t t</code> to toggle between the light and dark mode of your current theme. It&rsquo;s just nice to use even before you get to tweaks and plugins.</p>
<p>Logseq documentation has the full list under <a href="https://logseq.github.io/#/settings/shortcut">Keyboard Shortcuts</a> but here are a few that I&rsquo;ve built up muscle memory for:</p>
<table>
<thead>
<tr>
<th>Keys</th>
<th>Action</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>t t</code></td>
<td>light / dark theme</td>
</tr>
<tr>
<td><code>t r</code></td>
<td>right sidebar</td>
</tr>
<tr>
<td><code>t l</code></td>
<td>left sidebar</td>
</tr>
<tr>
<td><code>t d</code></td>
<td>list / document mode</td>
</tr>
</tbody>
</table>
]]></content:encoded>
</item>
<item>
  <title>Post: Drawing and site shuffling are coping techniques</title>
  <link>https://randomgeekery.org/post/2021/11/drawing-and-site-shuffling-are-coping-techniques/</link>
  <pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/11/drawing-and-site-shuffling-are-coping-techniques/</guid>
  <description>I do love the fairyfloss color scheme
That says it all, really. Been a stressful oh I don’t know let’s say year and a half or so.
Tweaked and reloaded the Picnic CSS-based theme I had a while back. I missed it. Buried my bookmarking links — they’re still there for now, but I have another idea how I want to handle the “info dump” section of the site. I’ll also revisit the Config section, since it still gets traffic even though I buried it months ago.</description>
   <category>post</category> 
   <category>note</category> 
   <category>drawing</category>  <category>linea-sketch</category>  <category>symmetry</category>  <category>site</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2021/cover-2021-11-07.jpg" alt="attachments/img/2021/cover-2021-11-07.jpg"/></figure>
I do love the fairyfloss color scheme</p>
<p>That says it all, really. Been a stressful oh I don&rsquo;t know let&rsquo;s say year and a half or so.</p>
<p>Tweaked and reloaded the <a href="https://picnicss.com/">Picnic CSS</a>-based theme I had a while back. I missed it. Buried my bookmarking links — they&rsquo;re still there for now, but I have another idea how I want to handle the &ldquo;info dump&rdquo; section of the site. I&rsquo;ll also revisit the Config section, since it still gets traffic even though I buried it months ago.</p>
<p>And then there&rsquo;s the drawing. More hours, days, and weeks of manual symmetry in <a href="https://linea-app.com/">Linea Sketch</a>. Got a store refresh planned for the art! That was what sparked the site shuffling. Wanted a clean slate for my money-grubbing.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Try Riv if you like Vim and reStructuredText</title>
  <link>https://randomgeekery.org/post/2021/10/try-riv-if-you-like-vim-and-restructuredtext/</link>
  <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/10/try-riv-if-you-like-vim-and-restructuredtext/</guid>
  <description>Riv screenshot
Riv is a wiki, but feels like more of a notebook. Think Deft for Emacs with journaling and HTML publishing. What makes Riv interesting — aside from the Vim thing — is that it uses reStructuredText for its native format.
It works well enough, especially once you build up muscle memory for Riv’s leader sequence C-e. Don’t overload it right away though! It includes some insert mode mappings, which can get real confusing if your preferred leader is a space.</description>
   <category>post</category> 
   <category>note</category> 
   <category>vim</category>  <category>rst</category>  <category>second-brain</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2021/cover-2021-10-23.png" alt="attachments/img/2021/cover-2021-10-23.png"/></figure>
Riv screenshot</p>
<p><a href="https://github.com/gu-fan/riv.vim">Riv</a> is a wiki, but feels like more of a notebook. Think <a href="https://jblevins.org/projects/deft/">Deft for Emacs</a> with journaling and HTML publishing. What makes Riv interesting — aside from the <a href="https://www.vim.org/">Vim</a> thing — is that it uses <a href="https://docutils.sourceforge.io/">reStructuredText</a> for its native format.</p>
<p>It works well enough, especially once you build up muscle memory for Riv&rsquo;s leader sequence <kbd>C-e</kbd>. Don&rsquo;t overload it right away though! It includes some insert mode mappings, which can get real confusing if your preferred leader is a space.</p>
<p>Meanwhile I got a lot of <a href="/card/neovim/">card/Neovim</a> ideas. Course, I need to get some more practice in with <a href="https://pynvim.readthedocs.io/en/latest/">pynvim</a> first. And I suppose some more practice with Riv.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Using markdown-it in Python</title>
  <link>https://randomgeekery.org/post/2021/10/using-markdown-it-in-python/</link>
  <pubDate>Sat, 16 Oct 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/10/using-markdown-it-in-python/</guid>
  <description>NOTE
I hope the information I share here is useful, but I’m just documenting what I needed to know after reading the markdown-it-py user guide for basic usage and principles.
What is it markdown-it-py is a Python markdown library based on markdown-it from the JavaScript world. markdown-it-py provides the core flexibility needed by MyST Markdown, a particularly capable Markdown flavor for the Executable Book Project.
markdown-it-py is configurable, extensible, and — most important for me today — not too hard to get started with.</description>
   <category>post</category> 
   <category>post</category> 
   <category>python</category>  <category>markdown</category> 
  <content:encoded><![CDATA[<h2>Figuring out just enough markdown-it-py to write this post</h2><blockquote>
<p><strong>NOTE</strong></p>
<p>I hope the information I share here is useful, but I&rsquo;m just documenting what I
needed to know <em>after</em> reading the markdown-it-py <a href="https://markdown-it-py.readthedocs.io/en/latest/using.html">user guide</a> for basic
usage and principles.</p>
</blockquote>
<h2 id="what-is-it">What is it</h2>
<p><a href="https://pypi.org/project/markdown-it-py/">markdown-it-py</a> is a Python markdown library based on <a href="https://github.com/markdown-it/markdown-it">markdown-it</a> from the JavaScript world. markdown-it-py provides the core flexibility needed by <a href="https://myst-nb.readthedocs.io/en/latest/use/markdown.html">MyST Markdown</a>, a particularly capable Markdown flavor for the <a href="https://executablebooks.org/en/latest/">Executable Book Project</a>.</p>
<p>markdown-it-py is configurable, extensible, and &mdash; most important for me today — not too hard to get started with.</p>
<h2 id="how-do-i-install-it">How do I install it</h2>
<p>markdown-it-py alone gets you &ldquo;enough&rdquo;. Everything you need for <a href="https://commonmark.org">CommonMark</a>, at least. But I want more than enough. I want all the features I can reasonably gather under one install.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> pip install markdown-it-py<span class="o">[</span>linkify,plugins<span class="o">]</span>
</span></span></code></pre>
</figure><p>What did that just install?</p>
<dl>
<dt><code>markdown-it-py</code></dt>
<dd>provides core markdown handling sufficient for common expected behavior</dd>
<dt><a href="https://pypi.org/project/linkify-it-py/"><code>linkify-it-py</code></a></dt>
<dd>enables recognition of URLs embedded in text strings; needs additional plugins to <em>do</em> anything with those URLs</dd>
<dt><a href="https://pypi.org/project/mdit-py-plugins/"><code>mdit-py-plugins</code></a></dt>
<dd>provides a collection of core plugins that make <code>markdown-it-py</code> useful to a feature-happy person such as myself</dd>
</dl>
<h2 id="how-do-i-use-it">How do I use it</h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">markdown_it</span> <span class="kn">import</span> <span class="n">MarkdownIt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">markdown</span> <span class="o">=</span> <span class="s2">&#34;Hello, **world**&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">md</span> <span class="o">=</span> <span class="n">MarkdownIt</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">))</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Hello, <span class="p">&lt;</span><span class="nt">strong</span><span class="p">&gt;</span>world<span class="p">&lt;/</span><span class="nt">strong</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>But I need to be just a <em>little</em> fancier than &ldquo;Hello World.&rdquo; Let&rsquo;s build a little <a href="https://typer.tiangolo.com">Typer</a> application that takes a markdown path and makes an HTML fragment. While I&rsquo;m at it, I can borrow from my <a href="/post/2021/08/trying-a-thing-with-neovim/">neovim rplugin</a> to fit everything into my Hugo site.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">typer</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">markdown_it</span> <span class="kn">import</span> <span class="n">MarkdownIt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return HTML string rendered from markdown source.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">md</span> <span class="o">=</span> <span class="n">MarkdownIt</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">source_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Transforms markdown into HTML with markdown-it-py.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">target_path</span> <span class="o">=</span> <span class="n">source_path</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;.md.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;.html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">source_path</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">markdown</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">html</span> <span class="o">=</span> <span class="n">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">target_path</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">typer</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">)</span></span></span></code></pre>
</figure><p>For the moment I&rsquo;ll rely on Python to let me know if I try rendering a Markdown file that doesn&rsquo;t exist.</p>
<p>This will turn a single <code>.md.txt</code> file - the extension I&rsquo;m using to slide past Hugo&rsquo;s default Markdown handling - into HTML. I even get a nice <code>--help</code> blurb.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> python rendermd.py --help
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Usage: rendermd.py [OPTIONS] SOURCE_PATH
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">  Transforms markdown into HTML with markdown-it-py.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Arguments:
</span></span></span><span class="line"><span class="cl"><span class="go">  SOURCE_PATH  [required]
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Options:
</span></span></span><span class="line"><span class="cl"><span class="go">  --install-completion [bash|zsh|fish|powershell|pwsh]
</span></span></span><span class="line"><span class="cl"><span class="go">                                  Install completion for the specified shell.
</span></span></span><span class="line"><span class="cl"><span class="go">  --show-completion [bash|zsh|fish|powershell|pwsh]
</span></span></span><span class="line"><span class="cl"><span class="go">                                  Show completion for the specified shell, to
</span></span></span><span class="line"><span class="cl"><span class="go">                                  copy it or customize the installation.
</span></span></span><span class="line"><span class="cl"><span class="go">  --help                          Show this message and exit.
</span></span></span></code></pre>
</figure><p>Now I start adding capabilities. If you see this post on the site, you&rsquo;ll know it worked.</p>
<h2 id="picking-a-preset-for-common-patterns">Picking a preset for common patterns</h2>
<p><code>markdown-it-py</code> provides predefined parser presets, allowing you to choose between common parsing patterns.</p>
<dl>
<dt><code>commonmark</code></dt>
<dd>the default; sticks with the core CommonMark specification; probably good enough for 80% of the Markdown that gets written</dd>
<dt><code>gfm-like</code></dt>
<dd>similar to Github-flavored Markdown; better if you need tables and URL transformation</dd>
<dt><code>js-default</code></dt>
<dd>similar to markdown-it base behavior; adds typographical replacements like &ldquo;smart quotes&rdquo; to the <code>gfm-like</code> set</dd>
<dt><code>zero</code></dt>
<dd>basically just breaks text into paragraphs; provides a bare minimum for you to build a highly custom Markdown parser</dd>
</dl>
<p>I went with <code>js_default</code> for my own baseline because it enables the most core features.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return HTML string rendered from markdown source.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">md</span> <span class="o">=</span> <span class="n">MarkdownIt</span><span class="p">(</span><span class="s2">&#34;js-default&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span></span></span></code></pre>
</figure><h2 id="using-options-to-tune-your-parser">Using options to tune your parser</h2>
<p>Even with presets available, there are common tweaks that some folks can&rsquo;t live with and others can&rsquo;t live without. <code>markdown-it-py</code> wraps those up in a single dictionary of options.</p>
<dl>
<dt><code>maxNesting</code></dt>
<dd>recursion protection; think of it as a number for &ldquo;how fancy can I get with my Markdown?&rdquo;</dd>
<dt><code>html</code></dt>
<dd>allow raw HTML through</dd>
<dt><code>linkify</code></dt>
<dd>transform URLs into links</dd>
<dt><code>typographer</code></dt>
<dd>processes assorted <a href="https://markdown-it-py.readthedocs.io/en/latest/using.html#typographic-components">typographic conventions</a> including proper quote marks</dd>
<dt><code>quotes</code></dt>
<dd>what double and single quotes look like if you enable <code>typographer</code></dd>
<dt><code>xhtmlOut</code></dt>
<dd>ensure output is valid in the ancient XHTML dialect</dd>
<dt><code>breaks</code></dt>
<dd>treat line breaks in source as <code>&lt;br&gt;</code> elements</dd>
<dt><code>langPrefix</code></dt>
<dd>CSS class prefix for code blocks; <code>language-python</code>, <code>language-console</code> etc</dd>
<dt><code>highlight</code></dt>
<dd>a function to provide syntax highlighting for code blocks</dd>
</dl>
<p>Presets have default values for each of these options.</p>
<table>
<thead>
<tr>
<th>Option</th>
<th><code>commonmark</code></th>
<th><code>gfm_like</code></th>
<th><code>js_default</code></th>
<th><code>zero</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>maxNesting</code></td>
<td><code>20</code></td>
<td><code>20</code></td>
<td><code>100</code></td>
<td><code>20</code></td>
</tr>
<tr>
<td><code>html</code></td>
<td>enabled</td>
<td>enabled</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td><code>linkify</code></td>
<td>—</td>
<td>enabled</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td><code>typographer</code></td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td><code>quotes</code></td>
<td><code>“”‘’</code></td>
<td><code>“”‘’</code></td>
<td><code>“”‘’</code></td>
<td><code>“”‘’</code></td>
</tr>
<tr>
<td><code>xhtmlOut</code></td>
<td>enabled</td>
<td>enabled</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td><code>breaks</code></td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td><code>langPrefix</code></td>
<td><code>language-</code></td>
<td><code>language-</code></td>
<td><code>language-</code></td>
<td><code>language-</code></td>
</tr>
<tr>
<td><code>highlight</code></td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
</tbody>
</table>
<p>I like fancy quotes. I expect URLs to display as links. I occasionally need to fall back to raw <abbr title="HyperText Markup Language">HTML</abbr>.But most importantly on this here blog: I insist on syntax highlighting.</p>
<h3 id="adding-a-highlight-function">Adding a highlight function</h3>
<p>Rather than decide for themselves how syntax highlighting is done, the markdown-it-py folks added a single option for us to hook in a function using <em>our</em> preferred approach.</p>
<p>The highlight function should take three arguments:</p>
<ul>
<li>the string of code to highlight</li>
<li>the lexer name</li>
<li>a dictionary of any additional attributes</li>
</ul>
<p>You could use whatever highlighting code you want. You could even have your function call out to an external program. I use <a href="https://pygments.org">Pygments</a> because it&rsquo;s familiar.</p>
<p>Also, I&rsquo;m going to ignore <code>attrs</code> for now. I rarely add special options to my code samples, so it&rsquo;s kind of wasted on me. So far.</p>
<p>Better make a note or something in case I forget that I&rsquo;m ignoring it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">highlight_code</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">attrs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Highlight a block of code&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">attrs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Ignoring </span><span class="si">{</span><span class="n">attrs</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">lexer</span> <span class="o">=</span> <span class="n">get_lexer_by_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">formatter</span> <span class="o">=</span> <span class="n">HtmlFormatter</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">highlight</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">lexer</span><span class="p">,</span> <span class="n">formatter</span><span class="p">)</span></span></span></code></pre>
</figure><p>Okay, what&rsquo;s <code>make_html</code> look like now, with options set and highlighting function defined?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return HTML string rendered from markdown source.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">md</span> <span class="o">=</span> <span class="n">MarkdownIt</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;js-default&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;linkify&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;html&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;typographer&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;highlight&#34;</span><span class="p">:</span> <span class="n">highlight_code</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span></span></span></code></pre>
</figure><p>Still a few pieces missing from <em>my</em> minimal toolkit. I need to dig a little deeper than I planned for a &ldquo;hey friends, markdown-it-py looks like fun&rdquo; post. But I at least want to render the kind of posts I would write.</p>
<p>For that I need to use some plugins. Good thing I installed <code>mdit-py-plugins</code>.</p>
<h2 id="adding-parser-functionality-with-plugins">Adding parser functionality with plugins</h2>
<p>mdit-py-plugins bundles many plugins into a single library. Today I need no plugins beyond what that library provides.</p>
<h3 id="definition-lists">definition lists</h3>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl">Description lists</a> have been core to my HTML authoring flow since forever. I&rsquo;ll write the HTML myself if I have to. Fortunately, I don&rsquo;t have to, thanks to the <a href="https://mdit-py-plugins.readthedocs.io/en/latest/#definition-lists">deflist</a> plugin.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mdit_py_plugins</span> <span class="kn">import</span> <span class="n">deflist</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">md</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="n">deflist</span><span class="o">.</span><span class="n">deflist_plugin</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span></span></span></code></pre>
</figure><p>Now I can write a definition list:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">[`markdown-it-py`][markdown-it-py]
</span></span><span class="line"><span class="cl">: provides core markdown handling sufficient for common expected behavior
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[`linkify-it-py`][linkify-it-py]
</span></span><span class="line"><span class="cl">: enables recognition of URLs embedded in text strings; needs additional plugins
</span></span><span class="line"><span class="cl">  to <span class="ge">*do*</span> anything with those URLs
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[`mdit-py-plugins`][mdit-py-plugins]
</span></span><span class="line"><span class="cl">: provides a collection of core plugins that make <span class="sb">`markdown-it-py`</span> useful to a 
</span></span><span class="line"><span class="cl">  feature-happy person such as myself</span></span></code></pre>
</figure><p>And markdown-it-py produces a proper description list:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">dl</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dt</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://pypi.org/project/markdown-it-py/&#34;</span><span class="p">&gt;&lt;</span><span class="nt">code</span><span class="p">&gt;</span>markdown-it-py<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">dt</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dd</span><span class="p">&gt;</span>provides core markdown handling sufficient for common expected behavior<span class="p">&lt;/</span><span class="nt">dd</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dt</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://pypi.org/project/linkify-it-py/&#34;</span><span class="p">&gt;&lt;</span><span class="nt">code</span><span class="p">&gt;</span>linkify-it-py<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">dt</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dd</span><span class="p">&gt;</span>Enables recognition of URLs embedded in text strings; needs additional plugins
</span></span><span class="line"><span class="cl">    to <span class="p">&lt;</span><span class="nt">em</span><span class="p">&gt;</span>do<span class="p">&lt;/</span><span class="nt">em</span><span class="p">&gt;</span> anything with those URLs<span class="p">&lt;/</span><span class="nt">dd</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dt</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://pypi.org/project/mdit-py-plugins/&#34;</span><span class="p">&gt;&lt;</span><span class="nt">code</span><span class="p">&gt;</span>mdit-py-plugins<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">dt</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dd</span><span class="p">&gt;</span>Provides a collection of core plugins that make <span class="p">&lt;</span><span class="nt">code</span><span class="p">&gt;</span>markdown-it-py<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;</span> useful to a
</span></span><span class="line"><span class="cl">    feature-happy person such as myself<span class="p">&lt;/</span><span class="nt">dd</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">dl</span><span class="p">&gt;</span></span></span></code></pre>
</figure><h3 id="admonition-blocks">admonition blocks</h3>
<p>So about a week ago, I was writing the first version of this post. I was nearly done. Then I got a little too tired and deleted the wrong file — without adding it to the repo first!</p>
<p>Oops.</p>
<p>Anyways, this redraft is less of a tutorial and more of a notes dump. I want to warn folks about that with a little blurb at the top. I can use the <a href="https://mdit-py-plugins.readthedocs.io/en/latest/#containers">containers</a> plugin for that. The plugin provides slots for validation and deeper processing. All I want today is a <code>&lt;div&gt;</code> with custom class. I can use CSS for the rest.</p>
<p>Using the container plugin with a <code>name</code> option provides that much.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mdit_py_plugins</span> <span class="kn">import</span> <span class="n">container</span><span class="p">,</span> <span class="n">deflist</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">md</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="n">container</span><span class="o">.</span><span class="n">container_plugin</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">&#34;note&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span></span></span></code></pre>
</figure><p>A <code>note</code> container looks like this in the markdown:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >::: note
This is my *note*.
:::</code></pre>
</figure><p>Without any additional configuration, it produces this HTML:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;note&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>This is my <span class="p">&lt;</span><span class="nt">em</span><span class="p">&gt;</span>note<span class="p">&lt;/</span><span class="nt">em</span><span class="p">&gt;</span>.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span></span></span></code></pre>
</figure><h2 id="good-enough">Good enough!</h2>
<p>Stopping here because it&rsquo;s good enough for what I wrote so far today. But there is plenty more to explore. markdown-it-py allows reviewing and manipulating parsed <a href="https://markdown-it-py.readthedocs.io/en/latest/using.html#the-token-stream">tokens</a> directly. Plus there&rsquo;s the whole MyST Markdown thing to explore.</p>
<p>But for now we&rsquo;re good. Let me drop in the Python code that transformed this post in the context of my Hugo site, then go convert the Typer logic to <a href="https://pyinvoke.org">Invoke</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/python</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">frontmatter</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">rich</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">typer</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">markdown_it</span> <span class="kn">import</span> <span class="n">MarkdownIt</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mdit_py_plugins</span> <span class="kn">import</span> <span class="n">container</span><span class="p">,</span> <span class="n">deflist</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pygments</span> <span class="kn">import</span> <span class="n">highlight</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pygments.formatters</span> <span class="kn">import</span> <span class="n">HtmlFormatter</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pygments.lexers</span> <span class="kn">import</span> <span class="n">get_lexer_by_name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">highlight_code</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">attrs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Highlight a block of code&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">attrs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Ignoring </span><span class="si">{</span><span class="n">attrs</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">lexer</span> <span class="o">=</span> <span class="n">get_lexer_by_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">formatter</span> <span class="o">=</span> <span class="n">HtmlFormatter</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">highlight</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">lexer</span><span class="p">,</span> <span class="n">formatter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return HTML string rendered from markdown source.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">md</span> <span class="o">=</span> <span class="n">MarkdownIt</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;js-default&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;linkify&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;html&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;typographer&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;highlight&#34;</span><span class="p">:</span> <span class="n">highlight_code</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">md</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="n">deflist</span><span class="o">.</span><span class="n">deflist_plugin</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">md</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="n">container</span><span class="o">.</span><span class="n">container_plugin</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">&#34;note&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">source_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Transforms markdown into HTML with markdown-it-py.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">target_path</span> <span class="o">=</span> <span class="n">source_path</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;.md.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;.html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span> <span class="o">=</span> <span class="n">frontmatter</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">source_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">make_html</span><span class="p">(</span><span class="n">post</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span><span class="o">.</span><span class="n">metadata</span><span class="p">[</span><span class="s2">&#34;format&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;md&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">target_path</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">frontmatter</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">post</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">typer</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">)</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Post: winget is pretty slick now</title>
  <link>https://randomgeekery.org/post/2021/10/winget-is-pretty-slick-now/</link>
  <pubDate>Sat, 16 Oct 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/10/winget-is-pretty-slick-now/</guid>
  <description>Just updated PowerShell via winget, Microsoft’s command line package manager. And Firefox. And Volta. And HeidiSQL. And Alacritty. And Go. And some other stuff.
Trying to recover a post about markdown-it-py that I accidentally deleted, so I won’t sidetrack myself with a detailed follow-up on the last time I really looked at winget.
Instead, here’s the card/TIL:
winget upgrade shows what’s out of date winget upgrade --id=&lt;package.id&gt; upgrades a package winget upgrade --all upgrades everything.</description>
   <category>post</category> 
   <category>note</category> 
   <category>windows</category>  <category>package-manager</category>  <category>respect-the-command-line</category> 
  <content:encoded><![CDATA[<p>Just updated PowerShell via <a href="https://docs.microsoft.com/en-us/windows/package-manager/winget/">winget</a>, Microsoft&rsquo;s command line package manager. And Firefox. And Volta. And HeidiSQL. And Alacritty. And Go. And some other stuff.</p>
<p>Trying to recover a post about <a href="https://markdown-it-py.readthedocs.io/en/latest/index.html">markdown-it-py</a> that I accidentally deleted, so I won&rsquo;t sidetrack myself with a detailed follow-up on the last time I really <a href="/post/2020/06/winget/">looked at winget</a>.</p>
<p>Instead, here&rsquo;s the <a href="/card/til/">card/TIL</a>:</p>
<dl>
<dt><code>winget upgrade</code></dt>
<dd>shows what&rsquo;s out of date</dd>
<dt><code>winget upgrade --id=&lt;package.id&gt;</code></dt>
<dd>upgrades a package</dd>
<dt><code>winget upgrade --all</code></dt>
<dd>upgrades everything.</dd>
</dl>
<p>No &ldquo;Run As Administrator&rdquo; needed, though you need to click the <abbr title="User Access Control">UAC</abbr> dialog. Another caveat: it&rsquo;s coming from the application&rsquo;s own download servers, not some Azure-backed central repository. Sometimes the fetching may take a minute.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: I wrote this note in Hugo with markdown-it-py</title>
  <link>https://randomgeekery.org/post/2021/10/i-wrote-this-note-in-hugo-with-markdown-it-py/</link>
  <pubDate>Sat, 09 Oct 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/10/i-wrote-this-note-in-hugo-with-markdown-it-py/</guid>
  <description>Blog post pending. But yeah. markdown-it-py preprocessing Markdown content for my card/Hugo site.
Why?
I don’t understand the question. To find out if I can, I guess?
Working well enough that I added another Neovim remote plugin to handle the task.</description>
   <category>post</category> 
   <category>note</category> 
   <category>python</category>  <category>markdown</category>  <category>puttering</category>  <category>wild-weekend</category> 
  <content:encoded><![CDATA[<p>Blog post pending. But yeah. <a href="https://markdown-it-py.readthedocs.io/en/latest/index.html"><code>markdown-it-py</code></a> preprocessing Markdown content for my <a href="/card/hugo/">card/Hugo</a> site.</p>
<p>Why?</p>
<p>I don&rsquo;t understand the question. To find out if I can, I guess?</p>
<p>Working well enough that I added <a href="/post/2021/08/trying-a-thing-with-neovim/">another</a> Neovim remote plugin to handle the task.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Creating a reStructuredText kbd Role</title>
  <link>https://randomgeekery.org/post/2021/09/creating-a-restructuredtext-kbd-role/</link>
  <pubDate>Thu, 23 Sep 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/09/creating-a-restructuredtext-kbd-role/</guid>
  <description>Today’s the day I learn how to create custom roles in card/reStructuredText. There’s already documentation on how to do this. I’m just applying it for my specific case.
Prologue: Setup Install some stuff if you want to play along.
pip install -U docutils invoke Some of the requirements are specific to my writing flow.
pip install python-frontmatter For experimentation, I copied the build code from my Neovim rst plugin into the site’s Invoke task file.</description>
   <category>post</category> 
   <category>post</category> 
   <category>rst</category>  <category>python</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>But first a couple others as I figure this out</h2><p>Today&rsquo;s the day I learn how to create custom roles in <a href="/card/restructuredtext/">card/reStructuredText</a>. There&rsquo;s already <a href="https://docutils.sourceforge.io/docs/howto/rst-roles.html">documentation</a> on how to do this. I&rsquo;m just applying it for my specific case.</p>
<h2 id="prologue-setup">Prologue: Setup</h2>
<p>Install some stuff if you want to play along.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install -U docutils invoke</span></span></code></pre>
</figure><p>Some of the requirements are specific to my writing flow.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install python-frontmatter</span></span></code></pre>
</figure><p>For experimentation, I copied the build code from my <a href="/post/2021/08/trying-a-thing-with-neovim/">Neovim rst plugin</a> into the site&rsquo;s <a href="https://www.pyinvoke.org">Invoke</a> task file. Easier than updating remote plugins and restarting the editor with every change.</p>
<figure class="highlight">
  <figcaption><tt>tasks.py</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;Site generation tasks for randomgeekery.org&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">locale</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">frontmatter</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">rich</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">docutils.core</span> <span class="kn">import</span> <span class="n">publish_parts</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">invoke</span> <span class="kn">import</span> <span class="n">task</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">locale</span><span class="o">.</span><span class="n">setlocale</span><span class="p">(</span><span class="n">locale</span><span class="o">.</span><span class="n">LC_ALL</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">convert_rst_file_for_hugo</span><span class="p">(</span><span class="n">source_filename</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Transform a single reStructuredText file so Hugo can handle it.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">target_filename</span> <span class="o">=</span> <span class="n">determine_target</span><span class="p">(</span><span class="n">source_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span> <span class="o">=</span> <span class="n">frontmatter</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">source_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parts</span> <span class="o">=</span> <span class="n">publish_parts</span><span class="p">(</span><span class="n">source</span><span class="o">=</span><span class="n">post</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="n">writer_name</span><span class="o">=</span><span class="s2">&#34;html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="s2">&#34;body&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span><span class="o">.</span><span class="n">metadata</span><span class="p">[</span><span class="s2">&#34;format&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;rst&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">target_filename</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">out</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">out</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">frontmatter</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">post</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;:crayon: </span><span class="si">{</span><span class="n">target_filename</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">determine_target</span><span class="p">(</span><span class="n">source</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return the filename that rst transformations should write to.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Using an odd suffix so Hugo doesn&#39;t try to build the rst itself</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">source</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s2">&#34;.rst.txt&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Look at </span><span class="si">{</span><span class="n">source</span><span class="si">}</span><span class="s2"> more closely before transforming it.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">source</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;.rst.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;.html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@task</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">rst</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Transform a single reStructuredText file.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">convert_rst_file_for_hugo</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span></span></span></code></pre>
</figure><p>Then I use Invoke to do the transform:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> inv content/draft/creating-a-restructuredtext-kbd-role/index.rst.txt
</span></span><span class="line"><span class="cl"><span class="go">🖍 content/draft/creating-a-restructuredtext-kbd-role/index.html
</span></span></span></code></pre>
</figure><p>Some variation of this is bound to work for you.</p>
<p>Let&rsquo;s get started!</p>
<h2 id="what-even-is-a-role">What even is a role?</h2>
<p>First, we need the background. There&rsquo;s this thing called <em>interpreted text</em>. It&rsquo;s a reserved bit of functionality for specially marked text. Folks coming to reStructuredText from Markdown mostly know it as the weird reason they have to use double backticks for <code>code</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="nv">`interpreted text`</span></span></span></code></pre>
</figure><p>Interpreted text has all sorts of fancy potential. I mainly know it for the fact that rst links use it. Unless told otherwise, <a href="https://docutils.sourceforge.io/">Docutils</a> treats interpreted text as a citation.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">cite</span><span class="p">&gt;</span>interpreted text<span class="p">&lt;/</span><span class="nt">cite</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>It assumes any interpreted text is <code>:title-reference:</code> — that is, it references the title of a book, movie, song, or other publication.  The <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite"><code>cite</code></a> element is a perfectly reasonable choice for that.</p>
<p>But what if you aren&rsquo;t specifically talking about a title? <em>Roles</em> provide an explicit label for your interpreted text.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="na">:term:</span><span class="nv">`Roles`</span></span></span></code></pre>
</figure><p>What&rsquo;s a <code>:term:</code> in rst? Nothing. I made it up. Seems like a good role for when I introduce a new name and I want it to stand out.</p>
<p>I need to define the role to use it. Otherwise?</p>
<p><figure>
    <img src="/../../../attachments/img/2021/docutils-unknown-role.png" alt="attachments/img/2021/docutils-unknown-role.png"/></figure>
Docutils embeds an error message below the offending block</p>
<p>So up at the top of my document use the <a href="https://docutils.sourceforge.io/docs/ref/rst/directives.html#custom-interpreted-text-roles">role directive</a> to create <code>:term:</code> and register it with the parser.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="p">..</span> <span class="ow">role</span><span class="p">::</span> term</span></span></code></pre>
</figure><p>Now that Docutils knows about the role, it can turn it into HTML.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;term&#34;</span><span class="p">&gt;</span>Roles<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>It still doesn&rsquo;t have any inherent <em>meaning</em>, but I can put some style rules on it so that anything I label with the <code>:term:</code> role shows up a little differently.</p>
<h2 id="inline-roles-in-your-document">Inline roles in your document</h2>
<p>If I want the term to stand out a little more, I can adjust my role definition.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="p">..</span> <span class="ow">role</span><span class="p">::</span> term(strong)</span></span></code></pre>
</figure><p>Now it inherits from the <code>:strong:</code> role, keeping the <code>&quot;term&quot;</code> CSS class.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">strong</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;term&#34;</span><span class="p">&gt;</span>Roles<span class="p">&lt;/</span><span class="nt">strong</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>You can inherit from any role. That makes it a nice way to create aliases or slight variations to existing roles.</p>
<p>But I want to get fancy. Let&rsquo;s look at defining reStructuredText roles in Python.</p>
<h2 id="defining-roles-in-your-code">Defining roles in your code</h2>
<p>Defining a role has two main steps. Okay, three. Because first we need to import some libraries.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">docutils</span> <span class="kn">import</span> <span class="n">nodes</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">docutils.parsers.rst</span> <span class="kn">import</span> <span class="n">roles</span></span></span></code></pre>
</figure><p><em>Now</em> we create a function that knows what to do when given a role and some preprocessed parameters.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">role_term</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">lineno</span><span class="p">,</span> <span class="n">inliner</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{},</span> <span class="n">content</span><span class="o">=</span><span class="p">[]):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return text marked as domain terminology.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span></span></span></code></pre>
</figure><p>That&rsquo;s quite a function signature to take in without context, so here&rsquo;s a breakdown of what got sent when Docutils saw my first <code>:term:`Roles</code>:</p>
<table>
<thead>
<tr>
<th>parameter</th>
<th>value</th>
<th>explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>name</code></td>
<td><code>term</code></td>
<td>the role name</td>
</tr>
<tr>
<td><code>rawtext</code></td>
<td><code>:term:`Roles</code></td>
<td>all text input including role and markup</td>
</tr>
<tr>
<td><code>text</code></td>
<td><code>Roles</code></td>
<td>the interpreted text content</td>
</tr>
<tr>
<td><code>lineno</code></td>
<td><code>103</code></td>
<td>the interpreted text starts on this line</td>
</tr>
<tr>
<td><code>inliner</code></td>
<td><code>&lt;docutils…Inliner object at …&gt;</code></td>
<td>the object that called this function</td>
</tr>
<tr>
<td><code>options</code></td>
<td><code>{}</code></td>
<td>a dictionary of customization options</td>
</tr>
<tr>
<td><code>content</code></td>
<td><code>[]</code></td>
<td>a list of strings containing text content</td>
</tr>
</tbody>
</table>
<p>I won&rsquo;t pretend I know how to use all these yet. That&rsquo;s okay. <code>role_term</code> only cares about three:</p>
<ul>
<li><code>rawtext</code></li>
<li><code>text</code></li>
<li><code>options</code> — just in case</li>
</ul>
<p>I chose to mirror the inline directive I made earlier, creating a <code>strong</code> node with a class of <code>&quot;term&quot;</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">term_node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">strong</span><span class="p">(</span><span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">term_node</span><span class="o">.</span><span class="n">set_class</span><span class="p">(</span><span class="s2">&#34;term&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><p>Anyone calling <code>role_term</code> expects a tuple with two node lists: one for content, and another holding any error nodes I may need to create. In this case the content list has my term node and the error list is empty.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">return</span> <span class="p">[</span><span class="n">term_node</span><span class="p">],</span> <span class="p">[]</span></span></span></code></pre>
</figure><p>With our role implementation defined, we register it and the name associated with it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">role_term</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">lineno</span><span class="p">,</span> <span class="n">inliner</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{},</span> <span class="n">content</span><span class="o">=</span><span class="p">[]):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return text marked as domain terminology.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">term_node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">strong</span><span class="p">(</span><span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">term_node</span><span class="o">.</span><span class="n">set_class</span><span class="p">(</span><span class="s2">&#34;term&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">term_node</span><span class="p">],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">roles</span><span class="o">.</span><span class="n">register_canonical_role</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">,</span> <span class="n">role_term</span><span class="p">)</span></span></span></code></pre>
</figure><p>I don&rsquo;t need my inline <code>role</code> directive anymore, so I remove it. Registering <code>role_term</code> makes it available to every document processed by this particular Python script.</p>
<p>Okay, now I basically know how to implement a reStructuredText role. Let&rsquo;s keep going.</p>
<h3 id="tag-references"><code>:tag:</code> references</h3>
<p>I link to tags on this site frequently. Since I&rsquo;m the main audience for this site, it&rsquo;s mostly to give me a shortcut to related content. But hey it may help <em>you</em> find related content to if you happen to click through.</p>
<p>Couple of problems with those tag links, though. First off, they look exactly like every other link in my published HTML. It would be nice for them to stand out a bit when I&rsquo;m reading. Second, they look like every other link in my post source. It would be nice for them to stand out a bit when I&rsquo;m <em>writing</em>.</p>
<p>So let&rsquo;s make a <code>:tag:</code> reference role.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">role_reference_tag</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span><span class="p">,</span> <span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">lineno</span><span class="p">,</span> <span class="n">inliner</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{},</span> <span class="n">content</span><span class="o">=</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return a reference to a site tag.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">tag_ref</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;/tags/</span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag_node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">reference</span><span class="p">(</span><span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">refuri</span><span class="o">=</span><span class="n">tag_ref</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag_node</span><span class="o">.</span><span class="n">set_class</span><span class="p">(</span><span class="s2">&#34;p-category&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">tag_node</span><span class="p">],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">roles</span><span class="o">.</span><span class="n">register_canonical_role</span><span class="p">(</span><span class="s1">&#39;tag&#39;</span><span class="p">,</span> <span class="n">role_reference_tag</span><span class="p">)</span></span></span></code></pre>
</figure><p>I thought about putting the <code>#</code> in CSS, but not every <code>p-category</code> is a tag. I can always change my mind later, maybe make a distinct <code>tag</code> CSS class.</p>
<p>It looks similar to <code>:term:</code>, except because I&rsquo;m referencing something I use a <code>reference</code> node and give it a link to that tag&rsquo;s page as <code>refuri</code>.  The <code>p-category</code> class is a <a href="/card/microformats/">card/microformats</a> thing for <a href="/card/indieweb/">card/IndieWeb</a>. I also decided to prefix my tag text with the traditional octothorpe used to mark tags out in the wild.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="na">:tag:</span><span class="nv">`microformats`</span></span></span></code></pre>
</figure><p>Oh yes that is <em>much</em> nicer to read than a standard reStructuredText link.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;p-category reference external&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/tags/microformats&#34;</span><span class="p">&gt;</span>#microformats<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>There&rsquo;s my <code>p-category</code> class, along with an unsurprising <code>reference</code> — since it&rsquo;s a clear way to indicate the reference node I used — and a slightly confusing <code>external</code> class. Pretty sure that means &ldquo;external to the document.&rdquo;</p>
<h3 id="a-kbd-role">A <code>:kbd:</code> role</h3>
<p>Something I need rather often is a way to indicate keyboard input. <kbd>Control</kbd> <kbd>c</kbd>, stuff like that.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">role_kbd</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">lineno</span><span class="p">,</span> <span class="n">inliner</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{},</span> <span class="n">content</span><span class="o">=</span><span class="p">[]):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return literal text marked as keyboard input.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">kbd_node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">literal</span><span class="p">(</span><span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">kbd_node</span><span class="o">.</span><span class="n">set_class</span><span class="p">(</span><span class="s2">&#34;keyboard&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">kbd_node</span><span class="p">],</span> <span class="p">[]</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="na">:kbd:</span><span class="nv">`Control c`</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">tt</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;keyboard docutils literal&#34;</span><span class="p">&gt;</span>Control c<span class="p">&lt;/</span><span class="nt">tt</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>Well that was easy. A bit verbose, but okay. That&rsquo;s not the real problem though.</p>
<h3 id="theres-a-perfectly-good-kbd-element">There&rsquo;s a perfectly good <code>&lt;kbd&gt;</code> element</h3>
<p>This blog is HTML, right? Can&rsquo;t I just use the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd"><code>kbd</code></a> element in my role?</p>
<p>Yes, but kind of no. It&rsquo;s considered poor form to put raw HTML in your output nodes. Docutils writes all sorts of content, and a <code>&lt;kbd&gt;</code> would be pretty ungainly sitting in a PDF. Ideally you&rsquo;d take care of writing HTML in an HTML Writer. Unfortunately, I have no idea how to work an HTML Writer yet.</p>
<p>But we <em>can</em> output raw HTML in a role implementation. It would be frowned on slightly less if we flagged it as a raw role.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">html</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">role_raw_kbd</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">lineno</span><span class="p">,</span> <span class="n">inliner</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{},</span> <span class="n">content</span><span class="o">=</span><span class="p">[]):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return literal text marked as keyboard input.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">escaped_text</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">kbd_html</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;&lt;kbd&gt;</span><span class="si">{</span><span class="n">escaped_text</span><span class="si">}</span><span class="s2">&lt;/kbd&gt;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">options</span><span class="p">[</span><span class="s2">&#34;format&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;html&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">kbd_node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">raw</span><span class="p">(</span><span class="n">rawtext</span><span class="p">,</span> <span class="n">kbd_html</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">kbd_node</span><span class="p">],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">roles</span><span class="o">.</span><span class="n">register_canonical_role</span><span class="p">(</span><span class="s1">&#39;raw-kbd&#39;</span><span class="p">,</span> <span class="n">role_raw_kbd</span><span class="p">)</span></span></span></code></pre>
</figure><p>Better pull in the <a href="https://docs.python.org/3/library/html.html">html</a> standard library and escape that text. Otherwise I&rsquo;d feel awful silly when talking about indenting with <code>&gt;&gt;</code> in <a href="/card/vim/">card/Vim</a> or something and it breaks the whole page.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="na">:raw-kbd:</span><span class="nv">`&gt;&gt;`</span></span></span></code></pre>
</figure><p>Yeah, that works. It&rsquo;s not too bad to look at while writing.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">kbd</span><span class="p">&gt;</span><span class="ni">&amp;lt;&amp;lt;</span><span class="p">&lt;/</span><span class="nt">kbd</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>And there we go. An honest to goodness <code>&lt;kbd&gt;</code> element. And <code>:raw-kbd:</code> will be easier to search for if and when I get around to custom HTML Writers.</p>
<p>Figuring out a role for keyboard input was the reason I started writing this post — though my favorite new role is <code>:tag:</code>. Anyways, I think this is a good spot to stop writing and start editing.</p>
<h2 id="wrap-it-up">Wrap it up</h2>
<p>…pardon me while I copy those role functions back into my Neovim plugin…</p>
<p>Well that was fun. I wanted a role for keyboard input, and I got it. Plus, my tags are a little easier to find in the page. <em>And</em> I have a <code>:term:</code> role for when I&rsquo;m feeling pedagogical.</p>
<p>Cool.</p>
<p>Roles are just a first step in customizing Docutils output. No idea when I&rsquo;ll get to the rest. You can learn more for yourself with Docutils and heavily customized publishing environments like <a href="https://www.sphinx-doc.org/en/master/">Sphinx</a>.</p>
<p>Me, I&rsquo;m just having a grand time embedding this whole authoring flow in the middle of my <a href="/card/hugo/">card/Hugo</a> site. May want to think about a new theme though if I&rsquo;m going to continue with Hugo. Perhaps borrow from Alexander Carlton&rsquo;s <a href="https://www.fisodd.com/code/b-side/">Hugo B-side</a>.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Today is September 21st — you know the rules</title>
  <link>https://randomgeekery.org/post/2021/09/today-is-september-21st-you-know-the-rules/</link>
  <pubDate>Tue, 21 Sep 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/09/today-is-september-21st-you-know-the-rules/</guid>
  <description>🎶 never was a cloudy day
Whoa thanks KEXP for the reminder that it’s September 21st!
Let’s listen to that again. Haven’t found a 10 hour loop, so this’ll have to do instead.
Was just going to tweet this but I know it’ll do me good to find at random site-tidying moments.</description>
   <category>post</category> 
   <category>note</category> 
   <category>listen</category>  <category>music</category>  <category>kexp</category>  <category>celebrate-the-holidays</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/attachments/img/2021/cover-2021-09-21.jpg" title="🎶 never was a cloudy day" alt="trees against a blue sky"/><figcaption>🎶 never was a cloudy day</figcaption></figure></p>
<p>Whoa thanks <a href="/card/kexp/">KEXP</a> for the reminder that it&rsquo;s September 21st!</p>
<p>Let&rsquo;s listen to that again. Haven&rsquo;t found a 10 hour loop, so this&rsquo;ll have to do instead.</p>
<p><div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe src="https://www.youtube.com/embed/mp6gaes9TL8"
              style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;"
              allowfullscreen title="YouTube Video"></iframe>
    </div>
  </p>
<p>Was just going to tweet this but I know it&rsquo;ll do me good to find at random site-tidying moments.</p>
]]></content:encoded>
</item>
</channel>
</rss>
