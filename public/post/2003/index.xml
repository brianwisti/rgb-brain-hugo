<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2003onRandom Geekery</title>
    <link>https://randomgeekery.org/post/2003/</link>
    <description>
      Recent contentin2003 on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sat, 20 Jan 2024 22:42:32 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/post/2003/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Living in Seattle</title>
  <link>https://randomgeekery.org/post/2003/07/living-in-seattle/</link>
  <pubDate>Fri, 11 Jul 2003 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2003/07/living-in-seattle/</guid>
  <description>Seattle is a city. It may not be as big as Los Angeles or New York, but it is still a city. You do not have an excuse to be bored, even if you are flat broke. My wife and I have lived in Seattle since 1999, and it still feels like we are scraping the surface of what this area has to offer after ten years.
This page exists to guide folks around Seattle, with pointers to some trivia and favorite locations in town.</description>
   <category>post</category> 
   <category>post</category> 
   <category>babblings</category>  <category>seattle</category>  <category>exploring</category>  <category>coolnamehere</category> 
  <content:encoded><![CDATA[<h2>circa 2003, at least.</h2><p>Seattle is a city. It may not be as big as Los Angeles or New York, but it is still a city. You do not have an excuse to be bored, even if you are flat broke. My wife and I have lived in Seattle since 1999, and it still feels like we are scraping the surface of what this area has to
offer after ten years.</p>
<p>This page exists to guide folks around Seattle, with pointers to some trivia and favorite locations in town. You may find something new or forgotten in these pages. You might not agree with my opinions. That is okay. Go ahead and tell me all about it. Many ways to contact me are on the top of this page.</p>
<h2 id="seattle-neighborhoods">Seattle Neighborhoods</h2>
<p>Not all of them, obviously. Just a few that I’m more familiar with.</p>
<h3 id="skid-row">Skid Row</h3>
<p>You ever hear the term &ldquo;Skid Row&rdquo;? I’m told that phrase came from Seattle. Loggers used to skid logs down Yesler Way into the sawmill down near the waterfront. The street became sort of infamous for being where the worst of the city lived. 3rd and Yesler is still sort of the hairy armpit of the city, but there has been a lot of work to polish the street up. <a href="http://www.pioneersquare.org">Pioneer Square</a> is at the downtown end of Yesler. You won’t believe the amount of great food and music you can find around here. I’m trying to lose weight, so I avoid this neighborhood like the plague these days.</p>
<h3 id="fremont">Fremont</h3>
<p>Here’s a bit of trivia that will resolve a point of confusion for my dad when talking about Fremont. The neighborhood was named by its founders after the Nebraska town that they came from. These days, it’s a rapidly gentrifying — but still very active and artistic — spot in the northern part of Seattle. The people are nice, but maybe a little full of themselves sometimes. The shops are bright and fun to wander in. There’s no pressure to buy anything, but you’ll find good prices if you do feel like spending. Be smart about crossing the street, though. There have been more than a few accidents as people try to rush across against the crosswalk lights while some car is trying to rush through the yellow light. Don’t be paranoid, just be smart. That’s all I’m saying. And pay your respects to Lenin’s statue while you are in the neighborhood.</p>
<h3 id="phinney-ridge">Phinney Ridge</h3>
<p>Let me be honest. The only reason I know <em>anything</em> about Phinney Ridge is because we lived there for nearly four years. It is a gorgeous neighborhood at the very top of one of Seattle’s many hills. There are many expensive condos and older houses being remodeled by ambitious young families, but not much else.</p>
<p>Ha! Did you actually believe that? There’s not many shops here, but there’s still the <a href="http://www.zoo.org/">Woodland Park Zoo</a>! The sound of monkey loving late at night makes Phinney one of the most unusual city spots to live in. If you live in Seattle, you would be a fool not to get a membership to the zoo. It’s big. It’s beautiful. Membership is dirt cheap. You don’t even have to be big on animals. It’s nice to just come in and kick back for a relaxing bit of time on the grass.</p>
<p>As long as you’re in the neighborhood, you might as well walk up to Sully’s Snow Goose Tavern for a good pint of beer and a tasty veggie hot dog. I recommend their veggie dogs even if that is not normally your thing. They do have &ldquo;real&rdquo; hot dogs if you absolutely must have meat, but try the veggie version sometime. It’s good and tasty and leaves you wanting to ask if they’re <em>sure</em> that was the vegetarian version.</p>
<h3 id="central-district">Central District</h3>
<p>We have only explored the Central District a little, so I really only have one thing to tell you about: <a href="http://www.ezellschicken.com/">Ezell’s</a>. It’s the best danged fried chicken I have ever had. I’m getting hungry just thinking about it. Have you noticed that a lot of my neighborhood summaries mention food? Yeah, that’s how I’ve gone from being bone-skinny to needing to lose weight. Food in Seattle is really good and plentiful. You’ve been warned. Even <a href="http://www.oprah.com/index.html">Oprah Winfrey</a> has to be careful. Back in the day, she loved Ezell’s, gushed about it on TV, and the story claims that she even had their chicken specially delivered to Chicago. Yeah, I’d say it’s about that good. Be aware, though, the quality is a little inconsistent. It’s usually the best fried chicken ever, but occasionally they throw a dud so bad you wish you’d gone for grocery store deli chicken instead.</p>
<h3 id="international-district--chinatown">International District / Chinatown</h3>
<p>There is a minor identity crisis in this neighborhood. Some folks call it Chinatown, but it shows up on the map as the International District. Wander around a bit here. It’s nice. There are some great dim sum places, and <a href="http://www.uwajimaya.com/">Uwajimaya</a> is a fun store with lots and lots of great food for local families — and curious pasty white folk like me. I’m a big fan of the Kinokuniya book store, even though I can only read about a third of the titles. Someday I <em>will</em> learn Japanese, I swear!</p>
<h3 id="green-lake">Green Lake</h3>
<p>Joggers. That’s the first thing you notice when you visit this neighborhood. Bicyclists are probably the second. The last thing you notice will be either a jogger or a bicyclist, depending on who runs you down when you aren’t looking. You might notice a few things in between, though. The lake itself is pretty and well-maintained, with ducks and geese and an assortment of other urban wildlife varieties. There are a few good places to eat here, and at least one <a href="http://thecoffeerevolution.com/">great coffee shop</a>.</p>
<p>Most of the businesses in this neighborhood cater to the health-conscious sort of person: running supplies, bicycle shops, stuff like that. This obviously means that I haven’t been to half of the stores around me. As soon as they open a good shop for lazy computer geeks who like to knit, I’ll be there.</p>
<h2 id="so-long">So Long</h2>
<p>That’s it for the moment. Whenever I think of something else, I’ll add to this page. There is so much more that I would like to tell you about, but my typing fingers are already getting sore.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Ruby Babysteps 01 - First Steps</title>
  <link>https://randomgeekery.org/post/2003/06/ruby-babysteps-01-first-steps/</link>
  <pubDate>Mon, 23 Jun 2003 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2003/06/ruby-babysteps-01-first-steps/</guid>
  <description>Ruby is an exciting language with a huge number of features that appeal to advanced programmers. You should not let that intimidate you, though. The language is very easy to get started with, and you can work your way into the more arcane corners.
This page is intended to provide the non-programmer with a gentle introduction to the Ruby programming language. When you are done with it, you should feel ready to learn more.</description>
   <category>post</category> 
   <category>post</category> 
   <category>ruby</category>  <category>learn</category>  <category>coolnamehere</category> 
  <content:encoded><![CDATA[<p><a href="/card/ruby/">Ruby</a> is an exciting language with a huge number of features that appeal to advanced programmers. You should not let that intimidate you, though. The language is very easy to get started with, and you can work your way into the more arcane corners.</p>
<p>This page is intended to provide the non-programmer with a gentle introduction to the Ruby programming language. When you are done with it, you should feel ready to learn more. You won’t be any kind of expert, but you will be able find the information you need to go farther. Beginners and experts alike should feel free to send suggestions about how to improve this tutorial.</p>
<h2 id="installing-ruby">Installing Ruby</h2>
<p>Of course, if you want to use Ruby, you have to install it. To be honest, installation used to be the trickiest part of dealing with Ruby. It’s a lot easier to install it these days, depending on your operating system.</p>
<h3 id="linux">Linux</h3>
<p>As with all things Linux, getting Ruby depends on your distribution. See if it is already installed on your system. If not, check to see if it’s available on your distribution discs. If that fails as well, you might as well move on to the world of compiling software yourself. See a little further below for details.</p>
<h3 id="mac-os-x">Mac OS X</h3>
<p>OS X users have it good. Sort of. A fairly recent Ruby is already available on the Developer Disk for OS X, so you don’t need to mess with any of that other stuff to get started. It’s likely that you will want to later on, but you’ve got enough to get you started. Definitely more than you’ll be needing with this tutorial!</p>
<p>See below if you are willing to enter the world of compiling your own software. It is not as bad as it sounds, trust me.</p>
<h3 id="windows">Windows</h3>
<p>Users of Microsoft Windows are definitely not used to compiling their own software. Fortunately, the <a href="http://rubyinstaller.org/">RubyInstaller</a> project provides an installer for Windows users.</p>
<h3 id="installing-from-source">Installing From Source</h3>
<p>Okay, so there’s no “grab and install” version of Ruby available for your computer. If you are the adventurous sort, and have a C compiler handy, you might as well use the traditional UNIX approach: build it yourself!</p>
<ul>
<li>Download the current stable release of  <a href="http://www.ruby-lang.org/">Ruby</a>.</li>
<li>Extract it into a new folder.</li>
<li><code>cd</code> into the directory with ruby source in it.</li>
<li><code>./configure</code></li>
<li><code>make</code></li>
<li><code>su</code> into the root account</li>
<li><code>make install</code></li>
<li>exit the <code>su</code> session.</li>
<li>Start playing with Ruby!</li>
</ul>
<h2 id="creating-ruby-programs">Creating Ruby Programs</h2>
<p>You’ll probably want to start writing programs at this point. Well, now that you have installed Ruby, all you need to do is fire up a text editor and start writing code.</p>
<p>As soon as you’ve been around the programming culture for a while — sometimes as long as two days - you might notice that some folks have strong opinions about which is the One True Editor, which you should use for all of your programming. That’s kind of silly, though. This early, you can probably make do with almost anything that lets you edit text.
Here are a couple of my favorite popular choices:</p>
<ul>
<li><a href="/card/emacs/">Emacs</a></li>
<li><a href="/card/vim/">Vim</a></li>
</ul>
<p>Look around a bit and pick the one that feels most comfortable to you. If you change your mind later, nobody should hold it against you.</p>
<h3 id="hello-world">Hello, World</h3>
<p>It is traditional to start programming by creating a program that displays a simple phrase, such as “Hello, World!” I am not about to argue with tradition. Type the following into your text editor:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="c1"># hello.rb</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  Displays a warm greeting</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="s2">&#34;Hello, World!&#34;</span></span></span></code></pre>
</figure><p>Save the file as <code>hello.rb</code>. We’ll be running it in a few moments, but first - what’s with those first couple of lines?</p>
<p>Well, they’re Ruby <em>comments</em>. Comments start from the character <code>#</code>, and extend to the end of the line that you wrote them on. Ruby ignores comments, which means that you can use them to explain what is going on in your code. Comments are good. When you come back to look at a complex script after several months, you might forget what some block of code does. Having the comments there to remind you will make it that much easier to sort everything out.</p>
<p>I like to start every one of my scripts off with a quick header to describe the purpose of the program. Here is the rough template:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="c1"># hello.rb</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  Displays a warm greeting</span></span></span></code></pre>
</figure><p>Of course, your header can be as complicated as you like:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="c1"># hello.rb</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  Displays a warm greeting.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># = AUTHOR</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   Brian Wisti (brian@coolnamehere.com)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># = DATE</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   9 March 2009</span>
</span></span><span class="line"><span class="cl"><span class="c1"># = VERSION</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   1.0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># = PURPOSE</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   Demonstration script for my Ruby tutorial at</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   http://www.coolnamehere.com/geekery/ruby/rubytut/</span>
</span></span><span class="line"><span class="cl"><span class="c1"># = USAGE</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   ruby hello.rb</span>
</span></span><span class="line"><span class="cl"><span class="c1"># = LICENSE</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   You may copy and redistribute this program as you see fit, with no</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   restrictions.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># = WARRANTY</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   This program comes with NO warranty, real or implied.</span></span></span></code></pre>
</figure><p>Just try to match the header complexity to the program. Using this header for a program that consists of one line of code might be just a <em>little</em> bit of overkill. I usually start with the two-line header and expand it as I see fit.</p>
<p>Now you probably would like to know how to actually run a program. Save the file you have been editing, and switch to a command line. Type the following at the command prompt:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ruby hello.rb
Hello, World!</code></pre>
</figure><p>That was kind of cool. It would be nice to customize it a little bit. Maybe we could change the program so that it says &ldquo;Hello&rdquo; to us personally.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="c1"># hello.rb</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  Displays a warm greeting.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">name</span> <span class="o">=</span> <span class="s2">&#34;Brian&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="s2">&#34;Hello, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&#34;</span></span></span></code></pre>
</figure><p>Save the file, and run it again.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ruby hello.rb
Hello, Brian!</code></pre>
</figure><p>We stored the string &ldquo;Brian&rdquo; in the variable <code>name</code>. A <em>variable</em> is basically just something you want the computer to remember so that you can get to it later. You can get a lot more complicated than that if you want, and a lot of programmers do. However, this definition should do for a long time.</p>
<p>The string itself is a special sort of variable called an <em>object</em>. Objects are very powerful things - so powerful that every variable in Ruby is an object. You can do a lot more with a variable than just ask the computer what the object’s value is. An object has a set of things that it knows how to do. For example: a String knows how to ask Ruby to work out a value when you place some Ruby code - such as a variable name — inside the string. The code is marked by special characters. Then it will take the value that Ruby found, and insert it where the special marker was placed. You could change the value of <code>name</code> and rerun the program. The correct value will be displayed in the greeting string.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="nb">name</span> <span class="o">=</span> <span class="s2">&#34;Matt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="s2">&#34;Hello, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">!&#34;</span></span></span></code></pre>
</figure><p>See?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ruby hello.rb
Hello, Matt!</code></pre>
</figure><p>Having a program that displays the exact same message every time you run it is nice when it comes to being consistent, but not so entertaining as a program. Let’s make things a little more interesting still. Instead of changing the value of <code>name</code> in the code of the program, we can use the <code>gets</code> method to get a name from the user.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="nb">print</span> <span class="s2">&#34;What is your name? &#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">reply</span> <span class="o">=</span> <span class="nb">gets</span>
</span></span><span class="line"><span class="cl"><span class="nb">name</span> <span class="o">=</span> <span class="n">reply</span><span class="o">.</span><span class="n">chomp</span>
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="s2">&#34;Hello, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">!&#34;</span></span></span></code></pre>
</figure><p>Running this is a little more fun:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ What is your name? Brian
Hello, Brian!</code></pre>
</figure><p>The <code>gets</code> method … wait, I used that word again, “method”. You might be wondering what that is supposed to be. A <em>method</em> is one thing that an object is capable of. We have to call it by name. You can’t just say “Ball, do whatever it is you do.” We have to say “Ball, bounce!” In the real world, of course, talking to the ball would not be very helpful. But you get the idea.</p>
<p><code>gets</code> is a method that gets a line of text from the user and <em>returns</em> it to - or hands back to - the program. What do we do with that reply? We <code>chomp</code> it! <code>gets</code> returns <em>all</em> of the text it gets, including the bit that represents the ENTER key you pressed. We don’t want to keep that, though, so we need a safe way to remove the ENTER character without doing anything to the rest of the string. <code>chomp</code> is a method associated with Strings of text which asks the string to remove that rogue ENTER character. A cleaner copy of the string is returned for you to display.</p>
<p>If you don’t believe me about the ENTER character, you can test it for yourself. In the string which is printed by <code>puts</code>, replace <code>name</code> with <code>reply</code>. You’ll see what I am talking about.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="nb">puts</span> <span class="s2">&#34;Hello, </span><span class="si">#{</span><span class="n">reply</span><span class="si">}</span><span class="s2">!&#34;</span></span></span></code></pre>
</figure><p>Generally, you call an object’s methods by tagging a dot and the method name at the end, like <code>object.method</code>. There are lots of things you can do with methods, and lots of ways to treat them, but that is beyond the scope of this article.</p>
<p>For now, though, you’ve learned enough to get started, and now I want you to play around with what you’ve learned and enjoy yourself a little bit.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Congratulations! You have just begun learning Ruby. You just wrote a complete program which gets input from a user, and prints output which includes a modified version of their input! Stop for a minute and think about that. Of course there’s a lot more to learn, but it’s well within your abilities. There is an ever-growing abundance of resources for the “Ruby Newbie”, and you should take advantage of as many of them as possible!</p>
<ul>
<li>The <a href="http://www.ruby-lang.org/">Ruby home page</a> is pretty much the   best place to start, since that is where you’ll find Ruby itself, as   well as information about user mailing lists that you might be   interested in subscribing to. Never underestimate the potential help   that you can get from the rest of the community.</li>
<li>The <a href="https://www.ruby-forum.com/">Ruby Forum</a> site provides Web access to all of the major Ruby and Rails mailing lists. You can check archives, see recent posts, and even post from this interface.</li>
</ul>
]]></content:encoded>
</item>
</channel>
</rss>
