<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2013onRandom Geekery</title>
    <link>https://randomgeekery.org/post/2013/</link>
    <description>
      Recent contentin2013 on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sat, 20 Jan 2024 22:42:33 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/post/2013/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: An Emacs Newbie</title>
  <link>https://randomgeekery.org/post/2013/12/an-emacs-newbie/</link>
  <pubDate>Thu, 26 Dec 2013 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2013/12/an-emacs-newbie/</guid>
  <description>Right. I am going to attempt to follow Ryan Macklin’s suggestion to write at least 250 words per day. They don’t have to be good words. Fortunately, I have this blog sitting here.
I have been spending more time with Emacs lately. This is because of a video by Bailey Ling describing evil-mode. Evil is an Emacs mode that provides effective Vim emulation.
Emacs is not completely foreign to me. I started experimenting with it at roughly the same time that I was introduced to Vim.</description>
   <category>post</category> 
   <category>post</category> 
   <category>emacs</category>  <category>marginalia</category> 
  <content:encoded><![CDATA[<p>Right. I am going to attempt to follow Ryan Macklin&rsquo;s <a href="http://ryanmacklin.com/2013/12/getting-back-on-the-creative-horse/">suggestion</a> to write  at least 250 words per day. They don’t have to be good words. Fortunately, I have this blog sitting here.</p>
<p>I have been spending more time with <a href="/card/emacs/">Emacs</a> lately. This is because of a <a href="http://bling.github.io/blog/2013/10/16/emacs-as-my-leader-evil-mode/">video</a> by Bailey Ling describing <a href="http://www.emacswiki.org/emacs/Evil">evil-mode</a>. Evil is an Emacs mode that provides effective Vim emulation.</p>
<p>Emacs is not completely foreign to me. I started experimenting with it at roughly the same time that I was introduced to <a href="/card/vim/">Vim</a>. My fingers were happier with the controls in Vim, so that is what I stuck with. I was never happy with the default extension language, though. <a href="http://vimdoc.sourceforge.net/htmldoc/usr_41.html">Vim script</a> evolved from the old ex commands of vi. I would rather customize or extend my editing environment with a general purpose language. I know that support for Ruby, Python, Perl, and others can be compiled into Vim, but they are not default options. You still feel the ex roots when you start digging into the Vim API for these languages. Emacs LISP will work for me.</p>
<p>Oh and Emacs has a built-in idea of <a href="http://www.emacswiki.org/emacs/ELPA">packages</a> as of version 24. This makes it easier to use somebody’s excellent extension. That contrasts with the many packaging options to choose from for Vim.</p>
<p>I even made a repo for my Emacs init. It is unimpressive today. I plan to improve it. It exists so that I have a central source for Emacs settings when I sit in front of a new machine.</p>
<p>We will see how long that lasts. I can be fickle. But as I was mentioning to a friend earlier today:</p>
<p>Emacs is a lot more fun when I think of it as a LISP-powered shell with  editing capabilities.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: My Own Ruby Fibers Babystep</title>
  <link>https://randomgeekery.org/post/2013/11/my-own-ruby-fibers-babystep/</link>
  <pubDate>Mon, 25 Nov 2013 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2013/11/my-own-ruby-fibers-babystep/</guid>
  <description>My adventures rereading the Pickaxe Book have reached the chapter on Ruby Fibers. Interesting stuff. Thought I would extrapolate from their initial example. My old static pages started from a MANIFEST file that looked something like this:
index.html /babblings/index.html /babblings/2013-05-30-javascript.html /babblings/2013-04-05-perl-and-opensuse.html /babblings/2013-03-big-updates.html /babblings/seattle.html /babblings/stalkingswfans.html /babblings/bra.html /brian/index.html And so on. The path components create a topic hierarchy. There are only 89 files. This is not a lot to track, but it is enough that I can still be hazy about some high level details.</description>
   <category>post</category> 
   <category>post</category> 
   <category>ruby</category>  <category>files</category>  <category>site</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p>My adventures <a href="/post/2013/11/rereading-the-pickaxe/">rereading</a> the Pickaxe Book have reached the chapter on <a href="/card/ruby/">Ruby</a> Fibers. Interesting stuff. Thought I would extrapolate from their initial example. My old static pages started from a MANIFEST file that looked something like this:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >index.html
/babblings/index.html
/babblings/2013-05-30-javascript.html
/babblings/2013-04-05-perl-and-opensuse.html
/babblings/2013-03-big-updates.html
/babblings/seattle.html
/babblings/stalkingswfans.html
/babblings/bra.html
/brian/index.html</code></pre>
</figure><p>And so on. The path components create a topic hierarchy. There are only 89 files. This is not a lot to track, but it is enough that I can still be hazy about some high level details. For example, I have no idea how many pages are in each section.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="n">sections</span> <span class="o">=</span> <span class="no">Fiber</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="no">File</span><span class="o">.</span><span class="n">foreach</span> <span class="s2">&#34;MANIFEST&#34;</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="n">line</span><span class="o">.</span><span class="n">match</span> <span class="sr">%r{^/(?&lt;path&gt;\w+)/}</span> <span class="k">do</span> <span class="o">|</span><span class="n">section</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">      <span class="no">Fiber</span><span class="o">.</span><span class="n">yield</span> <span class="n">section</span><span class="o">[</span><span class="ss">:path</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kp">nil</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">counts</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">section</span> <span class="o">=</span> <span class="n">sections</span><span class="o">.</span><span class="n">resume</span>
</span></span><span class="line"><span class="cl">  <span class="n">counts</span><span class="o">[</span><span class="n">section</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">counts</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">section</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">section</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">counts</span><span class="o">[</span><span class="n">section</span><span class="o">]</span><span class="si">}</span><span class="s2">&#34;</span> <span class="p">}</span></span></span></code></pre>
</figure><p>Yes, this is just the example from the Pickaxe book with <code>line.scan</code> changed to <code>line.match</code> with a slightly altered regular expression.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ruby nom-manifest.rb
babblings: 7
brian: 2
geekery: 78</code></pre>
</figure><p>This isn’t that helpful though. I already knew that the majority of my pages were in <code>/geekery/</code>. Let’s adjust the regular expression so that the first two pieces of the entry count as a section.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="n">sections</span> <span class="o">=</span> <span class="no">Fiber</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="no">File</span><span class="o">.</span><span class="n">foreach</span> <span class="s2">&#34;MANIFEST&#34;</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="n">line</span><span class="o">.</span><span class="n">match</span> <span class="sr">%r{
</span></span></span><span class="line"><span class="cl"><span class="sr">      ^/(?&lt;path&gt;\w+ # main section: /geekery
</span></span></span><span class="line"><span class="cl"><span class="sr">      (?:/\w+)?)    # subsection:   /ruby
</span></span></span><span class="line"><span class="cl"><span class="sr">      /             # stop at path separator
</span></span></span><span class="line"><span class="cl"><span class="sr">    }x</span> <span class="k">do</span> <span class="o">|</span><span class="n">section</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">        <span class="no">Fiber</span><span class="o">.</span><span class="n">yield</span> <span class="n">section</span><span class="o">[</span><span class="ss">:path</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl">  <span class="kp">nil</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>Now I’m looking for possible subsections and lumping them with the top level section. Does this change get me more useful information (for varying definitions of useful)?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ruby nom-manifest.rb
babblings: 7
brian: 2
geekery: 2
geekery/editors: 3
geekery/js: 1
geekery/lisp: 1
geekery/osx: 1
geekery/parrot: 17
geekery/perl: 13
geekery/php: 2
geekery/python: 9
geekery/rakudo: 3
geekery/rebol: 10
geekery/ruby: 10
geekery/tools: 2
geekery/unix: 2
geekery/xml: 2</code></pre>
</figure><p>Yeah. It does. I can now see that the most of my static pages are about Parrot or Perl.</p>
<p>I recognize that all I’m doing in this example is shuffling complexity around. There’s nothing in the task that screams &ldquo;OMG YOU NEED FIBERS TO DO THIS!&rdquo; Still - I need to figure this stuff out somehow.</p>
<p>Anyways, back to work.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Rereading the Pickaxe</title>
  <link>https://randomgeekery.org/post/2013/11/rereading-the-pickaxe/</link>
  <pubDate>Mon, 11 Nov 2013 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2013/11/rereading-the-pickaxe/</guid>
  <description>I have been spending most of my free time working on a Rails project for the Mary’s Place day shelter. At some point - probably after many scan/edit cycles with metric_fu – it occurred to me that even though my Rails knowledge has increased over the last year, my core card/Ruby skills have not. They have stayed static. They may even have deteriorated a bit, since Rails does so much work for the developer.</description>
   <category>post</category> 
   <category>post</category> 
   <category>ruby</category>  <category>toread</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p>I have been spending most of my free time working on a <a href="https://github.com/brianwisti/marysplace-rails">Rails project</a> for the <a href="http://www.marysplaceseattle.org/">Mary&rsquo;s Place</a> day shelter. At some point - probably after many scan/edit cycles with <a href="https://github.com/metricfu/metric_fu">metric_fu</a> &ndash; it occurred to me that even though my Rails knowledge has increased over the last year, my core <a href="/card/ruby/">card/Ruby</a> skills have not. They have stayed static. They may even have deteriorated a bit, since Rails does so much work for the developer.</p>
<p>This seems like a perfect opportunity to reread the Pickaxe book <a href="http://pragprog.com/book/ruby4/programming-ruby-1-9-2-0">Programming Ruby</a>. This might not count as a reread, though. I have not read it cover to cover since the second edition came out. They are on to the fourth edition now.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: AlphaCard Sent Us A Printer</title>
  <link>https://randomgeekery.org/post/2013/08/alphacard-sent-us-a-printer/</link>
  <pubDate>Fri, 09 Aug 2013 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2013/08/alphacard-sent-us-a-printer/</guid>
  <description>AlphaCard generously donated a badge printer &amp; supplies for Mary’s Place day shelter in Seattle.
Now I can start automated checkin and develop other features in the app I’ve been writing for the shelter.</description>
   <category>post</category> 
   <category>post</category> 
   <category>marginalia</category>  <category>now</category> 
  <content:encoded><![CDATA[<p><a href="https://www.alphacard.com">AlphaCard</a> generously donated a badge printer &amp; supplies for <a href="https://marysplaceseattle.org">Mary&rsquo;s Place</a> day shelter in Seattle.</p>
<p>Now I can start automated checkin and develop other features in the app I’ve been writing for the shelter.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Fickle</title>
  <link>https://randomgeekery.org/post/2013/07/fickle/</link>
  <pubDate>Tue, 23 Jul 2013 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2013/07/fickle/</guid>
  <description>&lt;p&gt;I’ve got a pretty nice flow here. It’s easy to make quick posts and have a mini blog along with the lengthy stuff - whenever I get around to those.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>site</category>  <category>marginalia</category> 
  <content:encoded><![CDATA[<p>I&rsquo;ve got a pretty nice flow here. It&rsquo;s easy to make quick posts and have a mini blog along with the lengthy stuff - whenever I get around to those.</p>
<p>Naturally, I&rsquo;m thinking about changing everything again.</p>
<p>I love my static blogs too much. It would take some work to approach the convenience of what I have now. Maybe run my site build script as a daemon, watching for changes in a Dropbox folder. Add a note-taking app for the phone that saves to Dropbox, and I&rsquo;m all set.</p>
<p>Just a simple matter of coding.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Coolnamehere content added</title>
  <link>https://randomgeekery.org/post/2013/06/coolnamehere-content-added/</link>
  <pubDate>Sat, 08 Jun 2013 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2013/06/coolnamehere-content-added/</guid>
  <description>I just wanted to mention that the old coolnamehere content has been uploaded. There is an explanatory note here on the blog, too.</description>
   <category>post</category> 
   <category>post</category> 
   <category>site</category>  <category>marginalia</category> 
  <content:encoded><![CDATA[<p>I just wanted to mention that the old <a href="/card/coolnamehere/">coolnamehere</a> content has
been uploaded. There is an <a href="/post/2013/06/coolnamehere-random-geekery/">explanatory note</a> here on the blog, too.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: YAPC::NA 2013 Links From a Non-Attendee</title>
  <link>https://randomgeekery.org/post/2013/06/yapcna-2013-links-from-a-non-attendee/</link>
  <pubDate>Thu, 06 Jun 2013 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2013/06/yapcna-2013-links-from-a-non-attendee/</guid>
  <description>YAPC::NA, the Yet Another card/Perl Conference for North America, just happened. I didn’t go. Since I didn’t go, I want to compile everything I can find about the conference in one place. Videos, slides, blog posts, whatever.
NOTE
I ended up removing a few links that had been removed since first publishing this post.
I am ready to add, edit, or remove items as needed. Make your suggestions or comments in the comments section.</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>links</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p><a href="http://yapcna.org">YAPC::NA</a>, the Yet Another <a href="/card/perl/">card/Perl</a> Conference for North America, just happened. I didn’t go. Since I didn’t go, I want to compile everything I can find about the conference in one place. Videos, slides, blog posts, whatever.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>I ended up removing a few links that had been removed since first publishing this post.</p>
</blockquote>
<p>I am ready to add, edit, or remove items as needed. Make your suggestions or comments in the comments section.</p>
<p>There’s also an <a href="http://eventifier.co/event/yapc13/">Eventifier compilation of YAPC::NA</a>, which includes most of this and a lot of photos as well.</p>
<blockquote>
<p><strong>Updates</strong></p>
<dl>
<dt>2013-06-06</dt>
<dd>Got links to &ldquo;Perl - The Detroit of Scripting Languages&rdquo; and &ldquo;Be
Kind To Your Wrists (you’ll miss them when they’re gone)&rdquo; from
Zakariyya Mughal.</dd>
<dt>2013-06-07</dt>
<dd>More links from Zakariyya Mughal, and a post-YAPC::NA love letter to
the Perl community from Brent Laabs, found on Twitter.</dd>
<dt>2013-06-07</dt>
<dd>Added Eventifier link</dd>
<dt>2013-06-08</dt>
<dd>Nick Patch sent some wrap-up blog posts. Yay!</dd>
<dt>2013-06-10</dt>
<dd>Buddy Burden’s blog post, from raiph mellor</dd>
</dl>
</blockquote>
<h2 id="videos">Videos</h2>
<p>Here’s the YouTube playlist of <a href="https://www.youtube.com/playlist?list=PLA9_Hq3zhoFy0zej1j4QZtz5awFKXunZX">YAPC::NA 2013 Talk Videos</a>.</p>
<h2 id="slides">Slides</h2>
<p>From a #yapcna search on Twitter and scrubbing around on the YAPC::NA site.</p>
<dl>
<dt>Yichung Zhang</dt>
<dd><a href="http://agentzh.org/misc/slides/yapc-na-2013-sregex.pdf">sregex: matching Perl 5 regexes on data streams</a> - lightning talk</dd>
<dt>Joe McMahon</dt>
<dd><a href="http://www.slideshare.net/joe_mcmahon/how-to-make-your-users-not-want-to-murder-you-22396291">How to Make Your Users Not Want to Murder You, or Software  Engineering for the Lazy</a></dd>
<dt>Heath Bair</dt>
<dd><a href="https://docs.google.com/presentation/d/1HSnci2xflsStMcktaWKQ_6f5jm3yhl1coUg9tC-8iuQ/edit#slide=id.p">How to run a Perl Workshop or Conference</a></dd>
<dt>Nick Patch</dt>
<dd><a href="https://speakerdeck.com/patch/unicode-best-practices-in-perl">Unicode Best Practices</a></dd>
<dt>Stevan Little</dt>
<dd><a href="https://speakerdeck.com/stevan_little/moe-status-update">Moe Status Update</a> + <a href="https://speakerdeck.com/stevan_little/perl-the-detroit-of-scripting-languages">Perl - The Detroit of Scripting Languages</a></dd>
<dt>Patrick Michaud</dt>
<dd><a href="http://pmichaud.com/2013/pres/yapcna-perljvm/slides/start.html">Perl 6 on the JVM</a></dd>
<dt>Daniel Sterling</dt>
<dd><a href="https://github.com/eqhmcow/rpm-talk">Packaging Perl RPMs</a></dd>
<dt>Ingy döt Net</dt>
<dd><a href="https://github.com/ingydotnet/acmeism-yapcna2013-talk">Acmeism - Hacking in all Languages at once</a></dd>
<dt>John Lightsey</dt>
<dd><a href="http://nixnuts.net/YAPCNA-2013-Auditing.pdf">Auditing Open Source Perl Code for Security</a></dd>
<dt>Buddy Burden</dt>
<dd><a href="https://github.com/schwern/method-signatures/blob/master/talks/MShowto.pdf?raw=true">Method::Signatures: A How-To</a></dd>
<dt>Yichun Zhang</dt>
<dd><a href="http://agentzh.org/misc/slides/yapc-na-2013-flame-graphs.pdf">Flame Graphs for Online Performance Profiling</a></dd>
<dt>Mark Allen</dt>
<dd><a href="https://speakerdeck.com/mrallen1/perl-dtrace-and-you">perl, DTrace, and you</a></dd>
<dt>Reini Urban</dt>
<dd><a href="http://perl11.org/p2/p2-yapcna2013.pdf">Design Decisions on p2</a></dd>
<dt>Denise Paolucci</dt>
<dd><a href="http://www.slideshare.net/dreamwidth/be-kind-to-your-hands">Be Kind To Your Wrists (you’ll miss them when they’re gone)</a></dd>
<dt>Dave Rolsky</dt>
<dd><a href="http://www.houseabsolute.com/presentations/github/a-date-with-perl/">A Date with Perl</a></dd>
<dt>Patrick Michaud</dt>
<dd><a href="http://pmichaud.com/2013/pres/yapcna-parall/">Parallelism in Perl 6</a></dd>
<dt>Jonathon Rockway</dt>
<dd><a href="https://docs.google.com/presentation/d/1hehfYo29jE7K8oXB2v1nncghLKeiINdKmDW-G1Axlxc/edit#slide=id.p">Introduction to Dart</a></dd>
<dt>Brock Wilcox</dt>
<dd><a href="http://thelackthereof.org/docs/talks/2013%20YAPC-NA%20AngularJS/">Introduction to AngularJS</a></dd>
<dt>Casey West</dt>
<dd><a href="https://speakerdeck.com/caseywest/how-to-be-a-web-ui-developer">How to be a Web UI Developer</a></dd>
<dt>R Geoffrey Avery</dt>
<dd><a href="http://platypiventures.com/perl/present/to_hello/yapc_madison/001.html">Dancer: Getting to &lsquo;Hello World&rsquo;</a></dd>
<dt>Andrew Rodland</dt>
<dd><a href="http://cleverdomain.org/yapc-statsd/">StatsD and You — Easy Application Metrics</a></dd>
<dt>Greg Lindahl</dt>
<dd><a href="http://bit.ly/yapcna_blekko_2013">Building a Web-Scale Search Engine in Perl</a> - contains slides and
further resources</dd>
<dt>Nathan Gray</dt>
<dd><a href="https://github.com/kolibrie/test-cgi-with-plack">Unit-test CGIs with mod_perl2 via Plack</a></dd>
<dt>Yusuke Wada</dt>
<dd><a href="http://www.slideshare.net/yusukebe/inside-bokete-web-application-with-mojolicious-and-others">Inside Bokete: Web Application with Mojolicious and others.</a></dd>
<dt>Joe Axford</dt>
<dd><a href="http://blogs.perl.org/users/j0e/2013/05/notes-from-a-newbie-20-yapcna-2013-austin.html">Notes from a Newbie</a></dd>
</dl>
<h2 id="posts">Posts</h2>
<ul>
<li>Curtis Poe (Ovid): <a href="http://blogs.perl.org/users/ovid/2013/06/a-testclass-anti-pattern.html">A Test::Class Anti-Pattern</a>, a post-talk blog post which includes slides from his Test::Class::Moose talk.</li>
<li>Brent Laabs offers a blog post on what it was like for somebody who actually attended YAPC::NA at <a href="http://blog.brentlaabs.com/2013/06/thanking-perl-community-for-awesome-yapc.html">Thanking the Perl Community for an Awesome YAPC</a></li>
<li>tokuhirom’s blog - Future Perl - <a href="http://blog.64p.org/entry/2013/06/08/124125">YAPC::NA 2013 wrapup in Japanese</a> [1]</li>
<li>Whipped Cream Difficulties - <a href="http://www.sportsfirings.com/?p=10106">Random notes on YAPC 2013.</a>, <a href="http://www.sportsfirings.com/?p=10111">No Sleep Till Sunday.</a></li>
<li>Buddy Burden’s <a href="http://blogs.perl.org/users/buddy_burden/2013/06/yapc-reflections-2013.html">YAPC Reflections (2013)</a> on being a speaker at YAPC, thoughts on different visions of Perl’s future, and having his bare feet defeated (see what I did there?) by Austin’s blacktop.</li>
</ul>
<h2 id="whatever">Whatever</h2>
<ul>
<li><a href="http://youtu.be/BocdZBqyTqg">Matt and the Dancing Droid video</a></li>
</ul>
]]></content:encoded>
</item>
<item>
  <title>Post: coolnamehere -&gt; Random Geekery</title>
  <link>https://randomgeekery.org/post/2013/06/coolnamehere-random-geekery/</link>
  <pubDate>Wed, 05 Jun 2013 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2013/06/coolnamehere-random-geekery/</guid>
  <description>&lt;p&gt;So I used to have another site. I also used to have a Yahoo email account. The domain name was registered under a Network Solutions account using the Yahoo account. All was well for years.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>site</category>  <category>marginalia</category> 
  <content:encoded><![CDATA[<h2>Marking a change in domain name</h2><p>So I used to have another site. I also used to have a Yahoo email account. The domain name was registered under a Network Solutions account using the Yahoo account. All was well for years.</p>
<p>Except that all was not well. The Yahoo account was frequently compromised. I still can&rsquo;t figure out whether to blame Yahoo or myself for that. Spam was sent from my account to contacts on a regular basis. I got fed up in 2011 and deleted the email account. I forgot about the Network Solutions hookup, though. The old site - coolnamehere.com - expired in May 2013 and went to some sort of auction thing. I decided to set up a new site rather than fuss with the auction.</p>
<p>Random Geekery is the same thing that coolnamehere was: a mix of notes and tutorials about geeky code stuff along with occasional personal updates. Unlike the old site, I&rsquo;m starting out with a blog and enabling comments.</p>
<p>The old <a href="/card/coolnamehere/">card/coolnamehere</a> content will be uploaded here so that sites which link to its resources will still have something to point to. I&rsquo;ll make a note when that happens.</p>]]></content:encoded>
</item>
</channel>
</rss>
