<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2007onRandom Geekery</title>
    <link>https://randomgeekery.org/post/2007/</link>
    <description>
      Recent contentin2007 on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 21 Jan 2024 21:46:53 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/post/2007/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: dv9310 bios issues</title>
  <link>https://randomgeekery.org/post/2007/12/dv9310-bios-issues/</link>
  <pubDate>Sat, 29 Dec 2007 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2007/12/dv9310-bios-issues/</guid>
  <description>I turned an offhand comment about how I fixed my problem into more of a step-by-step guide, in case some poor soul is in the same spot and finds me via Google.
Now that both of my machines are healing again - did I mention that a BIOS update flattened my HP dv9310? Oh, it flattened my HP all right. The new one effectively makes the computer forget that it has a video card.</description>
   <category>post</category> 
   <category>post</category> 
   <category>i-fixed-it</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>I turned an offhand comment about how I fixed my problem into more of a step-by-step guide, in case some poor soul is in the same spot and finds me via Google.</p>
<p>Now that both of my machines are healing again - did I mention that a BIOS update flattened my HP dv9310? Oh, it flattened my HP all right. The new one effectively  makes the computer forget that it has a video card. If you do an update and the machine starts spontaneously rebooting, try this:</p>
<ol>
<li>Boot into Safe Mode</li>
<li>Go to your Device Manager and disable the NVidia card. It&rsquo;s okay, you&rsquo;ll still have normal VGA.</li>
<li>Reboot in normal mode.</li>
<li>Go to the HP support site and download an older BIOS version.</li>
<li>Install that older BIOS.</li>
<li>Reboot.</li>
<li>Go to your Device Manager and re-enable the NVidia card.</li></li>
</ol>
<p>Everything should be okay now.</p>
<p>Anyways, the machines are reconfigured, I&rsquo;ve sparked my brain with a little Python code, and now I can get back to a Perl project that&rsquo;s been waiting over a month.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Python Loves Blogger (Part 1)</title>
  <link>https://randomgeekery.org/post/2007/12/python-loves-blogger-part-1/</link>
  <pubDate>Fri, 28 Dec 2007 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2007/12/python-loves-blogger-part-1/</guid>
  <description>&lt;p&gt;I’ve revisited the code for Blogger posting with Python. Start &lt;a href=&#34;https://randomgeekery.org/post/2009/06/python-blogger-refresh-part-1/&#34;&gt;here&lt;/a&gt; to see the new starting point.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>blogger</category>  <category>python</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>I&rsquo;ve revisited the code for Blogger posting with Python. Start <a href="/post/2009/06/python-blogger-refresh-part-1/">here</a> to see the new starting point.</p>
<h2 id="the-original-tale">The Original Tale</h2>
<p>I want the ability to post to my blogs from the command line. That&rsquo;s because I prefer to do <em>everything</em> from the command line, but that&rsquo;s not really the point. The point is that I want an excuse to write a new quick script and satisfy that constant urge to gain some new superpower. Okay, so blogging&rsquo;s not a superpower. Hush.</p>
<p>I&rsquo;m writing this into a text file via <a href="/card/vim/">Vim</a>. It is written in a format known as <a href="/card/markdown/">Markdown</a>,
because I hate writing HTML by hand these days. It will eventually manifest as an HTML formatted post on my Blogger account.</p>
<p>All of the hard work is going to be done with <a href="/card/python/">Python</a>. Why Python? Mainly because the [Google Blogger API][] is supported rather well by Python. They love their snake-based languages at Google, and it shows in the [GData Python Client][] library.</p>
<p>I could just as easily have used Perl or Ruby for this project. Heck, I could have used REBOL for this project if I was willing to craft some of the library by hand. All of these things are possibilities for the future. One thing I love to do is reimplement applications in various languages. It&rsquo;s a sickness.</p>
<h2 id="the-application-skeleton">The Application Skeleton</h2>
<p>Basic usage will be <code>python post-to-blog.py post.txt</code>. <code>post.txt</code> is a text file containing details like title or tags and the post body.</p>
<p>Here&rsquo;s the basic pseudo-code that will work fine for simple posts.</p>
<ol>
<li>Load global settings such as login and account URL</li>
<li>Create a local blog post based on the configuration and body from contents of <code>post.txt</code></li>
<li>Request that Blogger publish this post.</li>
<li>Report the results of the request.</li>
</ol>
<p>It&rsquo;s fairly straightforward, but already shows me one class I&rsquo;ll be using to mask the details:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># post-to-blog.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BlogPost</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;A single posting for a blog owned by a Blogger account&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="kn">import</span> <span class="nn">doctest</span>
</span></span><span class="line"><span class="cl">   <span class="n">doctest</span><span class="o">.</span><span class="n">testmod</span><span class="p">()</span></span></span></code></pre>
</figure><p>I plan to use the <a href="https://docs.python.org/2/library/doctest.html">doctest</a> module to incorporate tests as I write this. It&rsquo;ll get invoked if the script is run directly. I&rsquo;ll put in some command line parsing later so that the tests can stillbe run but it doesn&rsquo;t have to be the default behavior.</p>
<p>I already know what libraries I&rsquo;m going to use, so let&rsquo;s install those.</p>
<h2 id="installing-dependencies">Installing Dependencies</h2>
<p>I need a few things to make this work:</p>
<ul>
<li><a href="http://activestate.com/Products/activepython/">ActiveState Python 2.5.1</a>, because I am not in the mood to compile anything today.</li>
<li>The <a href="https://pypi.python.org/pypi/Markdown">Python Markdown</a> library, to handle the formatting.</li>
<li>The GData Python Client, because that&rsquo;s the whole <em>reason</em> I&rsquo;m starting with Python instead of another language.</li>
<li>A Blogger account. Seemed obvious, but I thought I&rsquo;d mention it.</li>
</ul>
<p>I already have Python installed, so let&rsquo;s move on to Markdown. It&rsquo;s simple enough to install and verify.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >~/src/pymods brian$ unzip ~/python_markdown-1.7.rc1.zip
~/src/pymods brian$ cd python_markdown-1.7/
~/src/pymods/python_markdown-1.7 brian$ sudo python setup.py install
~/src/pymods/python_markdown-1.7 brian$ python
ActivePython 2.5.1.1 (ActiveState Software Inc.) based on
Python 2.5.1 (r251:54863, May  1 2007, 17:40:00)
[GCC 4.0.1 (Apple Computer, Inc. build 5250)] on darwin
Type &#34;help&#34;, &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information.
&gt;&gt;&gt; import markdown
&gt;&gt;&gt; markdown.markdown(&#34;# Hello&#34;)
u&#39;&lt;h1&gt;Hello&lt;/h1&gt;&#39;
&gt;&gt;&gt;</code></pre>
</figure><p>Next I&rsquo;ll install GData.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >~/src/pymods brian$ tar xfvz ~/gdata.py-1.0.10.latest.tar.gz
~/src/pymods/gdata.py-1.0.10.1 brian$ cd gdata.py-1.0.10.1/
~/src/pymods/gdata.py-1.0.10.1 brian$ sudo python setup.py install</code></pre>
</figure><p>What can I do to verify this one? Let&rsquo;s just run the provided sample Blogger code.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ cd samples/blogger
$ python BloggerExample.py --email [email] --password [password]</code></pre>
</figure><p>There&rsquo;s a bunch of spew, and posts are made and deleted along with comments. Looks like it works.</p>
<h2 id="posting-formats">Posting Formats</h2>
<p>My blog post files will have a fairly straightforward layout, with a head section and a body section. It&rsquo;ll look &hellip; well, it&rsquo;ll look a lot like the <code>lj-compose</code> buffer in Emacs for composing Livejournal posts, now that I think about it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">title: Python Loves Blogger
</span></span><span class="line"><span class="cl">tags: python,gdata,project,blogger
</span></span><span class="line"><span class="cl">--
</span></span><span class="line"><span class="cl">I want the ability to post to my blogs from the command line. That&#39;s because
</span></span><span class="line"><span class="cl">I prefer to do <span class="ge">*everything*</span> from the command line, but that&#39;s not really the
</span></span><span class="line"><span class="cl">point. The point is that I want an excuse to write a new quick script and
</span></span><span class="line"><span class="cl">satisfy that constant urge to gain some new superpower. Okay, so blogging&#39;s
</span></span><span class="line"><span class="cl">not a superpower. Hush.</span></span></code></pre>
</figure><p>The two sections are separated by a line containing only the characters <code>--</code>.</p>
<p>The head section uses a common format where each line contains a key and its value, with a colon and space combo <code>:</code> separating them. The keys and values in a blog posting contain details that are important to Blogger and unique to this particular file. Right now that means I&rsquo;m only using <em>title</em> and <em>tags</em>.</p>
<p>I&rsquo;ll just use commas for now when listing multiple values for a single key, such as with tags.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >key1: value1
key2: value2,value3,value4,value5</code></pre>
</figure><p>The body section is just Markdown-formatted text, including extensions that are available in the Python Markdown library.</p>
<h3 id="parsing-the-config-header">Parsing the Config Header</h3>
<p>There is a very handy <a href="https://docs.python.org/2/library/configparser.html">ConfigParser</a> class available in the Python standard libs, but it&rsquo;s actually a little more than I need in a single post file. I just want to examine each line for key/value pairings without worrying about providing sections or a filehandle-like object
to make ConfigParser happy.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BlogPost</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">   <span class="s2">&#34;&#34;&#34;A single posting for a blog owned by a Blogger account
</span></span></span><span class="line"><span class="cl"><span class="s2">   &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">__config</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">parseConfig</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">configText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Reads and stores the directives from the post&#39;s config header.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; import os
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; myConfig = os.linesep.join([&#34;key1: value1&#34;, &#34;key2: value2&#34;])
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.parseConfig(myConfig)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.getConfig(&#39;key1&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#39;value1&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.getConfig(&#39;key2&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#39;value2&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="n">textLines</span> <span class="o">=</span> <span class="n">configText</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">       <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">textLines</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">           <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">           <span class="bp">self</span><span class="o">.</span><span class="n">__config</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">getConfig</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">   <span class="s2">&#34;&#34;&#34;Fetch the value of a config directive&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__config</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="kn">import</span> <span class="nn">doctest</span>
</span></span><span class="line"><span class="cl">   <span class="n">doctest</span><span class="o">.</span><span class="n">testmod</span><span class="p">()</span></span></span></code></pre>
</figure><p>That was pretty easy, although I did have to do a little thinking to work around the fact that newline escapes tend to be read before <code>doctest</code> can get to them. Anyways, config lines are split on the <code>: </code> pair of characters. A regular expression might be better for general use but I&rsquo;m still going for quick, dirty, and exactly what <em>I</em> want.</p>
<h3 id="parsing-the-post-body">Parsing the Post Body</h3>
<p>Now let&rsquo;s get some HTML out of a block of Markdown-formatted text.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">markdown</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BlogPost</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">   <span class="s2">&#34;&#34;&#34;A single posting for a blog owned by a Blogger account
</span></span></span><span class="line"><span class="cl"><span class="s2">   &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">__config</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">parseBody</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bodyText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Generates HTML from Markdown-formatted text.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.parseBody(&#39;This is a paragraph&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.getBody().find(&#39;&lt;p&gt;This is a paragraph&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">       0
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="n">markdown</span><span class="o">.</span><span class="n">markdown</span><span class="p">(</span><span class="n">bodyText</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">parseConfig</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">configText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Reads and stores the directives from the post&#39;s config header.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; import os
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; myConfig = os.linesep.join([&#34;key1: value1&#34;, &#34;key2: value2&#34;])
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.parseConfig(myConfig)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.getConfig(&#39;key1&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#39;value1&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.getConfig(&#39;key2&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#39;value2&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="n">textLines</span> <span class="o">=</span> <span class="n">configText</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">       <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">textLines</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">           <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">           <span class="bp">self</span><span class="o">.</span><span class="n">__config</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">getBody</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Fetch the HTML body of this post.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__body</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">getConfig</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Fetch the value of a config directive&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__config</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="kn">import</span> <span class="nn">doctest</span>
</span></span><span class="line"><span class="cl">   <span class="n">doctest</span><span class="o">.</span><span class="n">testmod</span><span class="p">()</span></span></span></code></pre>
</figure><p>Those <code>doctest</code> tests are starting to look a little contorted. <code>BlogPost.__config</code> is really just   dictionary, and I don&rsquo;t really care whether it is private to the object. Let&rsquo;s make the adjustments in <code>__init__</code> and <code>parseConfig</code>. We don&rsquo;t need <code>getConfig</code> now that we have direct access to the dictionary.</p>
<p>As long as we&rsquo;re refactoring, I&rsquo;d prefer it if the message body could be treated as a property. Setting it would store the string, while getting it would invoke markup and return the result.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">markdown</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BlogPost</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">   <span class="s2">&#34;&#34;&#34;A single posting for a blog owned by a Blogger account
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">   &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">   &gt;&gt;&gt; post.body = &#39;This is a paragraph&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">   &gt;&gt;&gt; print post.body
</span></span></span><span class="line"><span class="cl"><span class="s2">   &lt;p&gt;This is a paragraph
</span></span></span><span class="line"><span class="cl"><span class="s2">   &lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">   &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">config</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">set_body</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bodyText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Stores plain text which will be used as the post body
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.set_body(&#39;This is a paragraph&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="n">bodyText</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">get_body</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Access a HTML-formatted version of the post body
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.set_body(&#39;This is a paragraph&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; print post.get_body()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &lt;p&gt;This is a paragraph
</span></span></span><span class="line"><span class="cl"><span class="s2">       &lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="n">markdown</span><span class="o">.</span><span class="n">markdown</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">body</span> <span class="o">=</span> <span class="nb">property</span><span class="p">(</span><span class="n">get_body</span><span class="p">,</span> <span class="n">set_body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">parseConfig</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">configText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Reads and stores the directives from the post&#39;s config header.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; import os
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; myConfig = os.linesep.join([&#34;key1: value1&#34;, &#34;key2: value2&#34;])
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.parseConfig(myConfig)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.config[&#39;key1&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#39;value1&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.config[&#39;key2&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#39;value2&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="n">textLines</span> <span class="o">=</span> <span class="n">configText</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">       <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">textLines</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">           <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">           <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="kn">import</span> <span class="nn">doctest</span>
</span></span><span class="line"><span class="cl">   <span class="n">doctest</span><span class="o">.</span><span class="n">testmod</span><span class="p">()</span></span></span></code></pre>
</figure><h2 id="command-line-options">Command Line Options</h2>
<p>Before I get too carried away, I want to make sure that there are no ugly surprises in the formatting of my posts. Let&rsquo;s do the heavy lifting with <a href="https://docs.python.org/2/library/optparse.html">optparse</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">markdown</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BlogPost</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">   <span class="s2">&#34;&#34;&#34;A single posting for a blog owned by a Blogger account
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">   &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">   &gt;&gt;&gt; post.body = &#39;This is a paragraph&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">   &gt;&gt;&gt; print post.body
</span></span></span><span class="line"><span class="cl"><span class="s2">   &lt;p&gt;This is a paragraph
</span></span></span><span class="line"><span class="cl"><span class="s2">   &lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">   &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">config</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">set_body</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bodyText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Stores plain text which will be used as the post body
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.set_body(&#39;This is a paragraph&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="n">bodyText</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">get_body</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Access a HTML-formatted version of the post body
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.set_body(&#39;This is a paragraph&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; print post.get_body()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &lt;p&gt;This is a paragraph
</span></span></span><span class="line"><span class="cl"><span class="s2">       &lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="n">markdown</span><span class="o">.</span><span class="n">markdown</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">body</span> <span class="o">=</span> <span class="nb">property</span><span class="p">(</span><span class="n">get_body</span><span class="p">,</span> <span class="n">set_body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">parseConfig</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">configText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Reads and stores the directives from the post&#39;s config header.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; import os
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; myConfig = os.linesep.join([&#34;key1: value1&#34;, &#34;key2: value2&#34;])
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.parseConfig(myConfig)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.config[&#39;key1&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#39;value1&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.config[&#39;key2&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#39;value2&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="n">textLines</span> <span class="o">=</span> <span class="n">configText</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">       <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">textLines</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">           <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">           <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">parsePost</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">postText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Parses the contents of a full post, including header and body.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; import os
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; myText = os.linesep.join([&#34;title: Test&#34;, &#34;--&#34;, &#34;This is a test&#34;])
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.parsePost(myText)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; print post.config[&#39;title&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">       Test
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; print post.body
</span></span></span><span class="line"><span class="cl"><span class="s2">       &lt;p&gt;This is a test
</span></span></span><span class="line"><span class="cl"><span class="s2">       &lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="n">header</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="n">postText</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;--&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">parseConfig</span><span class="p">(</span><span class="n">header</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">runTests</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">   <span class="kn">import</span> <span class="nn">doctest</span>
</span></span><span class="line"><span class="cl">   <span class="n">doctest</span><span class="o">.</span><span class="n">testmod</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">   <span class="kn">from</span> <span class="nn">optparse</span> <span class="kn">import</span> <span class="n">OptionParser</span>
</span></span><span class="line"><span class="cl">   <span class="n">parser</span> <span class="o">=</span> <span class="n">OptionParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-D&#34;</span><span class="p">,</span> <span class="s2">&#34;--do-tests&#34;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s2">&#34;store_true&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;doTests&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Run built-in doctests&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-f&#34;</span><span class="p">,</span> <span class="s2">&#34;--file&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;filename&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Specify source file for post&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">doTests</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">       <span class="n">runTests</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">post</span> <span class="o">=</span> <span class="n">BlogPost</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">       <span class="n">postFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">       <span class="n">post</span><span class="o">.</span><span class="n">parsePost</span><span class="p">(</span><span class="n">postFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="nb">print</span> <span class="n">post</span><span class="o">.</span><span class="n">body</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="n">main</span><span class="p">()</span></span></span></code></pre>
</figure><p>You&rsquo;ll have to just take my word for it that I wrote tests for each stage. Well, except for verifying that the final output looked roughly like what I hoped for. I&rsquo;m not 100% sure how Markdown is going to place its newlines, so I am looking at the output via STDOUT:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ./post-to-blog.py -f post.txt | more
&lt;p&gt;I want the ability to post to my blogs from the command line. That&#39;s because
  I prefer to do &lt;em&gt;everything&lt;/em&gt; from the command line, but that&#39;s not really the
  point. The point is that I want an excuse to write a new quick script and
  satisfy that constant urge to gain some new superpower. Okay, so blogging&#39;s
  not a superpower. Hush.
&lt;/p&gt;
...</code></pre>
</figure><p>I&rsquo;ll save you the details of the full output. It looked about right, though.</p>
<p>Enough stalling. It&rsquo;s time to login and post this article.</p>
<h2 id="interacting-with-blogger">Interacting with Blogger</h2>
<p>I&rsquo;ll be using <a href="https://developers.google.com/blogger/docs/3.0/getting_started">the official guide</a> for Python and Blogger to choose my steps. You aren&rsquo;t likely to find anything here that isn&rsquo;t already there.</p>
<aside>
<h3>Update 2015-03-28</h3>
<p>The &ldquo;official guide&rdquo; link is newer than this post, and you should favor its lessons over these.</p>
</aside>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">markdown</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">xml.etree</span> <span class="kn">import</span> <span class="n">ElementTree</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">gdata</span> <span class="kn">import</span> <span class="n">service</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">gdata</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">atom</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BlogPost</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">   <span class="s2">&#34;&#34;&#34;A single posting for a blog owned by a Blogger account
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">   &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">   &gt;&gt;&gt; post.body = &#39;This is a paragraph&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">   &gt;&gt;&gt; print post.body
</span></span></span><span class="line"><span class="cl"><span class="s2">   &lt;p&gt;This is a paragraph
</span></span></span><span class="line"><span class="cl"><span class="s2">   &lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">   &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">config</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">set_body</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bodyText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Stores plain text which will be used as the post body
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.set_body(&#39;This is a paragraph&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="n">bodyText</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">get_body</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Access a HTML-formatted version of the post body
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.set_body(&#39;This is a paragraph&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; print post.get_body()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &lt;p&gt;This is a paragraph
</span></span></span><span class="line"><span class="cl"><span class="s2">       &lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="n">markdown</span><span class="o">.</span><span class="n">markdown</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">body</span> <span class="o">=</span> <span class="nb">property</span><span class="p">(</span><span class="n">get_body</span><span class="p">,</span> <span class="n">set_body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">parseConfig</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">configText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Reads and stores the directives from the post&#39;s config header.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; import os
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; myConfig = os.linesep.join([&#34;key1: value1&#34;, &#34;key2: value2&#34;])
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.parseConfig(myConfig)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.config[&#39;key1&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#39;value1&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.config[&#39;key2&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#39;value2&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="n">textLines</span> <span class="o">=</span> <span class="n">configText</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">       <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">textLines</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">           <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">           <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">parsePost</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">postText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Parses the contents of a full post, including header and body.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; import os
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; myText = os.linesep.join([&#34;title: Test&#34;, &#34;--&#34;, &#34;This is a test&#34;])
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; post.parsePost(myText)
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; print post.config[&#39;title&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">       Test
</span></span></span><span class="line"><span class="cl"><span class="s2">       &gt;&gt;&gt; print post.body
</span></span></span><span class="line"><span class="cl"><span class="s2">       &lt;p&gt;This is a test
</span></span></span><span class="line"><span class="cl"><span class="s2">       &lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">       &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="n">header</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="n">postText</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;--&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">parseConfig</span><span class="p">(</span><span class="n">header</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="bp">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">sendPost</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Log into Blogger and submit my already parsed post&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">       <span class="n">blogger</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="n">GDataService</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="n">blogger</span><span class="o">.</span><span class="n">source</span> <span class="o">=</span> <span class="s1">&#39;post-to-blog.py_v01.0&#39;</span>
</span></span><span class="line"><span class="cl">       <span class="n">blogger</span><span class="o">.</span><span class="n">service</span> <span class="o">=</span> <span class="s1">&#39;blogger&#39;</span>
</span></span><span class="line"><span class="cl">       <span class="n">blogger</span><span class="o">.</span><span class="n">server</span> <span class="o">=</span> <span class="s1">&#39;www.blogger.com&#39;</span>
</span></span><span class="line"><span class="cl">       <span class="n">blogger</span><span class="o">.</span><span class="n">ProgrammaticLogin</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="n">query</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">       <span class="n">query</span><span class="o">.</span><span class="n">feed</span> <span class="o">=</span> <span class="s1">&#39;/feeds/default/blogs&#39;</span>
</span></span><span class="line"><span class="cl">       <span class="n">feed</span> <span class="o">=</span> <span class="n">blogger</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">query</span><span class="o">.</span><span class="n">ToUri</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">       <span class="n">blog_id</span> <span class="o">=</span> <span class="n">feed</span><span class="o">.</span><span class="n">entry</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">GetSelfLink</span><span class="p">()</span><span class="o">.</span><span class="n">href</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="n">entry</span> <span class="o">=</span> <span class="n">gdata</span><span class="o">.</span><span class="n">GDataEntry</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">       <span class="n">entry</span><span class="o">.</span><span class="n">author</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">atom</span><span class="o">.</span><span class="n">Author</span><span class="p">(</span><span class="n">atom</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">username</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">       <span class="n">entry</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">       <span class="n">entry</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Content</span><span class="p">(</span><span class="s1">&#39;html&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="n">blogger</span><span class="o">.</span><span class="n">Post</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="s1">&#39;/feeds/&#39;</span> <span class="o">+</span> <span class="n">blog_id</span> <span class="o">+</span> <span class="s1">&#39;/posts/default&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">runTests</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">   <span class="kn">import</span> <span class="nn">doctest</span>
</span></span><span class="line"><span class="cl">   <span class="n">doctest</span><span class="o">.</span><span class="n">testmod</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">   <span class="kn">from</span> <span class="nn">optparse</span> <span class="kn">import</span> <span class="n">OptionParser</span>
</span></span><span class="line"><span class="cl">   <span class="n">parser</span> <span class="o">=</span> <span class="n">OptionParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-D&#34;</span><span class="p">,</span> <span class="s2">&#34;--do-tests&#34;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s2">&#34;store_true&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;doTests&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Run built-in doctests&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-f&#34;</span><span class="p">,</span> <span class="s2">&#34;--file&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;filename&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Specify source file for post&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-u&#34;</span><span class="p">,</span> <span class="s2">&#34;--user&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;username&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Blogger account name&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-p&#34;</span><span class="p">,</span> <span class="s2">&#34;--password&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;password&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Blogger account password&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">doTests</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">       <span class="n">runTests</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">post</span> <span class="o">=</span> <span class="n">BlogPost</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">filename</span> <span class="ow">and</span> <span class="n">options</span><span class="o">.</span><span class="n">username</span> <span class="ow">and</span> <span class="n">options</span><span class="o">.</span><span class="n">password</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">       <span class="n">postFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">       <span class="n">post</span><span class="o">.</span><span class="n">parsePost</span><span class="p">(</span><span class="n">postFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="n">post</span><span class="o">.</span><span class="n">sendPost</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">username</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="n">main</span><span class="p">()</span></span></span></code></pre>
</figure><p>I haven&rsquo;t figured out tags/labels yet, but let&rsquo;s see how well this works. If you see this post, then I&rsquo;ll know that Part 1 of my little quest is complete!</p>
<p>Um &hellip; okay, no. That didn&rsquo;t work. I got a couple syntax and library errors, but after fixing those I still got an error code <code>bX-y33b4h</code>. <a href="http://groups.google.com/group/bloggerDev/browse_thread/thread/5788317a11c21268">This thread</a> showed me that I wasn&rsquo;t alone, but didn&rsquo;t do much to solve my problem. I&rsquo;ll have to look at the sample code that is in the python gdata distribution.</p>
<p>&hellip; later &hellip;</p>
<p>That posted, but I lost all the line breaks in my <code>pre</code> blocks. I decided to pick a new  template, and that seemed to do the trick. I will <em>definitely</em> be fine tuning that template as I move along.</p>
<p>At some point I&rsquo;ll figure out how to add labels.</p>
<h2 id="the-code-so-far">The Code So Far</h2>
<p>This is the code I used to publish this post. Definitely a work in progress - this version will submit your post as a draft, for example.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># post-to-blog.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">markdown</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">xml.etree</span> <span class="kn">import</span> <span class="n">ElementTree</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">gdata</span> <span class="kn">import</span> <span class="n">service</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">gdata</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">atom</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BlogPost</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;A single posting for a blog owned by a Blogger account
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">    &gt;&gt;&gt; post.body = &#39;This is a paragraph&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">    &gt;&gt;&gt; print post.body
</span></span></span><span class="line"><span class="cl"><span class="s2">    This is a paragraph
</span></span></span><span class="line"><span class="cl"><span class="s2">    
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">author</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">config</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__author</span> <span class="o">=</span> <span class="n">author</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__account</span> <span class="o">=</span> <span class="n">account</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__password</span> <span class="o">=</span> <span class="n">password</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">set_body</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bodyText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Stores plain text which will be used as the post body
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.set_body(&#39;This is a paragraph&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="n">bodyText</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">get_body</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Access a HTML-formatted version of the post body
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.set_body(&#39;This is a paragraph&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; print post.get_body()
</span></span></span><span class="line"><span class="cl"><span class="s2">        This is a paragraph
</span></span></span><span class="line"><span class="cl"><span class="s2">        
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">markdown</span><span class="o">.</span><span class="n">markdown</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">body</span> <span class="o">=</span> <span class="nb">property</span><span class="p">(</span><span class="n">get_body</span><span class="p">,</span> <span class="n">set_body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parseConfig</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">configText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Reads and stores the directives from the post&#39;s config header.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; import os
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; myConfig = os.linesep.join([&#34;key1: value1&#34;, &#34;key2: value2&#34;])
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.parseConfig(myConfig)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.config[&#39;key1&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#39;value1&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.config[&#39;key2&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#39;value2&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">textLines</span> <span class="o">=</span> <span class="n">configText</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">textLines</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parsePost</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">postText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Parses the contents of a full post, including header and body.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; import os
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; myText = os.linesep.join([&#34;title: Test&#34;, &#34;--&#34;, &#34;This is a test&#34;])
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post = BlogPost()
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.parsePost(myText)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; print post.config[&#39;title&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">        Test
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; print post.body
</span></span></span><span class="line"><span class="cl"><span class="s2">        This is a test
</span></span></span><span class="line"><span class="cl"><span class="s2">        
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">header</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="n">postText</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;--&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">parseConfig</span><span class="p">(</span><span class="n">header</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">sendPost</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Log into Blogger and submit my already parsed post&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Authenticate using ClientLogin</span>
</span></span><span class="line"><span class="cl">        <span class="n">blogger</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="n">GDataService</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__account</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">__password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">blogger</span><span class="o">.</span><span class="n">source</span> <span class="o">=</span> <span class="s1">&#39;post-to-blog.py_v01.0&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">blogger</span><span class="o">.</span><span class="n">service</span> <span class="o">=</span> <span class="s1">&#39;blogger&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">blogger</span><span class="o">.</span><span class="n">server</span> <span class="o">=</span> <span class="s1">&#39;www.blogger.com&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">blogger</span><span class="o">.</span><span class="n">ProgrammaticLogin</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Get the blog ID</span>
</span></span><span class="line"><span class="cl">        <span class="n">query</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">query</span><span class="o">.</span><span class="n">feed</span> <span class="o">=</span> <span class="s1">&#39;/feeds/default/blogs&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">feed</span> <span class="o">=</span> <span class="n">blogger</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">query</span><span class="o">.</span><span class="n">ToUri</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">blog_id</span> <span class="o">=</span> <span class="n">feed</span><span class="o">.</span><span class="n">entry</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">GetSelfLink</span><span class="p">()</span><span class="o">.</span><span class="n">href</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Create the entry to insert.</span>
</span></span><span class="line"><span class="cl">        <span class="n">entry</span> <span class="o">=</span> <span class="n">gdata</span><span class="o">.</span><span class="n">GDataEntry</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">entry</span><span class="o">.</span><span class="n">author</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">atom</span><span class="o">.</span><span class="n">Author</span><span class="p">(</span><span class="n">atom</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">__author</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">        <span class="n">entry</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Title</span><span class="p">(</span><span class="s1">&#39;xhtml&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">entry</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Content</span><span class="p">(</span><span class="n">content_type</span><span class="o">=</span><span class="s1">&#39;html&#39;</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">control</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Control</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">control</span><span class="o">.</span><span class="n">draft</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Draft</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;yes&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">entry</span><span class="o">.</span><span class="n">control</span> <span class="o">=</span> <span class="n">control</span>
</span></span><span class="line"><span class="cl">        <span class="n">blogger</span><span class="o">.</span><span class="n">Post</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="s1">&#39;/feeds/&#39;</span> <span class="o">+</span> <span class="n">blog_id</span> <span class="o">+</span> <span class="s1">&#39;/posts/default&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">runTests</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="kn">import</span> <span class="nn">doctest</span>
</span></span><span class="line"><span class="cl">    <span class="n">doctest</span><span class="o">.</span><span class="n">testmod</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="kn">from</span> <span class="nn">optparse</span> <span class="kn">import</span> <span class="n">OptionParser</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span> <span class="o">=</span> <span class="n">OptionParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-D&#34;</span><span class="p">,</span> <span class="s2">&#34;--do-tests&#34;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s2">&#34;store_true&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;doTests&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Run built-in doctests&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-f&#34;</span><span class="p">,</span> <span class="s2">&#34;--file&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;filename&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Specify source file for post&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">doTests</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">runTests</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span> <span class="o">=</span> <span class="n">BlogPost</span><span class="p">(</span><span class="s1">&#39;Brian Wisti&#39;</span><span class="p">,</span> <span class="s1">&#39;brian.wisti@gmail.com&#39;</span><span class="p">,</span> <span class="s1">&#39;mypassword&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">postFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">parsePost</span><span class="p">(</span><span class="n">postFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">sendPost</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Post: OS X Updates</title>
  <link>https://randomgeekery.org/post/2007/12/os-x-updates/</link>
  <pubDate>Thu, 20 Dec 2007 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2007/12/os-x-updates/</guid>
  <description>&lt;p&gt;Had to reinstall OS X late last night because something left our trusty iMac in an unbootable state and a simple Repair from the install disc wouldn’t do the trick. This happened after running a system update, but I’m not sure I can blame Apple for this one. I also happened to interrupt a syncing iPod during that session. It’s possible that either of those things could have whacked the filesystem tree. Of course, I would expect the iPod sync to whack the iPod. Still, I’m not exactly an expert on these matters.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>os-x</category>  <category>macos</category>  <category>blogspot</category>  <category>now</category> 
  <content:encoded><![CDATA[<p>Had to reinstall OS X late last night because something left our trusty iMac in an unbootable state and a simple Repair from the install disc wouldn&rsquo;t do the trick. This happened after running a system update, but I&rsquo;m not sure I can blame Apple for this one. I also happened to interrupt a syncing iPod during that session. It&rsquo;s possible that either of those things could have whacked the filesystem tree. Of course, I would expect the iPod sync to whack the iPod. Still, I&rsquo;m not exactly an expert on these matters.</p>
<p>That&rsquo;s not important, though. The file tree was only lightly whacked, and I was able to copy all of our important files to an external hard drive using the Terminal utility from the install disc. That process took a very long time. My guess is around 4 or 5 hours. The OS install was much quicker.</p>
<p>So now our iMac is nice and happy, and I can take the opportunity to review which apps I really want installed. I started with beta 2 of Firefox  3, which is <span style="font-style: italic;">significantly</span> snappier than 2.0 was. It&rsquo;s actually a useful browser again! Then it&rsquo;s time for fresh Python and Perl installs. I went the lazy way and grabbed ActiveState versions. Hey, ActivePerl 5.10 final is already out! That was uncharacteristically fast. I wonder if the other kids in the playground were making fun of them for being slow or something.</p>
<p>I also grabbed the freshest copy I could find of REBOL/Core and REBOL/View. View is much more polished than the last time I looked at it under OS X. See, I don&rsquo;t stay caught up on my OS X software much, since most of my time on the Mac is connecting over an ssh session. Little crises like this end up being a great chance for housecleaning.</p>
<p>Still some more stuff I want to do - fresh screen, vim, and Ruby for example. But we got the basics.</p>
<p>And all this was done with a nasty cold.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Wrap</title>
  <link>https://randomgeekery.org/post/2007/12/wrap/</link>
  <pubDate>Sat, 15 Dec 2007 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2007/12/wrap/</guid>
  <description>Pretty much the only use this got was keeping me warm while typing in the middle of winter. It wasn’t attractive enough that anybody wanted to wear it in public.</description>
   <category>post</category> 
   <category>post</category> 
   <category>knitting</category>  <category>scarf</category>  <category>craft</category> 
  <content:encoded><![CDATA[<p>Pretty much the only use this got was keeping me warm while typing in the middle of winter. It wasn&rsquo;t attractive enough that anybody wanted to wear it in public.</p>
<p><figure>
    <img src="/../../../attachments/img/2007/cover-2007-12-15.jpg" alt="attachments/img/2007/cover-2007-12-15.jpg"/></figure></p>
]]></content:encoded>
</item>
<item>
  <title>Post: Perl 5.10 beta Everywhere</title>
  <link>https://randomgeekery.org/post/2007/12/perl-510-beta-everywhere/</link>
  <pubDate>Wed, 05 Dec 2007 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2007/12/perl-510-beta-everywhere/</guid>
  <description>&lt;p&gt;I decided to install &lt;a href=&#34;https://randomgeekery.org/card/perl/&#34;&gt;Perl&lt;/a&gt; 5.10 on all my machines after the thrill of installing ActivePerl 5.10 beta on my Windows VM last night. Yes yes, it is true that strange things will thrill me.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>I decided to install <a href="/card/perl/">Perl</a> 5.10 on all my machines after the thrill of installing ActivePerl 5.10 beta on my Windows VM last night. Yes yes, it is true that strange things will thrill me.</p>
<p>I downloaded and compiled devel.tar.gz from perl.org for my Linux install. I just need to remember that the binary is called perl5.9.5 and &lsquo;use 5.010;&rsquo; will fail. I need to do <code>use feature qw(:5.10);</code> on that machine. Good to know, that was mostly an experiment.</p>
<p>The Mac gets the beta. I was so lazy tonight. How lazy was I? Rather than get up and walk eight feet to the Mac I did the install via ssh.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ssh 192.168.1.100
$ elinks activestate.com
(find and download the dmg of the beta)
$ hdiutil attach ActivePerl-5.10.0.1000-Beta-darwin-8.10.0-gcc-283192.dmg
$  sudo installer -pkg /Volumes/ActivePerl-5.10/ActivePerl-5.10.pkg/ -target / -verbose -dumplog &gt; ~/install.log 2&gt;&amp;1
$  /usr/local/ActivePerl-5.10/bin/perl -E &#39;say &#34;Hello&#34;;&#39;
Hello</code></pre>
</figure><p>Then I fired up vim and added some lines to my <code>~/.bash_profile</code></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">ACTIVEPERL</span><span class="o">=</span>/usr/local/ActivePerl-5.10
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$ACTIVEPERL</span>/site/bin:<span class="nv">$ACTIVEPERL</span>/bin:<span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PERLMANPATH</span><span class="o">=</span><span class="nv">$ACTIVEPERL</span>/site/man:<span class="nv">$ACTIVEPERL</span>/man:<span class="nv">$PERLMANPATH</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ . ~/.bash_profile
$ which perl
/usr/local/ActivePerl-5.10/bin/perl</code></pre>
</figure><p>Then I adjusted the settings in my vimrc so that Perl files are associated with the beta. That&rsquo;s a bit of specialized yet trivial monkey business though, so I won&rsquo;t bother to show it.</p>
<p>Oh yeah, I nearly forgot to unmount the dmg.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ hdiutil detach /Volumes/ActivePerl-5.10</code></pre>
</figure><p>Then I was so ridiculously lazy that I just spent 20 minutes describing a 3 minute process, just in case I need to install with a dmg via ssh again in the future.</p>]]></content:encoded>
</item>
<item>
  <title>Post: VMWare installed</title>
  <link>https://randomgeekery.org/post/2007/11/vmware-installed/</link>
  <pubDate>Tue, 27 Nov 2007 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2007/11/vmware-installed/</guid>
  <description>&lt;p&gt;Okay, now I feel good. I’ve got &lt;a href=&#34;http://www.vmware.com/&#34;&gt;VMWare&lt;/a&gt; installed with Windows XP as the guest OS. That means Office and who knows how many other apps are readily accessible for me. &lt;a href=&#34;http://rebol.com/&#34;&gt;REBOL&lt;/a&gt;, for starters. It’s supposed to be cross-platform, but REBOL is happiest by far under Windows.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>blogspot</category> 
  <content:encoded><![CDATA[<p>Okay, now I feel good. I&rsquo;ve got <a href="http://www.vmware.com/">VMWare</a> installed with Windows XP as the guest OS. That means Office and who knows how many other apps are readily accessible for me. <a href="http://rebol.com/">REBOL</a>, for starters. It&rsquo;s supposed to be cross-platform, but REBOL is happiest by far under Windows.</p>
<p>Incidental anecdotal comment: Windows XP running with 512 MB of RAM in a virtual machine is still significantly snappier than a &ldquo;real&rdquo; install of Vista and 2 GB of RAM. And I had turned most of the Vista eye candy off before getting fed up and installing Fedora.</p>]]></content:encoded>
</item>
<item>
  <title>Post: xcb_xlib_unlock issues - Java on Fedora</title>
  <link>https://randomgeekery.org/post/2007/11/xcb-xlib-unlock-issues-java-on-fedora/</link>
  <pubDate>Mon, 26 Nov 2007 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2007/11/xcb-xlib-unlock-issues-java-on-fedora/</guid>
  <description>&lt;p&gt;I decided to install the Sun JDK on my new Fedora install today on &lt;em&gt;Linux&lt;/em&gt;. Tried downloading the JDK/NetBeans self-installing bundle. It didn’t work. I got an error in xcb_xlib:xcb_xlib_unlock - something about a failed assertion. While running the installer. Drat.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>linux</category>  <category>java</category>  <category>i-fixed-it</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>I decided to install the Sun JDK on my new Fedora install today on <em>Linux</em>. Tried downloading the JDK/NetBeans self-installing bundle. It didn&rsquo;t work. I got an error in xcb_xlib:xcb_xlib_unlock - something about a failed assertion. While running the installer. Drat.</p>
<p>Installation required skipping the Netbeans IDE and just using the self-extracting JDK archive. Then, in order to get Swing to work, I had to remove Xinerama references from any copy of libmawt.so that was in my Java install. There&rsquo;s a sed script floating out there, but that wasn&rsquo;t working for me. Before I spent effort figuring out sed, I edited the files from vim.</p>
<pre>[brian@localhost ~]$ sudo vim /opt/jdk1.6.0_03/jre/lib/i386/xawt/libmawt.so
[brian@localhost ~]$ sudo vim /opt/jdk1.6.0_03/jre/lib/i386/motif21/libmawt.so
[brian@localhost ~]$ sudo vim /opt/jdk1.6.0_03/jre/lib/i386/headless/libmawt.so
[brian@localhost ~]$</pre>
<p>In each case I executed a simple regex</p>
<pre>:%s/XINERAMA/FAKEEXT/g</pre>
<p>It&rsquo;s the same as the sed script. I was too lazy to fix a short script that I will probably only use once.</p>
<p>Java&rsquo;s happy now, so I&rsquo;m going to go do a little coding.</p>]]></content:encoded>
</item>
<item>
  <title>Post: JRuby</title>
  <link>https://randomgeekery.org/post/2007/10/jruby/</link>
  <pubDate>Mon, 29 Oct 2007 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2007/10/jruby/</guid>
  <description>There is more than one way to experiment with card/Ruby. JRuby is a mature version of Ruby written for the Java Virtual Machine. This gives you a great deal of platform independence, since JRuby will comfortably run anywhere that card/Java runs. It also provides you with access to Java’s huge standard library. I thought I would take a little time to examine the JRuby implementation, which is nearing a 1.0 release.</description>
   <category>post</category> 
   <category>post</category> 
   <category>ruby</category>  <category>java</category>  <category>coolnamehere</category> 
  <content:encoded><![CDATA[<p>There is more than one way to experiment with <a href="/card/ruby/">card/Ruby</a>. <a href="http://jruby.org/">JRuby</a> is a mature version of Ruby written for the Java Virtual Machine. This gives you a great deal of platform independence, since JRuby will comfortably run anywhere that <a href="/card/java/">card/Java</a> runs. It also provides you with access to Java’s <em>huge</em> <a href="http://www.java.com/en/download/index.jsp">standard library</a>. I thought I would take a little time to examine the JRuby implementation, which is nearing a 1.0 release.</p>
<p>We need Java before we can do anything with JRuby, though. I already have 1.6.0 installed on my machine. If you don’t have Java, now is the time to <a href="http://www.java.com/en/download/index.jsp">get it</a>.</p>
<p>With Java safely installed on our machine, it is time to download and install JRuby. The <a href="http://jruby.org/download">download</a> is a simple archive file — most Windows users will want to go for the zipped version, since that is best understood by their system. I grabbed the tarred and gzipped archive of the binaries for myself. An automatic installer would be nice, but it isn’t the sort of thing that’s going to stop me.</p>
<p>The archive contains a <code>bin</code> folder containing several interesting files. The ones which interest me most are <code>jruby</code>, <code>jirb</code>, and <code>gem</code>. Supporting <a href="http://rubygems.org">Ruby Gems</a> means that we can install from the standard Ruby repositories. I need to put this folder at a sensible location on my system, and then put that location on my path.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ sudo mv jruby-1.2.0RC1/ /opt/jruby
$ export PATH=/opt/jruby/bin:$PATH
$ which jirb
/opt/jruby/bin/jirb</code></pre>
</figure><p>I got that right, so I can safely add the <code>export PATH</code> line to my <code>$HOME/.bash_profile</code> when I feel like it.</p>
<p>There’s probably a quick way to do it in Windows as well, but here’s what I know how to do.</p>
<ol>
<li>Open the Control Panel</li>
<li>Select &ldquo;System&rdquo;</li>
<li>Select &ldquo;Advanced system settings&rdquo;</li>
<li>Select &ldquo;Environment Variables&rdquo; button.</li>
<li>Select &ldquo;Path&rdquo; from System Variables if you have admin privileges,
otherwise from User variables.</li>
<li>Click &ldquo;Edit&rdquo;.</li>
<li>At the beginning of the &ldquo;Variable value&rdquo; field, put the location of
your <code>jruby\bin</code> folder: <code>C:\jruby\bin;C:\Ruby\bin;%PATH%</code></li>
<li>Click &ldquo;Ok&rdquo; until all those lovely dialog boxes go away.</li>
</ol>
<p>Now you should be able to access the JRuby commands from any console. The Windows command prompt is accessible via the Start Menu, under Accessories.</p>
<p>I want to make sure the Java interface works, so I’ll fire up the <code>jirb</code> shell —</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ jirb</code></pre>
</figure><p>— and test with a quick Swing &ldquo;Hello World&rdquo; dialog borrowing from the
<a href="http://www.roesler-ac.de/wolfram/hello.htm#Java-Swing">Hello World Repository</a>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >irb(main):001:0&gt; include_class(&#39;javax.swing.JOptionPane&#39;)
=&gt; [&#34;javax.swing.JOptionPane&#34;]
irb(main):002:0&gt; JOptionPane.showMessageDialog(nil, &#34;Hello World!&#34;)
=&gt; nil</code></pre>
</figure><p><figure>
    <img src="/../../../attachments/img/2007/jruby-hello.png" alt="attachments/img/2007/jruby-hello.png"/></figure>
JRuby &ldquo;Hello World&rdquo;</p>
<p>That popped up a simple &ldquo;Ok&rdquo; style dialog box with the message &ldquo;Hello World!&rdquo;.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: My Garter Stitch Hat</title>
  <link>https://randomgeekery.org/post/2007/10/my-garter-stitch-hat/</link>
  <pubDate>Mon, 15 Oct 2007 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2007/10/my-garter-stitch-hat/</guid>
  <description>This was a straightforward project, except they kind of abandon you at the end when they tell you to thread the tail yarn through what will be the top of the hat. I ended up getting things a little lumpy before I realized that the hat needed me to just run the yarn straight through that edge. I’m not 100% certain that I would make another one of these. Oh, and I had to make some slight adjustments because my wife and I have huge melon-heads.</description>
   <category>post</category> 
   <category>post</category> 
   <category>knitting</category>  <category>hat</category>  <category>craft</category> 
  <content:encoded><![CDATA[<h2>It's not the best hat I've made. It wasn't even the best hat I'd made when I made it.</h2><p><figure>
    <img src="/../../../attachments/img/2007/cover-2007-10-15.jpg" alt="attachments/img/2007/cover-2007-10-15.jpg"/></figure></p>
<p>This was a straightforward project, except they kind of abandon you at the end when they tell you to thread the tail yarn through what will be the top of the hat. I ended up getting things a little lumpy before I realized that the hat needed me to just run the yarn straight through that edge. I’m not 100% certain that I would make another one of these. Oh, and I had to make some slight adjustments because my wife and I have huge melon-heads. A mere 21” large was not going to fit us.</p>
<p>Still, it’s a good first project for the book and a heck of a lot more interesting than a scarf.</p>
<p>Update: I don’t know if it was the pattern or the yarn, but this hat lost what little shape it had in a couple months. Probably the yarn, but it’s still disheartening. Don’t think I’d make this again.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: I&#39;m too cheap to buy a radio alarm</title>
  <link>https://randomgeekery.org/post/2007/06/im-too-cheap-to-buy-a-radio-alarm/</link>
  <pubDate>Fri, 29 Jun 2007 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2007/06/im-too-cheap-to-buy-a-radio-alarm/</guid>
  <description>&lt;p&gt;I have trouble waking up on time. That’s probably because I have trouble getting to bed on time. You can tell I have trouble getting to bed on time, because it’s 1:40 in the morning right now and I’m writing a little blog post instead of going to bed.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>applescript</category>  <category>os-x</category>  <category>unix</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>I have trouble waking up on time. That&rsquo;s probably because I have trouble getting to bed on time. You can tell I have trouble getting to bed on time, because it&rsquo;s 1:40 in the morning right now and I&rsquo;m writing a little blog post instead of going to bed.</p>
<p>I&rsquo;m working on getting to sleep earlier. Hey, I might even be to bed by 2, instead of 3 or 3:30. Waking up takes a few tricks. Say, for example: an alarm clock that&rsquo;s too big for me to pick it up and stuff under my pillow like a gift for the tooth fairy. A loud annoying beeping gift. How about getting a bigger alarm and putting across the room? Well you would expect that to work, but apparently I can get up, walk over to the alarm, hit the snooze, pick up the alarm, bring it back to bed, and stuff the alarm under the bed for the tooth fairy again, all without actually waking up.</p>
<p>Yes, one issue is that the alarm clocks are battery powered. We live in a small, old apartment, and there just aren&rsquo;t enough outlets to go around. I had to unplug the lamp so that I could plug the computer in and type this.</p>
<p>But I have found a solution, or at least something which is not so easily circumvented. I&rsquo;ve turned our beautiful iMac G4 into a glorified radio alarm. Turns out that it was actually quite simple. First I needed an application that plays music. Right, that would be iTunes. Next, I need a radio station that both of us like. Why not just use a playlist? I don&rsquo;t know, I guess I actually wanted this to be a <span style="font-style: italic;">radio</span> alarm. I&rsquo;m odd. I do crazy things. I stash timepieces under my pillow, and blog in the middle of the night. Really, a radio station feed is not the strangest idea I&rsquo;ve had.</p>
<p>Should I use our local <a href="http://npr.org/">NPR</a>affiliate? No, I don&rsquo;t think so. Light jazz mixed with news and traffic reports are <em>not</em> going to make us jump out of bed all energized. I decided to use my favorite college station, <a href="/card/kexp/">card/KEXP</a>. The morning DJ is good, and
the morning selection is fantastic unless it&rsquo;s Winter and his <a href="http://www.sada.org.uk/">SAD</a>has kicked in.</p>
<p>I&rsquo;ve got my app, I&rsquo;ve got my radio station feed. Now a little AppleScript to automate the process of firing up and playing the station. I haven&rsquo;t experimented much with AppleScript, but there&rsquo;s no time like the present for putting a simple script together:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-applescript" data-lang="applescript"><span class="line"><span class="cl"><span class="c">-- PlayKEXP.applescript</span>
</span></span><span class="line"><span class="cl"><span class="c">--  Play the KEXP live stream</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&#34;iTunes&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">set</span> <span class="na">sound</span> <span class="na">volume</span> <span class="k">to</span> <span class="mi">60</span>
</span></span><span class="line"><span class="cl">  <span class="nb">play</span> <span class="nv">user</span> <span class="nv">playlist</span> <span class="s2">&#34;KEXP Live&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span> <span class="k">tell</span></span></span></code></pre>
</figure><p>I test it with <code>osascript PlayKEXP.applescript</code>. It works like a charm.</p>
<p>Now to set this alarm so it goes off at a set time every day. This is the part where I really love the UNIXy goodness of OS X. I can just use crontab. So here&rsquo;s my new crontab file:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      ># minute/hour/mday/month/wday/command
30  6   *   *   *   osascript /Users/brian/iTunesScripts/PlayKEXP.applescript</code></pre>
</figure><p>Then I make sure that crontab knows about the task:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ crontab mycrontab</code></pre>
</figure><p>This was my first time using crontab for a personal task as well. It&rsquo;s awesome. Every morning at 6:30 iTunes will set the volume and start playing the KEXP broadcast.</p>
<p>So there you have it. It&rsquo;s simple and it works. I&rsquo;m going to bed now.</p>]]></content:encoded>
</item>
</channel>
</rss>
