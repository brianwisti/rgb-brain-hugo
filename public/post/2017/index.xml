<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2017onRandom Geekery</title>
    <link>https://randomgeekery.org/post/2017/</link>
    <description>
      Recent contentin2017 on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Mon, 22 Jan 2024 14:33:49 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/post/2017/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Taskwarrior Priorities</title>
  <link>https://randomgeekery.org/post/2017/12/taskwarrior-priorities/</link>
  <pubDate>Mon, 25 Dec 2017 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/12/taskwarrior-priorities/</guid>
  <description>task report with a column for priority levels
Merry Christmas! Time to organize my card/Taskwarrior tasks.
My more focused approach to Taskwarrior is working well. I add a task when I get an idea, and mark it done sometime after I finish. Annotations let me add noteworthy details. Tags and projects help both for organizing tasks and describing them. A task bubbles up to the top of task next as I add more information to it.</description>
   <category>post</category> 
   <category>post</category> 
   <category>taskwarrior</category>  <category>tools</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2017/cover-2017-12-25.png" alt="attachments/img/2017/cover-2017-12-25.png"/></figure>
<code>task</code> report with a column for priority levels</p>
<p>Merry Christmas! Time to organize my <a href="/card/taskwarrior/">card/Taskwarrior</a> tasks.</p>
<p>My more focused approach to Taskwarrior is working well. I add a task when I get an idea, and mark it <code>done</code> sometime after I finish. Annotations let me add noteworthy details. Tags and projects help both for organizing tasks and describing them. A task bubbles up to the top of <code>task next</code> as I add more information to it.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task -work
[task next ( -work )]

ID Age  Project Tag              Description                                   Urg
26 9min fitbit  health           get fitbit data                               2.7
                                   2017-12-24 can only grab 31 days at a time
                                   2017-12-24 want all data back to 2016-01
 2 3w   ruana   blog knitting    blog about vest                              2.02
27 8min fitbit  health           see activity when closest to weight goal      1.8
28 7min fitbit  health           make 2018 exercise plan                       1.8
24 3d           home             living room curtains                         1.62
                                   2017-12-20 dimensions 94.25 wide 56.5 high
 3 3w           blog taskwarrior due dates, recurrences                       1.02
12 9d           crochet home     door panel                                   0.95
15 7d           learn music      submit to acousticbrainz                     0.94
18 6d           blog taskwarrior Priorities                                   0.93
 1 3w           crochet          fingerless gloves                            0.92
 8 2w           home             move my stuff upstairs                       0.88
10 10d          music            experiment with setting itunes play stats    0.85
11 10d          blog             create links section                         0.85
16 6d           music            music server                                 0.83
17 6d           learn            try timewarrior                              0.83
19 6d           home             make flylady daily and weekly list           0.83
20 4d           music            merge rating files                           0.82
21 4d           music            filter duplicate tracks                      0.82
22 4d           knitting         circular hat variant                         0.82
25 3d           music            restore backup                               0.82</code></pre>
</figure><p>That bubbling behavior gets in the way sometimes.</p>
<p>I created some tasks for playing with my Fitbit data and added relevant annotations. Taskwarrior follows a rule of &ldquo;it must be important if you’re talking so much about it,&rdquo;&quot; and dutifully puts those tasks high on the list.</p>
<p>Thing is, right now I care more about fixing my music library. Long story, but the moral of <em>that</em> tale is be careful with Beets and the <a href="http://beets.readthedocs.io/en/v1.4.6/plugins/duplicates.html">Duplicates</a> plugin. I have slightly different versions of the library on each of my machines, and a backup with all of the music but none of the Beets import information. I could make a project out of it, but it’s more of a thing I poke at when I can.</p>
<p>Anyways — I want my <code>next</code> report to more closely resemble my current priorities. I can do that by manually setting <a href="https://taskwarrior.org/docs/priority.html">Priority</a> for each of my tasks.</p>
<h2 id="task-priority">Task priority</h2>
<p>Priority can be added to any task as an attribute, using <code>priority:</code> followed by the Priority you wish to assign. Priority also works as a filter for your reports.
The default choices are <code>H</code>, <code>M</code>, <code>L</code>, and none at all — to remove a Priority.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task add return library books priority:M
Created task 29.
$ task modify 18 priority:H
Modifying task 18 &#39;Priorities&#39;.
Modified 1 task.</code></pre>
</figure><p>Looking at the first few entries of <code>next</code> shows me the effect of setting Priority.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task -work
[task next ( -work )]

ID Age  P Project Tag              Description                                   Urg
18 6d   H         blog taskwarrior Priorities                                   6.93
29 3min M                          return library books                          3.9
26 1h     fitbit  health           get fitbit data                               2.7
                                     2017-12-24 can only grab 31 days at a time
                                     2017-12-24 want all data back to 2016-01</code></pre>
</figure><p>I see a new column reflecting that I now describe some tasks with Priority. Over on the end, <a href="https://taskwarrior.org/docs/urgency.html">Urgency</a> jumps for tasks with any Priority at all. <code>H</code> Priority tasks get a large boost. But what do these Priority values <em>mean</em>?</p>
<p>Priority means something different for everyone. The basic idea is the higher a task’s Priority is, the more important it is to me.</p>
<p>Here’s how I use Priority values for now.</p>
<table>
<thead>
<tr>
<th>Priority</th>
<th>Represents</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>H</code></td>
<td>High</td>
<td>I am — or want to be — working on it right now.</td>
</tr>
<tr>
<td><code>M</code></td>
<td>Medium</td>
<td>I want to work on this soon.</td>
</tr>
<tr>
<td><code>L</code></td>
<td>Low</td>
<td>I want to work on this eventually.</td>
</tr>
<tr>
<td><em>empty</em></td>
<td>None</td>
<td>I haven’t thought about it.</td>
</tr>
</tbody>
</table>
<p>My usage will change as I learn more about Taskwarrior but this works.</p>
<p>I don’t need to think too much about priority when I’m just adding to the idea bucket. Probably a good idea to periodically review unprioritized tasks and assign a Priority or delete them if they won’t ever be worth my time.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task -work priority:
[task next ( -work priority: )]

ID Age Project Tag              Description                                   Urg
26 1h  fitbit  health           get fitbit data                               2.7
                                  2017-12-24 can only grab 31 days at a time
                                  2017-12-24 want all data back to 2016-01
 2 3w  ruana   blog knitting    blog about vest                              2.02
27 1h  fitbit  health           see activity when closest to weight goal      1.8
28 1h  fitbit  health           make 2018 exercise plan                       1.8
24 3d          home             living room curtains                         1.62
                                  2017-12-20 dimensions 94.25 wide 56.5 high
 3 3w          blog taskwarrior due dates, recurrences                       1.02
12 9d          crochet home     door panel                                   0.95
15 7d          learn music      submit to acousticbrainz                     0.94
 1 3w          crochet          fingerless gloves                            0.92
 8 2w          home             move my stuff upstairs                       0.88
10 10d         music            experiment with setting itunes play stats    0.85
11 10d         blog             create links section                         0.85
16 6d          music            music server                                 0.83
17 6d          learn            try timewarrior                              0.83
19 6d          home             make flylady daily and weekly list           0.83
20 5d          music            merge rating files                           0.83
21 5d          music            filter duplicate tracks                      0.83
22 5d          knitting         circular hat variant                         0.83
25 3d          music            restore backup                               0.82

19 tasks</code></pre>
</figure><p>Give me a minute while I assign priorities.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task -work
[task next ( -work )]

ID Age P Project Tag              Description                                      Urg
18 7d  H         blog taskwarrior Priorities                                      6.94
25 4d  H         music            restore backup                                  6.82
26 1d  M fitbit  health           get fitbit data                                 6.61
                                    2017-12-24 can only grab 31 days at a time
                                    2017-12-24 want all data back to 2016-01
 2 3w  M ruana   blog knitting    blog about vest                                 5.92
 1 3w  M         crochet          fingerless gloves                               4.83
 8 2w  M         home             move my stuff upstairs                          4.79
19 7d  M         home             make flylady daily and weekly list              4.74
29 23h M                          return library books                             4.7
                                    2017-12-25 due 2017-12-30
28 1d  L fitbit  health           make 2018 exercise plan                         4.41
                                    2017-12-24 keep on what I do now is an option
27 1d  L fitbit  health           see activity when closest to weight goal        3.61
24 4d  L         home             living room curtains                            3.42
                                    2017-12-20 dimensions 94.25 wide 56.5 high
 3 3w  L         blog taskwarrior due dates, recurrences                          2.82
12 10d L         crochet home     door panel                                      2.75
15 8d  L         learn music      submit to acousticbrainz                        2.74
10 11d L         music            experiment with setting itunes play stats       2.66
11 11d L         blog             create links section                            2.66
16 7d  L         music            music server                                    2.64
17 7d  L         learn            try timewarrior                                 2.64
20 5d  L         music            merge rating files                              2.63
21 5d  L         music            filter duplicate tracks                         2.63
22 5d  L         knitting         circular hat variant                            2.63

21 tasks</code></pre>
</figure><p>I could have added due date information to the library task rather than an annotation, but I’m sticking with this approach of a few features at a time. Otherwise I’ll try to learn everything at one sitting, get overwhelmed and distracted, then abandon the whole thing.</p>
<p>That said, it looks like next I should learn <a href="https://taskwarrior.org/docs/dates.html">dates</a> in Taskwarrior.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Duotone Panel</title>
  <link>https://randomgeekery.org/post/2017/12/duotone-panel/</link>
  <pubDate>Tue, 19 Dec 2017 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/12/duotone-panel/</guid>
  <description>&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;https://randomgeekery.org/../../../attachments/img/2017/cover-2017-12-19.jpg&#34; alt=&#34;attachments/img/2017/cover-2017-12-19.jpg&#34;/&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Last month I read an article about &lt;a href=&#34;https://muddycolors.blogspot.com/2012/08/duotone-illustrations.html&#34;&gt;duotone illustrations&lt;/a&gt; and decided to try
a version of the technique myself someday. Today was that day.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>drawing</category>  <category>procreate</category>  <category>celtic</category>  <category>zentangle</category>  <category>craft</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2017/cover-2017-12-19.jpg" alt="attachments/img/2017/cover-2017-12-19.jpg"/></figure></p>
<p>Last month I read an article about <a href="https://muddycolors.blogspot.com/2012/08/duotone-illustrations.html">duotone illustrations</a> and decided to try
a version of the technique myself someday. Today was that day.</p>
<p><a href="https://en.wikipedia.org/wiki/Duotone">Duotone</a> uses two colors — usually black and a color such as blue or red — to make an image. It was popular for a while in 20th Century illustration because it cost less than full color printing. Skilled duotone illustrators like <a href="https://americanillustration.org/project/mead-schaeffer/">Mead Schaeffer</a> produced visually arresting images.</p>
<p><figure>
    <img src="/attachments/img/2017/mead-schaeffer-red.jpg" alt="&ldquo;Red&rdquo; by Mead Schaeffer"/></figure></p>
<p><em>Illustration by Mead Schaeffer via <a href="https://muddycolors.blogspot.com/2012/08/duotone-illustrations.html">Muddy Colors</a></em></p>
<p>I wanted to manually create duotone images in sketch apps like Procreate. Time to describe what I came up with.</p>
<p>This post isn’t a tutorial, but the information may be useful to you. For that matter it may be useful to <em>me</em>. That’s really what this whole site is about, after all: making life easier for future me, and hopefully maybe you too.</p>
<p>I had a couple of self-imposed limitations while making this. I deliberately chose to only use flat color for this experiment — no shading to speak of. I also used a smaller canvas than usual. It wasn’t a technical limitation, but it did limit the detail I could put into the image.</p>
<p>In retrospect, that’s probably a good thing for this experiment. I ended up with about 50 layers the way I put things together, and this might have slowed my iPad down with a large image.</p>
<h2 id="linework">Linework</h2>
<p>The first finished step is a solid black and white image. It started out as a
knotwork panel demonstration, but somewhere along the way I decided the panel
needed extras. Most of those extras came from <a href="https://www.goodreads.com/book/show/26311641-the-tangles-of-kells">Tangles of Kells</a>.</p>
<p><figure>
    <img src="/attachments/img/2017/duotone-panel-linework.png" alt="Linework"/></figure></p>
<h2 id="values">Values</h2>
<p>Then I put the values in, working from a grayscale palette. Nothing fancy going on here. The background is darker, the foreground is lighter, with a couple small variations along the way.</p>
<p>I set the drop shadow layers to &ldquo;Soft Light&rdquo; so they wouldn’t obscure whatever was beneath them.</p>
<p><figure>
    <img src="/attachments/img/2017/duotone-panel-values.png" alt="Values"/></figure></p>
<h2 id="color">Color</h2>
<p>For color, I created a new layer under the value layers, which I set to &ldquo;Multiply.&rdquo;</p>
<p>Here’s what that looked like, with everything else but linework cut out.</p>
<p><figure>
    <img src="/attachments/img/2017/duotone-panel-color.png" alt="Color"/></figure></p>
<p>I had an initial stage where all the shadows were hatched lines. Duotone didn’t occur to me until near the end of linework. I’ll try value-based shading for everything in some future sketches.</p>
<p>In order to have value mix nicely with color, I put each color layer beneath its value layer and set the value layer’s mode to &ldquo;Multiply.&rdquo;</p>
<h2 id="final">Final</h2>
<p>And that’s how I ended up with this.</p>
<p><figure>
    <img src="/attachments/img/2017/cover-2017-12-19.jpg" alt="Final image"/></figure></p>
<h2 id="what-now">What now?</h2>
<p>That was fun.</p>
<p>I want to explore duotone more, trying some specific ideas.</p>
<ul>
<li>Shading instead of value blocks.</li>
<li>Use higher contrasting values. This ended up just a tiny bit muddy to my eyes.</li>
<li>Multiple color layers — tritone?</li>
<li>Mixing grayscale values and color values in a style more similar to the  duotone illustrations I like so much.</li>
</ul>]]></content:encoded>
</item>
<item>
  <title>Post: Taskwarrior</title>
  <link>https://randomgeekery.org/post/2017/12/taskwarrior/</link>
  <pubDate>Sat, 16 Dec 2017 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/12/taskwarrior/</guid>
  <description>task -work report showing everything but work tasks
I ended up with a mess after half a year trying to use every feature of card/Taskwarrior. It’s time to focus on building solid knowledge one step at a time.
I sat on this draft for a couple weeks. Rather than change task dates to make it look like I wrote this yesterday, I’ll leave task output as-is. Otherwise I’ll have to change those details every time I revisit Taskwarrior on the blog.</description>
   <category>post</category> 
   <category>post</category> 
   <category>taskwarrior</category>  <category>tools</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2017/cover-2017-12-16.png" alt="attachments/img/2017/cover-2017-12-16.png"/></figure>
<code>task -work</code> report showing everything but work tasks</p>
<p>I ended up with a mess after half a year trying to use <em>every feature</em> of <a href="/card/taskwarrior/">card/Taskwarrior</a>. It’s time to focus on building solid knowledge one step at a time.</p>
<p>I sat on this draft for a couple weeks. Rather than change task dates to make it look like I wrote this yesterday, I’ll leave <code>task</code> output as-is. Otherwise I’ll have to change those details every time I revisit Taskwarrior on the blog.</p>
<h2 id="what-is-taskwarrior">What Is Taskwarrior?</h2>
<p>Taskwarrior helps you manage tasks and ideas from the command line. It provides a convenient interface, assuming your idea of convenient is a rich collection of commands you can enter, customize, and pipe to other utilities.</p>
<blockquote>
<p>[!NOTE] What&rsquo;s wrong with Org mode?
Nothing at all! <a href="/card/org/">card/Org</a> provides similar functionality and more for GNU Emacs users. Taskwarrior focuses narrowly on task management and reporting, while Org is also a time tracker, note-taking tool, markup language for publishing, and more.</p>
<p>Taskwarrior works better than Org mode for people that don’t live in Emacs. Wait. <a href="https://github.com/jceb/vim-orgmode">Vim-OrgMode</a> exists. I should be more general: Taskwarrior works better for people that don’t live in their editor.</p>
<p>Ultimately it comes down to personal taste.I enjoy using Taskwarrior today.</p>
</blockquote>
<h2 id="starting-from-scratch">Starting from scratch</h2>
<p>I archived my confused earlier attempts at usage. Here I am with a fresh slate.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task –-version
2.5.1
$ task
[task next] No matches.</code></pre>
</figure><p>When you don’t tell <code>task</code> what you want, it assumes by default that you want to see your <code>next</code> report. You can customize many aspects of Taskwarrior, but for my own understanding I will not look at customization today.</p>
<h2 id="the-tutorial-summarized">The Tutorial, Summarized</h2>
<p>Let’s review the <a href="https://taskwarrior.org/docs/30second.html">30-Second Tutorial</a>.</p>
<dl>
<dt><a href="https://taskwarrior.org/docs/commands/add.html"><code>add</code></a></dt>
<dd>creates a new task</dd>
<dt><a href="https://taskwarrior.org/docs/commands/done.html"><code>done</code></a></dt>
<dd>marks a task as complete</dd>
<dt><code>delete</code></dt>
<dd>marks a task as deleted</dd>
<dt><code>next</code></dt>
<dd>show a <a href="https://taskwarrior.org/docs/report.html">report</a> listing tasks in decreasing order of Urgency</dd>
</dl>
<p>Taskwarrior calculates <a href="https://taskwarrior.org/docs/urgency.html">Urgency</a> based on multiple factors, including your own <code>priority:</code> ranking. I plan to ignore Urgency and <code>priority</code> until life no longer seems sorted into &ldquo;it’s on fire&rdquo; and &ldquo;it’s just an idea.&rdquo;</p>
<p>I’ll add a few tasks.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task add knit fingerless gloves
Created task 1.
$ task add write about Taskwarrior
Created task 2.
$ task add get a size G crochet hook
Created task 3.
$ task next

ID Age Description               Urg
 1 29s knit fingerless gloves       0
 2 14s write about Taskwarrior      0
 3 1s  get a size G crochet hook    0</code></pre>
</figure><p>I added that last one about the crochet hook to convince myself to get off my tush and go get that hook from my friendly Local Yarn Store. Give me a minute.</p>
<p>Okay, done.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task 3 done
Completed task 3 &#39;get a size G crochet hook&#39;.
Completed 1 task.</code></pre>
</figure><p>What about <code>delete</code>? Say I want to see a movie this weekend.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task add go see that movie
Created task 3.</code></pre>
</figure><p>Turns out it’s not in theaters anymore. I need to pay closer attention to these things.</p>
<p><code>delete</code> lets you abandon a task.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task 3 delete
Delete task 3 &#39;go see that movie&#39;? (yes/no) yes
Deleting task 3 &#39;go see that movie&#39;.
Deleted 1 task.</code></pre>
</figure><p>Those are the core Taskwarrior commands. It’s enough to make and manage a useful task list.</p>
<h2 id="a-few-more-core-commands">A few more &ldquo;core&rdquo; commands</h2>
<p>I consider a few more features core to my own Taskwarrior experience.</p>
<ul>
<li>editing a task</li>
<li>recording a completed task that I never added</li>
<li>reporting my completed tasks</li>
</ul>
<h3 id="modify"><code>modify</code></h3>
<p>I see a typo in my task descriptions. <code>modify</code> helps there.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task 1 modify crochet fingerless gloves
Modifying task 1 &#39;crochet fingerless gloves&#39;.
Modified 1 task.</code></pre>
</figure><h3 id="log-and-completed"><code>log</code> and <code>completed</code></h3>
<p>I don’t just track things I want to do. I track things I did. I feel better on days when I barely dent my <code>next</code> list but can point to other accomplishments.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task log mailed presents
Logged task 0ef63b0b-ba36-495c-8684-d2c45258ea3d.</code></pre>
</figure><p>The <code>completed</code> report shows my completed tasks, including those I logged and those marked <code>done</code>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task completed

ID UUID     Created    Completed  Age Description
 - 20334a63 2017-12-01 2017-12-01 20h get a size G crochet hook
 - 0ef63b0b 2017-12-02 2017-12-02 19s mailed presents

2 tasks</code></pre>
</figure><p>Taskwarrior tells you all sorts of interesting things about your tasks with a wealth of reports] Explore them!</p>
<h2 id="projects">Projects</h2>
<p>It can be demoralizing to have one huge task that just sits there forever, even
though you work on it and make progress. A good way to keep yourself motivated is to split it into smaller subtasks. Taskwarrior does that with projects.</p>
<p>Let’s go with a knit vest that I have <em>almost</em> finished.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task add knit vest project:ruana
Created task 3.
The project &#39;ruana&#39; has changed.  Project &#39;ruana&#39; is 0% complete (1 task remaining).
$ task next

ID Age Project Description                Urg
 3 3s  ruana   knit vest                    1
 1 20h         crochet fingerless gloves    0
 2 20h         write about Taskwarrior      0</code></pre>
</figure><p>Hey look a column for <code>Urgency</code>. Ignoring that.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task add finish vest project:ruana
$ task add knit belt project:ruana
$ task add block vest project:ruana
$ task add blog about vest project:ruana</code></pre>
</figure><p>Knitting the vest itself is still the largest task, but at least I have some additional information about the other tasks involved in the project.</p>
<p>What does my task list look like now?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task next

ID Age  Project Description                Urg
 3 4min ruana   knit vest                    1
 4 3min ruana   finish vest                  1
 5 3min ruana   knit belt                    1
 6 3min ruana   block vest                   1
 7 2s   ruana   blog about vest              1
 1 20h          crochet fingerless gloves    0
 2 20h          write about Taskwarrior      0</code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>For the curious: &ldquo;finishing&rdquo; a knit project is a distinct step that involves sewing in the loose ends.</p>
</blockquote>
<h2 id="tags">Tags</h2>
<p>Taskwarrior lets us add text tags to describe aspects of the task that may be useful beyond its description or project.</p>
<p>Indicate a tag by prefixing it with <code>+</code>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task modify 1 &#43;crochet
Modifying task 1 &#39;crochet fingerless gloves&#39;.
Modified 1 task.</code></pre>
</figure><p>The <code>next</code> report includes a new column for tags now.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task next

ID Age  Project Tag     Description                Urg
 3 7min ruana           knit vest                    1
 4 7min ruana           finish vest                  1
 5 6min ruana           knit belt                    1
 6 6min ruana           block vest                   1
 7 3min ruana           blog about vest              1
 1 20h          crochet crochet fingerless gloves  0.8
 2 20h                  write about Taskwarrior      0</code></pre>
</figure><p>Oh look. Assigning a tag gave an <code>Urgency</code> to task the <code>+crochet</code> task. Still ignoring it.</p>
<p>I added little information putting <code>+crochet</code> on a task that I already described with &ldquo;crochet,&rdquo; but tags make convenient filters for Taskwarrrior commands and reports.</p>
<h3 id="filters">Filters</h3>
<p>Filters let you work with a defined set of tasks.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task 3-7 modify &#43;knitting
  - Tags will be set to &#39;knitting&#39;.
Modify task 3 &#39;knit vest&#39;? (yes/no/all/quit) all
Modifying task 3 &#39;knit vest&#39;.
Modifying task 4 &#39;finish vest&#39;.
Modifying task 5 &#39;knit belt&#39;.
Modifying task 6 &#39;block vest&#39;.
Modifying task 7 &#39;blog about vest&#39;.
Modified 5 tasks.
Project &#39;ruana&#39; is 0% complete (5 of 5 tasks remaining).</code></pre>
</figure><p>What if the tasks aren’t right next to each other? No problem.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task 2,7 modify &#43;blog
Modifying task 2 &#39;write about Taskwarrior&#39;.
Modifying task 7 &#39;blog about vest&#39;.
Modified 2 tasks.
Project &#39;ruana&#39; is 0% complete (5 of 5 tasks remaining).</code></pre>
</figure><p>How have these modifications changed my <code>next</code> report?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task next

ID Age   Project Tag           Description                Urg
 7 8min  ruana   blog knitting blog about vest            1.9
 3 12min ruana   knitting      knit vest                  1.8
 4 12min ruana   knitting      finish vest                1.8
 5 12min ruana   knitting      knit belt                  1.8
 6 11min ruana   knitting      block vest                 1.8
 1 20h           crochet       crochet fingerless gloves  0.8
 2 20h           blog          write about Taskwarrior    0.8</code></pre>
</figure><p>Filters work on reports, too.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task 3-7 next

ID Age   Project Tag           Description      Urg
 7 11min ruana   blog knitting blog about vest  1.9
 3 15min ruana   knitting      knit vest        1.8
 4 15min ruana   knitting      finish vest      1.8
 5 15min ruana   knitting      knit belt        1.8
 6 14min ruana   knitting      block vest       1.8

5 tasks</code></pre>
</figure><p>What if I filter to a single ID without a command?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task 1
No command specified - assuming &#39;information&#39;.

Name          Value
ID            1
Description   crochet fingerless gloves
Status        Pending
Entered       2017-12-01 14:49:32 (20h)
Last modified 2017-12-02 11:08:25 (18min)
Tags          crochet
Virtual tags  PENDING READY TAGGED UNBLOCKED
UUID          fadd9280-6796-4fe9-9f97-0a3ff0f5fd4b
Urgency        0.8

    tags    0.8 *    1 =    0.8
                         ------
                            0.8

Date                Modification
2017-12-02 10:51:12 Description changed from &#39;knit fingerless gloves&#39; to &#39;crochet fingerless gloves&#39;.
2017-12-02 11:08:25 Tags set to &#39;crochet&#39;.</code></pre>
</figure><p>I get a lot of stuff I’m not ready for yet. I’ll come back to this some other day.</p>
<p>Filters don’t have to be task IDs. Use plain text to filter based on task description.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task gloves
[task next ( gloves )]

ID Age Tag     Description                Urg
 1 20h crochet crochet fingerless gloves  0.8

1 task</code></pre>
</figure><p>Prefix with <code>+</code> for a tag filter.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task &#43;blog
[task next ( &#43;blog )]

ID Age   Project Tag           Description             Urg
 7 12min ruana   blog knitting blog about vest          1.9
 2 20h           blog          write about Taskwarrior  0.8

2 tasks</code></pre>
</figure><p>Prefix with <code>-</code> to show tasks that <em>do not</em> have a particular tag.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task -knitting
[task next ( -knitting )]

ID Age Tag     Description               Urg
 1 20h crochet crochet fingerless gloves  0.8
 2 20h blog    write about Taskwarrior    0.8</code></pre>
</figure><p>Prefix with <code>project:</code> to list tasks associated with a particular project.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task project:ruana
[task next ( project:ruana )]

ID Age   Project Tag           Description     Urg
 7 12min ruana   blog knitting blog about vest  1.9
 3 16min ruana   knitting      knit vest        1.8
 4 15min ruana   knitting      finish vest      1.8
 5 15min ruana   knitting      knit belt        1.8
 6 15min ruana   knitting      block vest       1.8

5 tasks</code></pre>
</figure><p>Org mode lets you write quick notes about a task. Can Taskwarrior do that?</p>
<p>Of course it can!</p>
<h3 id="annotations">Annotations</h3>
<p>Annotations let you add a one line note to a task.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task knit vest annotate pattern at http://www.redheart.com/free-patterns/ruana-style-vest
Annotating task 3 &#39;knit vest&#39;.
Annotated 1 task.
Project &#39;ruana&#39; is 0% complete (5 of 5 tasks remaining).</code></pre>
</figure><p>Taskwarrior presents these annotations with their tasks in reports.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task project:ruana
[task next ( project:ruana )]

ID Age   Project Tag           Description                                                                    Urg
 3 24min ruana   knitting      knit vest                                                                       2.6
                                 2017-12-02 pattern at http://www.redheart.com/free-patterns/ruana-style-vest
 7 20min ruana   blog knitting blog about vest                                                                 1.9
 4 24min ruana   knitting      finish vest                                                                     1.8
 5 24min ruana   knitting      knit belt                                                                       1.8
 6 24min ruana   knitting      block vest                                                                      1.8</code></pre>
</figure><p>Notice how a task’s Urgency automatically increases as we add more information to it? I know — I’m still ignoring it, but it does make it convenient that the tasks I spend more time on in Taskwarrior get pushed to the top.</p>
<p>Anyways I’m done knitting the vest.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task 3 done
Completed task 3 &#39;knit vest&#39;.
Completed 1 task.
The project &#39;ruana&#39; has changed.  Project &#39;ruana&#39; is 20% complete (4 of 5 tasks remaining).</code></pre>
</figure><blockquote>
<p><strong><code>denotate</code></strong></p>
<p>A couple days after posting this article I made an annotation on the wrong task.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task annotate 5 edges done</code></pre>
</figure><p>That’s when I learned about the <code>denotate</code> command, which removes a matching annotation from a task.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task denotate 5 edges done
$ task annotate 3 edges done</code></pre>
</figure><p>Good to know!</p>
</blockquote>
<h2 id="oops">Oops</h2>
<p>Let’s go shopping!</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task add groceries &#43;misc project:home
Created task 7.
The project &#39;home&#39; has changed.  Project &#39;home&#39; is 0% complete (1 task remaining).</code></pre>
</figure><p>Sometimes I need to remove a tag, or remove a task from a project.</p>
<p>Prefixing the tag with <code>-</code> in a <code>modify</code> command removes that tag.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task groceries modify -misc &#43;food
Modifying task 7 &#39;groceries&#39;.
Modified 1 task.
Project &#39;home&#39; is 0% complete (1 task remaining).</code></pre>
</figure><p><code>home</code> isn’t a project — at least not in this context. Assigning an empty project removes a task’s project connection.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task groceries modify project:
Modifying task 7 &#39;groceries&#39;.
Modified 1 task.</code></pre>
</figure><h2 id="summary">Summary</h2>
<p>Here’s what I have so far for my task list, without <code>work</code> stuff because you don’t need to know about that.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task -work
[task next ( -work )]

ID Age   Project Tag              Description                                      Urg
 6 1h    ruana   blog knitting    blog about vest                                   1.9
 3 1h    ruana   knitting         finish vest                                       1.8
 4 1h    ruana   knitting         knit belt                                         1.8
 5 1h    ruana   knitting         block vest                                        1.8
 2 21h           blog taskwarrior Taskwarrior tags, projects, annotations, filters  1.7
                                    2017-12-02 basic flow done
 7 22min         food shopping    groceries                                         1.7
                                    2017-12-02 shopping list done
 8 14min         blog taskwarrior Taskwarrior due dates, priorities, recurrences    0.9
15 5min          clothes shopping get winter coat                                   0.9
 1 21h           crochet          crochet fingerless gloves                         0.8
16 9s                             visit library                                       0

10 tasks</code></pre>
</figure><p>That’s enough for now. I feel comfortable using Taskwarrior to manage and describe my tasks. Next time I write about Taskwarrior I might choose to focus on tiny pieces so I can post more often.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task 2 done
Completed task 2 &#39;Taskwarrior tags, projects, annotations, filters&#39;.
Completed 1 task.
You have more urgent tasks.</code></pre>
</figure><p>Oh hush, you. I’ll get to <code>Urgency</code> when I feel like it.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Knotwork Practice</title>
  <link>https://randomgeekery.org/post/2017/12/knotwork-practice/</link>
  <pubDate>Fri, 15 Dec 2017 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/12/knotwork-practice/</guid>
  <description>This started with practicing a knotwork pattern from Celtic Art: The Methods of Construction, and ended up as an exercise in how long I could add stuff before I got bored. Thirteen hours. Not bad.
Not in a row, of course.
Oh and I threw in a couple tangle elements from The Tangles of Kells.
I might be ready to try drawing things on purpose again. Usually it’s just that my hands get itchy when I see blank space.</description>
   <category>post</category> 
   <category>post</category> 
   <category>drawing</category>  <category>procreate</category>  <category>celtic</category>  <category>zentangle</category>  <category>craft</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2017/cover-2017-12-15.jpg" alt="attachments/img/2017/cover-2017-12-15.jpg"/></figure></p>
<p>This started with practicing a knotwork pattern from <a href="https://www.goodreads.com/book/show/618205.Celtic_Art">Celtic Art: The Methods of Construction</a>, and ended up as an exercise in how long I could add stuff before I got bored. Thirteen hours. Not bad.</p>
<p>Not in a row, of course.</p>
<p>Oh and I threw in a couple tangle elements from <a href="https://www.goodreads.com/book/show/26311641-the-tangles-of-kells">The Tangles of Kells</a>.</p>
<p>I might be ready to try drawing things on purpose again. Usually it’s just that my hands get itchy when I see blank space.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Drawing Grids With Python and Pillow</title>
  <link>https://randomgeekery.org/post/2017/11/drawing-grids-with-python-and-pillow/</link>
  <pubDate>Fri, 24 Nov 2017 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/11/drawing-grids-with-python-and-pillow/</guid>
  <description>Hey I used card/Python and Pillow to make grids for my drawing. Read on to watch my brain while I figured it out. Apologies for the minimal editing and the ridiculous number of images.
I enjoy inbox/Drawing. Many of my sketches have repeated elements, like Zentangle or Celtic inspired patterns. Okay, I don’t have many examples on the site. Sure there’s plenty of repetition based on symmetry tools in the drawing apps I use, and a little bit taking advantage of perspective grids.</description>
   <category>post</category> 
   <category>post</category> 
   <category>python</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2017/cover-2017-11-24.png" alt="attachments/img/2017/cover-2017-11-24.png"/></figure></p>
<p>Hey I used <a href="/card/python/">card/Python</a> and <a href="https://python-pillow.org/">Pillow</a> to make grids for my drawing. Read on to watch my brain while I figured it out. Apologies for the minimal editing and the ridiculous number of images.</p>
<p>I enjoy <em>inbox/Drawing</em>. Many of my sketches have repeated elements, like Zentangle or Celtic inspired patterns. Okay, I don’t have many examples on the site. Sure there’s plenty of repetition based on symmetry tools in the drawing apps I use, and a little bit taking advantage of perspective grids. Not much in the way of simple grid-based repetition though.</p>
<p>Templates exist, but I want custom templates to fit the size of my workspace. I started exploring the Pillow library recently, so let’s use that to make custom grids for my drawings.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">height</span> <span class="o">=</span> <span class="mi">600</span>
</span></span><span class="line"><span class="cl">    <span class="n">width</span> <span class="o">=</span> <span class="mi">600</span>
</span></span><span class="line"><span class="cl">    <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;L&#39;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">image</span><span class="o">.</span><span class="n">show</span><span class="p">()</span></span></span></code></pre>
</figure><p>I use a modest 600 by 600 pixel grayscale image while working out the details. No point saving anything until I know what’s going on, so just <code>show()</code> the image.</p>
<p><figure>
    <img src="/attachments/img/2017/grid-blank.png" alt="A blank image"/></figure></p>
<p>Most of what I want is in the <a href="http://pillow.readthedocs.io/en/4.3.x/reference/ImageDraw.html">ImageDraw</a> module.</p>
<h2 id="simple-grid">Simple Grid</h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">ImageDraw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">height</span> <span class="o">=</span> <span class="mi">600</span>
</span></span><span class="line"><span class="cl">    <span class="n">width</span> <span class="o">=</span> <span class="mi">600</span>
</span></span><span class="line"><span class="cl">    <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;L&#39;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Draw a line</span>
</span></span><span class="line"><span class="cl">    <span class="n">draw</span> <span class="o">=</span> <span class="n">ImageDraw</span><span class="o">.</span><span class="n">Draw</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_start</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_end</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span>
</span></span><span class="line"><span class="cl">    <span class="n">line</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y_start</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y_end</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">draw</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">del</span> <span class="n">draw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">image</span><span class="o">.</span><span class="n">show</span><span class="p">()</span></span></span></code></pre>
</figure><p><figure>
    <img src="/attachments/img/2017/grid-single-line.png" alt="Drawing one line"/></figure></p>
<p>Nice. Okay, how about repeating some lines across?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">ImageDraw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">height</span> <span class="o">=</span> <span class="mi">600</span>
</span></span><span class="line"><span class="cl">    <span class="n">width</span> <span class="o">=</span> <span class="mi">600</span>
</span></span><span class="line"><span class="cl">    <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;L&#39;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Draw some lines</span>
</span></span><span class="line"><span class="cl">    <span class="n">draw</span> <span class="o">=</span> <span class="n">ImageDraw</span><span class="o">.</span><span class="n">Draw</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_start</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_end</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span>
</span></span><span class="line"><span class="cl">    <span class="n">step_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">step_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">line</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y_start</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y_end</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">draw</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">del</span> <span class="n">draw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">image</span><span class="o">.</span><span class="n">show</span><span class="p">()</span></span></span></code></pre>
</figure><p><figure>
    <img src="/attachments/img/2017/grid-columns.png" alt="Drawing some columns"/></figure>
Lovely. How about an actual grid?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">ImageDraw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">height</span> <span class="o">=</span> <span class="mi">600</span>
</span></span><span class="line"><span class="cl">    <span class="n">width</span> <span class="o">=</span> <span class="mi">600</span>
</span></span><span class="line"><span class="cl">    <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;L&#39;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Draw some lines</span>
</span></span><span class="line"><span class="cl">    <span class="n">draw</span> <span class="o">=</span> <span class="n">ImageDraw</span><span class="o">.</span><span class="n">Draw</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_start</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_end</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span>
</span></span><span class="line"><span class="cl">    <span class="n">step_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">step_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">line</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y_start</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y_end</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">draw</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">x_start</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">x_end</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">width</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span><span class="p">,</span> <span class="n">step_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">line</span> <span class="o">=</span> <span class="p">((</span><span class="n">x_start</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="p">(</span><span class="n">x_end</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">draw</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">del</span> <span class="n">draw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">image</span><span class="o">.</span><span class="n">show</span><span class="p">()</span></span></span></code></pre>
</figure><p><figure>
    <img src="/attachments/img/2017/grid-simple-grid.png" alt="Drawing a simple grid"/></figure></p>
<p>Okay cool but I often need a specific number of squares in my grid.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">ImageDraw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">step_count</span> <span class="o">=</span> <span class="mi">25</span>
</span></span><span class="line"><span class="cl">    <span class="n">height</span> <span class="o">=</span> <span class="mi">600</span>
</span></span><span class="line"><span class="cl">    <span class="n">width</span> <span class="o">=</span> <span class="mi">600</span>
</span></span><span class="line"><span class="cl">    <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;L&#39;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Draw some lines</span>
</span></span><span class="line"><span class="cl">    <span class="n">draw</span> <span class="o">=</span> <span class="n">ImageDraw</span><span class="o">.</span><span class="n">Draw</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_start</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_end</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span>
</span></span><span class="line"><span class="cl">    <span class="n">step_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="n">step_count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">step_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">line</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y_start</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y_end</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">draw</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">x_start</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">x_end</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">width</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span><span class="p">,</span> <span class="n">step_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">line</span> <span class="o">=</span> <span class="p">((</span><span class="n">x_start</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="p">(</span><span class="n">x_end</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">draw</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">del</span> <span class="n">draw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">image</span><span class="o">.</span><span class="n">show</span><span class="p">()</span></span></span></code></pre>
</figure><p><figure>
    <img src="/attachments/img/2017/grid-step-count.png" alt="Specifying a step count"/></figure></p>
<p>Right but I don’t want to edit the code every time.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">ImageDraw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">step_count</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">step_count</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">height</span> <span class="o">=</span> <span class="mi">600</span>
</span></span><span class="line"><span class="cl">    <span class="n">width</span> <span class="o">=</span> <span class="mi">600</span>
</span></span><span class="line"><span class="cl">    <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;L&#39;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Draw some lines</span>
</span></span><span class="line"><span class="cl">    <span class="n">draw</span> <span class="o">=</span> <span class="n">ImageDraw</span><span class="o">.</span><span class="n">Draw</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_start</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_end</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span>
</span></span><span class="line"><span class="cl">    <span class="n">step_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="n">step_count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">step_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">line</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y_start</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y_end</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">draw</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">x_start</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">x_end</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">width</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span><span class="p">,</span> <span class="n">step_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">line</span> <span class="o">=</span> <span class="p">((</span><span class="n">x_start</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="p">(</span><span class="n">x_end</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">draw</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">del</span> <span class="n">draw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">image</span><span class="o">.</span><span class="n">show</span><span class="p">()</span></span></span></code></pre>
</figure><p>Run it.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python grid.py 12</code></pre>
</figure><p><figure>
    <img src="/attachments/img/2017/grid-specify-step-count.png" alt="Grabbing a step count from the command line"/></figure></p>
<p>I can specify step count from the command line. Cool. Uh hey about height and width?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">ImageDraw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">step_count</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">    <span class="n">height</span> <span class="o">=</span> <span class="mi">600</span>
</span></span><span class="line"><span class="cl">    <span class="n">width</span> <span class="o">=</span> <span class="mi">600</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">step_count</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">width</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">height</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">width</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">height</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">step_count</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;L&#39;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Draw some lines</span>
</span></span><span class="line"><span class="cl">    <span class="n">draw</span> <span class="o">=</span> <span class="n">ImageDraw</span><span class="o">.</span><span class="n">Draw</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_start</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_end</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span>
</span></span><span class="line"><span class="cl">    <span class="n">step_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="n">step_count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">step_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">line</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y_start</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y_end</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">draw</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">x_start</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">x_end</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">width</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span><span class="p">,</span> <span class="n">step_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">line</span> <span class="o">=</span> <span class="p">((</span><span class="n">x_start</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="p">(</span><span class="n">x_end</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">draw</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">del</span> <span class="n">draw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">image</span><span class="o">.</span><span class="n">show</span><span class="p">()</span></span></span></code></pre>
</figure><p>Oh come on. Stop it with <code>sys.argv</code>. Get some real command line handling in there.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">argparse</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">ImageDraw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;width&#34;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s2">&#34;width of image in pixels&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;height&#34;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s2">&#34;height of image in pixels&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;step_count&#34;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s2">&#34;how many steps across the grid&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">step_count</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">step_count</span>
</span></span><span class="line"><span class="cl">    <span class="n">height</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">height</span>
</span></span><span class="line"><span class="cl">    <span class="n">width</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">width</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;L&#39;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Draw some lines</span>
</span></span><span class="line"><span class="cl">    <span class="n">draw</span> <span class="o">=</span> <span class="n">ImageDraw</span><span class="o">.</span><span class="n">Draw</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_start</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_end</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span>
</span></span><span class="line"><span class="cl">    <span class="n">step_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="n">step_count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">step_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">line</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y_start</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y_end</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">draw</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">x_start</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">x_end</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">width</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span><span class="p">,</span> <span class="n">step_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">line</span> <span class="o">=</span> <span class="p">((</span><span class="n">x_start</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="p">(</span><span class="n">x_end</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">draw</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">del</span> <span class="n">draw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">image</span><span class="o">.</span><span class="n">show</span><span class="p">()</span></span></span></code></pre>
</figure><p>Much better. Run it.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python grid.py
usage: grid.py [-h] width height step_count

positional arguments:
  width       width of image in pixels
  height      height of image in pixels
  step_count  how many steps across the grid

optional arguments:
  -h, --help  show this help message and exit

$ python grid.py 500 500 20</code></pre>
</figure><p>I like <a href="https://docs.python.org/3/library/argparse.html[Argparse]">Argparse</a>.</p>
<p><figure>
    <img src="/attachments/img/2017/grid-specify-size-steps.png" alt="Constructing grid from Argparse arguments"/></figure></p>
<p>Anyways - what if I ask for a rectangle instead of a square?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python grid.py 400 600 24 \{\{&lt; /console &gt;}}</code></pre>
</figure><p><figure>
    <img src="/attachments/img/2017/grid-rectangular.png" title="Rectangular grid" alt="Rectangular grid"/><figcaption>Rectangular grid</figcaption></figure></p>
<p>Hold on. I was handing <code>height</code> and <code>width</code> to <a href="http://pillow.readthedocs.io/en/4.3.x/reference/Image.html#the-image-class">Image</a> in the wrong order this whole time.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;L&#39;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span></span></span></code></pre>
</figure><p>Run it.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python grid.py 400 600 24</code></pre>
</figure><p><figure>
    <img src="/attachments/img/2017/grid-correct-image-init.png" alt="Correct Image initialization"/></figure></p>
<p>This works. I have half a dozen ideas left, but I want to use it for a sketch <em>now</em>.</p>
<p><strong><code>grid.py</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">argparse</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">ImageDraw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;width&#34;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s2">&#34;width of image in pixels&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;height&#34;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s2">&#34;height of image in pixels&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;step_count&#34;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s2">&#34;how many steps across the grid&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">step_count</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">step_count</span>
</span></span><span class="line"><span class="cl">    <span class="n">height</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">height</span>
</span></span><span class="line"><span class="cl">    <span class="n">width</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">width</span>
</span></span><span class="line"><span class="cl">    <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;L&#39;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Draw a grid</span>
</span></span><span class="line"><span class="cl">    <span class="n">draw</span> <span class="o">=</span> <span class="n">ImageDraw</span><span class="o">.</span><span class="n">Draw</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_start</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_end</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span>
</span></span><span class="line"><span class="cl">    <span class="n">step_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="n">step_count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">step_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">line</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y_start</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y_end</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">draw</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">x_start</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">x_end</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">width</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="o">.</span><span class="n">height</span><span class="p">,</span> <span class="n">step_size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">line</span> <span class="o">=</span> <span class="p">((</span><span class="n">x_start</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="p">(</span><span class="n">x_end</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">draw</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">del</span> <span class="n">draw</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">filename</span> <span class="o">=</span> <span class="s2">&#34;grid-</span><span class="si">{}</span><span class="s2">-</span><span class="si">{}</span><span class="s2">-</span><span class="si">{}</span><span class="s2">.png&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">step_count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Saving </span><span class="si">{}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">filename</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">image</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python grid.py 1800 2400 50
Saving grid-1800-2400-50.png
$ ls
grid-1800-2400-50.png   grid.py*</code></pre>
</figure><p>Let’s skim over the part where I get the grid onto the iPad and import it as a new layer in my current sketch. That part includes no code — for now.</p>
<p>Anyways, back to the sketch.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: My Ski Beanie</title>
  <link>https://randomgeekery.org/post/2017/11/my-ski-beanie/</link>
  <pubDate>Sun, 19 Nov 2017 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/11/my-ski-beanie/</guid>
  <description>Took me less than a week. I like that. On the other hand, I established for certain that when I knit fast my gauge loosens up. The hat fits looser than it should. I like that less. On the other other hand, I already wear it most of the time. It feels nice.
This pattern came from Son of Stitch ’n Bitch. I used Patons Astra black and — uh — some white yarn of about the right thickness.</description>
   <category>post</category> 
   <category>post</category> 
   <category>knitting</category>  <category>hat</category>  <category>craft</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2017/cover-2017-11-19.jpg" alt="attachments/img/2017/cover-2017-11-19.jpg"/></figure></p>
<p>Took me less than a week. I like that. On the other hand, I established for certain that when I knit fast my gauge loosens up. The hat fits looser than it should. I like that less. On the <em>other</em> other hand, I already wear it most of the time. It feels nice.</p>
<p>This pattern came from <a href="https://www.goodreads.com/book/show/170305.Son_of_Stitch_n_Bitch">Son of Stitch ’n Bitch</a>. I used <a href="http://www.yarnspirations.com/yarn/astra.html?super_attribute=YToxOntpOjQ1NjtzOjU6IjQ1NzA1Ijt9">Patons Astra</a> black and — uh — some white yarn of about the right thickness.</p>
<p>This pattern works for beginners, or someone looking for a break from their big complicated projects. It might be easier if you knit in the round. There would be less purling, if nothing else. I may revisit this hat later knitting in the round, and either knit slower or use smaller needles.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Something Colorful</title>
  <link>https://randomgeekery.org/post/2017/11/something-colorful/</link>
  <pubDate>Tue, 07 Nov 2017 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/11/something-colorful/</guid>
  <description>The other night I went out, and brought my iPad. Sketching calms me when sitting in a public space. This is the final version of a doodle started that night.
I get nervous about color, but decided this time to relax a bit and enjoy myself. The result pleases me.</description>
   <category>post</category> 
   <category>post</category> 
   <category>drawing</category>  <category>infinite-painter</category>  <category>craft</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2017/cover-2017-11-07.jpg" alt="attachments/img/2017/cover-2017-11-07.jpg"/></figure></p>
<p>The other night I went out, and brought my iPad. Sketching calms me when sitting in a public space. This is the final version of a doodle started that night.</p>
<p>I get nervous about color, but decided this time to relax a bit and enjoy myself. The result pleases me.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Wellington for Sass</title>
  <link>https://randomgeekery.org/post/2017/10/wellington-for-sass/</link>
  <pubDate>Tue, 31 Oct 2017 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/10/wellington-for-sass/</guid>
  <description>I found Wellington, a Sass compiler written in card/Go.
I installed Wellington with Homebrew - actually Linuxbrew but that’s a post for another day maybe, once I’m sure this Linuxbrew experiment worked for me.
$ brew install wellington This is not the night to redesign the whole site, though. Make sure everything works.
$ wt compile assets/scss/main.scss -b static/css 2017/10/31 21:09:54 Compilation took: 28.333622ms Seems to produce the same style output.</description>
   <category>post</category> 
   <category>post</category> 
   <category>site</category>  <category>css</category>  <category>tools</category> 
  <content:encoded><![CDATA[<p>I found <a href="https://getwt.io/">Wellington</a>, a <a href="http://sass-lang.com/">Sass</a> compiler written in <a href="/card/go/">card/Go</a>.</p>
<p>I installed Wellington with <a href="https://brew.sh/">Homebrew</a> - actually Linuxbrew but that’s a post for another day maybe, once I’m sure this Linuxbrew experiment worked for me.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ brew install wellington</code></pre>
</figure><p>This is not the night to redesign the whole site, though. Make sure everything works.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ wt compile assets/scss/main.scss -b static/css
2017/10/31 21:09:54 Compilation took: 28.333622ms</code></pre>
</figure><p>Seems to produce the same style output. I had no complaint about the speed of Ruby’s Sass compiler, but Wellington is certainly quicker.</p>
<p>I guess now I can start thinking about redesigning the site layout.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Beets and iTunes</title>
  <link>https://randomgeekery.org/post/2017/10/beets-and-itunes/</link>
  <pubDate>Sun, 01 Oct 2017 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/10/beets-and-itunes/</guid>
  <description>&lt;p&gt;My macOS iTunes music library includes over 21,000 songs. Some of those tracks contain the wrong information. Wrong title, wrong album, wrong artist, wrong year.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>music</category>  <category>macos</category>  <category>beets</category>  <category>python</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>beets and AppleScript helped me fix my incorrect track information</h2><p>My macOS iTunes music library includes over 21,000 songs. Some of those tracks contain the wrong information. Wrong title, wrong album, wrong artist, wrong year.</p>
<h2 id="beets">Beets</h2>
<p>The open source <a href="http://beets.io/">Beets</a> command line tool helps manage your music library.</p>
<blockquote>
<p>The purpose of beets is to get your music collection right once and for all. It catalogs your collection, automatically improving its metadata as it goes using the <a href="https://musicbrainz.org/">MusicBrainz</a> database. Then it provides a bouquet of tools for manipulating and accessing your music.</p>
</blockquote>
<p><a href="http://beets.readthedocs.io/en/v1.4.5/plugins/index.html">Plugins</a> allow beets to perform more than media management. I won’t talk about most of them today. I don’t want to overwhelm myself. I will keep my focus on using beets from the command line to help me fix my iTunes library.</p>
<h3 id="alternatives">Alternatives</h3>
<p>I prefer command line open source tools. It’s a comfortable habit. You have other options, though.</p>
<p>If you prefer using a mouse, try out <a href="https://picard.musicbrainz.org">Picard</a> from MusicBrainz. Its manual
includes an <a href="https://musicbrainz.org/doc/iTunes_Guide">iTunes guide</a>, so you won’t have to guess your way through the
process.</p>
<p><a href="http://www.tuneupmedia.com/">TuneUp</a> is a commercial application that integrates with iTunes. I haven’t used it, but TuneUp was the first thing that came up in most of my initial research into fixing my tracks.</p>
<h2 id="installation-and-configuration">Installation and Configuration</h2>
<p>beets is written in <a href="/card/python/">card/Python</a>. It works with both Python 2 and 3, but I had better results with my hooks when using Python 2.</p>
<p>I already installed <a href="https://github.com/pyenv/pyenv">pyenv</a> and <a href="https://github.com/pyenv/pyenv-virtualenv">pyenv-virtualenv</a> via <a href="https://brew.sh/">Homebrew</a>. They aren’t strictly needed, but having distinct environments simplifies things when you have several Python-related projects.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ pyenv virtualenv 2.7.14 beets
$ pyenv shell beets</code></pre>
</figure><p>beets uses <a href="https://pypi.python.org/pypi/pyacoustid">pyacoustid</a> for acoustic fingerprinting, which helps identify tracks by their audio data. pyacoustid needs the <a href="https://acoustid.org/chromaprint">Chromaprint</a> library, so I install that also.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ brew install chromaprint
$ pip install beets pyacoustid</code></pre>
</figure><p>This <a href="https://groups.google.com/forum/#!topic/beets-users/yijEk858yiw">Google Groups thread</a> got me started on configuration. My settings focus on safely cataloging music rather than organizing it.</p>
<p><strong><code>~/.config/beets/config.yaml</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># using default library ~/.beets/config/library.db</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># using default directory ~/Music, but see &#39;copy&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">plugins</span><span class="p">:</span><span class="w"> </span><span class="l">chroma edit ftintitle fromfilename importadded hook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">import</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">copy</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">         </span><span class="c"># Copy the file to our directory when importing?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">incremental</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w"> </span><span class="c"># Skip directories we already imported?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">write</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">        </span><span class="c"># Automatically write the file on library import / update?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">resume</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">      </span><span class="c"># Resume interrupted imports?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">log</span><span class="p">:</span><span class="w"> </span><span class="l">beets.log  </span><span class="w"> </span><span class="c"># Where should we write what we do?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">match</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">strong_rec_thresh</span><span class="p">:</span><span class="w"> </span><span class="m">0.1</span><span class="w">            </span><span class="c"># Any difference less than this is a strong recommendation</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">preferred</span><span class="p">:</span><span class="w">                        </span><span class="c"># Put these at the top of recommendations</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">countries</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">US, GB|UK]         </span><span class="w"> </span><span class="c"># My favorite music publishing countries</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">media</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">CD, Digital Media|File]</span><span class="w"> </span><span class="c"># My favorite music sources</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">original_year</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">              </span><span class="c"># entry year is close to entry original_year</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Tell iTunes to add and/or update the track in its library after we write a file.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">hook</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hooks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">event</span><span class="p">:</span><span class="w"> </span><span class="l">after_write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">osascript /Users/brianwisti/bin/iTunesRefresh.scpt &#34;{item.path}&#34;</span></span></span></code></pre>
</figure><p>The plugins add important functionality.</p>
<dl>
<dt><a href="http://beets.readthedocs.io/en/v1.4.5/plugins/chroma.html">chroma</a></dt>
<dd>Use acoustic fingerprinting to identify songs by their sound. Slower, but helps with tracks that have bad metadata.</dd>
<dt><a href="http://beets.readthedocs.io/en/v1.4.5/plugins/edit.html">edit</a></dt>
<dd>Edit details of your songs after importing</dd>
<dt><a href="http://beets.readthedocs.io/en/v1.4.5/plugins/ftintitle.html">ftintitle</a></dt>
<dd>Puts featured artist information in song title instead of artist.</dd>
<dt><a href="http://beets.readthedocs.io/en/v1.4.5/plugins/fromfilename.html">fromfilename</a></dt>
<dd>Try to guess missing metadata from the filename of a song.</dd>
<dt><a href="http://beets.readthedocs.io/en/v1.4.5/plugins/importadded.html">importadded</a></dt>
<dd>Use the file’s modification time to determine when you added it to your library. Useful for importing an existing library.</dd>
<dt><a href="http://beets.readthedocs.io/en/v1.4.5/plugins/hook.html">hook</a></dt>
<dd>Run commands for specific beet events.</dd>
</dl>
<blockquote>
<p><strong>TIP</strong></p>
<p>Oh in iTunes uncheck Preferences &gt; Advanced &gt; &ldquo;Keep iTunes Media folder organized&rdquo;. Otherwise you’ll end up deleting and reimporting songs that iTunes moved.</p>
</blockquote>
<p>Configuration is out of the way. Let’s import music.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ beet import ~/Music/iTunes/iTunes Media/Music</code></pre>
</figure><p>Importing a large music library takes time, especially with acoustic fingerprinting. My music took a full weekend, even with <code>match</code> settings giving it more leeway to automatically use the likeliest matches. But at the end of it all, here’s what I had.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ beet stats
Tracks: 22112
Total time: 8.7 weeks
Approximate total size: 107.8 GiB
Artists: 2498
Albums: 2405
Album artists: 1117</code></pre>
</figure><p>I won’t tell you about all the amazing <a href="http://beets.readthedocs.io/en/v1.4.5/reference/query.html">query support</a> or <a href="http://beets.readthedocs.io/en/v1.4.5/reference/pathformat.html">format strings</a>
in beets. Instead let’s just list matches for a random word.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ beet ls pigeon
Bert - Songs From the Street: 35 Years of Music - Doin&#39; the Pigeon
Cyndi Lauper - Hat Full of Stars - Sally&#39;s Pigeons
Cyndi Lauper - Twelve Deadly Cyns... and Then Some - Sally&#39;s Pigeons
Tom Lehrer - An Evening Wasted With Tom Lehrer - Poisoning Pigeons in the Park
Lo Fidelity Allstars - How to Operate With a Blown Mind - Battle Flag feat. Pigeonhed
RJD2 - Have Mercy - Have Mercy (Remix feat Lyrics Born and Pigeon John)
RJD2 - Have Mercy - Have Mercy (Remix feat Lyrics Born and Pigeon John)</code></pre>
</figure><p>Looks like I have some duplicates. I can worry about that another day.</p>
<h3 id="tell-beets-to-tell-itunes-to-refresh">Tell Beets to Tell iTunes to Refresh</h3>
<p>Now that beets has imported everything, it’s time to write it all back out and update the iTunes library.</p>
<h3 id="write-some-applescript">Write Some AppleScript</h3>
<blockquote>
<p><strong>NOTE</strong></p>
<p>I spent a full day trying to make JXA work for this. It didn’t. I kept crashing Script Editor with whimsical directives like <code>console.log(iTunes)</code>. If you want to try JXA, look at this <a href="https://www.macstories.net/tutorials/getting-started-with-javascript-for-automation-on-yosemite/">blog post on JavaScript and iTunes</a>, or the <a href="https://github.com/JXA-Cookbook/JXA-Cookbook/wiki/iTunes">JXA Cookbook page for iTunes</a>.</p>
</blockquote>
<p>I rarely use <a href="https://developer.apple.com/library/content/documentation/AppleScript/Conceptual/AppleScriptX/AppleScriptX.html">AppleScript</a>, so it took a combination of Web searching and guesswork to come up with this. <a href="https://dougscripts.com/itunes/2010/12/get-a-track-reference-from-a-file-path/">This post</a> from <a href="https://dougscripts.com/itunes/index.php#whatsnew">Doug&rsquo;s AppleScripts for iTunes</a> blog and this <a href="https://apple.stackexchange.com/questions/202504/searching-itunes-library-for-file-location#222834">Ask Different answer</a> got me most of the way there. The guesswork finished it off.</p>
<p><strong><code>~/bin/iTunesRefresh.scpt</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-applescript" data-lang="applescript"><span class="line"><span class="cl"><span class="k">on</span> <span class="nb">run</span> <span class="p">(</span><span class="nv">argv</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">tell</span> <span class="nb">application</span> <span class="s2">&#34;iTunes&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">set</span> <span class="nv">filename</span> <span class="k">to</span> <span class="nv">POSIX</span> <span class="nv">file</span> <span class="p">(</span><span class="nv">argv</span>&#39;s <span class="nb">item</span> <span class="mi">1</span> <span class="k">as </span><span class="nc">string</span><span class="p">)</span> <span class="k">as</span> <span class="nv">alias</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span>
</span></span><span class="line"><span class="cl">      <span class="k">set</span> <span class="nv">trackRef</span> <span class="k">to</span> <span class="p">(</span><span class="nv">add</span> <span class="nv">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nv">refresh</span> <span class="nv">trackRef</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span> <span class="k">try</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span> <span class="k">tell</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span> <span class="nb">run</span></span></span></code></pre>
</figure><h4 id="the-beets-hook">The Beets Hook</h4>
<p><code>osascript</code> lets you run AppleScript commands and files from the command line. This <code>after_write</code> hook is only called when song metadata is updated in the file itself.</p>
<p>Writing every track with the hook after that big import took about four hours — but I could leave it in the background while I did other stuff.</p>
<h3 id="after-the-big-import">After the big import</h3>
<p>Sometimes beets identifies tracks incorrectly. It happens. For example, Bob Dylan did not sing <a href="https://youtu.be/DohRa9lsx0Q">Stuck in the Middle With You</a>.</p>
<p>I could <a href="http://beets.readthedocs.io/en/v1.4.5/reference/cli.html#modify">modify</a> that song with <code>beets modify</code>, but I can also do it with the
<a href="http://beets.readthedocs.io/en/v1.4.5/plugins/edit.html">edit plugin</a>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ beet edit `stuck in the middle`</code></pre>
</figure><p>This pulls up <code>$EDITOR</code>, which in my case is Vim.</p>
<p><figure>
    <img src="/attachments/img/2017/beet-edit-screen.png" alt="Editing a Beets entry in Vim"/></figure></p>
<p>After the import and update, I saw something else in iTunes that bugged me. iTunes can sort by <code>year</code>, but not by <code>original_year</code> — the year an album was originally released, rather than the year that particular file or CD was available.</p>
<p>I don’t know how to edit that with beets commands, but I can work directly with its underlying SQLite database. Maybe I’m being a little bold here, but I can always spend another weekend reimporting my music.</p>
<p><strong><code>sqlite3 ~/.config/beets/library.db</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">sqlite</span><span class="o">&gt;</span><span class="w"> </span><span class="k">update</span><span class="w"> </span><span class="n">items</span><span class="w"> </span><span class="k">set</span><span class="w"> </span><span class="k">year</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">original_year</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="k">year</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">original_year</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">original_year</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">sqlite</span><span class="o">&gt;</span><span class="w"> </span><span class="k">update</span><span class="w"> </span><span class="n">albums</span><span class="w"> </span><span class="k">set</span><span class="w"> </span><span class="k">year</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">original_year</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="k">year</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">original_year</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">original_year</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span></span></span></code></pre>
</figure><p><code>beet write</code> finalizes those changes, and updates iTunes again thanks to the <code>after_write</code> hook.</p>
<p>Everything worked out for me this time. But remember, if you change values in the database, they happen <a href="https://xkcd.com/180/">in real life</a> too!</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Then somebody mentioned that I could skip this particular mess by setting the <a href="http://beets.readthedocs.io/en/v1.4.5/reference/config.html#original-date">original date</a> option to <code>yes</code> in my beets configuration. beets will update a song’s <code>year</code>, <code>month</code>, and <code>day</code> fields to reflect the values in <code>original_date</code>. Use that setting if you would rather not poke around in the database.</p>
</blockquote>
<h3 id="what-next">What Next?</h3>
<p>That’s good enough for today. I’ll correct entries as I see them, but things are definitely better than when I started.</p>
<p>To see what you can do with beets, check out the plugins.</p>
<p>Play with the query support and format strings. Have fun!</p>]]></content:encoded>
</item>
<item>
  <title>Post: Comments One More Time</title>
  <link>https://randomgeekery.org/post/2017/09/comments-one-more-time/</link>
  <pubDate>Wed, 20 Sep 2017 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/09/comments-one-more-time/</guid>
  <description>Trying to add Disqus comments once again. I adjusted permalinks, since the old /:section/:year/:title/ structure seemed to confuse Disqus. Here’s hoping. I assigned aliases to content so that old links should work.
I know. I’m fickle about comments. I want them, then I don’t want them. I’d switch to WordPress but I’d have to untangle all the card/Hugo specifics that I’ve adopted over the last couple years.
Oh heck a week from now marks two years since I switched to Hugo.</description>
   <category>post</category> 
   <category>post</category> 
   <category>site</category>  <category>marginalia</category> 
  <content:encoded><![CDATA[<p>Trying to add Disqus comments once again. I adjusted permalinks, since the old <code>/:section/:year/:title/</code> structure seemed to confuse Disqus. Here’s hoping. I assigned aliases to content so that old links should work.</p>
<p>I know. I’m fickle about comments. I want them, then I don’t want them. I’d switch to WordPress but I’d have to untangle all the <a href="/card/hugo/">card/Hugo</a> specifics that I’ve adopted over the last couple years.</p>
<p>Oh heck a week from now marks <a href="/post/2015/09/next-hugo/">two years</a> since I switched to Hugo. Either it got easier to use or I got used to it. And every time I’m ready to look elsewhere they add something new.</p>
]]></content:encoded>
</item>
</channel>
</rss>
