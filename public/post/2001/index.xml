<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2001onRandom Geekery</title>
    <link>https://randomgeekery.org/post/2001/</link>
    <description>
      Recent contentin2001 on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Mon, 22 Jan 2024 14:33:48 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/post/2001/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: About Brian</title>
  <link>https://randomgeekery.org/post/2001/12/about-brian/</link>
  <pubDate>Sat, 29 Dec 2001 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2001/12/about-brian/</guid>
  <description>This page exists for historical purposes — so you can see the cute old picture of me. More current versions of its information is in about, follow, and now.
Just want to contact me? That’s easy enough.
My name is Brian Wisti, and I am a geek. This site should provide plenty of evidence for that. I write code for a living, and often write code as a hobby.</description>
   <category>post</category> 
   <category>post</category> 
   <category>coolnamehere</category> 
  <content:encoded><![CDATA[<h2>The coolnamehere 'about' page</h2><p><figure>
    <img src="//attachments/img/2001-brian-greenlake.jpg" alt="Photo of Brian"/></figure></p>
<p>This page exists for historical purposes — so you can see the cute old picture of me. More current versions of its information is in <em>about</em>, <a href="/follow/">follow</a>, and <a href="/now/">now</a>.</p>
<p>Just want to contact me? That’s easy enough.</p>
<p>My name is Brian Wisti, and I am a geek. This site should provide plenty of evidence for that. I write code for a living, and often write code as a hobby.</p>
<p>I was born in 1972, in Tacoma, Washington. That’s in the northwestern United States for those of you reading this from a great distance. I’ve been living in Seattle, Washington since 1999, after quite a few years living in different places. Seattle is a great city to be in, but I wouldn’t mind visiting a lot of other places before I die.</p>
<p>I have more hobbies than I know what to do with. These days, I spend a lot of time programming, knitting, or drawing. I spend more time programming, but it’s hard to tell whether I’ve been programming or drawing for more time. They both seem to satisfy my general urge to create something. From other people, each gets a different reaction. More people go &ldquo;oh, cool&rdquo; at my drawings. More people are willing to pay me for my programming. My wife mainly benefits from the knitting, with an endless supply of things I want her to wear. So I get to do all the things I enjoy and stay very happy.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Resume of Brian Wisti</title>
  <link>https://randomgeekery.org/post/2001/12/resume-of-brian-wisti/</link>
  <pubDate>Sat, 29 Dec 2001 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2001/12/resume-of-brian-wisti/</guid>
  <description>I have decided to link to my LinkedIn profile instead of messing about with a resume page. That way I can show all the needed details, you can get some context, and I can keep from triggering any silly word filters with my site.</description>
   <category>post</category> 
   <category>post</category> 
   <category>coolnamehere</category> 
  <content:encoded><![CDATA[<p>I have decided to link to <a href="http://www.linkedin.com/in/brianwisti">my LinkedIn profile</a> instead of messing about with a resume page. That way I can show all the needed details, you can get some context, and I can keep from triggering any silly word filters with my site.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Random Babblings</title>
  <link>https://randomgeekery.org/post/2001/11/random-babblings/</link>
  <pubDate>Sun, 11 Nov 2001 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2001/11/random-babblings/</guid>
  <description>I occasionally have thoughts or comments that have no bearing on geekery or art. No direct bearing, anyhow. Actually, they could be about nearly anything. Or nothing. Insane rantings, if you will. Anyways, they get dumped in the Babblings (or Insane Rantings) section.</description>
   <category>post</category> 
   <category>post</category> 
   <category>coolnamehere</category> 
  <content:encoded><![CDATA[<p>I occasionally have thoughts or comments that have no bearing on geekery or art. No direct bearing, anyhow. Actually, they could be about nearly anything. Or nothing. Insane rantings, if you will. Anyways, they get dumped in the Babblings (or Insane Rantings) section.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Editors</title>
  <link>https://randomgeekery.org/post/2001/07/editors/</link>
  <pubDate>Wed, 11 Jul 2001 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2001/07/editors/</guid>
  <description>Choose your weapon As a geek, your text editor is your most important tool. Pick one or two, and really get to know it. I don’t care if you choose Emacs, vi, SciTE, or whatever else. Pick it and learn how to use it. I want you to really get the hang of your editing environment. Being more skilled with your tools will make it easier for you to get work done.</description>
   <category>post</category> 
   <category>post</category> 
   <category>editors</category>  <category>coolnamehere</category> 
  <content:encoded><![CDATA[<h2 id="choose-your-weapon">Choose your weapon</h2>
<p>As a geek, your text editor is your most important tool. Pick one or two, and really get to know it. I don’t care if you choose Emacs, vi, SciTE, or whatever else. Pick it and learn how to use it. I want you to <em>really</em> get the hang of your editing environment. Being more skilled with your tools will make it easier for you to get work done. And geek play, of course.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Geekery</title>
  <link>https://randomgeekery.org/post/2001/07/geekery/</link>
  <pubDate>Wed, 11 Jul 2001 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2001/07/geekery/</guid>
  <description>Computers are all about programs. If you take the time to learn how to program, then you’re “on the inside” - more than just an ordinary user. The computer will obey your every whim, and you will be able to sneer at “lusers” (loser-users) who have no idea how their computer works. You will make millions of dollars working in your shorts. Beautiful people will throw themselves off of cliffs to be near you.</description>
   <category>post</category> 
   <category>post</category> 
   <category>coolnamehere</category> 
  <content:encoded><![CDATA[<p>Computers are all about programs. If you take the time to learn how to program, then you’re “on the inside” - more than just an ordinary user. The computer will obey your every whim, and you will be able to sneer at “lusers” (loser-users) who have no idea how their computer works. You will make millions of dollars working in your shorts. Beautiful people will throw themselves off of cliffs to be near you. The planet will be yours for the taking!</p>
<p>Sorry about that. I get a little carried away sometimes. The truth is that knowing how to program will not make any of these things happen. It will not make you superior to everyone else. It will not guarantee you a job. The beautiful people are not going to want to be near you any more than they did before you could program.</p>
<p>Despite all of that, some folks really enjoy programming. Computers are amazingly complex things, and there is a real sense of satisfaction in making a computer do what you told it to. Programming is a craft, mixing art and science together to produce useful (and / or fun) applications for people to use.</p>
<p>I’m not going to waste any more time explaining why programming can be fun. Either you’ll enjoy it or you won’t. I happen to enjoy it very much, and I want to learn more about how to do it right. COOLNAMEHERE Geekery tracks my own progress learning programming languages and practices.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Python Babysteps Tutorial</title>
  <link>https://randomgeekery.org/post/2001/01/python-babysteps-tutorial/</link>
  <pubDate>Wed, 17 Jan 2001 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2001/01/python-babysteps-tutorial/</guid>
  <description>This is my original Python Babysteps tutorial, which has existed in more or less the same form since 2001.
I got a good start on post/2011/06/python-2x-babysteps
Introduction If you have never programmed before in your life, then do I have the perfect programming language for you. It’s called Python, and it is easy to learn, flexible, and loaded with capabilities that you never thought would be so easy to use. Imagine your thrill when you write a complete program in just a few lines!</description>
   <category>post</category> 
   <category>post</category> 
   <category>python</category>  <category>learn</category>  <category>coolnamehere</category> 
  <content:encoded><![CDATA[<h2>Before the basics</h2><p>This is my original Python Babysteps tutorial, which has existed in more or less the same form since 2001.</p>
<p>I got a good start on <a href="/post/2011/06/python-2x-babysteps/">post/2011/06/python-2x-babysteps</a></p>
<h2 id="introduction">Introduction</h2>
<p>If you have never programmed before in your life, then do I have the
perfect programming language for you. It’s called Python, and it is easy
to learn, flexible, and loaded with capabilities that you never thought
would be so easy to use. Imagine your thrill when you write a complete
program in just a few lines!</p>
<p>If you have spent years programming Perl, and are just about sick of all of the weird little context dependencies — &ldquo;My function does this when you hand it a single object, and that when you hand it a list, unless you are assigning the result to a list, in which case it does this other thing&rdquo; — then do I have the perfect language for you. It’s called Python, it has clear, unambigous syntax, and it is simple to create your own modules and objects. Imagine your thrill when you write a  complete program in just a few lines, and somebody else can read it!</p>
<p>This is a tutorial to help the non-programmer learn the basics of using Python. When you are done with it, you will be ready to learn this new language, and have no problems figuring out where to find the information you need to go farther.</p>
<p>Experienced programmers may get some small value out of this, too, but you will get bored quickly. I am aiming for simplicity, rather than
rigid accuracy. There is always the <a href="https://docs.python.org/tutorial">official Python tutorial</a> to provide an introduction for veterans.</p>
<p>If anybody has any suggestions or comments about this tutorial, please <a href="mailto:brianwisti@pobox.com">send me some mail</a> and let me know!</p>
<p>I hope you enjoy this!</p>
<h2 id="installing-python">Installing Python</h2>
<p>Before you can <em>use</em> Python, you need to <em>get</em> Python.</p>
<h3 id="which-version-of-python">Which Version of Python?</h3>
<blockquote>
<p><strong>NOTE</strong></p>
<p>You can also try Python 3, but this tutorial is just going to discuss 2.6. Why is that? I prefer people use the latest version of Python. People who are using this tutorial in the context of a classroom probably aren’t going to have 3.0 as their default yet. There are enough differences between 2.6 and 3.0 that I’ll probably need a distinct Python 3 section on coolnamehere.</p>
</blockquote>
<p>There are a few versions of Python available for download:</p>
<ol>
<li>ActiveState’s <a href="https://www.activestate.com/Products/ActivePython">ActivePython</a></li>
<li>The official release of <a href="https://www.python.org/download/releases/2.6.1">Python 2.6.1</a></li>
</ol>
<p>Okay, there is also <a href="http://jython.org">Jython</a> and <a href="http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython">IronPython</a>, but both of these are for special platforms - <a href="http://java.sun.com">Java</a> and <a href="http://www.microsoft.com/net/">.NET</a>, respectively. As such, they have more specific requirements than I am interested in covering here. Don’t let that stop <em>you</em> from feeling bold, though!</p>
<p>Which one you install is mostly a personal choice. The language itself is the same as long as you’re looking at the same version number, regardless of where you download it from. The main differences are the type of support you can get, and the tools that they come packaged with.</p>
<p>The ActiveState version has the benefit of being from a real, live company. You can purchase support and take advantage of the fact that it comes from a single source. It — the Windows version, anyways — comes with the excellent PythonWin program for developing your Python programs in a Windows environment. Because of the support and the Windows-friendly tools, ActivePython may be the best choice for business users. It’s the version that I’m using for testing the tutorial in Linux, so maybe that has some bearing on your decision.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>PythonWin is still available to you as part of the <a href="http://starship.python.net/crew/mhammond/win32/">win32all</a> package, but you need to download and install it separately from your Python distribution. ActiveState Python for Linux includes IDLE, so I will be getting my Python from them for this article.</p>
</blockquote>
<p>Python 2.6, on the other hand, is the &ldquo;official&rdquo; version. It comes with a standard set of tools which are available on every platform that Python can support. Instead of PythonWin, Python 2.6 comes with IDLE: a cross-platform graphical environment for developing your Python programs. IDLE works pretty much the same for you whether you are sitting in front of Windows, Linux, or OS X.</p>
<h2 id="installing-python-26">Installing Python 2.6</h2>
<p>Now that you have decided which version of Python you are going to use, you need to get it and put it on your machine.</p>
<h3 id="linux">Linux</h3>
<p>Your distribution probably has some version of Python available, but I prefer to get mine from <a href="https://activestate.com">ActiveState</a>. It’s easy enough to install, and is usually more up-to-date than what ships with most Linux distributions. There are also fewer concerns about figuring out whether you installed the <code>idle</code> or <code>pydoc</code> packages. You just install ActivePython and get to work.</p>
<p>The latest ActivePython downloads are available from</p>
<blockquote>
<p><a href="http://downloads.activestate.com/ActivePython/releases/">http://downloads.activestate.com/ActivePython/releases/</a></p>
</blockquote>
<p>Open up a terminal after your download finishes and move to the directory that is holding the archive. Use <code>sudo</code> to run the <code>install.sh</code> script with administrative privileges.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ tar xfz ActivePython-2.6.0.0-linux-x86.tar.gz
$ cd ActivePython-2.6.0
$ sudo ./install.sh
press &#39;Enter&#39; to use the default [/opt/ActivePython-2.6].
Install directory:
()
Installing ActivePython to &#39;/opt/ActivePython-2.6&#39;...
Relocating dir-dependent files...
Pre-compiling .py files in the standard library...

ActivePython has been successfully installed to:

    /opt/ActivePython-2.6

You can add the following to your .bashrc (or equivalent)
to put python on your PATH:

    export PATH=/opt/ActivePython-2.6/bin:$PATH

The documentation is available here:

    /opt/ActivePython-2.6/doc/python2.6/index.html
    web: http://aspn.activestate.com/ASPN/docs/ActivePython

Please send us any feedback you might have or log bugs here:

    activepython-feedback@ActiveState.com
    http://bugs.activestate.com/ActivePython/

Thank you for using ActivePython.</code></pre>
</figure><p>Now we get the required settings into the bashrc file, reload the shell configuration, and make sure python is where we expect it to be.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ echo &#39;export PATH=/opt/ActivePython-2.6/bin:$PATH&#39; &gt;&gt; ~/.bashrc
$ . ~/.bashrc
$ which python
/opt/ActivePython-2.6/bin/python
$ which idle
/opt/ActivePython-2.6/bin/idle</code></pre>
</figure><p>There you go. ActivePython 2.6 has been installed on our Linux machine.</p>
<h3 id="windows">Windows</h3>
<p>Now I am going to describe installation in the Windows environment. It’s even easier to install Python for Windows (short version: download and run the installer, click &ldquo;Next&rdquo; until done).</p>
<p>You can always find links to download the latest version of Python at the Python site itself:</p>
<blockquote>
<p><a href="http://www.python.org/download">http://www.python.org/download</a></p>
</blockquote>
<p>Somewhere around the top of the page is a link to the latest version. Look for the first version that doesn’t have &ldquo;alpha&rdquo;, &ldquo;beta&rdquo;, or &ldquo;release candidate&rdquo; in its name. Follow that link, which is currently:</p>
<blockquote>
<p><a href="http://python.org/ftp/python/2.6.1/python-2.6.1.msi">http://python.org/ftp/python/2.6.1/python-2.6.1.msi</a></p>
</blockquote>
<p>Recently, the kind folks who run the <a href="https://python.org">python.org</a> site have started making links to the latest Windows Python download from their front page. So, even though the stuff I said before is still true, now you can just look at the menu on the left side of the python.org front page for &ldquo;Quick Links &gt;&gt; Windows Installer&rdquo;.</p>
<p>Windows will ask you if you want to save the file or run it directly from the site. That’s up to you. If you have the disk space, and know how to find and run a file on your hard drive, I recommend you save the installer program to disk. That way you can redo an installation you messed up. On the other hand, if you don’t have much space on the computer — or you aren’t sure how to find a file once you’ve save it, you are probably better off opening the file straight from the site. I have screwed up so many installations that I pretty much automatically select &ldquo;Save&rdquo; when downloading an installer.</p>
<p>Once you have downloaded the installer, you need to run it. If you told Windows that you wanted to open it from the current location, you can skip this step. Otherwise, you will need to find your file. Open Windows Explorer (&lsquo;Start Menu | Programs | Accessories | Windows Explorer&rsquo;), and dig through your hard drive until you find the installer executable, named <code>Python-2.6.1.msi</code>. Double-click the icon to run the program,  and you’re on your way to installing Python!</p>
<p>I’m going to skim through the next bit here. Most of the installation is simply &ldquo;Do you want me to install Python in folder X?&rdquo; and &ldquo;Do you want me to call it Python?&rdquo; Most of the options you can safely run through by clicking &ldquo;Next&rdquo;, but stay alert for anything that you might want different from the defaults.</p>
<p>Eventually, you are presented with a little progress bar while the installer puts all of the Python files where they belong. This is the stage where you sip some coffee (or tea, or soda) and dream about all the great things you will be able to do as a programmer.</p>
<p>Guess what? You are now a proud owner of Python 2.6! All that’s left is learning how to program.</p>
<h2 id="using-python">Using Python</h2>
<p>There are already a lot of online tutorials for learning Python. Maybe that’s because Python is as fun to teach as it is to learn. Anyways, I am not going to try and tell you that <em>my</em> rough little article is the best introduction you’ll ever find.</p>
<p>You can pick and choose from links at the <a href="https://wiki.python.org/moin/BeginnersGuide">Python BeginnersGuide</a>.</p>
<p>That page has links to articles which discuss Python, tutorials, and comparisons to other languages. Python was largely written for educational environments: learning how to do things &ldquo;the Python way&rdquo; makes it easier to write clean, readable programs for any language. Plus, its flexibility makes it useful way past the classroom — unlike the stuff like Applesoft BASIC that <em>I</em> learned in class. There is nothing like spending years trying to forget the stuff that BASIC taught me about programming.</p>
<p>Even though those links will teach you about how to program in Python, I ask you to stick with me a little bit longer. I still have to tell you how to get started with the tools that you just installed.</p>
<p>I will be focussing on IDLE — and the simple stuff, at that — but you can just as easily use PythonWin or the Python shell (which you get into from the console by typing <code>python</code>).</p>
<p>IDLE is Python’s Integrated DeveLopment Environment. It’s just a coincidence that the acronym <em>happens</em> to spell out the last name of one of the members of a British comedy troupe — whose name just <em>happens</em> to contain the word &ldquo;Python&rdquo;. That’s right, just a coincidence. <em>Wink wink, nudge nudge</em></p>
<p>IDLE gives you access to everything you need to write Python code in a graphical pointy-clicky environment like Windows. There’s a version of the Python shell, as well as features allowing you to write, save, and run your own Python programs with ease.</p>
<p>You can find documentation for IDLE at:</p>
<blockquote>
<p><a href="https://docs.python.org/2/library/idle.html">https://docs.python.org/2/library/idle.html</a></p>
</blockquote>
<p>It’s a pretty standard and dry user manual, but should hold answers to any questions you might come up with for the details of using IDLE.</p>
<p>In the next couple of sections, I’ll help you with the basics of using IDLE. We’ll use the shell for some simple code, and make &amp; run our own little Python script. That’s right, you’ll be creating your own  programs within the next few minutes!</p>
<h2 id="how-to-use-idle">How to use IDLE</h2>
<p>Starting IDLE under Windows is a matter of finding it in your Start menu.</p>
<ol>
<li>Find the Python folder in your Start menu.</li>
<li>Find the menu item for IDLE within the Python folder.</li>
<li>Select it.</li>
</ol>
<p>Given the wide, wild range of desktop environments available for Linux, there is no way I could simply tell you which menu option runs IDLE. Instead, you get these instructions:</p>
<ol>
<li>Open a terminal (XTerm, Konsole, Gnome Terminal …​ whatever)</li>
<li>In the terminal, type <code>idle</code> and hit ENTER</li>
</ol>
<p>If you happen to have IDLE in your environment’s equivalent of a Start menu, then you can just use that.</p>
<p>IDLE will start with something that looks like some sort of command line interface — kind of like a colorful DOS box or XTerm. That is the shell, and it allows you to perform the next step:</p>
<h3 id="using-the-idle-shell-writing-code">Using the IDLE Shell (<em>Writing Code!</em>)</h3>
<p>Let’s see, how do we run Python code in the IDLE shell?</p>
<ol>
<li>Type it in and watch it go!</li>
</ol>
<p>Hmm… maybe a <em>little</em> more detail would be helpful here.</p>
<p>The IDLE shell allows you to enter code — from simple statements to function and class definitions — and execute it immediately. Since you have the shell open already, type in this example:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; print &#34;Hello, world!&#34;</code></pre>
</figure><p><figure>
    <img src="//attachments/img/2001/idle.png" alt="IDLE screenshot"/></figure></p>
<p>The <code>&gt;&gt;&gt;</code> is the shell prompt, showing that you can type something here. You may notice that the characters you type show up in different colors as you enter them into the shell. This is called &ldquo;syntax highlighting&rdquo;. It is basically just the environment helping you see more or less how the code will be broken down by Python — important <em>keywords</em> are one color, <em>strings</em> of text are another, and so on.</p>
<p>Press the ENTER key, and the shell will perform that command right away:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; print &#34;Hello, world!&#34;
Hello, world!
&gt;&gt;&gt;</code></pre>
</figure><p>The shell allows you to define more complex things, too. Say you want to get the user’s name, and print a customized &ldquo;Hello you!&rdquo; for the user.</p>
<p>First, you have to get their name:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; name = raw_input(&#34;Please enter your name: &#34;)</code></pre>
</figure><p><a href="https://docs.python.org/2/library/functions.html#raw_input">raw_input</a>is a function that displays a prompt to the user, gets some keyboard input from them, and sends what they typed back to you. I want to use that typed-in name in a moment, so I save the result in the variable <code>name</code>. A <em>variable</em> is basically just something you want the computer to remember so that you can use it later. What’s a <em>function</em>? Don’t worry about that today. Basically, it’s something you feed data into, and get data out of — kind of a mini-program in your program. That’s all we need to know for right now.</p>
<p>When you press ENTER this time, you will be shown a prompt. In IDLE, this prompt shows up simply as some text printed out in the shell. In PythonWin it opens a little window showing the message you handed to <code>raw_input()</code> and a space for giving your answer.</p>
<p>Here’s what I see in IDLE:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; name = raw_input(&#34;Enter your name: &#34;)
Enter your name:</code></pre>
</figure><p>I provide my name (&ldquo;Brian&rdquo;), and Python quietly saves that answer in the variable <code>name</code>, then waits for me to do something new. One of the things that confused me when I first tried <code>raw_input()</code> in the Python shell was: how do I know that Python actually grabbed the name I gave? Well, it turns out that it’s easy enough to ask:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; print name
Brian</code></pre>
</figure><p>When you want to get at a value that Python has stored for you, all you have to do is call it by name. In this case, I just wanted to print out the value of <code>name</code> — which was filled in when I typed my name at the prompt — and that’s exactly what I told Python to do. Pretty simple, yes?</p>
<p>Okay, so it has my name. What was I trying to do again? Oh yeah, the custom &ldquo;Hello&rdquo; thing. Let’s make it print &ldquo;Hello, Brian&rdquo; — or &ldquo;Craig&rdquo;, or &ldquo;Susan&rdquo;, or whatever name you gave to <code>raw_input()</code> — ummm — I lost myself again. Let me get back on track here.</p>
<p>Wait. How are we supposed to do this? You know, take a value, and write it along with some other text?</p>
<p>Here’s the easiest way:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; print &#34;Hello&#34;, name
Hello Brian</code></pre>
</figure><p>Every time you normally tell Python to print something, it will print that something out, and then start a new line. If you paste a comma onto the end of the thing you want to print, it’s just like a comma in conversation. It means that you’re pausing for air, and the sentence isn’t done yet. Instead of starting a new line, Python just inserts a space. The next thing that gets printed will show up on the same line.</p>
<p>In this case, Python prints the phrase &ldquo;Hello&rdquo;, followed by a space, and ending with the name that was given to it by <code>raw_input</code>.</p>
<p>You can print several things at once, too. Just put a comma in between each item to be printed.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; print &#34;Hello&#34;, name, &#34;- good to see you!&#34;
Hello Brian - good to see you!</code></pre>
</figure><p>Wow. That made me feel pretty good. It’s amazing how just a few nice words can lift your mood — even if you have to write them yourself!</p>
<p>What if we wanted to be able to get that warm fuzzy feeling any time? It’s only two lines of code. We could probably enter that in the shell when we wanted some warm words. But there’s a school of  programming that tells us Laziness is a virtue. Why write the same two lines again and again, when we could write them once, call it a program, and run that program anytime we felt blue?</p>
<p>Let’s find out how to do just that.</p>
<h2 id="how-to-make-your-own-python-program">How to Make Your Own Python Program</h2>
<p>Even though the IDLE shell is pretty neat, and <em>very</em> useful for figuring out whether a code idea will work, it’s not any good for actual programs.</p>
<p>Don’t get all huffy. I said the IDLE <em>shell</em> wasn’t good for programs, not that <em>IDLE</em> is no good for programs.</p>
<p>To edit a Python script in IDLE, simply go to the &ldquo;File&rdquo; menu and select &ldquo;New Window&rdquo;. This will open a new window for editing Python stuff.  This is not a shell, but a <a href="https://en.wikipedia.org/wiki/Microsoft_Notepad">Notepad</a>-like text <a href="/post/2001/07/editors/">editor</a>.</p>
<p>In your new window, enter this code:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># hello.py</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  Get the user&#39;s name and print a friendly hello</span>
</span></span><span class="line"><span class="cl"><span class="n">name</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="s2">&#34;Please enter your name: &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="s2">&#34;Hello&#34;</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="s2">&#34;- good to see you!&#34;</span></span></span></code></pre>
</figure><p>Most of it is the same as what we entered in the shell, but what’s with those first couple of lines?</p>
<p>Well, they’re Python comments. Comments start from the character <code>#</code>, and extend to the end of the line that you wrote them on. Python  ignores comments, which means that you can use them to explain what is going on in your code. Comments are good. When you come back to look at a complex script after several months, you might forget what some block of code does. Having the comments there to remind you will make it that much easier to sort everything out.</p>
<p>I like to start every one of my scripts off with a quick header to describe the purpose of the program. Here is the rough template:</p>
<p><a href="https://www.python.org/dev/peps/pep-0257/">Docstrings</a> would actually be better for script headers, but:</p>
<ol>
<li>I haven’t described those yet</li>
<li>I needed an excuse to show you what comments look like.</li>
</ol>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># filename</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  A quick description of what this program does</span></span></span></code></pre>
</figure><p>Of course, your header can be as complicated as you like:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># # # # # # # #</span>
</span></span><span class="line"><span class="cl"><span class="c1"># hello.py</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  Get the user&#39;s name and print a friendly hello</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># AUTHOR</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  Brian Wisti (brianwisti@pobox.com)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># DATE</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  26 December 2008</span>
</span></span><span class="line"><span class="cl"><span class="c1"># VERSION</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  1.1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># PURPOSE</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  Demonstration script for my python tutorial at</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  http://www.coolnamehere.com/geekery/python/pythontut.html</span>
</span></span><span class="line"><span class="cl"><span class="c1"># USAGE</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  python hello.py</span>
</span></span><span class="line"><span class="cl"><span class="c1"># LICENSE</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  You may copy and redistribute this program as you see fit, with no</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  restrictions.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># WARRANTY</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  This program comes with NO warranty, real or implied.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># HISTORY</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  1.0 19 January 2001</span>
</span></span><span class="line"><span class="cl"><span class="c1">#    Initial release for Python Babysteps Tutorial</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  1.1 26 December 2008</span>
</span></span><span class="line"><span class="cl"><span class="c1">#    Updated for Python version 2.6</span>
</span></span><span class="line"><span class="cl"><span class="c1"># # # # # # # #</span></span></span></code></pre>
</figure><p>Just try to match the header complexity to the program. Using this header for a program that consists of two lines of code might be a <em>little</em> bit of overkill. I usually start with something like the two-line header and expand it as I see fit.</p>
<p>After you enter your script, you need to save it. That’s easy. Just go to the &ldquo;File&rdquo; menu and select &ldquo;Save As…​&rdquo;. You will be shown a dialog that should look pretty familiar if you’ve ever worked with an editing program. Choose a directory to place your program, enter a name ending with <code>.py</code> — to let your computer know that this is a Python file — and click &ldquo;Save&rdquo;. You have now saved your file.</p>
<p>I bet you’re just itching to run that program! Since you’ve already got <code>hello.py</code> open, all you have to do is go to the &ldquo;Run&rdquo; menu, and select &ldquo;Run module&rdquo;. Python puts you in the IDLE shell, where you see  something like this:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >Python 2.6 (r26:66714, Nov 11 2008, 12:18:59)
[GCC 3.3.1 (SuSE Linux)] on linux2
Type &#34;copyright&#34;, &#34;credits&#34; or &#34;license()&#34; for more information.

    ****************************************************************
    Personal firewall software may warn about the connection IDLE
    makes to its subprocess using this computer&#39;s internal loopback
    interface.  This connection is not visible on any external
    interface and no data is sent to or received from the Internet.
    ****************************************************************

IDLE 2.6
&gt;&gt;&gt; ================================ RESTART ================================
&gt;&gt;&gt;
Please enter your name:</code></pre>
</figure><p>Enter your name, press ENTER, and there’s your warm fuzzy greeting!</p>
<p>You may be happy with <code>hello.py</code> right now, but you will probably want to change it later: make it print out a different greeting, for example. To do that, you need to know how to open a Python file for editing.</p>
<p>Actually, it’s pretty easy. Go to the &ldquo;File&rdquo; menu, select &ldquo;Open…&rdquo; and select your file. IDLE automatically opens your file in an editing window, where you can edit, save, and run your program to your heart’s content.</p>
<p>There are two more ways to run a Python program in Windows.</p>
<p>The Python installation automatically associates the <code>py</code> extension with Python program, which tells Windows that anything ending with <code>.py</code> should be handed over to Python. That means you can just double-click on <code>hello.py</code>, and Python will automatically run it. Unfortunately, that’s not very helpful for most of the stuff we’ll be writing. Try it yourself. You get a DOS box prompting you for your name, but the box disappears almost as soon as you press ENTER! That is kind of annoying.</p>
<p>But there’s another trick which we can use until we’re writing more complex applications which can keep themselves open or don’t need a DOS box. Simply open your own DOS box (&lsquo;Start Menu | Programs | Accessories | Command Prompt&rsquo;), move to the directory that contains your script, and call Python yourself:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >C:&gt;cd scripts
C:\scripts&gt;python hello.py
Please enter your name: Brian
Hello Brian - good to see you!
C:\scripts&gt;</code></pre>
</figure><p>In order for this to work, you’ll have to have your Python installation directory specified as part of your environment variable <code>PATH</code>. How you do that depends on what version of Windows (or which command line shell for Linux) you are running. Once again, I’m lazy, so I’m leaving it alone.</p>
<p>To be honest, I recommend you stick with IDLE interface for now. There is less to remember.</p>
<p>Finally, you might want to know how to <em>leave</em> IDLE. The menu command &lsquo;File|Exit&rsquo; is all you need to remember. If you haven’t saved all of the files you have been editing, IDLE will check if you want to save them before you quit. Answer as you see fit, save any files you want, and you’re out of IDLE in the real world.</p>
<p>And you know what? You know how to use the IDLE shell, as well as how to edit, save, and run your very own Python scripts. You’re a programmer now! Okay, there’s still plenty more to learn, but you are ready to start exploring.</p>
<h3 id="what-next">What Next?</h3>
<p>This was just the quickest introduction to Python. Hopefully you are warmed up and ready for more. Now you should start one of the recommended tutorials at the <a href="https://wiki.python.org/moin/BeginnersGuide">Python BeginnersGuide</a>.</p>
<p>I have a few favorites of my own.</p>
<ul>
<li>The Official Python Tutorial
<ul>
<li><a href="http://docs.python.org/tutorial/">http://docs.python.org/tutorial/</a></li>
<li><a href="http://docs.python.org/py3k/tutorial/index.html">http://docs.python.org/py3k/tutorial/index.html</a></li>
</ul>
</li>
<li>Dive Into Python
<a href="http://www.diveintopython.net/">http://www.diveintopython.net/</a></li>
<li>How To Think Like a Computer Scientist In Python
<a href="http://openbookproject.net/thinkcs/python/english2e/">http://openbookproject.net/thinkcs/python/english2e/</a></li>
</ul>
<h3 id="quick-reference-using-idle">Quick Reference: Using IDLE</h3>
<table>
<thead>
<tr>
<th>To Do This</th>
<th>Use This Menu Command</th>
</tr>
</thead>
<tbody>
<tr>
<td>Start IDLE</td>
<td>Start &gt; Programs &gt; Python 2.6 &gt; IDLE (Python GUI)</td>
</tr>
<tr>
<td>Edit a New Python File</td>
<td>File &gt; New Window</td>
</tr>
<tr>
<td>Save a New Python File</td>
<td>File &gt; Save As…</td>
</tr>
<tr>
<td>Open a Python File</td>
<td>File &gt; Open</td>
</tr>
<tr>
<td>Save a Python File</td>
<td>File &gt; Save</td>
</tr>
<tr>
<td>Run your script in IDLE</td>
<td>Run &gt; Run Module</td>
</tr>
<tr>
<td>Quit IDLE</td>
<td>File &gt; Exit</td>
</tr>
</tbody>
</table>
]]></content:encoded>
</item>
</channel>
</rss>
