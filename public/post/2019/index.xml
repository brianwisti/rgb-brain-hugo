<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2019onRandom Geekery</title>
    <link>https://randomgeekery.org/post/2019/</link>
    <description>
      Recent contentin2019 on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 21 Jan 2024 21:46:53 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/post/2019/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: At last I have a mission statement</title>
  <link>https://randomgeekery.org/post/2019/12/at-last-i-have-a-mission-statement/</link>
  <pubDate>Sun, 29 Dec 2019 12:47:18 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/12/at-last-i-have-a-mission-statement/</guid>
  <description>The stress ball lasted four days under my stress load, but the reader board is a Christmas present that will keep on giving.
LESS CODE</description>
   <category>post</category> 
   <category>note</category> 
   <category>life</category>  <category>work</category>  <category>code</category>  <category>christmas</category> 
  <content:encoded><![CDATA[<p>The stress ball lasted four days under <em>my</em> stress load, but the reader board is a Christmas present that will keep on giving.</p>
<p><figure>
    <img src="/../../../attachments/img/2019/cover-2019-12-29.jpg" alt="attachments/img/2019/cover-2019-12-29.jpg"/></figure>
LESS CODE</p>
]]></content:encoded>
</item>
<item>
  <title>Post: DWIM is consistent</title>
  <link>https://randomgeekery.org/post/2019/12/dwim-is-consistent/</link>
  <pubDate>Fri, 27 Dec 2019 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/12/dwim-is-consistent/</guid>
  <description>Moshe Zadka has been writing a mostly excellent exploration of the Zen of Python for Opensource.com. Not sure I approve of this take on guessing, from The importance of consistency in your Python code:
What should the result of 1 &#43; &#34;1&#34; be? Both &#34;11&#34; and 2 would be valid guesses. This expression is ambiguous: there is no single thing it can do that would not be a surprise to at least some people.</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>python</category>  <category>dwim</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p>Moshe Zadka has been <a href="https://opensource.com/users/moshez">writing</a> a mostly excellent exploration of the <a href="https://www.python.org/dev/peps/pep-0020/">Zen of  Python</a> for <a href="https://opensource.com">Opensource.com</a>. Not sure I approve of this take on guessing, from <a href="https://opensource.com/article/19/12/zen-python-consistency">The importance of consistency in your Python code</a>:</p>
<blockquote>
<p>What should the result of <code>1 + &quot;1&quot;</code> be? Both <code>&quot;11&quot;</code> and <code>2</code> would be
valid guesses. This expression is ambiguous: there is no single thing
it can do that would not be a surprise to at least some people.</p>
<p>Some languages choose to guess. In JavaScript, the result is <code>&quot;11&quot;</code>.
In Perl, the result is 2. In <code>C</code>, naturally, the result is the empty
string. In the face of ambiguity, JavaScript, Perl, and C all guess.</p>
</blockquote>
<p>I can’t speak for the other languages, but <a href="/card/perl/">card/Perl</a> isn’t guessing. It’s adding these two values as numbers because we <em>told it to</em> by using the numeric <code>+</code> operator. If we wanted a string, we would tell Perl by using the <code>.</code> concatenation operator.</p>
<p>Let’s fire up <a href="https://metacpan.org/pod/distribution/Eval-WithLexicals/bin/tinyrepl">tinyrepl</a> for a quick demonstration.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ tinyrepl
re.pl$ 1 &#43; &#34;1&#34;
2
re.pl$ 1 . &#34;1&#34;
11</code></pre>
</figure><p>Perl <a href="https://perldoc.perl.org/perlop.html#Additive-Operators">operators</a> do the type casting for you. This is <a href="https://en.wikipedia.org/wiki/DWIM">DWIM</a> — “Do What I Mean” — in action. You say you want numbers? Perl gives you numbers. You say you want strings? Perl gives you strings.</p>
<p>Are <code>1 + &quot;1&quot;</code> and <code>1 . &quot;1&quot;</code> better than <code>1 + int(&quot;1&quot;)</code> and <code>str(1) + &quot;1&quot;</code>? I don’t know. Perl was born for text processing. Most of its <a href="https://en.wikipedia.org/wiki/Affordance">affordances</a> make the most sense in that context.</p>
<p>DWIM can be surprising to those unfamiliar with this approach. But it’s not guessing.</p>
<p>The points about consistency and ambiguity are solid. The <a href="/card/zen-of-python/">card/Zen of Python</a> can be applied with slight modifications to all programming. Just remember that &ldquo;obvious&rdquo; is different in different languages.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Removing mmark has me grumbly</title>
  <link>https://randomgeekery.org/post/2019/12/removing-mmark-has-me-grumbly/</link>
  <pubDate>Tue, 24 Dec 2019 23:42:30 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/12/removing-mmark-has-me-grumbly/</guid>
  <description>So the Hugo team is deprecating the mmark Markdown parser. This is an understandable decision. Providing all those options must make Hugo a challenge to maintain and improve.
Well anyways I fixed it — sort of — with some card/Perl.
I spent my free time wrestling with trivial site details instead of writing posts and having fun. If it was due to my own misguided experimentation, that would be fine. That happens all the time.</description>
   <category>post</category> 
   <category>note</category> 
   <category>site</category>  <category>hugo</category>  <category>whinging</category> 
  <content:encoded><![CDATA[<p>So the <a href="https://gohugo.io">Hugo</a> team is <a href="https://github.com/gohugoio/hugo/issues/6486">deprecating</a> the <a href="https://mmark.miek.nl/">mmark</a> Markdown parser. This is an understandable decision. Providing all those options must make Hugo a challenge to maintain and improve.</p>
<p>Well anyways I fixed it — sort of — with some <a href="/card/perl/">card/Perl</a>.</p>
<p>I spent my free time wrestling with trivial site details instead of writing posts and having fun. If it was due to my own misguided experimentation, that would be fine. That happens all the time. But no. I had to convert half my site because of someone else’s decisions.</p>
<p>That sort of thing sticks with you.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: I got her a card for her birthday</title>
  <link>https://randomgeekery.org/post/2019/12/i-got-her-a-card-for-her-birthday/</link>
  <pubDate>Thu, 19 Dec 2019 21:46:08 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/12/i-got-her-a-card-for-her-birthday/</guid>
  <description>A paraphrased conversation:
Me “What do you want for your birthday?” She “Oh, nothing. A card, maybe.” Me “I can do that.” a stack of custom cards printed at Fedex
That’s one of her drawings superimposed over one of my drawings.
She loved it.</description>
   <category>post</category> 
   <category>note</category> 
   <category>drawing</category>  <category>life</category>  <category>with-my-sweetheart</category> 
  <content:encoded><![CDATA[<p>A paraphrased conversation:</p>
<dl>
<dt>Me</dt>
<dd>“What do you want for your birthday?”</dd>
<dt>She</dt>
<dd>“Oh, nothing. A card, maybe.”</dd>
<dt>Me</dt>
<dd>“I can do that.”</dd>
</dl>
<p><figure>
    <img src="/../../../attachments/img/2019/cover-2019-12-19.jpg" alt="attachments/img/2019/cover-2019-12-19.jpg"/></figure>
a stack of custom cards printed at Fedex</p>
<p>That’s one of her drawings superimposed over one of my drawings.</p>
<p>She loved it.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Let&#39;s call the notes experiment a success</title>
  <link>https://randomgeekery.org/post/2019/12/lets-call-the-notes-experiment-a-success/</link>
  <pubDate>Thu, 19 Dec 2019 08:00:18 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/12/lets-call-the-notes-experiment-a-success/</guid>
  <description>Yep. I love the Notes experiment. It encourages me to post quick thoughts frequently.
I’m officially assimilating Notes into the main flow of the site. That means tags instead of their own taxonomy. It also means they get listed with posts in the blog
Got a few ideas for a tidy separation of the two, but for taxonomy and history we are back to one main flow.
2024-01-14
By now “note” is just a category taxonomy, as I’m shifting slightly away from the microblogging card/tumblelog idea to regular snapshots extracted from my personal daily notes.</description>
   <category>post</category> 
   <category>note</category> 
   <category>site</category>  <category>notes</category>  <category>assimilation</category>  <category>happens-all-the-time</category> 
  <content:encoded><![CDATA[<p>Yep. I love the Notes experiment. It encourages me to post quick thoughts frequently.</p>
<p>I’m officially assimilating Notes into the main flow of the site. That means tags instead of their own taxonomy. It also means they get listed with posts in the blog</p>
<p>Got a few ideas for a tidy separation of the two, but for taxonomy and history we are back to one main flow.</p>
<blockquote>
<p><strong>2024-01-14</strong></p>
<p>By now &ldquo;note&rdquo; is just a category taxonomy, as I&rsquo;m shifting slightly away from the microblogging <a href="/card/tumblelog/">card/tumblelog</a> idea to regular snapshots extracted from my personal daily notes.</p>
</blockquote>
]]></content:encoded>
</item>
<item>
  <title>Post: Again with the manual symmetry</title>
  <link>https://randomgeekery.org/post/2019/12/again-with-the-manual-symmetry/</link>
  <pubDate>Sun, 15 Dec 2019 12:37:51 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/12/again-with-the-manual-symmetry/</guid>
  <description>I spent forty hours over the last month or so inbox/Drawing this.
Couldn’t decide which aspect I liked best. Line work? Color? Values? So I went with all three.
On another note, I kinda want to study more about image formats. JPEG clearly has some issues with the red. PNG is unacceptably large thanks to all the detail work.</description>
   <category>post</category> 
   <category>note</category> 
   <category>drawing</category>  <category>procreate</category>  <category>symmetry</category> 
  <content:encoded><![CDATA[<p>I spent forty hours over the last month or so <em>inbox/Drawing</em> this.</p>
<p><figure>
    <img src="/../../../attachments/img/2019/cover-2019-12-15.jpg" alt="attachments/img/2019/cover-2019-12-15.jpg"/></figure></p>
<p>Couldn’t decide which aspect I liked best. Line work? Color? Values? So
I went with all three.</p>
<p>On another note, I kinda want to study more about image formats. JPEG
clearly has some issues with the red. PNG is unacceptably large thanks
to all the detail work.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Always got time for Miyazaki</title>
  <link>https://randomgeekery.org/post/2019/12/always-got-time-for-miyazaki/</link>
  <pubDate>Sat, 14 Dec 2019 02:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/12/always-got-time-for-miyazaki/</guid>
  <description>kaptainkristian demonstrates how sound, animation pacing, background animation, all affect the immersion of a Studio Ghibli film.</description>
   <category>post</category> 
   <category>note</category> 
   <category>watch</category>  <category>art</category> 
  <content:encoded><![CDATA[<p>kaptainkristian demonstrates how sound, animation pacing, background
animation, all affect the immersion of a Studio Ghibli film.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/jM6PPxN1xas" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
]]></content:encoded>
</item>
<item>
  <title>Post: RSS fix, I hope</title>
  <link>https://randomgeekery.org/post/2019/12/rss-fix-i-hope/</link>
  <pubDate>Sun, 01 Dec 2019 20:13:17 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/12/rss-fix-i-hope/</guid>
  <description>Something went wonky in the RSS for this morning’s post. So I rewrote the RSS template. Classic me.</description>
   <category>post</category> 
   <category>note</category> 
   <category>rss</category>  <category>site</category>  <category>hugo</category>  <category>oops</category> 
  <content:encoded><![CDATA[<p>Something went wonky in the RSS for this morning’s post. So I rewrote the RSS template. Classic me.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Installing Emacs Documentation on POP!_os</title>
  <link>https://randomgeekery.org/post/2019/12/installing-emacs-documentation-on-pop-os/</link>
  <pubDate>Sun, 01 Dec 2019 11:11:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/12/installing-emacs-documentation-on-pop-os/</guid>
  <description>Emacs Info (zoomed with text-scale-adjust)
On a Linux flavor like Ubuntu or Pop!_os which uses apt for package management? Trying to find the built-in Emacs documentation so you can read it without going online? Install emacs-common-non-dfsg.
$ sudo apt install emacs-common-non-dfsg It’s a license thing. The GNU Project distributes the core Emacs documentation under the GNU Free Documentation License. Debian decided years ago that the GFDL didn’t meet the Debian Free Software Guidelines.</description>
   <category>post</category> 
   <category>post</category> 
   <category>emacs</category>  <category>linux</category>  <category>info</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>Apt spells "emacs core docs" as "emacs-common-non-dfsg".</h2><p><figure>
    <img src="/../../../attachments/img/2019/cover-2019-12-01.png" alt="attachments/img/2019/cover-2019-12-01.png"/></figure>
Emacs Info (zoomed with <code>text-scale-adjust</code>)</p>
<p>On a Linux flavor like <a href="https://ubuntu.com/">Ubuntu</a> or <a href="https://system76.com/pop">Pop!_os</a> which uses <a href="https://en.wikipedia.org/wiki/APT%5F%28software%29"><code>apt</code></a> for package management? Trying to find the built-in <a href="/card/emacs/">Emacs</a> documentation so you can read it without going online? Install <a href="https://packages.debian.org/jessie/emacs24-common-non-dfsg"><code>emacs-common-non-dfsg</code></a>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ sudo apt install emacs-common-non-dfsg</code></pre>
</figure><p>It’s a license thing. The <a href="https://www.gnu.org/">GNU Project</a> distributes the core <a href="https://www.gnu.org/software/emacs/#Manuals">Emacs</a> documentation under the <a href="https://www.gnu.org/licenses/fdl-1.3.html">GNU Free Documentation License</a>. <a href="https://www.debian.org/">Debian</a> decided <a href="https://www.debian.org/vote/2006/vote%5F001">years ago</a> that the GFDL didn’t meet the <a href="https://www.debian.org/social%5Fcontract#guidelines">Debian Free Software Guidelines</a>. It’s still available – in the non-free repo – though they gave it a name I’ll never remember unless I write it down somewhere.</p>
<p>That decision has rippled down over the years. Even though I haven’t used Debian since the early 2000’s, I needed to know it today. Okay I didn’t <em>need</em> to know it. I could have just read the <a href="https://www.gnu.org/manual/manual.html">online docs</a>.</p>
<p>I always liked the <a href="https://www.gnu.org/software/texinfo/">Info</a> reader and consider it a significant feature when going through an Emacs phase. Though yeah – it’s a bit archaic. Honestly that describes most of Emacs. When I want featureful and flashy I can use <a href="https://code.visualstudio.com/">Visual Studio Code</a> or <a href="https://atom.io/">Atom</a>.</p>
<p>Not even a two hundred word post and I managed to digress. Ah well. Some days are like that.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Directory Listings With Crystal</title>
  <link>https://randomgeekery.org/post/2019/11/directory-listings-with-crystal/</link>
  <pubDate>Fri, 29 Nov 2019 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/11/directory-listings-with-crystal/</guid>
  <description>&lt;p&gt;Okay, I know how to &lt;a href=&#34;https://randomgeekery.org/post/2019/11/summarizing-a-file-with-crystal/&#34;&gt;summarize one file&lt;/a&gt; with &lt;a href=&#34;https://randomgeekery.org/card/crystal/&#34;&gt;card/Crystal&lt;/a&gt;. What about directories?&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>crystal</category>  <category>files</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>I swear I'm not reinventing `ls`.</h2><p>Okay, I know how to <a href="/post/2019/11/summarizing-a-file-with-crystal/">summarize one file</a> with <a href="/card/crystal/">card/Crystal</a>. What about directories?</p>
<h2 id="list-files-in-a-directory">List files in a directory</h2>
<p>Let’s start with a list of the directory’s contents. We can worry about summarizing them later.</p>
<p><a href="https://crystal-lang.org/api/Dir.html">Dir</a> knows all about directories and their contents. Open a directory with a string containing a path, and ask for its children.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="n">dirname</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;HOME&#34;</span><span class="o">]</span><span class="si">}</span><span class="s2">/Sync/Books/computer&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="nb">Dir</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">dirname</span><span class="p">)</span><span class="o">.</span><span class="n">children</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >[&#34;programmingvoiceinterfaces.pdf&#34;, &#34;Databases&#34;, &#34;task-2.5.1.ref.pdf&#34;, &#34;Perl&#34;, &#34;Tools&#34;,
&#34;devopsish&#34;, &#34;diy&#34;, &#34;Hacking_ The Art of Exploitation, 2nd Edition.pdf&#34;,
&#34;The Linux Programming Interface.pdf&#34;, &#34;Web Layout&#34;, &#34;Java&#34;, &#34;JavaScript&#34;, &#34;Generative_Art.pdf&#34;,
&#34;Mac OS X Lion_ The Missing Manual.PDF&#34;, &#34;highperformanceimages.pdf&#34;, &#34;jsonatwork.pdf&#34;,
&#34;Microsoftish&#34;, &#34;Python&#34;, &#34;Ruby&#34;, &#34;PHP&#34;, &#34;Misc-lang&#34;, &#34;tools&#34;, &#34;Data Science&#34;, &#34;Principles&#34;, &#34;cs&#34;,
&#34;vistaguidesv2&#34;]</code></pre>
</figure><p><a href="https://crystal-lang.org/api/Dir.html#children:Array%28String%29-instance-method">Dir#children</a> gets you all the files in a directory except the special <code>.</code> and <code>..</code> items. If you need those, use <a href="https://crystal-lang.org/api/Dir.html#entries:Array%28String%29-instance-method">Dir#entries</a>.</p>
<p>I need to look at each child if I want a readable summary of the directory. I could mess with the <a href="https://crystal-lang.org/api/Array.html">Array</a> returned by <code>Dir#children</code>. There’s a better way, though. Crystal provides a handy <a href="https://en.wikipedia.org/wiki/Iterator">iterator</a> with
<a href="https://crystal-lang.org/api/Dir.html#each_child%28dirname,&amp;block%29-class-method">Dir#each_child</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="nb">Dir</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">dirname</span><span class="p">)</span><span class="o">.</span><span class="n">each_child</span> <span class="p">{</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">child</span> <span class="p">}</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >programmingvoiceinterfaces.pdf
Databases
task-2.5.1.ref.pdf
Perl
Tools
devopsish
diy
Hacking_ The Art of Exploitation, 2nd Edition.pdf
The Linux Programming Interface.pdf
Web Layout
Java
JavaScript
Generative_Art.pdf
Mac OS X Lion_ The Missing Manual.PDF
highperformanceimages.pdf
jsonatwork.pdf
Microsoftish
Python
Ruby
PHP
Misc-lang
tools
Data Science
Principles
cs
vistaguidesv2</code></pre>
</figure><p>That’s <em>much</em> easier to read. Yes. I can work with <code>Dir#each_child</code> to create a summary.</p>
<h2 id="summarize-the-directory-contents">Summarize the directory contents</h2>
<p>I want file names, sizes, and modification times. I already have the names. <a href="https://crystal-lang.org/api/File/Info.html">File.info</a> provides size and time details. Formatting can be handled with a mix of <a href="https://crystal-lang.org/api/toplevel.html#sprintf%28format_string,args:Array%7CTuple%29:String-class-method">sprintf</a> and <a href="https://crystal-lang.org/api/Number.html#format%28separator=%27.%27,delimiter=%27,%27,decimal_places:Int?=nil,*,group:Int=3,only_significant:Bool=false%29:String-instance-method">Number#format</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="nb">Dir</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">dirname</span><span class="p">)</span><span class="o">.</span><span class="n">each_child</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">info</span> <span class="o">=</span> <span class="nb">File</span><span class="o">.</span><span class="n">info</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">dirname</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">child</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">puts</span> <span class="s2">&#34;%-50s %10d %24s&#34;</span> <span class="o">%</span> <span class="p">{</span> <span class="n">child</span><span class="p">,</span> <span class="n">info</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">format</span><span class="p">,</span> <span class="n">info</span><span class="o">.</span><span class="n">modification_time</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>I worked these column widths out manually. There are more robust approaches. In fact, I’ll get to one of them in a few paragraphs.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >programmingvoiceinterfaces.pdf                     18,597,798  2019-02-17 15:32:27 UTC
Databases                                               4,096  2019-10-26 04:31:25 UTC
task-2.5.1.ref.pdf                                    130,899  2019-02-17 15:32:27 UTC
Perl                                                    4,096  2019-10-26 04:31:25 UTC
Tools                                                   4,096  2019-10-25 14:44:36 UTC
devopsish                                               4,096  2019-10-26 04:31:25 UTC
diy                                                     4,096  2019-10-19 07:27:54 UTC
Hacking_ The Art of Exploitation, 2nd Edition.pdf   4,218,534  2019-02-17 15:32:26 UTC
The Linux Programming Interface.pdf                19,628,791  2019-02-17 15:32:26 UTC
Web Layout                                              4,096  2019-10-19 07:27:57 UTC
Java                                                    4,096  2019-10-26 04:31:25 UTC
JavaScript                                              4,096  2019-10-26 04:31:25 UTC
Generative_Art.pdf                                 22,777,770  2019-02-17 15:32:26 UTC
Mac OS X Lion_ The Missing Manual.PDF              43,051,912  2019-02-17 15:32:26 UTC
highperformanceimages.pdf                          51,412,248  2019-02-17 15:32:26 UTC
jsonatwork.pdf                                     10,193,473  2019-02-17 15:32:26 UTC
Microsoftish                                            4,096  2019-10-19 07:28:00 UTC
Python                                                  4,096  2019-10-26 04:31:25 UTC
Ruby                                                    4,096  2019-10-26 04:31:25 UTC
PHP                                                     4,096  2019-10-26 04:31:25 UTC
Misc-lang                                               4,096  2019-10-26 04:31:25 UTC
tools                                                   4,096  2019-10-25 14:41:26 UTC
Data Science                                            4,096  2019-10-26 04:31:25 UTC
Principles                                              4,096  2019-10-20 01:23:43 UTC
cs                                                      4,096  2019-10-19 01:37:08 UTC
vistaguidesv2                                           4,096  2019-10-19 06:56:45 UTC</code></pre>
</figure><p>This is nice and tidy! Of course, now I have more thoughts. The items need to be sorted — by name is good enough. I also want a more obvious indicator which ones are directories.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="nb">Dir</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">dirname</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">dir</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span> <span class="o">=</span> <span class="nb">File</span><span class="o">.</span><span class="n">info</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">dirname</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">child</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">child</span> <span class="o">+=</span> <span class="s2">&#34;/&#34;</span> <span class="k">if</span> <span class="n">info</span><span class="o">.</span><span class="n">directory?</span>
</span></span><span class="line"><span class="cl">    <span class="nb">puts</span> <span class="s2">&#34;%-50s %10s %24s&#34;</span> <span class="o">%</span> <span class="p">{</span> <span class="n">child</span><span class="p">,</span> <span class="n">info</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">format</span><span class="p">,</span> <span class="n">info</span><span class="o">.</span><span class="n">modification_time</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>If a trailing <code>/</code> for directories is good enough for <code>ls -F</code>, it’s good enough for me.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >Data Science/                                           4,096  2019-10-26 04:31:25 UTC
Databases/                                              4,096  2019-10-26 04:31:25 UTC
Generative_Art.pdf                                 22,777,770  2019-02-17 15:32:26 UTC
Hacking_ The Art of Exploitation, 2nd Edition.pdf   4,218,534  2019-02-17 15:32:26 UTC
Java/                                                   4,096  2019-10-26 04:31:25 UTC
JavaScript/                                             4,096  2019-10-26 04:31:25 UTC
Mac OS X Lion_ The Missing Manual.PDF              43,051,912  2019-02-17 15:32:26 UTC
Microsoftish/                                           4,096  2019-10-19 07:28:00 UTC
Misc-lang/                                              4,096  2019-10-26 04:31:25 UTC
PHP/                                                    4,096  2019-10-26 04:31:25 UTC
Perl/                                                   4,096  2019-10-26 04:31:25 UTC
Principles/                                             4,096  2019-10-20 01:23:43 UTC
Python/                                                 4,096  2019-10-26 04:31:25 UTC
Ruby/                                                   4,096  2019-10-26 04:31:25 UTC
The Linux Programming Interface.pdf                19,628,791  2019-02-17 15:32:26 UTC
Tools/                                                  4,096  2019-10-25 14:44:36 UTC
Web Layout/                                             4,096  2019-10-19 07:27:57 UTC
cs/                                                     4,096  2019-10-19 01:37:08 UTC
devopsish/                                              4,096  2019-10-26 04:31:25 UTC
diy/                                                    4,096  2019-10-19 07:27:54 UTC
highperformanceimages.pdf                          51,412,248  2019-02-17 15:32:26 UTC
jsonatwork.pdf                                     10,193,473  2019-02-17 15:32:26 UTC
programmingvoiceinterfaces.pdf                     18,597,798  2019-02-17 15:32:27 UTC
task-2.5.1.ref.pdf                                    130,899  2019-02-17 15:32:27 UTC
tools/                                                  4,096  2019-10-25 14:41:26 UTC
vistaguidesv2/                                          4,096  2019-10-19 06:56:45 UTC</code></pre>
</figure><p>This is better! I can use this information. Time to look at arbitrary directories.</p>
<h2 id="specifying-a-directory-via-argv">Specifying a directory via <code>ARGV</code></h2>
<p><a href="https://crystal-lang.org/api/toplevel.html#ARGV">ARGV</a> is a top level array holding arguments intended for your program. If we called a compiled Crystal program like this:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ./list ~/Sync/Books/computer</code></pre>
</figure><p><code>~/Sync/Books/computer</code> would be the first and only item in <code>ARGV</code>.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Some languages include the program name in their list of arguments. Crystal keeps the program name in <code>PROGRAM_NAME</code>, and the arguments in <code>ARGV</code>.</p>
</blockquote>
<p>If I needed anything more than &ldquo;grab the first item in <code>ARGV</code>,&rdquo; I’d probably use <a href="https://crystal-lang.org/api/OptionParser.html">OptionParser</a>. But all I need is &ldquo;grab the first item in <code>ARGV</code>.&rdquo;</p>
<p><strong><code>list.cr</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># list information about a directory&#39;s contents</span>
</span></span><span class="line"><span class="cl"><span class="n">dirname</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Dir</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">dirname</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">dir</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span> <span class="o">=</span> <span class="nb">File</span><span class="o">.</span><span class="n">info</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">dirname</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">child</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">child</span> <span class="o">+=</span> <span class="s2">&#34;/&#34;</span> <span class="k">if</span> <span class="n">info</span><span class="o">.</span><span class="n">directory?</span>
</span></span><span class="line"><span class="cl">    <span class="nb">puts</span> <span class="s2">&#34;%-50s %10s %24s&#34;</span> <span class="o">%</span> <span class="p">{</span> <span class="n">child</span><span class="p">,</span> <span class="n">info</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">format</span><span class="p">,</span> <span class="n">info</span><span class="o">.</span><span class="n">modification_time</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ crystal run list.cr -- ~/Sync/pictures/
1/                                                      4,096  2019-10-18 15:28:30 UTC
1999/                                                   4,096  2019-10-18 15:28:30 UTC
2001/                                                   4,096  2019-10-18 15:28:30 UTC
2007/                                                   4,096  2019-10-18 15:28:30 UTC
2009/                                                   4,096  2019-10-18 15:28:30 UTC
2010/                                                   4,096  2019-10-18 15:28:30 UTC
2011/                                                   4,096  2019-10-18 15:28:30 UTC
2012/                                                   4,096  2019-10-18 15:28:30 UTC
2013/                                                   4,096  2019-10-18 15:28:30 UTC
2014/                                                   4,096  2019-10-18 15:28:30 UTC
2015/                                                   4,096  2019-10-18 15:28:30 UTC
2016/                                                   4,096  2019-10-18 15:28:30 UTC
2017/                                                   4,096  2019-10-18 15:28:30 UTC
2018/                                                   4,096  2019-10-18 15:28:30 UTC
digikam4.db                                         4,386,816  2019-02-17 15:58:19 UTC
recognition.db                                      4,755,456  2019-02-17 15:58:19 UTC
thumbnails-digikam.db                              197,328,896  2019-02-17 15:58:21 UTC</code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>When using <code>crystal run</code> to execute a script, use <code>--</code> to split arguments for <code>crystal</code> and those for your script. <code>list.cr</code> is for Crystal. <code>~/Sync/pictures/</code> is for the script.</p>
</blockquote>
<p>This works, if you use it exactly right. Right now is where I’m tempted to say &ldquo;Error handling is left as an exercise for the reader.&rdquo; But no. Not this time.</p>
<p>Let’s build this up so it handles common errors and concerns.</p>
<h2 id="writing-listcr">Writing <code>list.cr</code></h2>
<p>There are a few things I want this program to do.</p>
<ul>
<li>Tell me if I forgot the argument.</li>
<li>Tell me if the argument isn’t a real path.</li>
<li>If the argument is a directory, summarize the contents of that directory.</li>
<li>If the argument is a file, not a directory? Um — make a listing with one entry for the file.</li>
<li>I really want to be a little more precise with the column sizes.</li>
</ul>
<p>That covers the likeliest possibilities running this program on my own computer. Besides, Crystal will let me know I forgot something.</p>
<p>I assembled this <a href="https://en.wikipedia.org/wiki/Top-down_and_bottom-up_design">top-down</a>, describing what I want to do and then describing how to do it. And even though Crystal doesn’t require a main method, that seems like a good place to start. If nothing else, it keeps the core logic in one place.</p>
<p>What does <code>main</code> do? It displays a <code>summary_table</code> of whatever I hand to it. If anything goes wrong, it quits with a <code>fatal_error</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="nb">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Print a brief file or directory summary specified via command line argument</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">fatal_error</span><span class="p">(</span><span class="s2">&#34;Missing FILENAME&#34;</span><span class="p">)</span> <span class="k">if</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">begin</span>
</span></span><span class="line"><span class="cl">    <span class="nb">puts</span> <span class="n">summary_table</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">  <span class="k">rescue</span> <span class="n">ex</span>
</span></span><span class="line"><span class="cl">    <span class="n">fatal_error</span> <span class="n">ex</span><span class="o">.</span><span class="n">message</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>I don’t need to consider every possible error. But I should make sure we’re polite about the errors we do encounter. Rescue any <a href="https://crystal-lang.org/reference/syntax_and_semantics/exception_handling.html">exceptions</a> that occur and hand them to <code>fatal_error</code>.</p>
<p><code>fatal_error</code> prints its <code>error</code> message and usage info to <a href="https://crystal-lang.org/api/toplevel.html#STDERR">STDERR</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># Quit with an error and usage info</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">fatal_error</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="no">STDERR</span><span class="o">.</span><span class="n">puts</span> <span class="n">error</span>
</span></span><span class="line"><span class="cl">  <span class="no">STDERR</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&#34;USAGE: </span><span class="si">#{</span><span class="no">PROGRAM_NAME</span><span class="si">}</span><span class="s2"> FILENAME&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">exit</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>That non-zero <a href="https://crystal-lang.org/api/toplevel.html#exit%28status=0%29:NoReturn-class-method">exit</a> tells the shell something went wrong. Handy for piped commands and customized shell prompts that incorporate execution status.</p>
<p>The summary table glues together a collection of summary rows — even if it’s just a collection of one — composed from file summaries and formatted according to some basic guidelines about column size.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># Return a string description of a file or directory</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">summary_table</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">summaries</span> <span class="o">=</span> <span class="n">dir_summaries</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span> <span class="o">||</span> <span class="p">{</span> <span class="n">file_summary</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">columns</span> <span class="o">=</span> <span class="n">column_sizes</span><span class="p">(</span><span class="n">summaries</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">summaries</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">summary_row</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">columns</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p><a href="https://dev.to/walpolesj/short-circuit-assignment-25ik">Short-circuit assignment</a> uses the <a href="https://crystal-lang.org/reference/syntax_and_semantics/or.html">or</a> operator <code>||</code> to succinctly set our summaries. We got a directory summary? Use it. No? Okay, try treating it as a single file. Whichever one returns a useful value first gets assigned to <code>summaries</code>.</p>
<p>Since we’re going top-down, we can say that a directory summary is a sorted collection of files summaries and move on.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># Return a multiline description of a directory</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">dir_summaries</span><span class="p">(</span><span class="n">dirname</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">unless</span> <span class="nb">File</span><span class="o">.</span><span class="n">directory?</span> <span class="n">dirname</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nb">Dir</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">dirname</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="n">dir</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span> <span class="n">file_summary</span> <span class="nb">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dirname</span><span class="p">,</span> <span class="n">child</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>Returning early for non-directories simplifies short-circuit assignment. This method knows it may be handed a regular file. Stopping right away prevents that from being treated the same as an error.</p>
<p>Oh <em>here’s</em> the work of summarizing. Build a name. Describe the size. Turn the file’s modification time into something we can read.</p>
<p>Okay that’s not much work after all. Especially considering that I already figured out how to describe size.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># Return a one-line description of a file</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">file_summary</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">basename</span> <span class="o">=</span> <span class="nb">File</span><span class="o">.</span><span class="n">basename</span> <span class="n">filename</span>
</span></span><span class="line"><span class="cl"><span class="n">size</span> <span class="o">=</span> <span class="n">describe_size</span> <span class="nb">File</span><span class="o">.</span><span class="n">size</span> <span class="n">filename</span>
</span></span><span class="line"><span class="cl"><span class="n">mod_time</span> <span class="o">=</span> <span class="nb">File</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">modification_time</span><span class="o">.</span><span class="n">to_local</span><span class="o">.</span><span class="n">to_s</span> <span class="s2">&#34;%F %T&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">basename</span> <span class="o">+=</span> <span class="s2">&#34;/&#34;</span> <span class="k">if</span> <span class="nb">File</span><span class="o">.</span><span class="n">directory?</span> <span class="n">filename</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">basename</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">mod_time</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>That’s a lot of <a href="https://en.wikipedia.org/wiki/Method_chaining">methodchaining</a>. Method chains are useful, but brittle. Temped to at least hide it in a new describe_time method. Oh well. Next time.</p>
<p>Yep. Turned that Proc from the other day into a method.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># Return string description of byte size as bytes/KB/MB/GB</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">describe_size</span><span class="p">(</span><span class="n">bytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">scales</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span><span class="mi">1024</span><span class="o">**</span><span class="mi">3</span><span class="p">,</span> <span class="s2">&#34;GB&#34;</span><span class="p">},</span> <span class="p">{</span><span class="mi">1024</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;MB&#34;</span><span class="p">},</span> <span class="p">{</span><span class="mi">1024</span><span class="p">,</span> <span class="s2">&#34;KB&#34;</span><span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">scale</span> <span class="o">=</span> <span class="n">scales</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">bytes</span> <span class="o">&gt;</span> <span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">scale</span><span class="p">,</span> <span class="n">term</span> <span class="o">=</span> <span class="k">if</span> <span class="n">scale</span>
</span></span><span class="line"><span class="cl">                  <span class="p">{</span> <span class="n">bytes</span> <span class="o">/</span> <span class="n">scale</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">scale</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span>
</span></span><span class="line"><span class="cl">                  <span class="p">{</span> <span class="n">bytes</span><span class="p">,</span> <span class="s2">&#34;bytes&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">scale</span><span class="o">.</span><span class="n">humanize</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">term</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p><a href="https://crystal-lang.org/api/Number.html#humanize%28io:IO,precision=3,separator=%27.%27,delimiter=%27,%27,*,base=10**3,significant=true,prefixes:Indexable=SI_PREFIXES%29:Nil-instance-method">Number#humanize</a> is a delightful convenience method for readable numbers. It adds commas where expected. It trims floating point numbers to more digestible precision. No word yet on whether it slices or dices.</p>
<p><code>column_sizes</code> is dangerously close to clever — the bad kind of smart where I’m likely to miss a mistake. The intent is reasonable enough. Find how long each field is in each summary. Figure out which is the longest value for each column. But there’s probably a more legible way to do it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># Return a list containing the size needed to fit each field.</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">column_sizes</span><span class="p">(</span><span class="n">summaries</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">sizes</span> <span class="o">=</span> <span class="n">summaries</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">field</span><span class="o">|</span> <span class="n">field</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">field</span><span class="o">|</span> <span class="n">field</span><span class="o">.</span><span class="n">size</span> <span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">sizes</span><span class="o">.</span><span class="n">max_of</span> <span class="p">{</span> <span class="o">|</span><span class="n">column</span><span class="o">|</span> <span class="n">column</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>Oh thank goodness. Back to fairly legible code with <code>summary_row</code>. Although. Honestly? I’m being so specific with how each item in the summary is treated. That calls out for a class, or at least a <a href="https://crystal-lang.org/reference/syntax_and_semantics/structs.html">struct</a>.</p>
<p>Not enough time to rewrite the whole program, though. Sometimes it’s more important to get to the next task than to get this one perfect.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># Return a one-line description of a file</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">summary_row</span><span class="p">(</span><span class="n">summary</span><span class="p">,</span> <span class="n">columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">path_column</span><span class="p">,</span> <span class="n">size_column</span><span class="p">,</span> <span class="n">mod_column</span> <span class="o">=</span> <span class="n">columns</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nb">String</span><span class="o">.</span><span class="n">build</span> <span class="k">do</span> <span class="o">|</span><span class="n">str</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">summary</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">ljust</span><span class="p">(</span><span class="n">path_column</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s2">&#34; &#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">summary</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">rjust</span><span class="p">(</span><span class="n">size_column</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s2">&#34; &#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">summary</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">ljust</span><span class="p">(</span><span class="n">mod_column</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>Like most languages, Crystal’s <a href="https://crystal-lang.org/api/String.html">String</a> class has <em>many</em> methods to make life easier. <a href="https://crystal-lang.org/api/String.html#ljust%28len,char:Char=%27%27%29-instance-method">String#ljust</a> pads the end of a string. <a href="https://crystal-lang.org/api/String.html#rjust%28len,char:Char=%27%27%29-instance-method">String#rjust</a> pads at the start, which is nice for number columns. Though my humanized numbers do reduce the effectiveness of a numeric column.</p>
<p>That’s it? I’m done? Excellent!</p>
<p>Let’s build it and look at a random folder in my Sync archive.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ crystal build list.cr
$ ./list ~/Sync/music-stuff/
examine-iTunes.py 564 bytes 2019-02-17 07:58:19
itunes.xml          29.8 MB 2019-02-17 07:58:19
ratings.rb          1.02 KB 2019-02-17 07:58:19
rhythmdb.xml        14.8 MB 2019-02-17 07:58:19</code></pre>
</figure><p>Oh hey. Stuff from a couple old music management posts. Getting back to those is on the task list. I’ll get there.</p>
<p>Anyways. My <code>list</code> program works!</p>
<p>I learned a fair bit about managing collections in Crystal. Also, the &ldquo;small methods&rdquo; approach that served me well in Ruby seems just as handy here.</p>
<h2 id="yeah-i-know">Yeah, I know</h2>
<p>If file information was all I needed, I could get the same details and more with
<a href="https://www.gnu.org/software/coreutils/manual/html_node/ls-invocation.html#ls-invocation">ls</a>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ls -gGhp ~/Sync/pictures/
total 197M
drwxr-xr-x  3 4.0K Oct 18 08:28 1/
drwxr-xr-x  7 4.0K Oct 18 08:28 1999/
drwxr-xr-x  3 4.0K Oct 18 08:28 2001/
drwxr-xr-x  8 4.0K Oct 18 08:28 2007/
drwxr-xr-x  8 4.0K Oct 18 08:28 2009/
drwxr-xr-x  5 4.0K Oct 18 08:28 2010/
drwxr-xr-x  5 4.0K Oct 18 08:28 2011/
drwxr-xr-x  8 4.0K Oct 18 08:28 2012/
drwxr-xr-x 14 4.0K Oct 18 08:28 2013/
drwxr-xr-x 14 4.0K Oct 18 08:28 2014/
drwxr-xr-x 14 4.0K Oct 18 08:28 2015/
drwxr-xr-x 13 4.0K Oct 18 08:28 2016/
drwxr-xr-x 12 4.0K Oct 18 08:28 2017/
drwxr-xr-x 11 4.0K Oct 18 08:28 2018/
-rw-r--r--  1 4.2M Feb 17  2019 digikam4.db
-rw-r--r--  1 4.6M Feb 17  2019 recognition.db
-rw-r--r--  1 189M Feb 17  2019 thumbnails-digikam.db</code></pre>
</figure><p>But I wouldn’t have learned anything about Crystal. I wouldn’t have had nearly as much fun, either. And — not counting other concerns like &ldquo;paying rent&rdquo; or &ldquo;eating&rdquo; — fun is the most important part!</p>]]></content:encoded>
</item>
</channel>
</rss>
