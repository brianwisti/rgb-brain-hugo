<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2022onRandom Geekery</title>
    <link>https://randomgeekery.org/post/2022/</link>
    <description>
      Recent contentin2022 on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sat, 20 Jan 2024 22:42:34 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/post/2022/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Nanoc builds sites faster with 3.2.0</title>
  <link>https://randomgeekery.org/post/2022/12/nanoc-builds-faster-with-3-2-0/</link>
  <pubDate>Sun, 25 Dec 2022 11:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/12/nanoc-builds-faster-with-3-2-0/</guid>
  <description>just the numbers
Today is Christmas, which means version 3.2.0 of Ruby has been released. I read Peter Solnica’s post about Benchmarking Ruby 3.2 with YJIT. One bit of feedback he got was that YJIT — the now official Just In Time compiler — kicks in for frequently called methods:
{% quote( from=“Noah Gibbs” cite=&#34;https://ruby.social/@codefolio/109573860732354569&#34; ) %} By default, YJIT optimizes a method on the 30th time you call it.</description>
   <category>post</category> 
   <category>post</category> 
   <category>ruby</category>  <category>nanoc</category> 
  <content:encoded><![CDATA[<h2>Ain't no benchmark like an unscientific ad hoc benchmark</h2><p><img src="/post/2022/12/../../../attachments/img/2022/cover-2022-12-25.png" alt="attachments/img/2022/cover-2022-12-25.png"/>
just the numbers</p>
<p>Today is Christmas, which means version <a href="https://www.ruby-lang.org/en/news/2022/12/25/ruby-3-2-0-released/">3.2.0</a> of <a href="/card/ruby/">Ruby</a> has been released. I read Peter Solnica&rsquo;s post about <a href="https://www.solnic.dev/p/benchmarking-ruby-32-with-yjit">Benchmarking Ruby 3.2 with YJIT</a>. One bit of feedback he got was that YJIT — the now official Just In Time compiler — kicks in for frequently called methods:</p>
<p>{% quote(
from=&ldquo;Noah Gibbs&rdquo;
cite=&quot;<a href="https://ruby.social/@codefolio/109573860732354569">https://ruby.social/@codefolio/109573860732354569</a>&quot;
) %}
By default, YJIT optimizes a method on the 30th time you call it.
{% end %}</p>
<p>Well hey. The <a href="https://nanoc.app">Nanoc</a> iteration of my site has a few hundred pages. Nanoc probably calls some of its methods 30 or more times for that. Let&rsquo;s find out if 3.2.0 makes a difference.</p>
<h2 id="i-should-probably-install-320">I should probably install 3.2.0</h2>
<p>This is in my Windows 11 + WSL2 workspace. I wouldn&rsquo;t be surprised if Linux and macOS tests went faster.</p>
<p>Installed 3.2.0 on my system using <code>rbenv</code>. Worth mentioning that I had to <code>export CC=/home/linuxbrew/.linuxbrew/bin/gcc-12</code> for <code>rbenv install</code> to work at all. For some reason I had a <code>brew</code>-installed Ruby floating around, too. Removed that with <code>brew uninstall ruby</code> so <code>rbenv install 3.2.0</code> would work.</p>
<p>I have a very fiddly system.</p>
<h2 id="the-test">The &ldquo;test&rdquo;</h2>
<ol>
<li>Switch to the right version</li>
<li>Install dependencies for that version</li>
<li>Build the site</li>
<li>Build it again, to see how long things take when nothing&rsquo;s changed</li>
<li>Remove the build folder and move on to the next case</li>
</ol>
<p>First in 3.1.3 to set a baseline of sorts.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> rbenv <span class="nb">local</span> 3.1.3
</span></span><span class="line"><span class="cl"><span class="gp">$</span> bundle
</span></span><span class="line"><span class="cl"><span class="gp">$</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 50.39s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">Site compiled in 43.87s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> rm -r output/
</span></span></code></pre>
</figure><p>Don&rsquo;t judge those numbers too harshly. Nanoc site configuration is Ruby code, and mine was very sloppy Ruby code. Regardless, it&rsquo;s way slower than <a href="https://gohugo.io">Hugo</a>.</p>
<p>Now in 3.2.0 without enabling YJIT, to see if just the plain old upgrade is quicker.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> rbenv <span class="nb">local</span> 3.2.0
</span></span><span class="line"><span class="cl"><span class="gp">$</span> bundle
</span></span><span class="line"><span class="cl"><span class="gp">$</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 43.58s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 37.30s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> rm -r output/
</span></span></code></pre>
</figure><p>There&rsquo;s variation from one invocation to the next in 3.1.3, but 3.2.0&rsquo;s first build is consistently a sliver faster than 3.1.3&rsquo;s second build.</p>
<p>Finally with YJIT.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nv">RUBY_YJIT_ENABLE</span><span class="o">=</span><span class="m">1</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 29.51s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> <span class="nv">RUBY_YJIT_ENABLE</span><span class="o">=</span><span class="m">1</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 23.28s.
</span></span></span></code></pre>
</figure><p>That is an impressive difference. We&rsquo;re still not talking Hugo numbers, of course.
But under 30 seconds means I might be able to pay attention long enough to fix
my terrible site configuration code.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Not the worst workspace</title>
  <link>https://randomgeekery.org/post/2022/12/not-the-worst-workspace/</link>
  <pubDate>Wed, 14 Dec 2022 15:22:46 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/12/not-the-worst-workspace/</guid>
  <description>sitting by the pool near the beach while she’s in the pool
We got married in March of 2020. Finally getting our Hawai’i honeymoon in December of 2022. But of course I need a few minutes here and there to putter.
Looking up how IndieWeb folks work with ActivityPub — the standard used by Mastodon and other Fediverse applications to communicate.
But honestly I’m just taking pics of her and enjoying the sun.</description>
   <category>post</category> 
   <category>note</category> 
   <category>vacation</category>  <category>hawaii</category>  <category>now</category> 
  <content:encoded><![CDATA[<p><img src="/post/2022/12/../../../attachments/img/2022/cover-2022-12-14.jpg" alt="attachments/img/2022/cover-2022-12-14.jpg"/>
sitting by the pool near the beach while she&rsquo;s in the pool</p>
<p>We got <a href="/post/2020/03/got-married-yesterday/">married</a> in March of 2020. Finally getting our Hawai&rsquo;i honeymoon in December of 2022. But of course I need a few minutes here and there to putter.</p>
<p>Looking up <a href="https://indieweb.org/ActivityPub">how</a> IndieWeb folks work with ActivityPub — the standard used by Mastodon and other <a href="https://fediverse.party">Fediverse</a> applications to communicate.</p>
<p>But honestly I&rsquo;m just taking pics of her and enjoying the sun.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Testing Justfile Recipe Arguments</title>
  <link>https://randomgeekery.org/post/2022/12/testing-justfile-recipe-arguments/</link>
  <pubDate>Mon, 05 Dec 2022 20:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/12/testing-justfile-recipe-arguments/</guid>
  <description>card/tldr:
add TITLE: bundle exec ruby _scripts/add-post --title &#39;{{ TITLE }}&#39; Time to fiddle with my site setup some more.
My site posts are organized by file slug: simplified file paths based on a title. Hugo itself directly supports creating new content by path.
hugo new content/post/2022/testing-justfile-recipe-arguments/index.adoc.txt It takes thinking to map from a title to a slug. Sometimes I’m not in the mood for that kind of thinking. And I’m not always great about consistency in my slug choices.</description>
   <category>post</category> 
   <category>post</category> 
   <category>site</category>  <category>just</category> 
  <content:encoded><![CDATA[<h2>In which I make my justfile just a little fancier</h2><p><a href="/card/tldr/">card/tldr</a>:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-justfile" data-lang="justfile"><span class="line"><span class="cl"><span class="nf">add TITLE</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  bundle <span class="nb">exec</span> ruby _scripts/add-post --title <span class="s1">&#39;{{ TITLE }}&#39;</span>
</span></span></code></pre>
</figure><p>Time to fiddle with my site setup some more.</p>
<p>My site posts are organized by file slug: simplified file paths based on a title. <a href="https://gohugo.io">Hugo</a> itself directly supports creating new content by path.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">hugo new content/post/2022/testing-justfile-recipe-arguments/index.adoc.txt</span></span></code></pre>
</figure><p>It takes thinking to map from a title to a slug. Sometimes I&rsquo;m not in the mood for that kind of thinking. And I&rsquo;m not always great about consistency in my slug choices.</p>
<p>So I use a <a href="https://ruby-lang.org">Ruby</a> script to streamline adding new posts. I won&rsquo;t talk about that today. Maybe another day. All it does is use <a href="https://ttytoolkit.org">TTY::Toolkit</a> to save me a couple seconds of thought compared to <code>hugo new</code>, then fires up <code>$EDITOR</code> for me so I don&rsquo;t have to think about that either. Sometimes two seconds is the difference between writing an impulse post and writing a tweet.</p>
<p>Right now the script needs a <code>--title</code> string it can use for frontmatter and file slug.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">bundle <span class="nb">exec</span> ruby _scripts/add-post --title <span class="s1">&#39;Testing Justfile Recipe Arguments&#39;</span></span></span></code></pre>
</figure><p>I don&rsquo;t have to figure out the slug, but it&rsquo;s still rather tedious. I use <a href="https://just.systems">just</a> to simplify those tedious site tasks. Putting the repeated bits of this invocation in a recipe — that&rsquo;s what <code>just</code> calls tasks — would cut down on the tedium. What about the title? Started thinking about TTY::Toolkit interactive prompts. Maybe some other time, because <code>just</code> lets you specify arguments for a recipe.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-justfile" data-lang="justfile"><span class="line"><span class="cl"><span class="nf">add TITLE</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  bundle <span class="nb">exec</span> ruby _scripts/add-post --title <span class="s1">&#39;{{ TITLE }}&#39;</span>
</span></span></code></pre>
</figure><p>Now I can <code>just add</code> a post.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">just add <span class="s1">&#39;Testing Justfile Recipe Arguments&#39;</span></span></span></code></pre>
</figure><p>And here we are!</p>
<p>I use a couple other Ruby scripts. Might as well refactor that <code>bundle exec ruby</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-justfile" data-lang="justfile"><span class="line"><span class="cl"><span class="nv">ruby</span> <span class="o">:=</span> <span class="s1">&#39;bundle exec ruby&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">add TITLE</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="o">{{</span> ruby <span class="o">}}</span> _scripts/add-post --title <span class="s1">&#39;{{ TITLE }}&#39;</span>
</span></span></code></pre>
</figure><p>All right. This is better than what I had before. Sure I&rsquo;ve got multiple helpful layers to track now. That&rsquo;ll bite me if I get carried away. On the other hand, I actually wrote something for the site today.</p>
<p>Sometimes two seconds makes the difference.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Social network stuff</title>
  <link>https://randomgeekery.org/post/2022/11/social-network-stuff/</link>
  <pubDate>Sun, 20 Nov 2022 21:38:39 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/11/social-network-stuff/</guid>
  <description>Jack wonders when dinner is
The toilet fire that is Twitter’s new management strategy continues apace. Felt compelled to take my normally wide-open account and lock it. I don’t want to deactivate and delete. Somebody else can come along, grab the name, and spam the hell out of people with it.
But hey, where else can you find me? I’ll update my h-card once the dust settles, but here’s where I’m at roughly in order of how much attention I’ve given it:</description>
   <category>post</category> 
   <category>note</category> 
   <category>site</category> 
  <content:encoded><![CDATA[<p><img src="/post/2022/11/../../../attachments/img/2022/cover-2022-11-20.jpeg" alt="attachments/img/2022/cover-2022-11-20.jpeg"/>
Jack wonders when dinner is</p>
<p>The toilet fire that is Twitter&rsquo;s new management strategy continues apace. Felt compelled to take my normally wide-open account and lock it. I don&rsquo;t want to deactivate and delete. Somebody else can come along, grab the name, and spam the hell out of people with it.</p>
<p>But hey, where else can you find me? I&rsquo;ll update my h-card once the dust settles, but here&rsquo;s where I&rsquo;m at roughly in order of how much attention I&rsquo;ve given it:</p>
<ul>
<li><a href="https://hackers.town/@randomgeek">Mastodon</a></li>
<li><a href="https://cohost.org/randomgeek">Cohost</a></li>
<li><a href="https://www.tumblr.com/blog/randomgeekery">Tumblr</a></li>
<li><a href="https://www.pillowfort.social/randomgeek">Pillowfort</a></li>
</ul>
<p>Meanwhile I&rsquo;m pondering the plausibility of a single-user <a href="https://fediverse.party">Fediverse</a> instance as a way to enable comments. Or I could just set up a WordPress site. Until I decide on that, you can find me at one or more of the listed sites.</p>
<p>And all this is kinda depressing after 15 years on Twitter. Okay yes I hated it half the time but that uh that came from a place of love. But anyways enough gloominess. How about a picture of one of the cats?</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Pulling Twitter From POSSE Links</title>
  <link>https://randomgeekery.org/post/2022/11/pulling-twitter-from-posse-links/</link>
  <pubDate>Thu, 10 Nov 2022 18:40:58 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/11/pulling-twitter-from-posse-links/</guid>
  <description>Lots of Elon Musk madness going on at Twitter. From a Platformer summary of the last day or two.
…as Platformer was first to report, its chief privacy officer, Damien Kieran; its chief information security officer; Lea Kissner; and its chief compliance officer, Marianne Fogarty, had all resigned…So did John Debay, director of software engineering…much of the security governance risks and compliance team has left…
This is on top of all the folks Musk fired or who have resigned in the week since he took over.</description>
   <category>post</category> 
   <category>note</category> 
   <category>indieweb</category>  <category>posse</category>  <category>site</category> 
  <content:encoded><![CDATA[<p>Lots of Elon Musk madness going on at Twitter. From a <a href="https://www.platformer.news/p/inside-the-twitter-meltdown">Platformer summary</a> of the last day or two.</p>
<blockquote>
<p>…as Platformer was first to report, its chief privacy officer, Damien Kieran;
its chief information security officer; Lea Kissner; and its chief compliance
officer, Marianne Fogarty, had all resigned…So did John Debay, director of
software engineering…much of the security governance risks and compliance
team has left…</p>
</blockquote>
<p>This is on top of all the folks Musk fired or who have resigned in the week since he took over. Encouraging folks to use Twitter seems unwise at this point.</p>
<p>Nothing profound here. Just means I&rsquo;m not explicitly syndicating to or tracking WebMentions from there.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: [2022-10-22 Sat 07:26]</title>
  <link>https://randomgeekery.org/post/2022/10/2022-10-22-sat-0726/</link>
  <pubDate>Sat, 22 Oct 2022 07:26:03 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/10/2022-10-22-sat-0726/</guid>
  <description>Supposed to be a quick “hey here’s what I’m listening to.” Naturally I spent half an hour being annoyed with trivial display issues.
Stay tuned while I decide on a better way to display album details from the local data. Maybe something with beets.
Meanwhile, here’s the general idea:
Ministry — Land of Rape and Honey (1988) Tracks Ministry - Stigmata (Update Mix) Ministry - The Missing Ministry - Deity Ministry - Golden Dawn Ministry - Destruction Ministry - Hizbollah Ministry - The Land of Rape and Honey Ministry - You Know What You Are Ministry - I Prefer Ministry - Flashback [Explicit] Ministry - Abortive Playback and purchase options via Odesli</description>
   <category>post</category> 
   <category>note</category> 
   <category>now-playing</category>  <category>music</category> 
  <content:encoded><![CDATA[<p>Supposed to be a quick &ldquo;hey here&rsquo;s what I&rsquo;m listening to.&rdquo; Naturally I spent half an hour being annoyed with trivial display issues.</p>
<p>Stay tuned while I decide on a better way to display album details from the local data. Maybe something with <a href="https://beets.io">beets</a>.</p>
<p>Meanwhile, here&rsquo;s the general idea:</p>
<h2 id="ministry--land-of-rape-and-honey-1988">Ministry — Land of Rape and Honey (1988)</h2>
<h3 id="tracks">Tracks</h3>
<ul>
<li>Ministry - Stigmata (Update Mix)</li>
<li>Ministry - The Missing</li>
<li>Ministry - Deity</li>
<li>Ministry - Golden Dawn</li>
<li>Ministry - Destruction</li>
<li>Ministry - Hizbollah</li>
<li>Ministry - The Land of Rape and Honey</li>
<li>Ministry - You Know What You Are</li>
<li>Ministry - I Prefer</li>
<li>Ministry - Flashback [Explicit]</li>
<li>Ministry - Abortive</li>
</ul>
<h3 id="playback-and-purchase-options">Playback and purchase options</h3>
<iframe width="100%" height="52" src="https://odesli.co/embed/?url=https%3A%2F%2Falbum.link%2Fi%2F59390461&theme=light" frameborder="0" allowfullscreen sandbox="allow-same-origin allow-scripts allow-presentation allow-popups allow-popups-to-escape-sandbox" allow="clipboard-read; clipboard-write"></iframe>
<p>via <a href="https://odesli.co">Odesli</a></p>
]]></content:encoded>
</item>
<item>
  <title>Post: Enso Hybrid IDE Demo</title>
  <link>https://randomgeekery.org/post/2022/10/enso-hybrid-ide-demo/</link>
  <pubDate>Tue, 18 Oct 2022 21:06:06 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/10/enso-hybrid-ide-demo/</guid>
  <description>Enso is “a hybrid visual and textual functional language.” So far, the demo is cooler than the alpha. Because so far I have not yet gotten the alpha nightly release to work.
But good lord that is a cool demo.
Enthusiastic, too.</description>
   <category>post</category> 
   <category>note</category> 
   <category>tools</category>  <category>distractions</category>  <category>so-pretty</category> 
  <content:encoded><![CDATA[<p><a href="https://enso.org">Enso</a> is &ldquo;a hybrid visual and textual functional language.&rdquo; So far, the demo is cooler than the alpha. Because so far I have not yet gotten the alpha <a href="https://github.com/enso-org/enso/releases">nightly release</a> to work.</p>
<p>But good lord that is a cool demo.</p>
<p><img src="https://www.youtube.com/watch?v=fQvWMoOjmQk"/></p>
<p>Enthusiastic, too.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: From Perl to Rust</title>
  <link>https://randomgeekery.org/post/2022/10/from-perl-to-rust/</link>
  <pubDate>Mon, 17 Oct 2022 22:40:56 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/10/from-perl-to-rust/</guid>
  <description>In Tim Heaney’s introduction to From Perl to Rust:
{% quote() %} Having to know everything at once makes it hard to teach Rust as well. It seems like no matter where we start, we are always touching on concepts that we haven’t covered yet. This is quite the opposite of Perl, where it’s fairly easy to learn as we go. But perhaps making this one assumption— that we all know Perl— will help us navigate the complexities of Rust.</description>
   <category>post</category> 
   <category>note</category> 
   <category>rust</category>  <category>perl</category> 
  <content:encoded><![CDATA[<p>In Tim Heaney&rsquo;s introduction to <a href="https://oylenshpeegul.gitlab.io/from-perl-to-rust/introduction.html">From Perl to Rust</a>:</p>
<p>{% quote() %}
Having to know everything at once makes it hard to teach Rust as well. It seems like no matter where we start, we are always touching on concepts that we haven&rsquo;t covered yet. This is quite the opposite of Perl, where it&rsquo;s fairly easy to learn as we go. But perhaps making this one assumption&mdash; that we all know Perl&mdash; will help us navigate the complexities of Rust. I don&rsquo;t know if this is going to work, but I thought I&rsquo;d try it.
{% end %}</p>
<p>Not everybody knows <a href="/card/perl/">card/Perl</a>, but I do. I am very much the target audience for this title. We&rsquo;ll just throw it on the TOREAD stack with the others. But maybe I might read it before some of those others?</p>
<p>I <em>really</em> want to get a better grasp on <a href="/card/rust/">card/Rust</a>.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Emoji Breakdowns With Raku</title>
  <link>https://randomgeekery.org/post/2022/08/emoji-breakdowns-with-raku/</link>
  <pubDate>Sun, 14 Aug 2022 13:00:31 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/08/emoji-breakdowns-with-raku/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;https://randomgeekery.org/post/2022/08/../../../attachments/img/2022/cover-2022-08-14.png&#34; alt=&#34;attachments/img/2022/cover-2022-08-14.png&#34;/&gt;
If you think that’s weird, you should see what all these emoji have done to my neovim session.&lt;/p&gt;
&lt;p&gt;Had to share, but gotta make this quick because I am about three tangents removed from the stuff I planned to do today. This Raku script prints out code points for emoji characters with a little help from &lt;a href=&#34;https://raku.land/cpan:ANTONOV/Pretty::Table&#34;&gt;Pretty::Table&lt;/a&gt;.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>raku-lang</category> 
  <content:encoded><![CDATA[<h2>In which I write a Raku emoji reverse lookup tool.</h2><p><img src="/post/2022/08/../../../attachments/img/2022/cover-2022-08-14.png" alt="attachments/img/2022/cover-2022-08-14.png"/>
If you think that&rsquo;s weird, you should see what all these emoji have done to my neovim session.</p>
<p>Had to share, but gotta make this quick because I am about three tangents removed from the stuff I planned to do today. This Raku script prints out code points for emoji characters with a little help from <a href="https://raku.land/cpan:ANTONOV/Pretty::Table">Pretty::Table</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env raku</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Pretty::Table</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">emoji-table</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$emoji</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$table</span> <span class="o">=</span> <span class="n">Pretty::Table</span><span class="o">.</span><span class="nb">new</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="s">title</span> <span class="o">=&gt;</span> <span class="p">&#34;</span><span class="s2">Emoji Breakdown</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">field-names</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">&#34;</span><span class="s2">Name</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">&#34;</span><span class="s2">Code</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">&#34;</span><span class="s2">Hex Code</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">&#34;</span><span class="s2">Emoji</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="o">],</span>
</span></span><span class="line"><span class="cl">    <span class="s">border</span> <span class="o">=&gt;</span> <span class="kt">False</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">align</span> <span class="o">=&gt;</span> <span class="nv">%</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="s">Code</span> <span class="o">=&gt;</span> <span class="p">&#34;</span><span class="s2">r</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">&#34;</span><span class="s2">Hex Code</span><span class="p">&#34;</span> <span class="o">=&gt;</span> <span class="p">&#34;</span><span class="s2">r</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="nv">$emoji</span><span class="o">.</span><span class="nb">ords</span> <span class="k">-&gt;</span> <span class="nv">$ord</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="nv">$chr</span> <span class="o">=</span> <span class="nv">$ord</span><span class="o">.</span><span class="nb">chr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$table</span><span class="o">.</span><span class="nf">add-row</span><span class="o">:</span> <span class="o">[</span>
</span></span><span class="line"><span class="cl">      <span class="nv">$chr</span><span class="o">.</span><span class="nb">uniname</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="nv">$ord</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="nv">$ord</span><span class="o">.</span><span class="nb">base</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="nv">$chr</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="o">]</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nv">$table</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$emoji</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">say</span> <span class="p">&#34;&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">say</span> <span class="nf">emoji-table</span><span class="p">(</span><span class="nv">$emoji</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>And here&rsquo;s what it looks like in action:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">bsh ❯ rakumoji 🦋
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">| Emoji Breakdown |
</span></span><span class="line"><span class="cl">    Name      Code  Hex Code  Emoji
</span></span><span class="line"><span class="cl"> BUTTERFLY  129419     1F98B    🦋</span></span></code></pre>
</figure><h2 id="why">Why?</h2>
<p>So I&rsquo;m doing a thing with a CSS stylesheet involving display of emojis. You don&rsquo;t want the emoji in a stylesheet though. More portable to use code points, the numeric value or values a computer uses to identify the character.</p>
<p>The problem: I don&rsquo;t know the code point. I use a convenient emoji picker. All it gives me is a character.</p>
<p>I&rsquo;ve had some luck looking this stuff up online. But why spend 10 seconds <a href="https://unicode-table.com/en/1F98B/">looking it up</a> when I could spend half an hour writing code and another hour rationalizing my decision in a blog post?</p>
<p><a href="https://docs.raku.org/type/Str#%28Cool%29_routine_ord"><code>Str.ord</code></a> gets me the ordinal for a single character. That&rsquo;s not always what I need though. What looks like a single character could be composed of several codepoints.</p>
<p>Unicode is weird.</p>
<p><a href="https://docs.raku.org/type/Str#%28Cool%29_routine_ords"><code>Str.ords</code></a> gives me a list of all code points in the string, whether one or several. I get the name of the emoji as well with <a href="https://docs.raku.org/type/Str#%28Cool%29_routine_uniname"><code>str.uniname</code></a>. I can use that name with <a href="https://docs.raku.org/type/Str#routine_uniparse"><code>Str.uniparse</code></a> to get the emoji again.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">bsh ❯ raku -e &#39;say &#34;butterfly&#34;.uniparse;&#39;
</span></span><span class="line"><span class="cl">🦋</span></span></code></pre>
</figure><p>Pretty::Table makes it look nice — or as nice as my terminal can manage — no matter how many code points are in the emoji.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">bsh ❯ rakumoji 🏄‍♀️
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">| Emoji Breakdown |
</span></span><span class="line"><span class="cl">          Name            Code  Hex Code  Emoji
</span></span><span class="line"><span class="cl">         SURFER         127940     1F3C4    🏄
</span></span><span class="line"><span class="cl">   ZERO WIDTH JOINER      8205      200D    ‍
</span></span><span class="line"><span class="cl">      FEMALE SIGN         9792      2640    ♀
</span></span><span class="line"><span class="cl"> VARIATION SELECTOR-16   65039      FE0F    ️</span></span></code></pre>
</figure><p>I helped the terminal out by putting the emoji character at the end of each line. Otherwise the pretty table layouts get offset weird.</p>
<p>Anyways I had fun. And now I&rsquo;m only two tangents away from the day&rsquo;s intended tasks.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Customizing a Trilium Report</title>
  <link>https://randomgeekery.org/post/2022/08/customizing-a-trilium-report/</link>
  <pubDate>Tue, 09 Aug 2022 11:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/08/customizing-a-trilium-report/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;https://randomgeekery.org/post/2022/08/../../../attachments/img/2022/cover-2022-08-09.png&#34; alt=&#34;attachments/img/2022/cover-2022-08-09.png&#34;/&gt;
Trilium also embeds its scripting as notes, which takes some getting used to.&lt;/p&gt;
&lt;p&gt;Been exploring &lt;a href=&#34;https://github.com/zadam/trilium&#34;&gt;Trilium&lt;/a&gt; for notes. One thing I’ll say is the nerdy features are directly accessible to my existing skills.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>second-brain</category>  <category>trilium-notes</category>  <category>sqlite</category> 
  <content:encoded><![CDATA[<h2>In which I frolic with a note system that lets me use SQL</h2><p><img src="/post/2022/08/../../../attachments/img/2022/cover-2022-08-09.png" alt="attachments/img/2022/cover-2022-08-09.png"/>
Trilium also embeds its scripting as notes, which takes some getting used to.</p>
<p>Been exploring <a href="https://github.com/zadam/trilium">Trilium</a> for notes. One thing I&rsquo;ll say is the nerdy features are directly accessible to my existing skills.</p>
<p>See, each note system has some way — or a plugin providing some way — to query information about your collected notes. Logseq <a href="https://docs.logseq.com/#/page/advanced%20queries">uses</a> Datascript, which is uh Lisp-ish? Obsidian — if you add the <a href="https://blacksmithgu.github.io/obsidian-dataview/">Dataview</a> plugin — has DQL, which is SQL-ish.</p>
<p>Trilium keeps everything in a <a href="https://sqlite.org">SQLite</a> database that you can query directly.</p>
<p><img src="/post/2022/08/attachments/img/2022/trilium-sql-console.png" alt="Trilium in-app SQL console"/></p>
<p>My immediate reaction on realizing what I was seeing? Look I don&rsquo;t usually communicate on this site via memes and image captions, but:</p>
<p><img src="/post/2022/08/attachments/img/2022/its-a-unix-system-I-know-this.jpg" alt="Jurassic Park: &ldquo;It&rsquo;s a UNIX system. I know this.&rdquo;"/></p>
<p>I know the gist of SQL. Let&rsquo;s play with this.</p>
<p>Made a custom <a href="https://github.com/zadam/trilium/wiki/Template">template</a> for notes about people. Assigned that template to the appropriate notes. Got curious about how my template-using notes were spread out.</p>
<p>Copied the query from <em>Trilium Demo / Statistics / Note type count</em> and tweaked it a little for my needs.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">templateNote</span><span class="p">.</span><span class="n">title</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">SUM</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">CASE</span><span class="w"> </span><span class="k">WHEN</span><span class="w"> </span><span class="n">note</span><span class="p">.</span><span class="n">isDeleted</span><span class="o">=</span><span class="mi">0</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">ELSE</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">END</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">countNotDeleted</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">SUM</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">CASE</span><span class="w"> </span><span class="k">WHEN</span><span class="w"> </span><span class="n">note</span><span class="p">.</span><span class="n">isDeleted</span><span class="o">=</span><span class="mi">1</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">ELSE</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">END</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">countDeleted</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">attributes</span><span class="w"> </span><span class="n">attr</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INNER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">notes</span><span class="w"> </span><span class="n">note</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">ON</span><span class="w"> </span><span class="n">note</span><span class="p">.</span><span class="n">noteId</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">attr</span><span class="p">.</span><span class="n">noteId</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INNER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">notes</span><span class="w"> </span><span class="n">templateNote</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">ON</span><span class="w"> </span><span class="n">attr</span><span class="p">.</span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">templateNote</span><span class="p">.</span><span class="n">noteId</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">attr</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;template&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">attr</span><span class="p">.</span><span class="n">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">countNotDeleted</span><span class="w"> </span><span class="k">desc</span></span></span></code></pre>
</figure><table>
<thead>
<tr>
<th>title</th>
<th>countNotDeleted</th>
<th>countDeleted</th>
</tr>
</thead>
<tbody>
<tr>
<td>Day template</td>
<td>182</td>
<td>18</td>
</tr>
<tr>
<td>Person Template</td>
<td>120</td>
<td>0</td>
</tr>
<tr>
<td>task template</td>
<td>6</td>
<td>0</td>
</tr>
<tr>
<td>Biography template</td>
<td>4</td>
<td>0</td>
</tr>
<tr>
<td>Book template</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>NOTE</strong></p>
<p>I renamed the Trilium demo&rsquo;s included <em>People template</em> to <em>Biography template</em>
for clarity here.</p>
</blockquote>
<p>I duplicated <em>Note type count</em>, pasted my new query, then adjusted the layout JS to reflect the tweaked query.</p>
<p>The result:</p>
<p><img src="/post/2022/08/attachments/img/2022/trilium-template-usage-report.png" alt="Trilium Notes showing pie chart of template usage"/></p>
<p>The demo graph uses <a href="https://www.chartjs.org">Chart.js</a>, which is fine. I&rsquo;m already thinking about using <a href="https://vega.github.io">Vega</a> instead.</p>
<p>One thing at a time.</p>
<p>Trilium. It&rsquo;s got SQL. I like that.</p>]]></content:encoded>
</item>
</channel>
</rss>
