<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python Blogger RefreshonRandom Geekery</title>
    <link>https://randomgeekery.org/series/python-blogger-refresh/</link>
    <description>
      Recent contentinPython Blogger Refresh on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Fri, 12 Jun 2009 00:00:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/series/python-blogger-refresh/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Python Blogger Refresh Part 2 - Settings</title>
  <link>https://randomgeekery.org/post/2009/06/python-blogger-refresh-part-2-settings/</link>
  <pubDate>Fri, 12 Jun 2009 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2009/06/python-blogger-refresh-part-2-settings/</guid>
  <description></description>
   <category>post</category> 
   <category>post</category> 
   <category>blogger</category>  <category>gdata</category>  <category>python</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<h2 id="the-idea">The Idea</h2>
<p>I had to focus my efforts in <a href="/post/2009/06/python-blogger-refresh-part-1/">python-blogger-refresh-part-1</a> on restoring the original functionality of my <a href="/card/python/">Python</a> Blogger script. That&rsquo;s out of the way. I can now start looking at enhancements. The first annoyance - of many - is the fact that Blogger connection settings are hard-coded into the script. Do you want to post to a different blog? That&rsquo;s going to require editing the source.</p>
<p>Let&rsquo;s fix that three ways:</p>
<ol>
<li>Adding the ability to define connection details from the command line</li>
<li>Adding the ability to define connection details from a config file.</li>
<li>Adding the ability to interactively request connection details when they have not been specified on the command line or in a config file.</li>
</ol>
<h3 id="from-the-command-line">From the Command Line</h3>
<p>We&rsquo;re already using <a href="https://docs.python.org/library/optparse.html">optparse</a> , so adding the ability to define connection settings from the command line won&rsquo;t be difficult. Three options are needed:</p>
<ul>
<li>Author Name</li>
<li>Email</li>
<li>Password</li>
</ul>
<p>Add those options in <code>main</code> with <code>parser.add_option</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="kn">from</span> <span class="nn">optparse</span> <span class="kn">import</span> <span class="n">OptionParser</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span> <span class="o">=</span> <span class="n">OptionParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-D&#34;</span><span class="p">,</span> <span class="s2">&#34;--do-tests&#34;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s2">&#34;store_true&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;doTests&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Run built-in doctests&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-f&#34;</span><span class="p">,</span> <span class="s2">&#34;--file&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;filename&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Specify source file for post&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-a&#34;</span><span class="p">,</span> <span class="s2">&#34;--author&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;author&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;The author for this post&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-e&#34;</span><span class="p">,</span> <span class="s2">&#34;--email&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;email&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;The email of the blog owner&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-p&#34;</span><span class="p">,</span> <span class="s2">&#34;--password&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;password&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;The password of the blog owner&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">doTests</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">runTests</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Only process post options if user specified a file to post.</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="n">options</span><span class="o">.</span><span class="n">author</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">raise</span> <span class="ne">NameError</span><span class="p">(</span><span class="s2">&#34;Author required. --help for usage&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="n">options</span><span class="o">.</span><span class="n">email</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">raise</span> <span class="ne">NameError</span><span class="p">(</span><span class="s2">&#34;Email required. --help for usage&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="n">options</span><span class="o">.</span><span class="n">password</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">raise</span> <span class="ne">NameError</span><span class="p">(</span><span class="s2">&#34;Password required. --help for usage&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="ne">NameError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">parser</span><span class="o">.</span><span class="n">print_help</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="n">e</span>
</span></span><span class="line"><span class="cl">            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">author</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">author</span>
</span></span><span class="line"><span class="cl">        <span class="n">email</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">email</span>
</span></span><span class="line"><span class="cl">        <span class="n">password</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">password</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span> <span class="o">=</span> <span class="n">BlogPost</span><span class="p">(</span><span class="n">author</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">postFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">parsePost</span><span class="p">(</span><span class="n">postFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">sendPost</span><span class="p">()</span></span></span></code></pre>
</figure><p>Let&rsquo;s see how that behaves. First I&rsquo;ll try using the old way, which is now the wrong way.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python post-to-blog.py -f python-blogger-part-2-settings.mkd
/usr/local/lib/python2.6/dist-packages/gdata/tlslite/utils/cryptomath.py:9: \
DeprecationWarning: the sha module is deprecated; use the hashlib module instead
  import sha
Usage: post-to-blog.py [options]

Options:
  -h, --help            show this help message and exit
  -D, --do-tests        Run built-in doctests
  -f FILENAME, --file=FILENAME
                        Specify source file for post
  -a AUTHOR, --author=AUTHOR
                        The author for this post
  -e EMAIL, --email=EMAIL
                        The email of the blog owner
  -p PASSWORD, --password=PASSWORD
                        The password of the blog owner
Author required. --help for usage</code></pre>
</figure><p>That <code>DeprecationWarning</code> is coming from inside GData. I won&rsquo;t worry about it for the moment, but I <em>will</em> keep my eyes open for new releases.</p>
<p>Anyways, how about when running it correctly?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python post-to-blog.py -f python-blogger-part-2-settings.mkd -a &#34;Brian Wisti&#34; \
-e &#34;me@here.com&#34; -p &#34;mysecretpassword&#34;
/usr/local/lib/python2.6/dist-packages/gdata/tlslite/utils/cryptomath.py:9:     \
DeprecationWarning: the sha module is deprecated; use the hashlib module instead
  import sha</code></pre>
</figure><p>A quick look at the drafts in my Blogspot dashboard confirms that the code works. That command line has gotten a bit long, though. How about adding a config file?</p>
<h3 id="from-a-config-file">From a Config File</h3>
<p>It&rsquo;s good to have a configuration file holding most of your details. We can keep sensitive information out of the application code, and not have to remember them on the command line every time we run the script.</p>
<p>I am going to make a separate <code>config</code> directory to hold my config. Why? This makes it easier for me to expand my definition of what a configuration <em>is</em>. If I want to use non-core Markdown extensions later - and I will - I can place them here rather than dirtying my Python <code>site-packages</code> folder. Or <code>dist-packages</code>, in Ubuntu&rsquo;s case. Why do they always have to be different?</p>
<p>The actual config file will be a simple ini-style file spiked with <em>key</em>=<em>value</em> lines. Here&rsquo;s mine:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="c1"># config/blog.cfg</span>
</span></span><span class="line"><span class="cl"><span class="k">[connection]</span>
</span></span><span class="line"><span class="cl"><span class="na">author</span><span class="o">=</span><span class="s">Brian Wisti</span>
</span></span><span class="line"><span class="cl"><span class="na">email</span><span class="o">=</span><span class="s">me@here.com</span>
</span></span><span class="line"><span class="cl"><span class="na">password</span><span class="o">=</span><span class="s">mysecretpassword</span></span></span></code></pre>
</figure><p>The <a href="http://docs.python.org/library/configparser.html">ConfigParser</a> library will be used to handle opening and reading in these options. Using both a config file and command line parsing is going to require poking a little bit at everything, so I&rsquo;m going to move along slowly.</p>
<p>In <code>main</code>, I&rsquo;ll set up the ConfigParser.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="kn">from</span> <span class="nn">optparse</span> <span class="kn">import</span> <span class="n">OptionParser</span>
</span></span><span class="line"><span class="cl">    <span class="kn">import</span> <span class="nn">ConfigParser</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">config_file</span> <span class="o">=</span> <span class="s2">&#34;config/blog.cfg&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">config</span> <span class="o">=</span> <span class="n">ConfigParser</span><span class="o">.</span><span class="n">ConfigParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">config</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">config_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">parser</span> <span class="o">=</span> <span class="n">OptionParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-D&#34;</span><span class="p">,</span> <span class="s2">&#34;--do-tests&#34;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s2">&#34;store_true&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;doTests&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Run built-in doctests&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-f&#34;</span><span class="p">,</span> <span class="s2">&#34;--file&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;filename&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Specify source file for post&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-a&#34;</span><span class="p">,</span> <span class="s2">&#34;--author&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;author&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;The author for this post&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-e&#34;</span><span class="p">,</span> <span class="s2">&#34;--email&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;email&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;The email of the blog owner&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-p&#34;</span><span class="p">,</span> <span class="s2">&#34;--password&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;password&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;The password of the blog owner&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">doTests</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">runTests</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Allow command line options to overwrite config settings</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">author</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="s2">&#34;author&#34;</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">author</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">email</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="s2">&#34;email&#34;</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">email</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">password</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="s2">&#34;password&#34;</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">author</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="s2">&#34;author&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">email</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="s2">&#34;email&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">password</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="s2">&#34;password&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">ConfigParser</span><span class="o">.</span><span class="n">NoSectionError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="s2">&#34;</span><span class="si">%s</span><span class="s2"> is missing the [connection] section!&#34;</span> <span class="o">%</span> <span class="n">config_file</span>
</span></span><span class="line"><span class="cl">            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">ConfigParser</span><span class="o">.</span><span class="n">NoOptionError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">parser</span><span class="o">.</span><span class="n">print_help</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="n">e</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="s2">&#34;Options can be defined in </span><span class="si">%s</span><span class="s2"> or on command line&#34;</span> <span class="o">%</span> <span class="n">config_file</span>
</span></span><span class="line"><span class="cl">            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">post</span> <span class="o">=</span> <span class="n">BlogPost</span><span class="p">(</span><span class="n">author</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">postFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">parsePost</span><span class="p">(</span><span class="n">postFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">sendPost</span><span class="p">()</span></span></span></code></pre>
</figure><p>The application reads the configuration file before handling the command line to set up the normal behavior. It still processes the command line, though. Maybe I don&rsquo;t want to keep all of my information in the config, or maybe I&rsquo;m posting to a completely different blog.</p>
<p>It&rsquo;s nice to get the settings both ways, but I think we can be a little nicer still.</p>
<h3 id="interactively">Interactively</h3>
<p>What if there&rsquo;s no config file, or the config file is incomplete, and there are still missing pieces even after parsing the command line? The behavior I would hope for in an app like this is that it would ask me to fill in the missing blanks. Might as well allow the post filename to be one of the blanks.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">password</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="s2">&#34;password&#34;</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="s2">&#34;filename&#34;</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">option</span> <span class="ow">in</span> <span class="p">[</span> <span class="s2">&#34;author&#34;</span><span class="p">,</span> <span class="s2">&#34;email&#34;</span><span class="p">,</span> <span class="s2">&#34;password&#34;</span><span class="p">,</span> <span class="s2">&#34;filename&#34;</span> <span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">value</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="n">option</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">ConfigParser</span><span class="o">.</span><span class="n">NoOptionError</span><span class="p">,</span> <span class="ne">NameError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">value</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">%s</span><span class="s2">: &#34;</span> <span class="o">%</span> <span class="n">option</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">config</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="n">option</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span></span></span></code></pre>
</figure><p>Hey, it works and I don&rsquo;t even have to use a config file if I don&rsquo;t want to!</p>
<p>The only problem is that now I&rsquo;ve messed up the way testing behaves.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python post-to-blog.py -D
/usr/local/lib/python2.6/dist-packages/gdata/tlslite/utils/cryptomath.py:\
9: DeprecationWarning: the sha module is deprecated; use the hashlib modu\
le instead
  import sha
filename:</code></pre>
</figure><p>That&rsquo;s easy enough to fix. I&rsquo;ll just exit after running the tests. You would think I would have  noticed that before. Why would I? I never used the <code>-f</code> flag at the same time as the <code>-D</code> flag, so this issue wouldn&rsquo;t have come up.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">doTests</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">runTests</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span></span></span></code></pre>
</figure><p>Let&rsquo;s stop here and get ready for the next leg.</p>
<h3 id="what-was-accomplished">What Was Accomplished</h3>
<p>At the start of this post, we had a script which would submit a blog posting based on a filename command parameter, using connection settings that were hard-coded into the script. After a little fiddling around, we&rsquo;ve added the ability to get all connection details from the command line, from a configuration file, from interactive input, or some combination of all three. That&rsquo;s a pretty big step in making this blog post code more useful for people who aren&rsquo;t me.</p>
<h2 id="next-time">Next Time</h2>
<p>This code gets the job done, but I will freely admit that this code is getting ugly. Half the application has tests, and the other half is in <code>main</code>. Next time I visit this code I&rsquo;ll have to take a long hard look at refactoring and maybe adding some tests for the stuff that is currently in <code>main</code>. I should also look at packaging the whole thing up with <a href="https://docs.python.org/library/distutils.html">distutils</a>. The next post is going to be a long one, isn&rsquo;t it?</p>
<h2 id="getting-the-code">Getting The Code</h2>
<p>Although it&rsquo;s still small enough to reasonably paste the code into this blog posting, I think it might be a little easier for folks to work with if they just had an archive of what&rsquo;s been done so far.  I&rsquo;m going to start making it available directly from coolnamehere.</p>
<blockquote>
<p><strong>2015-03-28</strong></p>
<p>Oh, <em>that&rsquo;s</em> what that zipfile was for. No, it&rsquo;s long gone now.</p>
</blockquote>]]></content:encoded>
</item>
<item>
  <title>Post: Python Blogger Refresh, Part 1</title>
  <link>https://randomgeekery.org/post/2009/06/python-blogger-refresh-part-1/</link>
  <pubDate>Tue, 09 Jun 2009 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2009/06/python-blogger-refresh-part-1/</guid>
  <description></description>
   <category>post</category> 
   <category>post</category> 
   <category>blogger</category>  <category>gdata</category>  <category>markdown</category>  <category>python</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<h2 id="the-idea">The Idea</h2>
<p>I  <a href="/post/2007/12/python-loves-blogger-part-1/">wrote a post</a> a while back about using <a href="/card/python/">Python</a> to write <a href="http://blogspot.com">Blogspot</a> posts from the command line. It took me about two weeks to completely forget about it. Still, it&rsquo;s one of the few posts on this blog that gets regular visits, and the code &hellip; well, the code is not great. It was a fair effort, but it didn&rsquo;t even accomplish the things I had initially set out to do. Account information is hard-coded into the code, for example. I also blundered along haphazardly with parsing metadata information myself despite the fact that <a href="https://pypi.python.org/pypi/Markdown">Python Markdown</a> has an extension which is perfectly capable of <a href="https://pythonhosted.org/Markdown/extensions/meta_data.html">handling metadata</a>. Well, let&rsquo;s look at that code again.</p>
<!--more-->
<p>There&rsquo;s a fresh install of <a href="http://ubuntu.com">Ubuntu</a> 9.04 on my laptop and I&rsquo;ve got projects I feel like talking about. So let&rsquo;s get started.</p>
<p>The basic flow will be the same. Given a command line that looks like this:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python post-to-blog.py &lt;post.txt&gt;</code></pre>
</figure><ol>
<li>Load settings</li>
<li>Create a HTML formatted string based on the Markdown-formatted text found in <code>post.txt</code></li>
<li>Request that Blogger store the post using post data and user settings</li>
<li>Report the result of the publish request.</li>
</ol>
<p>I&rsquo;ll be starting from the code that already exists in the earlier posts. We can start this project with confidence once we have everything set up and we&rsquo;re sure the old code still does what we expect it to.</p>
<h2 id="setup">Setup</h2>
<p>Ubuntu 9.04 already has a copy of Python 2.6 installed. I suppose I could grab a fresh copy of the Python source and build it myself, but I don&rsquo;t really feel like it right now. Sometimes I&rsquo;m just lazy. Ubuntu&rsquo;s 2.6 will work well enough for my needs.</p>
<p>Modules are a different matter. I want fresh copies of Python Markdown and <a href="https://github.com/google/gdata-python-client">GData</a>, rather than the somewhat dated modules that are available in the repository. There are a fair number of bug fixes and new features in the latest versions.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ cd ~/src
$ wget http://gdata-python-client.googlecode.com/files/gdata-1.3.3.tar.gz
$ tar xfz gdata-1.3.3.tar.gz
$ cd gdata-1.3.3/
$ sudo python setup.py install
$ cd ../
$ wget http://pypi.python.org/packages/source/M/Markdown/Markdown-2.0.tar.gz
$ tar xfvz Markdown-2.0.tar.gz
$ cd Markdown-2.0/
$ sudo python setup.py install</code></pre>
</figure><h2 id="the-starting-code">The Starting Code</h2>
<p>Now that I have the most important dependencies installed, I can revisit the code from the earlier posts. There&rsquo;s no local copy of the code, so I will just copy and paste the original code, run the tests, and share the starting code. What could possibly go wrong?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ cd ~/Projects/python-blogger
$ python post-to-blog.py -D
...
***Test Failed*** 19 failures.</code></pre>
</figure><p>Ouch. Something has gone horribly wrong in copying and pasting the code from the posts, the module behaviors have changed, or maybe they never worked as well as I thought they did. Either way, this is bad. Let me fix these issues and then I&rsquo;ll share the <em>new</em> starting code with you.</p>
<h2 id="the-new-starting-code">The New Starting Code</h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># post-to-blog.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">markdown</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">xml.etree</span> <span class="kn">import</span> <span class="n">ElementTree</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">gdata</span> <span class="kn">import</span> <span class="n">service</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">gdata</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">atom</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BlogPost</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;A single posting for a blog owned by a Blogger account
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    &gt;&gt;&gt; post = BlogPost(&#39;Brian Wisti&#39;, &#39;me@here.com&#39;, &#39;mysecretpassword&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">    &gt;&gt;&gt; post.body = &#39;This is a paragraph&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">    &gt;&gt;&gt; print post.body
</span></span></span><span class="line"><span class="cl"><span class="s2">    &lt;p&gt;This is a paragraph&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">author</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">config</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__author</span> <span class="o">=</span> <span class="n">author</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__account</span> <span class="o">=</span> <span class="n">account</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__password</span> <span class="o">=</span> <span class="n">password</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">set_body</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bodyText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Stores plain text which will be used as the post body
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post = BlogPost(&#39;Brian Wisti&#39;, &#39;me@here.com&#39;, &#39;mysecretpassword&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.set_body(&#39;This is a paragraph&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="n">bodyText</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">get_body</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Access a HTML-formatted version of the post body
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post = BlogPost(&#39;Brian Wisti&#39;, &#39;me@here.com&#39;, &#39;mysecretpassword&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.set_body(&#39;This is a paragraph&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; print post.get_body()
</span></span></span><span class="line"><span class="cl"><span class="s2">        &lt;p&gt;This is a paragraph&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">markdown</span><span class="o">.</span><span class="n">markdown</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">body</span> <span class="o">=</span> <span class="nb">property</span><span class="p">(</span><span class="n">get_body</span><span class="p">,</span> <span class="n">set_body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parseConfig</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">configText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Reads and stores the directives from the post&#39;s config header.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post = BlogPost(&#39;Brian Wisti&#39;, &#39;me@here.com&#39;, &#39;mysecretpassword&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; import os
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; myConfig = os.linesep.join([&#34;key1: value1&#34;, &#34;key2: value2&#34;])
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.parseConfig(myConfig)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.config[&#39;key1&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#39;value1&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.config[&#39;key2&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#39;value2&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">textLines</span> <span class="o">=</span> <span class="n">configText</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">textLines</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parsePost</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">postText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Parses the contents of a full post, including header and body.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; import os
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; myText = os.linesep.join([&#34;title: Test&#34;, &#34;--&#34;, &#34;This is a test&#34;])
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post = BlogPost(&#39;Brian Wisti&#39;, &#39;me@here.com&#39;, &#39;mysecretpassword&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.parsePost(myText)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; print post.config[&#39;title&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">        Test
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; print post.body
</span></span></span><span class="line"><span class="cl"><span class="s2">        &lt;p&gt;This is a test&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">header</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="n">postText</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;--&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">parseConfig</span><span class="p">(</span><span class="n">header</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="nf">sendPost</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;&#34;&#34;Log into Blogger and submit my already parsed post&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Authenticate using ClientLogin</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="n">GDataService</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__account</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">__password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span><span class="o">.</span><span class="n">source</span> <span class="o">=</span> <span class="s1">&#39;post-to-blog.py_v01.0&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span><span class="o">.</span><span class="n">service</span> <span class="o">=</span> <span class="s1">&#39;blogger&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span><span class="o">.</span><span class="n">server</span> <span class="o">=</span> <span class="s1">&#39;www.blogger.com&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span><span class="o">.</span><span class="n">ProgrammaticLogin</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Get the blog ID</span>
</span></span><span class="line"><span class="cl">      <span class="n">query</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="n">query</span><span class="o">.</span><span class="n">feed</span> <span class="o">=</span> <span class="s1">&#39;/feeds/default/blogs&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="n">feed</span> <span class="o">=</span> <span class="n">blogger</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">query</span><span class="o">.</span><span class="n">ToUri</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">      <span class="n">blog_id</span> <span class="o">=</span> <span class="n">feed</span><span class="o">.</span><span class="n">entry</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">GetSelfLink</span><span class="p">()</span><span class="o">.</span><span class="n">href</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Create the entry to insert.</span>
</span></span><span class="line"><span class="cl">      <span class="n">entry</span> <span class="o">=</span> <span class="n">gdata</span><span class="o">.</span><span class="n">GDataEntry</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="n">entry</span><span class="o">.</span><span class="n">author</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">atom</span><span class="o">.</span><span class="n">Author</span><span class="p">(</span><span class="n">atom</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">__author</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">      <span class="n">entry</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Title</span><span class="p">(</span><span class="s1">&#39;xhtml&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">      <span class="n">entry</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Content</span><span class="p">(</span><span class="n">content_type</span><span class="o">=</span><span class="s1">&#39;html&#39;</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Assemble labels, if any</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="s1">&#39;tags&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="n">tags</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;tags&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="k">for</span> <span class="n">tag</span> <span class="ow">in</span> <span class="n">tags</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">              <span class="n">category</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Category</span><span class="p">(</span><span class="n">term</span><span class="o">=</span><span class="n">tag</span><span class="p">,</span> <span class="n">scheme</span><span class="o">=</span><span class="s1">&#39;http://www.blogger.com/atom/ns#&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">              <span class="n">entry</span><span class="o">.</span><span class="n">category</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">category</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Decide whether this is a draft.</span>
</span></span><span class="line"><span class="cl">      <span class="n">control</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Control</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="n">control</span><span class="o">.</span><span class="n">draft</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Draft</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;yes&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">entry</span><span class="o">.</span><span class="n">control</span> <span class="o">=</span> <span class="n">control</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Submit it!</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span><span class="o">.</span><span class="n">Post</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="s1">&#39;/feeds/&#39;</span> <span class="o">+</span> <span class="n">blog_id</span> <span class="o">+</span> <span class="s1">&#39;/posts/default&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">runTests</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="kn">import</span> <span class="nn">doctest</span>
</span></span><span class="line"><span class="cl">    <span class="n">doctest</span><span class="o">.</span><span class="n">testmod</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="kn">from</span> <span class="nn">optparse</span> <span class="kn">import</span> <span class="n">OptionParser</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span> <span class="o">=</span> <span class="n">OptionParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-D&#34;</span><span class="p">,</span> <span class="s2">&#34;--do-tests&#34;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s2">&#34;store_true&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;doTests&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Run built-in doctests&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-f&#34;</span><span class="p">,</span> <span class="s2">&#34;--file&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;filename&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Specify source file for post&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">doTests</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">runTests</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span> <span class="o">=</span> <span class="n">BlogPost</span><span class="p">(</span><span class="s1">&#39;Brian Wisti&#39;</span><span class="p">,</span> <span class="s1">&#39;me@here.com&#39;</span><span class="p">,</span> <span class="s1">&#39;mysecretpassword&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">postFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">parsePost</span><span class="p">(</span><span class="n">postFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">sendPost</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span></span></span></code></pre>
</figure><h2 id="coming-up-next">Coming Up Next</h2>
<p>These posts will be short, since I want to get <em>something</em> up while still getting things done at work. We have our starting point reestablished, and <a href="/post/2009/06/python-blogger-refresh-part-2-settings/">next time</a> we will be concentrating on loading user settings rather than embedding those details right in our code.</p>]]></content:encoded>
</item>
</channel>
</rss>
