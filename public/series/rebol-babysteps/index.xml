<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>REBOL BabystepsonRandom Geekery</title>
    <link>https://randomgeekery.org/series/rebol-babysteps/</link>
    <description>
      Recent contentinREBOL Babysteps on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Mon, 07 Mar 2005 00:00:00 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/series/rebol-babysteps/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: REBOL Babysteps - 04 Repeating Yourself</title>
  <link>https://randomgeekery.org/post/2005/03/rebol-babysteps-04-repeating-yourself/</link>
  <pubDate>Mon, 07 Mar 2005 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2005/03/rebol-babysteps-04-repeating-yourself/</guid>
  <description>Now we know how to do things, and we know how to choose whether or not we will do something. We’re getting close to having some real skills with REBOL. We just need to get the understanding of one more concept before we reach the first little plateau of programming knowledge. We need to learn how to do a task more than once. Well, besides just running the script again, but that doesn’t really count.</description>
   <category>post</category> 
   <category>post</category> 
   <category>rebol</category>  <category>learn</category>  <category>coolnamehere</category> 
  <content:encoded><![CDATA[<p>Now we know how to do things, and we know how to choose whether or not we will do something. We’re getting close to having some real skills with <a href="/card/rebol/">REBOL</a>. We just need to get the understanding of one more concept before we reach the first little plateau of programming knowledge. We need to learn how to do a task more than once. Well, besides just running the script again, but that doesn’t really count.</p>
<h2 id="simple-loops">Simple Loops</h2>
<p>The simplest sort of repetition involves doing exactly the same thing again and again.
The simplest sort of repetition involves doing exactly the same thing again and again.
The simplest sort of repetition involves doing exactly the same thing again and again.
The simplest sort of repetition –</p>
<p>Sorry, I got carried away. Hopefully you get the idea. Sometimes all you need to do is repeat a process a set number of times.</p>
<h3 id="loop"><code>loop</code></h3>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; loop 5 [
[    print &#34;Spam!&#34;
[    ]
Spam!
Spam!
Spam!
Spam!
Spam!</code></pre>
</figure><p>That’s a little boring. Let’s try something a little more involved. Maybe we could use <code>loop</code> to create a simple math quiz program.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-rebol" data-lang="rebol"
      >REBOL [
    Title: &#34;Simple Math Quiz&#34;
    File: %math.r
]

; Seed the randomizer with the current time to get better random values
random/seed now

correct: 0
questions: 5

loop questions [

    ; Create a simple multiplication problem.
    a: random 10
    b: random 10
    answer: a * b

    ; Get the user&#39;s response (converting it to the right datatype)
    response: to-integer ask [ a &#34;x&#34; b &#34;= &#34; ]

    ; Evaluate the response.
    either strict-equal? answer response [
        correct: correct &#43; 1
        print &#34;That&#39;s correct!&#34;
    ] [
        print [ &#34;Sorry, it&#39;s&#34; answer ]
    ]
]

; Display the final results.
print [ &#34;Out of&#34; questions &#34;questions, you answered&#34; correct &#34;correctly&#34; ]</code></pre>
</figure><p>Nothing fancy is going on here. We just <code>loop</code> through the question and answer process a few times, keeping track of the user’s correct answers. <code>random/seed now</code> is necessary to get  something close to what we would consider random. If we don’t provide it, then we get a specific sequence whenever we call <code>random</code>. Try commenting out the <code>random/seed</code> line and run the program a few times. You’ll see what I mean.</p>
<p>You’re right. A plain old <code>loop</code> isn’t very interesting. Let’s move on.</p>
<h3 id="looping-forever">Looping <code>forever</code></h3>
<p>I’m only telling you this because I can see that one or two of you really want to know. What if you want to run a loop forever? Well, you don’t want to. Maybe you want to run a loop until some signal is received, or the user wants to quit, or something sensible like that. You don’t want a loop to run forever. But that doesn’t mean you <em>can’t</em> run a loop forever. REBOL provides us with the <code>forever</code> word to let us do exactly that.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; forever [ print &#34;spam.&#34; ]
spam.
spam.
spam.
...</code></pre>
</figure><p>And so on until you hit <code>Ctrl + C</code>, or kill the process, or do something to make the program <em>stop saying &ldquo;spam&rdquo;</em>!</p>
<p>But please, don’t use <code>forever</code> without a mighty good reason.</p>
<h3 id="break-out-of-a-loop"><code>break</code> out of a loop</h3>
<p>Sometimes you’re right in the middle of a loop and you want to break out of it and get back to the rest of the program. That’s easy enough.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; i: 0
== 0
&gt;&gt; forever [
[    prin i
[    i: i &#43; 1
[    if equal? i 5 [
[        print &#34;Augh!&#34;
[        break
[        ]
[    ]
01234Augh!
&gt;&gt;</code></pre>
</figure><p>Oh, you noticed that <code>prin</code> in there? That’s a different way of printing. Each call to <code>prin</code> puts its output immediately after the output from the previous <code>prin</code>, rather than on a new line. It’s nothing major, but it is a nice feature to take advantage of every once in a while.</p>
<p>Right. So we’ve covered simple loops. Now let’s start getting a little more interesting.</p>
<h2 id="monitored-loops">Monitored Loops</h2>
<p>Plain old repetition isn’t actually all that common. We usually want to do something a little different each time we step through the loop. REBOL gives us a few words which help us in that situation.</p>
<h3 id="repeat"><code>repeat</code></h3>
<p><code>repeat</code> works almost exactly the same as <code>loop</code>. The main difference is that it stores the number of trips you’ve taken through the loop in a variable that you can get to from inside the loop. The variable has a value of <code>1</code> on the first trip through, <code>2</code> on the second trip through, and so on.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; repeat count 9 [
[    print [ &#34;3 x&#34; count &#34;is&#34; 3 * count ]
[    ]
3 x 1 is 3
3 x 2 is 6
3 x 3 is 9
3 x 4 is 12
3 x 5 is 15
3 x 6 is 18
3 x 7 is 21
3 x 8 is 24
3 x 9 is 27</code></pre>
</figure><h3 id="for"><code>for</code></h3>
<p>The next sort of repetition structure is <code>for</code>, which adds a starting point, stopping point, and step size to the <code>repeat</code> loop. <code>for</code> is useful for producing very specific loops. It might be a little wordy for simple loops which can be handled by the <code>repeat</code> word:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; for num 1 9 1 [ print [&#34;3 x&#34; num &#34;is&#34; 3 * num] ]</code></pre>
</figure><p>We have a loop variable, <code>num</code>, which starts at <code>1</code> and goes up to <code>9</code> <code>1</code> number at a time. Of course, <code>repeat num 9</code> does exactly the same thing. <code>for</code> tends to be more useful in loops for &ldquo;real-world&rdquo; code, though, where you need more control over what’s being looped. You want some real world code? Hmm. Oh, I know. Let’s answer the age-old question, &ldquo;How much should I tip? That way we can play a little bit with some <a href="/post/2004/12/rebol-datatypes/">datatypes</a> while helping out our friends in the food service industry. Hey, what do you expect from me? I was a waiter for ten years, so this is the sort of stuff that pops into my head!</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; for bill $10 $20 $1 [
[    tip: bill * .15
[    print [&#34;Bill:&#34; bill &#34;-- Tip:&#34; tip]
[    ]
Bill: $10.00 -- Tip: $1.50
Bill: $11.00 -- Tip: $1.65
Bill: $12.00 -- Tip: $1.80
Bill: $13.00 -- Tip: $1.95
Bill: $14.00 -- Tip: $2.10
Bill: $15.00 -- Tip: $2.25
Bill: $16.00 -- Tip: $2.40
Bill: $17.00 -- Tip: $2.55
Bill: $18.00 -- Tip: $2.70
Bill: $19.00 -- Tip: $2.85
Bill: $20.00 -- Tip: $3.00</code></pre>
</figure><p>We can’t do <em>that</em> with a <code>repeat</code> loop. At least, I don’t think we can. We set the starting bill at <code>$10</code>, and moved up to <code>$20</code> by <code>$1</code> at a time, showing the bill and corresponding average tip. It’s still a very small thing. The fact that it recognizes the values as money and treats it appropriately is a special thrill for me. If you haven’t programmed before, then you might just assume that things are supposed to work like this. You would be right. Things <em>should</em> work like this: transparent, and the obvious stuff should do the obvious. But in C, there would be all sorts of chaos and <code>printf</code> madness and general ugliness that would get you so angry that you might not even bother leaving a tip.</p>
<p>And that would be bad, my friends. Very bad indeed.</p>
<p>As long as I’m looking at datatypes in <code>for</code> loops, let’s look at another example. Starting from Saturday, January 3 2009, what is the calendar date of each following Saturday until March 7 2009?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; for day 3-jan-2009 7-mar-2009 7 [ print day ]
3-Jan-2009
10-Jan-2009
17-Jan-2009
24-Jan-2009
31-Jan-2009
7-Feb-2009
14-Feb-2009
21-Feb-2009
28-Feb-2009
7-Mar-2009</code></pre>
</figure><p>Start on January 3, step 7 days at a time until we reach March 7, and print the calendar date at each step. Not bad, eh? I know that these all occurred on a Saturday, but you’ll have to wait until later for me to explain it. You want a clue? Oh, all right. I used <code>day/weekday</code>, got <code>6</code>, and figured out that the sixth day of the week is Saturday.</p>
<p>Or maybe I looked at a calendar. I’ll never tell.</p>
<h2 id="conditional-loops">Conditional Loops</h2>
<p>Then there are the times when you aren’t sure exactly when you’ll need to stop. You need to keep going until it’s time to stop, basically. Now, you could use a <code>forever</code> loop and <code>break</code> whenever you need to stop. But I don’t want you to do that. Why am I so opposed to an approach like that? It comes down to clarity. Somebody will be reading your code a few weeks, months, or even years after you write it. That person could be you.</p>
<p>Don’t laugh - I’m still haunted by a script that I wrote years ago when I was first learning Perl. I thought I’d just be throwing that script away, but I still use it. I still cringe every time I have to read it, too. And yes, it had a couple of <code>forever</code>-style loops. I want to save you from the embarrassment of bad code whenever possible.</p>
<p>But I digress. Let’s look at the conditional loops. There are two main conditional loops, <code>until</code> and <code>while</code>. The difference between the two from our perspective is when they test to see whether it’s time to quit the loop.</p>
<h3 id="keep-going-until-something-is-true">Keep going <code>until</code> something is true</h3>
<p>The <code>until</code> loop tests at the end of each step of the loop. If the block returns true, then it’s time to quit. How do you know if the block returns <code>true</code>? Because the block returns the value of the last statement in the block. This means that we could put a simple test as the last statement, using the guidelines from the chapter on <a href="/post/2005/02/rebol-babysteps-03-making-decisions/">selection structures</a>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; until [
[    print &#34;Spam&#34;
[    response: ask &#34;? &#34;
[    equal? response &#34;Bloody Vikings!&#34;
[    ]
Spam
? Spam
Spam
? Bacon Eggs and Spam
Spam
? I don&#39;t like Spam!
Spam
? Bloody Vikings!
== true</code></pre>
</figure><p>Because it doesn’t test until the end of the loop, <code>until</code> will step through the loop at least once.</p>
<h3 id="keep-going-while-something-is-true">Keep going <code>while</code> something is true</h3>
<p><code>while</code> takes a test block and a loop block. There’s all sorts of clever things we can do in the test block, but for now we’ll just put simple tests in it. If the test comes up false, then <code>while</code> doesn’t bother running through the loop. If it’s true, then it runs through the loop and tests again.</p>
<p>Hrm, I need to think of a decent example of <code>while</code>. For now, let’s just make a variation of what we might do with an <code>until</code> loop.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; response: none
== none
&gt;&gt; while [ not-equal? response &#34;Bloody Vikings!&#34; ] [
[    print &#34;Spam.&#34;
[    response: ask &#34;? &#34;
[    ]
Spam.
? flerg
Spam.
? flop
Spam.
? Bloody Vikings!
== &#34;Bloody Vikings!&#34;</code></pre>
</figure><p><code>while</code> will not run at all if the condition isn’t true at the start of the loop, because it tests the condition before beginning each step.</p>
<h2 id="stepping-through-a-list">Stepping Through a List</h2>
<p>The last form of repetition is iterating through a list. A copy of each item in the list is passed to a temporary variable that you can play with in the loop block. I will only look briefly at this form of repetition in this chapter, because list manipulation and iteration is a big topic in its own right. Nevertheless, many of you will want to do <em>something</em> with lists before I get around to writing that next chapter.</p>
<h3 id="foreach"><code>foreach</code></h3>
<p>The basic list iteration function is <code>foreach</code>. It takes a name, a list variable, and a block. <code>foreach</code> repeats the loop once for each item in the list. The name is set to the value of the current item in the list. It is easier to demonstrate a <code>foreach</code> loop than it is to describe one.
Here’s a quick example.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; colors: to-list [ &#34;red&#34; &#34;green&#34; &#34;blue&#34; ]
== make list! [&#34;red&#34; &#34;green&#34; &#34;blue&#34;]
&gt;&gt; foreach color colors [ print color ]
red
green
blue</code></pre>
</figure><p>I would like to close this chapter with something a little meatier than that example, though. Let’s write a script that takes a list of dates and tells us how far from today each of those dates are.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-rebol" data-lang="rebol"
      >REBOL [
    file: %days.r
    purpose: { Simple demonstration of iterating through a list }
]

; Feel free to create your own list of days
days: to-list [
    23-Jan-2009 24-Feb-2009 13-Mar-2009 30-Apr-2009 31-Oct-2009 5-Jan-2010
]

foreach day days [
    ; Determine how many days we are from &#39;day&#39;
    day-span: day - now

    ; &#39;day_span&#39; will be negative for days in the past, and we need a
    ; positive number for our phrase below
    absolute-span: abs day-span

    ; Make sure that our phrase uses the correct form of the word &#39;day&#39;
    day-string: either absolute-span &gt; 1 [ &#34;days&#34; ] [ &#34;day&#34; ]

    either day-span &gt; 0 [
        ; &#39;day&#39; is in the future.
        print [ day &#34;is in&#34; day-span day-string ]
    ] [
        either day-span &lt; 0 [
            ; &#39;day&#39; is in the past.
            print [ day &#34;was&#34; absolute-span day-string &#34;ago&#34; ]
        ] [
            print [ day &#34;is today!&#34; ]
        ]
    ]
]</code></pre>
</figure><p>Now that we’ve written the code, let’s run the script:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >23-Jan-2009 was 32 days ago
24-Feb-2009 is today!
13-Mar-2009 is in 17 days
30-Apr-2009 is in 65 days
31-Oct-2009 is in 249 days
5-Jan-2010 is in 315 days</code></pre>
</figure><p>Naturally, your results may vary. In fact, they will almost definitely vary unless you read this article the day I updated it or your clock is set wrong. I encourage you to play with this script and come up with your own variations. How about a script that asks the user for a date and tells how far that day is from today? You’ll probably need to use <code>to-date</code> on the user input.</p>
<h2 id="conclusion-and-congratulations">Conclusion and Congratulations</h2>
<p>Completing this chapter means you have hit a significant milestone in programming by learning all of the basic elements of something called &ldquo;Structured Programming&rdquo;. It is now possible for you to build non-trivial, &ldquo;real-world&rdquo; programs using REBOL. I will try to keep this in mind when putting together future chapters in this tutorial.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: REBOL Babysteps - 03 Making Decisions</title>
  <link>https://randomgeekery.org/post/2005/02/rebol-babysteps-03-making-decisions/</link>
  <pubDate>Sun, 27 Feb 2005 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2005/02/rebol-babysteps-03-making-decisions/</guid>
  <description>In rebol-babysteps-01-getting-started I gave you a first cautious glance at the REBOL programming language. In rebol-babysteps-02-getting-started-with-view I extended that glance to a peek at the excellent REBOL/View GUI library. Let’s continue learning how to program with Rebol. Today I want to get you started with some structured programming by introducing you to selection structures. Selection structures make it possible to decide whether or not to do something based on a test.</description>
   <category>post</category> 
   <category>post</category> 
   <category>rebol</category>  <category>learn</category>  <category>coolnamehere</category> 
  <content:encoded><![CDATA[<p>In <a href="/post/2004/12/rebol-babysteps-01-getting-started/">rebol-babysteps-01-getting-started</a> I gave you a first cautious glance at the <a href="/card/rebol/">REBOL</a> programming language. In <a href="/post/2004/12/rebol-babysteps-02-getting-started-with-view/">rebol-babysteps-02-getting-started-with-view</a> I extended that glance to a peek at the excellent REBOL/View GUI library. Let’s continue learning how to program with Rebol. Today I want to get you started with some structured programming by introducing you to selection structures. Selection structures make it possible to decide whether or not to do something based on a test. Here are a few uses for a simple selection structure.</p>
<ul>
<li>Tell me if a file exists.</li>
<li>Stop me from continuing the program if I give the wrong password.</li>
<li>Tell me if a new item on <a href="http://www.rebol.com/cgi-bin/blog.r">Carl&rsquo;s blog</a> has been posted.</li>
</ul>
<h2 id="simple-tests">Simple Tests</h2>
<h3 id="if"><code>if</code></h3>
<p>The simplest selection structure is <code>if</code>. You give it a <em>test expression</em> and a <em>block</em>. If the test expression turns out to be true, then REBOL runs the block. Otherwise, it ignores the block and moves on to the next statement.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-rebol" data-lang="rebol"
      >REBOL []
if equal? name &#34;Zim&#34; [ print &#34;Reporting for duty sir!&#34; ]</code></pre>
</figure><table>
<thead>
<tr>
<th>if</th>
<th>Test Expression</th>
<th>Block</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>if</code></td>
<td><code>equal? name &quot;Zim&quot;</code></td>
<td><code>[ print &quot;Reporting for duty sir!&quot; ]</code></td>
</tr>
</tbody>
</table>
<p>You can choose between using the <code>equal?</code> function or the <em>equality</em> operator.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-rebol" data-lang="rebol"
      >REBOL []
if name == &#34;Zim&#34; [ print &#34;Reporting for duty sir!&#34; ]</code></pre>
</figure><p>Those two equal signs in there combine to make a special <em>operator</em> that REBOL uses to test for strict equality &ndash; making sure that the thing on the left has exactly the same value as the thing on the right. There are a number of comparison functions and operators in REBOL. It&rsquo;s up to you whether you prefer to use the function approach or the operator approach. My own preference varies according to my mood and the things being compared. Numbers and strings often get the operator treatment, while I lean towards using the functions for more complex things. I&rsquo;ll stick to using the functions today, because that&rsquo;s the sort of mood I&rsquo;m in.</p>
<table>
<thead>
<tr>
<th>Function</th>
<th>Operator</th>
<th>Checks For</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>equal?</code></td>
<td><code>=</code></td>
<td>Equality</td>
</tr>
<tr>
<td><code>strict-equal?</code></td>
<td><code>==</code></td>
<td>Strict Equality</td>
</tr>
<tr>
<td><code>not-equal?</code></td>
<td><code>&lt;&gt;</code></td>
<td>Inequality</td>
</tr>
<tr>
<td><code>strict-not-equal?</code></td>
<td><em>none</em></td>
<td>Strict Inequality</td>
</tr>
<tr>
<td><code>greater?</code></td>
<td><code>&gt;</code></td>
<td>Greater Than</td>
</tr>
<tr>
<td><code>lesser?</code></td>
<td><code>&lt;</code></td>
<td>Less Than</td>
</tr>
<tr>
<td><code>greater-or-equal?</code></td>
<td><code>&gt;=</code></td>
<td>Equality or Greater Than</td>
</tr>
<tr>
<td><code>lesser-or-equal?</code></td>
<td><code>&lt;=</code></td>
<td>Equality or Lesser Than</td>
</tr>
</tbody>
</table>
<p><code>equal?</code> doesn&rsquo;t care about case. &ldquo;abc&rdquo; and &ldquo;ABC&rdquo; are the same, according to these tests. So are <code>1</code> and <code>1.0</code>. This is the way most of us think about comparisons, but programs sometimes need more careful comparisons in situations where case matters. One example that immediately comes to mind is login and password entry. You need to use <code>strict-equal?</code> or <code>strict-not-equal?</code> if you need an exact test.</p>
<h3 id="either"><code>either</code></h3>
<p>What happens if you want to do one thing if a test is true, but a <em>different</em> thing if the test is false? Let&rsquo;s say, for example, we want to print out one message if we recognize the user as a master, and print out another message if the user is not a master. Well, I suppose you could have two <code>if</code> statements, like this:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-rebol" data-lang="rebol"
      >REBOL []
if equal? name &#34;Zim&#34; [ print &#34;Reporting for duty sir!&#34; ]
if not-equal? name &#34;Zim&#34; [ print &#34;Meow!&#34; ]</code></pre>
</figure><p>This can obviously get ugly very quickly. REBOL gives us the <code>either</code> statement to simplify situations like this.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-rebol" data-lang="rebol"
      >REBOL []
either equal? name &#34;Zim&#34; [ print &#34;Reporting for duty sir!&#34; ] [ print &#34;Meow!&#34; ]</code></pre>
</figure><p>The <code>either</code> command requires a test expressions and two blocks. Either the test is true and the first block is executed, or the test is false and the second block is executed. That makes sense, doesn&rsquo;t it? Here&rsquo;s how that example breaks down.</p>
<table>
<thead>
<tr>
<th><code>either</code></th>
<th>Test</th>
<th>Do this if True</th>
<th>Or do this if False</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>either</code></td>
<td><code>equal? name &quot;Zim&quot;</code></td>
<td><code>[ print &quot;Reporting for duty sir!&quot; ]</code></td>
<td><code>[ print &quot;Meow!&quot; ]</code></td>
</tr>
</tbody>
</table>
<p>Now is a good time to point out how flexible REBOL can be. Let&rsquo;s reexamine our code and see what we are trying to do. We are printing a message, right? The only thing that is different is <em>which</em> message we are printing. We could hand the entire <code>if</code> statement directly to the print command like this:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-rebol" data-lang="rebol"
      >REBOL []
print either equal? name &#34;Zim&#34; [ &#34;Reporting for duty sir!&#34; ] [ &#34;Meow!&#34; ]</code></pre>
</figure><p>It accomplishes the exact same thing as we did with the original <code>either</code> statement, but removes a little bit of repetition. Some folks think that steps like this do a lot to make program code more readable. Another approach might be to assign the result of the <code>either</code> statement to a variable and then print the variable. I like this approach, because my program might grow later on. I might decide that I want the program to <em>speak</em> the response rather than print it out to the screen.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-rebol" data-lang="rebol"
      >REBOL []
response: either equal? name &#34;Zim&#34; [ &#34;Yes master I obey!&#34; ] [ &#34;Meow!&#34; ]
print response</code></pre>
</figure><p>I don&rsquo;t want to overwhelm anybody right now, and you can ignore options like these until you are much more comfortable with REBOL. I just wanted you to see how REBOL will let you describe your program in the style that you like best.</p>
<p>Yes, <code>either</code> is a variation of the <code>if/else</code> construct that you find in many other languages.</p>
<h2 id="having-multiple-tests">Having Multiple Tests</h2>
<h3 id="any"><code>any</code></h3>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-rebol" data-lang="rebol"
      >REBOL []
response: ask &#34;What&#39;s your favorite snack? &#34;
if any [
	equal? response &#34;tacos&#34;
	equal? response &#34;waffles&#34;
] [
	print &#34;Me too!&#34;
]</code></pre>
</figure><p>There will be times that you want to check several things, and execute if any of them are true. Fortunately REBOL is there to help us with the <code>any</code> function. <code>any</code> takes a block of tests and returns true if any of those tests are true. This is another one of those definitions that just repeats the obvious, isn&rsquo;t it? Well, a lot of predefined words in REBOL work like that.</p>
<p>Yes, this does sound like the <code>or</code> logical operator from other languages. Also known as <code>||</code> in C-derived languages. I don&rsquo;t know about you, but I like <code>any</code> better than <code>||</code>.</p>
<h3 id="all"><code>all</code></h3>
<p>What if you only want to execute the block if <em>all</em> tests are true? It shouldn&rsquo;t surprise you by this point to find out that REBOL is right there waiting for us with the <code>all</code> statement.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-rebol" data-lang="rebol"
      >REBOL []
name: ask &#34;Name: &#34;
password: ask &#34;Password: &#34;
if all [
	strict-equal? name &#34;Brian&#34;
	strict-equal? password &#34;Pretty Please?&#34;
] [
	print &#34;Login accepted!&#34;
]</code></pre>
</figure><p>Yes, this does sound like the <code>and</code> logical operator from other languages. Also known as <code>&amp;&amp;</code> in C-derived languages. I don&rsquo;t know about you, but I like <code>all</code> better than <code>&amp;&amp;</code>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Now that you have worked with selection structures, you have a major building block for writing useful programs. Next time around we will take a look at a few of REBOL&rsquo;s many repetition and iteration structures. Then maybe we can sit down and write a <em>real</em> program!</p>
<h2 id="changes">Changes</h2>
<h3 id="24-feb-2009">24 Feb 2009</h3>
<ul>
<li>General cleanup</li>
</ul>
<h3 id="27-feb-2005">27 Feb 2005</h3>
<ul>
<li>Initial release into the wild.</li>
<li>Corrected some inaccuracies about <code>equal?</code> and <code>=</code> and <code>==</code>, pointed out by <a href="http://www.compkarori.com/vanilla">Graham Chiu</a></li>
</ul>
]]></content:encoded>
</item>
<item>
  <title>Post: REBOL Babysteps - 01 Getting Started</title>
  <link>https://randomgeekery.org/post/2004/12/rebol-babysteps-01-getting-started/</link>
  <pubDate>Sun, 26 Dec 2004 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2004/12/rebol-babysteps-01-getting-started/</guid>
  <description>REBOL is the “Relative Expression-Based Object Language”, developed by Carl Sassenrath. Who is Carl Sassenrath? Why, he’s one of the people responsible for the amazing operating system which powered the Amiga computer. What’s the Amiga? Why, the Amiga was only the incredibly robust and cool computer — released by the same company that brought the world’s first personal computer, Commodore. What’s Commodore? Stop bothering me, kid. Take it from a relative old-timer: Amiga put a heck of a lot of power into a consumer-affordable personal computer.</description>
   <category>post</category> 
   <category>post</category> 
   <category>rebol</category>  <category>learn</category>  <category>coolnamehere</category> 
  <content:encoded><![CDATA[<p><a href="/card/rebol/">REBOL</a> is the &ldquo;Relative Expression-Based Object Language&rdquo;, developed by Carl Sassenrath. Who is Carl Sassenrath? Why, he’s one of the people responsible for the amazing operating system which powered the Amiga computer. What’s the Amiga? Why, the Amiga was only the incredibly robust and cool computer — released by the same company that brought the world’s first personal computer, Commodore. What’s Commodore? Stop bothering me, kid. Take it from a relative old-timer: Amiga put a <em>heck</em> of a lot of power into a consumer-affordable personal computer. It wasn’t really matched by other computers for a good five or ten years. Nowadays, I look at <a href="http://www.rebol.com/">REBOL</a> and it feels like the first language I’ve come across to take lessons from past languages and apply them in a new context, rather than just reimplement them with different syntax.</p>
<p>So why would you want to learn REBOL? Because REBOL makes it frighteningly easy to create programs that accomplish complex tasks. For example, here’s one way you can download the HTML source of a Web page – for example <a href="https://randomgeekery.org/">https://randomgeekery.org/</a> – and view it in a text editing area with REBOL/View:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; view layout [ area 800x600 read https://randomgeekery.org ]</code></pre>
</figure><p>This impresses me to no end. Maybe you’re not so impressed by it, but that’s okay. I’m happy, and that’s what I care about most.</p>
<p>These pages are intended to provide the non-programmer with a gentle introduction to the REBOL language and environment. When you are done with it, you should feel ready to learn more, and curious to dig into the possibilities. You won’t be an expert, but maybe you’ll feel bold enough to become one and share what you’ve found with the rest of the world. Beginners and experts alike should feel free to send suggestions about how I can improve this tutorial.</p>
<h2 id="installing-rebol">Installing REBOL</h2>
<p>Installing REBOL is a straightforward task, as long as you are using one of the 40+ supported platforms.</p>
<h3 id="platform-notes">Platform Notes</h3>
<h4 id="installation-on-windows">Installation on Windows</h4>
<ul>
<li>Download the archived installer for your platform from
<ul>
<li><a href="http://www.rebol.com/download.html">http://www.rebol.com/download.html</a></li>
</ul>
</li>
<li>Unpack the installer, if necessary</li>
<li>Run the installer</li>
<li>Follow the installation wizard until you have installed the version you downloaded.</li>
</ul>
<h4 id="installation-on-linux">Installation on Linux</h4>
<p>Here is what I had to do in order to get REBOL/Core and REBOL/View running on my Ubuntu laptop:</p>
<ul>
<li>Install a compatibility version of the GNU Standard C++ library
<ul>
<li><code>sudo apt-get install libstdc++5</code></li>
</ul>
</li>
<li>Download, extract, and copy the <code>rebcore</code> executable into my path
<ul>
<li><code>wget http://rebol.com/downloads/v276/rebcore-linx86.tar.gz</code></li>
<li><code>tar xfvz rebcore-linx86.tar.gz</code></li>
<li><code>sudo cp rebol-276/rebol /usr/local/bin</code></li>
</ul>
</li>
<li>Download, extract, and copy the <code>rebview</code> executable into my path
<ul>
<li><code>wget http://rebol.com/downloads/v276/rebview-linx86.tar.gz</code></li>
<li><code>tar xfvz rebview-linx86.tar.gz</code></li>
<li><code>sudo cp rebol-276/rebview /usr/local/bin</code></li>
</ul>
</li>
</ul>
<p>Why did I install both Core and View? There’s no real need to. I just prefer to include a version of REBOL that doesn’t depend on X libraries for scripting tasks that will never need a Viewtop. It’s particularly handy for Web programming tasks.</p>
<p>There’s an intermittent problem with ugly fonts when using View under Linux. I’ll post instructions for handling that on this site as soon as I find my notes.</p>
<h3 id="which-version">Which Version?</h3>
<p>You have a few different choices for what version of REBOL to download, depending on what you need and what is available for your platform.</p>
<h4 id="rebolcore">REBOL/Core</h4>
<blockquote>
<p><a href="http://www.rebol.com/prod-core.html">http://www.rebol.com/prod-core.html</a></p>
</blockquote>
<p>REBOL/Core covers the vital language features, including all the <a href="/post/2004/12/rebol-datatypes/">datatypes</a> which make the language so attractive to somebody like me. With Core, you can create system shell scripts, CGI applications, or simple command-line applications. Core also provides an interactive shell for testing out code on the fly, which is a valuable asset for getting the hang of a language, or even just trying out an obscure bit of code on a bored Thursday evening.</p>
<p>Find out if REBOL/Core has been released for your platform at this URL:</p>
<blockquote>
<p><a href="http://rebol.com/platforms.html">http://rebol.com/platforms.html</a></p>
</blockquote>
<p>REBOL/Core will probably do fine for most hobbyists, but you might want to look on if you enjoy pointy clicky GUI environments as much as I do.</p>
<h4 id="rebolview">REBOL/View</h4>
<blockquote>
<p><a href="http://www.rebol.com/prod-view.html">http://www.rebol.com/prod-view.html</a></p>
</blockquote>
<p>View is the cool one, in my opinion. It adds an impressive GUI library to Core, making it immediately useful for a broad range of applications. The utility of View can be compared to Java, but here’s something to really think about regarding the contrast between View and Java. How big of a download is the JDK these days? 10 Megabytes, 40 Megabytes? The REBOL/View installer for Windows is 600 Kilobytes. You can fit it on a <em>floppy disk</em>.</p>
<p>What’s a floppy disk? I thought I told you to stop bothering me, kid.</p>
<p>Find out if REBOL/View has been released for your platform at this URL:</p>
<blockquote>
<p><a href="http://rebol.com/view-platforms.html">http://rebol.com/view-platforms.html</a></p>
</blockquote>
<h4 id="rebolsdk-and-rebolcommand">REBOL/SDK and REBOL/Command</h4>
<p>These are also very easy to get, and add a number of useful features to REBOL/View. I’ll be ignoring them for now, because they have a dollar cost associated with them.</p>
<h2 id="using-rebol">Using REBOL</h2>
<p>In Windows, all you need to do is find REBOL in your Start menu. In Linux, it should be directly callable from your command line if you handled installation the same way I described.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ rebol
REBOL/Core 2.7.6.4.2 (15-Mar-2008)
Copyright 2008 REBOL Technologies
REBOL is a Trademark of REBOL Technologies
All rights reserved.

Finger protocol loaded
Whois protocol loaded
Daytime protocol loaded
SMTP protocol loaded
ESMTP protocol loaded
POP protocol loaded
IMAP protocol loaded
HTTP protocol loaded
FTP protocol loaded
NNTP protocol loaded
&gt;&gt;</code></pre>
</figure><p>So double-click its icon or run it from the command-line. Either way, now the REBOL shell is running for you. If you’ve installed View, then you’ve got this pretty Desktop thing. We’ll have to come back to it some other time. For now, just click the icon on the left for &ldquo;Console&rdquo;. <em>Now</em> you’ve got the console. It is not as pretty, but it will work for our purposes.</p>
<p>You can also go straight to the console when executing <code>rebview</code> from the command line by using the <code>-v</code> option:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ rebview -v</code></pre>
</figure><h2 id="how-to-use-rebolcore">How to use REBOL/Core</h2>
<p>Getting REBOL to do something for you is as simple as typing in the commands and looking at the results.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; print &#34;Hello, World!&#34;
Hello, World!</code></pre>
</figure><p>See? Not that hard at all. Of course, this is pretty standard stuff from most programming languages these days. Well, except Java. But we all just sort of snicker whenever a Java coder enters the room. We would snicker more, but that Java coder is <em>probably</em> making twice what we are. He deserves it, too, for all the carpal tunnel he’s going to get when he tries to write a &ldquo;Hello World&rdquo; program.</p>
<p>Making the computer tell us things is kind of fun, but it would be nice to customize it a little bit. Let’s have the computer ask our name. We can use the <code>ask</code> function (or <em>word</em>) to ask a question and get a response, which we will save in a variable.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; name: ask &#34;Enter your name: &#34;
Enter your name:</code></pre>
</figure><p>REBOL uses <em>words</em> to remember everything. These words can describe a number, your name, a chunk of programming logic, or pretty much anything else you want to track. Here, we have created a word <code>name</code>, and used the function described by <code>ask</code> to set <code>name</code> to whatever you enter as your name. What? You still haven’t done that? Go ahead, it’s painless.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; name: ask &#34;Enter your name: &#34;
Enter your name: Brian
== &#34;Brian&#34;</code></pre>
</figure><p>Type in your name, whether it’s &ldquo;Brian&rdquo;, &ldquo;Craig&rdquo;, &ldquo;Sarah&rdquo;, or &ldquo;Zuul the Destroyer&rdquo;. Your name is immediately printed back out onto the console. But how do we know that REBOL has remembered it? Just <code>print</code> the name:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; print name
Brian</code></pre>
</figure><p>That works, and is in the same spirit as the other tutorials on coolnamehere, but this seems like a great opportunity to take a look at the <code>help</code> word. <code>help</code> describes a function that can look up information about any word that REBOL is currently tracking. Here, try it for <code>name</code>:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; help name
NAME is a string of value: &#34;Brian&#34;</code></pre>
</figure><p>You can get even more information when the word is pointing to a function or other complex datatypes. See what happens when you ask <code>help</code> about itself.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; help help
USAGE:
    HELP &#39;word

DESCRIPTION:
     Prints information about words and values.
     HELP is a function value.

ARGUMENTS:
     word -- (Type: any-type)</code></pre>
</figure><p>Remember <code>help</code>. It may be just the thing you need when you’re confused by what a word is supposed to do. As an exercise, go ahead and starting by asking <code>help</code> about <code>ask</code> or <code>print</code>.</p>
<p>Let’s return to our tutorial, already in progress…</p>
<p>Now that we know REBOL has remembered the name, let’s print it as part of a sentence. You can tell <code>print</code> to print several things at once by putting them in a block. We do this by wrapping it in square brackets.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; print [ &#34;Hello&#34; name &#34;- good to see you!&#34; ]
Hello Brian - good to see you!</code></pre>
</figure><p>Hey, that made me feel pretty good! As always, it’s great how much we can be cheered up by just a few nice words, even if we have to write them ourselves. What if we wanted to share that warm feeling with our friends and neighbors, or at least the ones who have a copy of REBOL on their machine?</p>
<p>Let’s find our how to do that.</p>
<h2 id="how-to-make-your-own-rebol-script">How to make your own REBOL script</h2>
<p>Using your favorite <em>Editor</em>, type this text in and save it as <code>hello.r</code>. I like to keep my code files in a special &ldquo;projects&rdquo; directory, to keep from losing them in a mass of articles, pictures, and random files. You might want to follow the same habit, but it’s entirely up to you.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >REBOL [
   Title: &#34;Hello User&#34;
   File: %hello.r
]

name: ask &#34;Please enter your name: &#34;
print [ &#34;Hello&#34; name &#34;- good to see you!&#34; ]</code></pre>
</figure><p>Make sure that you are using an editor which saves its files as plain text. REBOL can’t make any sense of Word documents or HTML.</p>
<h3 id="the-script-header">The Script Header</h3>
<p>You recognize the code from before, but I imagine you’re curious about the block prefaced by the word <code>REBOL</code>. That is the <em>script header</em>, where you put important information about the script that you are writing. You need to put something, even if it’s just an empty block, or Rebol won’t recognize it as a script.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >REBOL [ ]</code></pre>
</figure><p>Still, the whole point of a script header is to get information about what the script is, where it came from, and any other details which you think might be useful to somebody who uses it. An empty block is hardly useful. This is considered to be more of an acceptable minimal block for a script you want to share with the world:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >REBOL [
    Title: &#34;Hello User&#34;
    Date: 22-Dec-2004
    File: %hello.r
    Author: &#34;Brian Wisti&#34;
    Version: 1.0.0
]

name: ask &#34;Please enter your name: &#34;
print [&#34;Hello&#34; name &#34;- good to see you!&#34;]</code></pre>
</figure><p>Of course, you could always provide more information if you want.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >REBOL [
    Title: &#34;Hello User Example Script&#34;
    Date: 24-Feb-2009
    Name: &#39;Hello-User

    Version: 1.0.2
    File: %hello.r
    Home: http://randomgeekery.org/tags/rebol/

    Author: &#34;Brian Wisti&#34;
    Owner: &#34;Brian Wisti&#34;
    Rights: &#34;Copyright (C) 2017 Brian Wisti&#34;

    Needs: [] ; Needs nothing beyond REBOL/Core
    Tabs: 4

    Purpose: {
        This program is a simple script to demonstrate usage of
        REBOL and warm you up for trying more complex tasks.
    }

    History: {
        1.0.0 [22-Dec-2004 &#34;Wrote the code&#34;]
        1.0.1 [23-Dec-2004 &#34;Finished writing the header for the code&#34;]
        1.0.2 [24-Feb-2009 &#34;Re-examined for site update&#34;]
        1.0.3 [09-Apr-2017 &#34;Adjusted for site relocation&#34;]
    }

    Language: &#39;English
]

name: ask &#34;Please enter your name: &#34;
print [&#34;Hello&#34; name &#34;- good to see you!&#34;]</code></pre>
</figure><p>Just try to keep the size of the script header appropriate for the size of your script. A full script header might be overkill for a script with only two lines of code - unless you happen to think that people need a lot of information when handling your script.</p>
<h3 id="running-your-script">Running your script</h3>
<p>There are two ways to actually load your script and make it do its thing.</p>
<ul>
<li>From the interactive Rebol console</li>
<li>From the command line.</li>
</ul>
<p>Actually, there are a couple more ways to go about it, but these are the main approaches if you are running a simple Rebol/Core script like the one we’ve written.</p>
<p>From the interactive console, I use the <code>do</code> command to execute the script <code>C:\projects\hello.r</code>:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; do %\c\projects\hello.r</code></pre>
</figure><p>The first time you do this, REBOL might ask you for permission to run the script. Nothing to worry about, it’s just REBOL being conscious about security. Just say ``Yes&rsquo;&rsquo;, and the script will run through merrily.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; do %hello.r
Script: &#34;Hello User&#34; (none)
Please enter your name: Brian
Hello Brian - good to see you!</code></pre>
</figure><p>If REBOL is in your path, you can call the <code>rebol</code> executable with your script name as an argument.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ rebol hello.r
REBOL/Core 2.7.6.4.2 (15-Mar-2008)
Copyright 2008 REBOL Technologies
REBOL is a Trademark of REBOL Technologies
All rights reserved.

Finger protocol loaded
Whois protocol loaded
Daytime protocol loaded
SMTP protocol loaded
ESMTP protocol loaded
POP protocol loaded
IMAP protocol loaded
HTTP protocol loaded
FTP protocol loaded
NNTP protocol loaded
Script: &#34;Hello User&#34; (none)
Please enter your name: Brian
Hello Brian - good to see you!</code></pre>
</figure><p>Oof. That’s a whole lot of text before you actually see your program. Use the <code>-q</code> option to make REBOL run your script more quietly.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ rebol -q hello.r
Please enter your name: Brian
Hello Brian - good to see you!</code></pre>
</figure><p>REBOL also supports the classic &ldquo;shebang&rdquo; line for UNIX shell scripts.</p>
<ul>
<li>Insert a new line at the very beginning, pointing to the <code>rebol</code> executable
<ul>
<li><code>#!/usr/local/bin/rebol -q</code></li>
</ul>
</li>
<li>Make the script executable
<ul>
<li><code>chmod 755 hello.r</code></li>
</ul>
</li>
<li>Run it
<ul>
<li><code>./hello.r</code></li>
</ul>
</li>
</ul>
<p>Cool, eh? Now you can share this script with all of your Rebol friends just by sending them the file. Of course, you might want to send them something more impressive, but think of it this way - this just gives you the motivation to learn how to do <em>more</em>!</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>There you have it. You’ve learned how to write a simple script. Heck,
I’ve even snuck in a couple of Rebol’s many datatypes while you weren’t looking. You’re well on the way to becoming a real Rebol programmer!</p>
<p>There is a lot of documentation available for REBOL, especially considering that the REBOL community is fairly small. RT keeps the official manuals available for free, and there are loads of script libraries and how-to guides written by the users themselves.</p>
<blockquote>
<p><a href="http://www.rebol.com/docs.html">http://www.rebol.com/docs.html</a></p>
</blockquote>
<p><em>P.S.:</em> What, you want me to tell you how to quit REBOL? Why would you ever want to do that? Oh, okay. The command to quit from the REBOL Console is easy to remember: <code>quit</code>. Happy now?</p>
]]></content:encoded>
</item>
<item>
  <title>Post: REBOL Babysteps - 02 Getting Started With View</title>
  <link>https://randomgeekery.org/post/2004/12/rebol-babysteps-02-getting-started-with-view/</link>
  <pubDate>Sun, 26 Dec 2004 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2004/12/rebol-babysteps-02-getting-started-with-view/</guid>
  <description>I’m sure you thought that getting started was fun, but it really didn’t do anything to show off post/2004/12/rebol. I’d like to go through almost exactly the same process, but this time focussing my attention on REBOL/View. So let’s give it a try!
I’m going to skim through this very quickly. The goal is just for you to see how much potential there is in the REBOL/View dialect. You want to see “Hello World”?</description>
   <category>post</category> 
   <category>post</category> 
   <category>rebol</category>  <category>learn</category>  <category>coolnamehere</category> 
  <content:encoded><![CDATA[<p>I’m sure you thought that getting started was fun, but it really didn’t do anything to show off <a href="/post/2004/12/rebol/">post/2004/12/rebol</a>. I’d like to go through almost exactly the same process, but this time focussing my attention on <a href="http://www.rebol.com/prod-view.html">REBOL/View</a>. So let’s give it a try!</p>
<p>I’m going to skim through this very quickly. The goal is just for you to see how much potential there is in the REBOL/View dialect. You want to see &ldquo;Hello World&rdquo;? Here it is.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; view layout [ text &#34;Hello World!&#34; ]</code></pre>
</figure><p><img src="/post/2004/12/attachments/img/2004/rebol-intro-01.png" alt="Hello World in REBOL/View"/></p>
<p>One way to interpret that series of commands is along the lines of: we want to <code>view</code> the <code>layout</code> defined as containing the <code>text</code> &ldquo;Hello World&rdquo;. I’ll be the first to admit that this is not an impressive demonstration of GUI programming — unless you’ve actually done some, then you might notice how quick it was to put together compared to using a lot of other toolkits and platforms.</p>
<p>Still, the whole point of using a GUI is having something to <em>click</em>. Let’s revisit our script from last time and putting some pointy-clicky goodness into it.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; view layout [
[    text &#34;Enter your name&#34;
[    field
[    button &#34;Hi!&#34;
[    ]</code></pre>
</figure><p><img src="/post/2004/12/attachments/img/2004/rebol-intro-02.png" alt="Asking for a name"/></p>
<p>Neat. Except that it doesn’t actually do anything if you click the button. Pretty, but non-functional - sort of like my neighbor’s car. Let’s give the <code>button</code> a block of commands along with the string &ldquo;Hi!&rdquo;.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; view layout [
[    text &#34;Enter your name&#34;
[    field
[    button &#34;Hi!&#34; [
[        alert &#34;Hello there!&#34;
[        ]
[    ]</code></pre>
</figure><p>Sorry, I haven’t gotten a screenshot of the alert just yet. Trust me, though. It’s pretty standard fare for alert boxes. It still doesn’t have that personal touch that the script from <a href="/post/2004/12/rebol-babysteps-01-getting-started/">last time</a> did, though. Let’s add a few touches: a little word assignment here, a little phrase-building there with <code>rejoin</code> and some refinements. There, how about this?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt; view layout [
[    text &#34;Enter your name&#34;
[    name: field
[    button &#34;Hi!&#34; [
[        message: rejoin [ &#34;Hello &#34; name/text &#34; - great to see you!&#34; ]
[        alert message
[        ]
[    ]</code></pre>
</figure><p>Hey, that was neat. We’ve got a pointy-clicky version of the &ldquo;Hello&rdquo; script we made last time. We assigned the field to a word and then used what REBOL calls &ldquo;refinements&rdquo; to access the text entered into that field. You will see a lot about refinements as your knowledge of REBOL progresses.</p>
<p>Let’s turn this into a script so we can share our newfound REBOL/View knowledge with our other friends who have REBOL/View installed.</p>
<h2 id="a-rebolview-script">A REBOL/View Script</h2>
<p>Just rewrite the code in your favorite text editor. Don’t forget the script header we talked about last time, and the shebang line if you’re on Linux!</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >#!/usr/local/bin/rebview -q

REBOL [
    Title: &#34;Hello World!&#34;
    File:  %vHello.r
    Author: Brian Wisti
]

view layout [
    text &#34;Enter your name&#34;
    name: field
    button &#34;Hi!&#34; [
        message: join  &#34;Hello &#34; [
            name/text &#34; - great to see you!&#34;
        ]
        alert message
    ]
]</code></pre>
</figure><p>You still have the same execution options as before, but REBOL/View under Windows gives you an additional choice. You can find your View script via Explorer and double-click. Easy as that!</p>
<h2 id="all-done">All Done</h2>
<p>This overview didn’t even scratch the surface of REBOL/View. It didn’t even <em>touch</em> the surface, but instead just gave the surface a sideways glance while hurrying to an urgent appointment. I encourage you to take a closer look at REBOL/View and its official documentation.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: REBOL Babysteps</title>
  <link>https://randomgeekery.org/post/2004/12/rebol-babysteps/</link>
  <pubDate>Sat, 25 Dec 2004 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2004/12/rebol-babysteps/</guid>
  <description>Right. Here is this language that you’ve never heard of: REBOL. I think we should learn how to use it together, sort of a “Babysteps” approach. You and I can add REBOL to our steadily expanding toolkit of programming languages.
And remember to just ignore people when they ask you “Why should I learn REBOL (or Perl, or Python, or Ruby) instead of Perl (or Python, or Ruby, or Java)?” You and I are the sort of people who learn a language in addition to the ones we already know, not instead of the one we were taught in college.</description>
   <category>post</category> 
   <category>post</category> 
   <category>rebol</category>  <category>learn</category>  <category>coolnamehere</category> 
  <content:encoded><![CDATA[<p>Right. Here is this language that you’ve never heard of: <a href="/card/rebol/">REBOL</a>. I think we should learn how to use it together, sort of a &ldquo;Babysteps&rdquo; approach. You and I can add REBOL to our steadily expanding toolkit of programming languages.</p>
<p>And remember to just ignore people when they ask you “Why should I learn REBOL (or Perl, or Python, or Ruby) instead of Perl (or Python, or Ruby, or Java)?” You and I are the sort of people who learn a language <em>in addition</em> to the ones we already know, not <em>instead of</em> the one we were taught in college.</p>
<p>Okay, maybe that is a little rude. But it works like this: my music teacher taught me that each time you learn a new instrument, it gets a little easier to learn new ones, because you are developing a greater understanding of how to make music. You will also know how to choose the best instrument for a particular piece, because you understand the differences between each available choice. I didn’t learn much musically. I only managed two things:</p>
<ol>
<li>Use a trumpet to make a sound like a dying elephant.</li>
<li>Use a clarinet to make a sound like an angry weasel.</li>
</ol>
<p>… so I’m sure he’ll be happy to learn that I walked away with <em>something</em> from his class.</p>
<p>So yeah. That’s why you want to learn REBOL. So you can make a sound like an angry weasel. No, make that a <em>happy</em> weasel.</p>
<p>I add a new page to this tutorial every once in a while, but I don’t believe it’s the best REBOL tutorial available. That honor goes to Nick Antonaccio’s <a href="http://musiclessonz.com/rebol_tutorial.html">Rebol Programming For The Absolute Beginner</a>. I think you should go over there and check it out now. Go ahead, I don’t mind.</p>
]]></content:encoded>
</item>
</channel>
</rss>
