<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python Interactive FictiononRandom Geekery</title>
    <link>https://randomgeekery.org/series/python-interactive-fiction/</link>
    <description>
      Recent contentinPython Interactive Fiction on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Thu, 14 Jun 2007 00:00:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/series/python-interactive-fiction/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Python Interactive Fiction - 03 Handling Multiple Turns</title>
  <link>https://randomgeekery.org/post/2007/06/python-interactive-fiction-03-handling-multiple-turns/</link>
  <pubDate>Thu, 14 Jun 2007 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2007/06/python-interactive-fiction-03-handling-multiple-turns/</guid>
  <description>&lt;p&gt;This is Part 3 of an &lt;a href=&#34;https://randomgeekery.org/post/2007/04/python-interactive-fiction-01-handling-a-single-round/&#34;&gt;ongoing series&lt;/a&gt; &lt;a href=&#34;https://randomgeekery.org/post/2007/04/python-interactive-fiction-01-handling-a-single-round/&#34;&gt;ongoing series&lt;/a&gt; about writing interactive fiction games in &lt;a href=&#34;https://randomgeekery.org/card/python/&#34;&gt;Python&lt;/a&gt;. By the end of &lt;a href=&#34;https://randomgeekery.org/post/2007/04/python-interactive-fiction-02-tying-the-scenes-together/&#34;&gt;python-interactive-fiction-02-tying-the-scenes-together&lt;/a&gt; we had created a text-based user interface and explored one way of storing multiple scenes. This part will finally bring the needed glue for the player to move between all of the scenes in the story. In other words, weâ€™ll have a game!&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>python</category>  <category>interactive-fiction</category>  <category>coolnamehere</category> 
  <content:encoded><![CDATA[<p>This is Part 3 of an <a href="/post/2007/04/python-interactive-fiction-01-handling-a-single-round/">ongoing series</a> <a href="/post/2007/04/python-interactive-fiction-01-handling-a-single-round/">ongoing series</a> about writing interactive fiction games in <a href="/card/python/">Python</a>. By the end of <a href="/post/2007/04/python-interactive-fiction-02-tying-the-scenes-together/">python-interactive-fiction-02-tying-the-scenes-together</a> we had created a text-based user interface and explored one way of storing multiple scenes. This part will finally bring the needed glue for the player to move between all of the scenes in the story. In other words, we&rsquo;ll have a game!</p>
<p>You&rsquo;re going to be amazed at how simple this is to do. We&rsquo;ll start with a simple, clumsy approach.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># ifiction.py</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  - An interactive fiction game</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">textwrap</span> <span class="c1"># For nice formatting of the description</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>      <span class="c1"># For exiting the game</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">scenes</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;field&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;You are standing in a field. To the north of you are some mountains, &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;to the east of you is a forest, to the west of you is a cave, and to &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;the south of you is a valley.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;paths&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;mountains&#34;</span><span class="p">,</span> <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go to the mountains&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;forest&#34;</span><span class="p">,</span>    <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go to the forest&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;cave&#34;</span><span class="p">,</span>      <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go into the cave&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;valley&#34;</span><span class="p">,</span>    <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go to the valley&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;mountains&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;You are standing at the foot of a mountain range. Huge impassable peaks &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;loom over you. There is a cave to the east, and a field south of you &#34;</span>    \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;leading into a valley.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;paths&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;cave&#34;</span><span class="p">,</span> <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go into the cave&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;field&#34;</span><span class="p">,</span> <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go south into the field&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;forest&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;A giant confused bear mistakes your for one of her cubs and takes you &#34;</span>   \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;away with her. Although you eventually learn to love your new bear &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;family, your adventuring days are over.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;paths&#34;</span><span class="p">:</span> <span class="p">[</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;cave&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;You are in a long dark cave. You see points of daylight at either end of &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;the cave, one to the northeast and one to the southwest.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;paths&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;mountains&#34;</span><span class="p">,</span> <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go northwest&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;field&#34;</span><span class="p">,</span>     <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go southwest&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;valley&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;You are standing in the middle of a huge, beautiful valley. Standing right &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;before you is ... whatever it was you were looking for. Success!&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;paths&#34;</span><span class="p">:</span> <span class="p">[</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">scene</span> <span class="o">=</span> <span class="n">scenes</span><span class="p">[</span><span class="s2">&#34;field&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>  <span class="c1"># Watch out, could be an infinite loop!</span>
</span></span><span class="line"><span class="cl">    <span class="n">next_step</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="n">description</span> <span class="o">=</span> <span class="n">scene</span><span class="p">[</span><span class="s2">&#34;description&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">paths</span> <span class="o">=</span> <span class="n">scene</span><span class="p">[</span><span class="s2">&#34;paths&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="n">textwrap</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Show the menu for this scene.</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">menu_item</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">menu_item</span><span class="p">,</span> <span class="n">path</span><span class="p">[</span><span class="s2">&#34;phrase&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">(0 Quit)&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Get the user selection from the menu.</span>
</span></span><span class="line"><span class="cl">    <span class="n">prompt</span> <span class="o">=</span> <span class="s2">&#34;Make a selection (0 - </span><span class="si">%i</span><span class="s2">): &#34;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">next_step</span> <span class="o">==</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">choice</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">menu_selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">menu_selection</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">next_step</span> <span class="o">=</span> <span class="s2">&#34;quit&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">index</span> <span class="o">=</span> <span class="n">menu_selection</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="n">next_step</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span> <span class="n">index</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="p">(</span><span class="ne">IndexError</span><span class="p">,</span> <span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">next_step</span> <span class="o">==</span> <span class="s2">&#34;quit&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;Good bye!&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">scene</span> <span class="o">=</span> <span class="n">scenes</span><span class="p">[</span> <span class="n">next_step</span><span class="p">[</span><span class="s2">&#34;go_to&#34;</span><span class="p">]</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;You decided to:&#34;</span><span class="p">,</span> <span class="n">next_step</span><span class="p">[</span><span class="s2">&#34;phrase&#34;</span><span class="p">]</span></span></span></code></pre>
</figure><p>The changes really are simple. I decided to put the whole process of describing the scene and getting user input into a <code>while</code> loop. The loop is basically going to go forever, as our loop test shows. One always equals one according to my admittedly limited math skills, so this test is always going to return <code>true</code>. That means we have an infinite loop. Infinite loops aren&rsquo;t really a good idea, but they are often the easiest way to describe what you want the computer to do. However, we do need <em>some</em> way to quit the loop and the game. That is where the <code>exit</code> function from the <a href="https://docs.python.org/2/library/sys.html"><code>sys</code></a> module comes in handy. <code>sys</code> contains many variables and functions that allow your program to interact directly with Python itself and your computer environment. <code>sys.exit</code> serves the rather obvious purpose of exiting the Python system. That&rsquo;s all we need to break out of our loop.</p>
<p>Let&rsquo;s take a look at running the game.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >You are standing in a field. To the north of you are some mountains,
to the east of you is a forest, to the west of you is a cave, and to
the south of you is a valley.
        1 Go to the mountains
        2 Go to the forest
        3 Go into the cave
        4 Go to the valley
        (0 Quit)
Make a selection (0 - 4): 1
You decided to: Go to the mountains
You are standing at the foot of a mountain range. Huge impassable
peaks loom over you. There is a cave to the east, and a field south of
you leading into a valley.
        1 Go into the cave
        2 Go south into the field
        (0 Quit)
Make a selection (0 - 2): 2
You decided to: Go south into the field
You are standing in a field. To the north of you are some mountains,
to the east of you is a forest, to the west of you is a cave, and to
the south of you is a valley.
        1 Go to the mountains
        2 Go to the forest
        3 Go into the cave
        4 Go to the valley
        (0 Quit)
Make a selection (0 - 4): 4
You decided to: Go to the valley
You are standing in the middle of a huge, beautiful valley. Standing
right before you is ... whatever it was you were looking for. Success!
        (0 Quit)
Make a selection (0 - 0): 0
Good bye!</code></pre>
</figure><p>Congratulations, it&rsquo;s a game!</p>
<p>You can stop at this point. The game is complete, and there is nothing more that <em>needs</em> to be done. There are some more things I would like to do with the game before I move on. I invite you to follow me in the process of making our code more pleasant to read. I will spend time wandering from thought to thought. You will probably learn less about programming, but quite a bit about how I look at programs.</p>
<h2 id="cleaning-up">Cleaning up</h2>
<p>The game works, but it could stand to be cleaned up. <em>Refactoring</em> is the practice of examining your application code and deciding what changes would make the code easier to read, faster, or just plain better in some way, but <em>without changing what the program does</em>. That&rsquo;s the hard part. It is so tempting to add new features as soon as you think of them. That leads to a pile of unreadable code, sooner or later. That pile usually shows up sooner if you don&rsquo;t refactor often enough. Trust me. I am speaking from years of experience creating huge piles of unreadable code.</p>
<p>Some developers may argue that this program is too small for refactoring to be much use. After all, my copy is only 87 lines including <code>scenes</code>. They can argue all they want, but this is my code, and I think that some functions would push the more elaborate code into a corner so that the code which runs the game is easier to read.</p>
<p>It isn&rsquo;t difficult, either. We can start by searching for clumsy-looking blocks of code which make it harder to figure out what&rsquo;s going on.</p>
<p>This looks like a good candidate right here.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Get the user selection from the menu.</span>
</span></span><span class="line"><span class="cl"><span class="n">prompt</span> <span class="o">=</span> <span class="s2">&#34;Make a selection (0 - </span><span class="si">%i</span><span class="s2">): &#34;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">next_step</span> <span class="o">==</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">choice</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">menu_selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">menu_selection</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_step</span> <span class="o">=</span> <span class="s2">&#34;quit&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">index</span> <span class="o">=</span> <span class="n">menu_selection</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_step</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span> <span class="n">index</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="p">(</span><span class="ne">IndexError</span><span class="p">,</span> <span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span></span></span></code></pre>
</figure><p>What do we want? We want the user to tell us what she wants to do next. The user picks a number which could lead to another scene or quitting. Let us define it in a function.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Scene definitions</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Function definitions</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">select_path</span><span class="p">(</span><span class="n">paths</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">next_step</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Show the menu for this scene.</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">menu_item</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">menu_item</span><span class="p">,</span> <span class="n">path</span><span class="p">[</span><span class="s2">&#34;phrase&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">(0 Quit)&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Get the user selection from the menu.</span>
</span></span><span class="line"><span class="cl">    <span class="n">prompt</span> <span class="o">=</span> <span class="s2">&#34;Make a selection (0 - </span><span class="si">%i</span><span class="s2">): &#34;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">next_step</span> <span class="o">==</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">choice</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">menu_selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">menu_selection</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">next_step</span> <span class="o">=</span> <span class="s2">&#34;quit&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">index</span> <span class="o">=</span> <span class="n">menu_selection</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="n">next_step</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span> <span class="n">index</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="p">(</span><span class="ne">IndexError</span><span class="p">,</span> <span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">next_step</span></span></span></code></pre>
</figure><p>We just moved the code into a function <code>def</code> block which we called <code>select_path</code>.
<code>select_path</code> needs to know all about the paths for the scene in order to build the prompt, so we indicate that in the function definition. <code>next_step</code> is set to <code>None</code> inside the function, since Python doesn&rsquo;t know about it yet.</p>
<p>The rest of the function block looks like the original chunk of code, until it reaches the end. Instead of doing something with the selected <code>next_step</code>, <code>select_path</code> returns it to whoever called it. You want to limit what your function does to one important thing, and you want to name your function for the one thing it does. This is one more little thing that makes code easier to handle when you come back to it later.</p>
<p>As I was saying - if <code>select_path</code> holds the code for getting user input and sends the results to the caller, what does our main game code look like now?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Game starts here.</span>
</span></span><span class="line"><span class="cl"><span class="n">scene</span> <span class="o">=</span> <span class="n">scenes</span><span class="p">[</span><span class="s2">&#34;field&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>  <span class="c1"># Watch out, could be an infinite loop!</span>
</span></span><span class="line"><span class="cl">    <span class="n">description</span> <span class="o">=</span> <span class="n">scene</span><span class="p">[</span><span class="s2">&#34;description&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">paths</span> <span class="o">=</span> <span class="n">scene</span><span class="p">[</span><span class="s2">&#34;paths&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="n">textwrap</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">next_step</span> <span class="o">=</span> <span class="n">select_path</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">next_step</span> <span class="o">==</span> <span class="s2">&#34;quit&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;Good bye!&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">scene</span> <span class="o">=</span> <span class="n">scenes</span><span class="p">[</span> <span class="n">next_step</span><span class="p">[</span><span class="s2">&#34;go_to&#34;</span><span class="p">]</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;You decided to:&#34;</span><span class="p">,</span> <span class="n">next_step</span><span class="p">[</span><span class="s2">&#34;phrase&#34;</span><span class="p">]</span></span></span></code></pre>
</figure><p>The original chunk has been replaced by a single line of code. This has made things a little more readable, but I still see a lot of changes we could make. Yes, I really do program like this. It is a faster process than you think, especially if you&rsquo;re not narrating as you write code.</p>
<p>What would I like to do next? Well, I don&rsquo;t like the way <code>select_path</code> uses a loop to get the path selection. There&rsquo;s nothing wrong with that approach, but I don&rsquo;t think it reads clearly:</p>
<blockquote>
<p>While there is not a valid <code>next_step</code>, try to get the user selection and use it to pick <code>next_step</code></p>
</blockquote>
<p>That is more or less how this reads to me in English. The second part is okay, but the first part is nonsensical. Let&rsquo;s roll up our sleeves and make some sense out of this.</p>
<p>First off: we know we are going to be working with the user input portion of this function, and maybe in a big way. Let&rsquo;s protect <code>select_path</code> by refactoring user input into its own function. What to name it? Well, we are showing a prompt and getting user input, so the behavior is similar to <code>raw_input</code>.  This input is relevant to the menu we just displayed, so let&rsquo;s call our new function <code>menu_input</code>. We still need that <code>paths</code> data, so it&rsquo;ll be an argument for our new function as well.</p>
<p>Here is a first version of <code>menu_input</code>, followed by the modified version of <code>select_path</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Function definitions</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">menu_input</span><span class="p">(</span><span class="n">paths</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">next_step</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="n">prompt</span> <span class="o">=</span> <span class="s2">&#34;Make a selection (0 - </span><span class="si">%i</span><span class="s2">): &#34;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">next_step</span> <span class="o">==</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">choice</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">menu_selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">menu_selection</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">next_step</span> <span class="o">=</span> <span class="s2">&#34;quit&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">index</span> <span class="o">=</span> <span class="n">menu_selection</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="n">next_step</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span> <span class="n">index</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="p">(</span><span class="ne">IndexError</span><span class="p">,</span> <span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">next_step</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">select_path</span><span class="p">(</span><span class="n">paths</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Show the menu for this scene.</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">menu_item</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">menu_item</span><span class="p">,</span> <span class="n">path</span><span class="p">[</span><span class="s2">&#34;phrase&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">(0 Quit)&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Get the user selection from the menu.</span>
</span></span><span class="line"><span class="cl">    <span class="n">next_step</span> <span class="o">=</span> <span class="n">menu_input</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">next_step</span></span></span></code></pre>
</figure><p>The current phrasing of <code>menu_input</code> bothers me, but what would be an improvement? Python doesn&rsquo;t have a convenient way of saying &ldquo;do this until I have a useful value&rdquo;, but there is another way to phrase the task:</p>
<blockquote>
<p>Try to get the user selection and use it to pick <code>next_step</code>. If something goes wrong, warn the user and try again. If nothing goes wrong, return <code>next_step</code>.</p>
</blockquote>
<p>How do you say that in Python? You say it with <em>recursion</em>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">menu_input</span><span class="p">(</span><span class="n">paths</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">prompt</span> <span class="o">=</span> <span class="s2">&#34;Make a selection (0 - </span><span class="si">%i</span><span class="s2">): &#34;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">choice</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">menu_selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">menu_selection</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_step</span> <span class="o">=</span> <span class="s2">&#34;quit&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">index</span> <span class="o">=</span> <span class="n">menu_selection</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_step</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span> <span class="n">index</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="p">(</span><span class="ne">IndexError</span><span class="p">,</span> <span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Try again!</span>
</span></span><span class="line"><span class="cl">        <span class="n">next_step</span> <span class="o">=</span> <span class="n">menu_input</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">next_step</span></span></span></code></pre>
</figure><p>I have managed to clean up the code merely by changing the way I phrased the task. What does <code>menu_input</code> do? It tries to get a value for <code>next_step</code> from user input. What happens if the user input is bad? <em>It tries again!</em> Brilliant in its simplicity! You will find that recursion - the act of calling the current function again â€” can be an easier way to describe your solution to a problem than using a loop. You can even change the arguments each time you recurse. Actually, that is encouraged. It just wasn&rsquo;t needed for <code>menu_input</code>.</p>
<p>There is one more change I would like to make to <code>menu_input</code>. The variable name <code>next_step</code> made sense when it was being defined in the context of a whole game, but now it is being defined in a much narrower context. The variable should have a new name which reflects that we are getting and returning the path that was selected by the user. <code>selected_path</code> ought to do it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">menu_input</span><span class="p">(</span><span class="n">paths</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">prompt</span> <span class="o">=</span> <span class="s2">&#34;Make a selection (0 - </span><span class="si">%i</span><span class="s2">): &#34;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">choice</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">menu_selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">menu_selection</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">selected_path</span> <span class="o">=</span> <span class="s2">&#34;quit&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">index</span> <span class="o">=</span> <span class="n">menu_selection</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">selected_path</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span> <span class="n">index</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="p">(</span><span class="ne">IndexError</span><span class="p">,</span> <span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Try again!</span>
</span></span><span class="line"><span class="cl">        <span class="n">selected_path</span> <span class="o">=</span> <span class="n">menu_input</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">selected_path</span></span></span></code></pre>
</figure><p>Choosing a variable name can be a tricky business. It doesn&rsquo;t have much effect on how the program runs, but it can have a huge impact on how easy it is for you to read the code. I discuss code reading a lot, and there is a good reason for that. You will ultimately be spending more time reading code than writing it. Even if you only work on your own projects, you will have to review the code multiple times. And program code is not written for the computer. It&rsquo;s written for the programmer. All the computer needs are the specific machine instructions to perform a task. The reason we don&rsquo;t write much in machine language these days is simple: we don&rsquo;t have to. Computers are powerful enough to provide layers between us and the machine language. So, if you are writing code, write for people. You can think of it as a story if you want to. Try to make it like a story by Ernest Hemingway, a man who was famous for writing simply and clearly.</p>
<blockquote>
<p>My aim is to put down on paper what I see and what I feel in the best and simplest way. &ndash; <em>Ernest Hemingway</em></p>
</blockquote>
<p>My writing is a long way from his, but I keep this goal in my head while I write code.</p>
<p>I am nearly done with refactoring this code. The <code>while 1 == 1</code> block still bothers me, though. There has to be a more graceful way to describe the game loop. Let&rsquo;s look at what we have right now.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">while</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>  <span class="c1"># Watch out, could be an infinite loop!</span>
</span></span><span class="line"><span class="cl">    <span class="n">description</span> <span class="o">=</span> <span class="n">scene</span><span class="p">[</span><span class="s2">&#34;description&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">paths</span> <span class="o">=</span> <span class="n">scene</span><span class="p">[</span><span class="s2">&#34;paths&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="n">textwrap</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">next_step</span> <span class="o">=</span> <span class="n">select_path</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">next_step</span> <span class="o">==</span> <span class="s2">&#34;quit&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;Good bye!&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">scene</span> <span class="o">=</span> <span class="n">scenes</span><span class="p">[</span> <span class="n">next_step</span><span class="p">[</span><span class="s2">&#34;go_to&#34;</span><span class="p">]</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;You decided to:&#34;</span><span class="p">,</span> <span class="n">next_step</span><span class="p">[</span><span class="s2">&#34;phrase&#34;</span><span class="p">]</span></span></span></code></pre>
</figure><p>It is tempting to rewrite this as a recursive function, since it worked so well for menu input.
Unfortunately, that may not work for a game loop. Python has built-in recursion limits, which you can find from the library function <code>sys.getrecursionlimit</code>. This function returns <code>1000</code> on my machine, and it probably will on yours too. This means that you can recursively call a function no more than one thousand times. That sounds like a lot, but you will hit that ceiling a lot sooner than you think if you rely heavily on recursion.</p>
<p>Oh well, I guess I could put this block into its own function.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">play_game</span><span class="p">(</span><span class="n">start_scene</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">scene</span> <span class="o">=</span> <span class="n">start_scene</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>  <span class="c1"># Watch out, could be an infinite loop!</span>
</span></span><span class="line"><span class="cl">        <span class="n">description</span> <span class="o">=</span> <span class="n">scene</span><span class="p">[</span><span class="s2">&#34;description&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">paths</span> <span class="o">=</span> <span class="n">scene</span><span class="p">[</span><span class="s2">&#34;paths&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="n">textwrap</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">next_step</span> <span class="o">=</span> <span class="n">select_path</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">next_step</span> <span class="o">==</span> <span class="s2">&#34;quit&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="s2">&#34;Good bye!&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">scene</span> <span class="o">=</span> <span class="n">scenes</span><span class="p">[</span> <span class="n">next_step</span><span class="p">[</span><span class="s2">&#34;go_to&#34;</span><span class="p">]</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="s2">&#34;You decided to:&#34;</span><span class="p">,</span> <span class="n">next_step</span><span class="p">[</span><span class="s2">&#34;phrase&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Game starts here.</span>
</span></span><span class="line"><span class="cl"><span class="n">play_game</span><span class="p">(</span><span class="n">scenes</span><span class="p">[</span><span class="s2">&#34;field&#34;</span><span class="p">])</span></span></span></code></pre>
</figure><p>This does make the application code simple. It&rsquo;s just a function call to play the game, starting with the &ldquo;field&rdquo; scene. And really, this is as far as I feel like refactoring the game code. Here is the final form of our simple interactive fiction game.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># ifiction.py</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  - An interactive fiction game</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">textwrap</span> <span class="c1"># For nice formatting of the description</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>      <span class="c1"># For exiting the game</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">scenes</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;field&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;You are standing in a field. To the north of you are some mountains, &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;to the east of you is a forest, to the west of you is a cave, and to &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;the south of you is a valley.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;paths&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;mountains&#34;</span><span class="p">,</span> <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go to the mountains&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;forest&#34;</span><span class="p">,</span>    <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go to the forest&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;cave&#34;</span><span class="p">,</span>      <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go into the cave&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;valley&#34;</span><span class="p">,</span>    <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go to the valley&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;mountains&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;You are standing at the foot of a mountain range. Huge impassable peaks &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;loom over you. There is a cave to the east, and a field south of you &#34;</span>    \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;leading into a valley.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;paths&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;cave&#34;</span><span class="p">,</span> <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go into the cave&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;field&#34;</span><span class="p">,</span> <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go south into the field&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;forest&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;A giant confused bear mistakes your for one of her cubs and takes you &#34;</span>   \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;away with her. Although you eventually learn to love your new bear &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;family, your adventuring days are over.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;paths&#34;</span><span class="p">:</span> <span class="p">[</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;cave&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;You are in a long dark cave. You see points of daylight at either end of &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;the cave, one to the northeast and one to the southwest.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;paths&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;mountains&#34;</span><span class="p">,</span> <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go northwest&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;field&#34;</span><span class="p">,</span>     <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go southwest&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;valley&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;You are standing in the middle of a huge, beautiful valley. Standing right &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;before you is ... whatever it was you were looking for. Success!&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;paths&#34;</span><span class="p">:</span> <span class="p">[</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Function definitions</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">menu_input</span><span class="p">(</span><span class="n">paths</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">prompt</span> <span class="o">=</span> <span class="s2">&#34;Make a selection (0 - </span><span class="si">%i</span><span class="s2">): &#34;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">choice</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">menu_selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">menu_selection</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">selected_path</span> <span class="o">=</span> <span class="s2">&#34;quit&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">index</span> <span class="o">=</span> <span class="n">menu_selection</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">selected_path</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span> <span class="n">index</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="p">(</span><span class="ne">IndexError</span><span class="p">,</span> <span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Try again!</span>
</span></span><span class="line"><span class="cl">        <span class="n">selected_path</span> <span class="o">=</span> <span class="n">menu_input</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">selected_path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">select_path</span><span class="p">(</span><span class="n">paths</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Show the menu for this scene.</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">menu_item</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">menu_item</span><span class="p">,</span> <span class="n">path</span><span class="p">[</span><span class="s2">&#34;phrase&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">(0 Quit)&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Get the user selection from the menu.</span>
</span></span><span class="line"><span class="cl">    <span class="n">next_step</span> <span class="o">=</span> <span class="n">menu_input</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">next_step</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">play_game</span><span class="p">(</span><span class="n">start_scene</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">scene</span> <span class="o">=</span> <span class="n">start_scene</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>  <span class="c1"># Watch out, could be an infinite loop!</span>
</span></span><span class="line"><span class="cl">        <span class="n">description</span> <span class="o">=</span> <span class="n">scene</span><span class="p">[</span><span class="s2">&#34;description&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">paths</span> <span class="o">=</span> <span class="n">scene</span><span class="p">[</span><span class="s2">&#34;paths&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="n">textwrap</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">next_step</span> <span class="o">=</span> <span class="n">select_path</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">next_step</span> <span class="o">==</span> <span class="s2">&#34;quit&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="s2">&#34;Good bye!&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">scene</span> <span class="o">=</span> <span class="n">scenes</span><span class="p">[</span> <span class="n">next_step</span><span class="p">[</span><span class="s2">&#34;go_to&#34;</span><span class="p">]</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="s2">&#34;You decided to:&#34;</span><span class="p">,</span> <span class="n">next_step</span><span class="p">[</span><span class="s2">&#34;phrase&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Game starts here.</span>
</span></span><span class="line"><span class="cl"><span class="n">play_game</span><span class="p">(</span><span class="n">scenes</span><span class="p">[</span><span class="s2">&#34;field&#34;</span><span class="p">])</span></span></span></code></pre>
</figure><p>We are more or less done with this train of thought. I have introduced you to many topics, but I have taken my own strange path through them. Your next step should be to reexamine the <a href="https://docs.python.org/2/tutorial/index.html">official Python tutorial</a>
and see if it makes any more sense than the first time you read it.</p>
<h2 id="more-ideas">More ideas</h2>
<p>Now that you have a complete game, what else can you do? There are many ideas. I may even tackle a few of them in future installments. You don&rsquo;t have to wait for me, though.</p>
<h3 id="different-story-maps">Different story maps</h3>
<p>What happens when you want a different story? Right now, you have to rewrite the <code>scenes</code> dictionary within the program. Wouldn&rsquo;t it be better if you could load a story from another file? It&rsquo;s Python code, so you could try experimenting with <code>import</code>.</p>
<h3 id="saving-a-game">Saving a game</h3>
<p>What do you do if you have a very large story map and the player can&rsquo;t handle the whole thing in one session? Right now, nothing. The user has to restart the game every time. It would be very generous if you came up with some way to save the key of the current scene to a configuration file, and resume from that scene when the game restarted. You would have to add a command for saving and quitting instead of simply quitting.</p>
<h3 id="inventory">Inventory</h3>
<p>Would the story go differently if the user had a flashlight in the cave? Adding inventory and letting it affect the available paths in your story is one way to make your game richer, at the cost of making the code much more complicated. Still, go ahead and give it a shot if you are interested!</p>
<h2 id="a-bonus-diversion-scope">A Bonus Diversion: Scope</h2>
<blockquote>
<p><strong>NOTE</strong></p>
<p>This was originally part of the main text, but it didn&rsquo;t really belong anywhere once I had finished writing. I decided to leave it in as one more bout of insane rambling instead of deleting it and probably forever forgetting it. At least this way I have something to start from when I <em>do</em> feel like talking about scope.</p>
</blockquote>
<p>Hey, you may be wondering how I could get away with using the variable <code>next_step</code> in so many places. First, let me make a confession. Reusing the same name like that over and over again is poor form. I should be changing the name to reflect how it is being used in its code block, instead of just cutting and pasting from one block to another. I was in a hurry, though, and being in a hurry can lead to laziness. In my defense, <code>next_step</code> is being properly defined with the same line each step of the way: <code>next_step = paths[ index ]</code>.
It doesn&rsquo;t feel like I&rsquo;m doing any harm, since I <em>am</em> effectively referring to the same thing. Still, I am making excuses for my laziness.</p>
<p>Another thing I would like to point out is that they are each completely different variables from Python&rsquo;s perspective. We use the term <em>scope</em> to describe where a particular variable can be seen. First, if a variable is first defined inside of a function, it is only visible within that function. As soon as the function returns, its &ldquo;local&rdquo; variables usually cease to exist. <em>(There are special situations where this is not true, but I am not going to look at them yet. Look up &ldquo;closure&rdquo; on the Internet for more information)</em>. Variables that are defined outside of a function are visible from the point where they are defined until the end of the file. If you define a value for a local variable with the same name as a global variable, though, the local variable &ldquo;masks&rdquo; the global variable until the end of the function.</p>
<p>It&rsquo;s all fairly confusing, and easiest to demonstrate with another trip to the Python console.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; x = &#34;waffle&#34;
&gt;&gt;&gt; def foo():
...     print x
...
&gt;&gt;&gt; foo()
waffle
&gt;&gt;&gt; def bar():
...     x = &#34;angry bears!&#34;
...     print x
...
&gt;&gt;&gt; bar()
angry bears!
&gt;&gt;&gt; print x
waffle
&gt;&gt;&gt;  </code></pre>
</figure><p>Are you feeling a little lost? It&rsquo;s okay, variable scope confuses many developers. The scope rule to remember is that a local definition trumps a global definition. The style rule to remember? Don&rsquo;t use global variables and you only need to remember about local variables and variables handed to a function as part of its arguments.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Python Interactive Fiction - 02 Tying the Scenes Together</title>
  <link>https://randomgeekery.org/post/2007/04/python-interactive-fiction-02-tying-the-scenes-together/</link>
  <pubDate>Fri, 20 Apr 2007 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2007/04/python-interactive-fiction-02-tying-the-scenes-together/</guid>
  <description>&lt;p&gt;This is the second part of an &lt;a href=&#34;https://randomgeekery.org/post/2007/04/interactive-fiction-with-python/&#34;&gt;ongoing series&lt;/a&gt; about using &lt;a href=&#34;https://randomgeekery.org/card/python/&#34;&gt;Python&lt;/a&gt; to create interactive fiction.  I hope to show you one fun use of Python while teaching you more about the basics of this language.  We started by defining how our game was going to work and creating a set of scenes for play. &lt;a href=&#34;https://randomgeekery.org/post/2007/04/python-interactive-fiction-01-handling-a-single-round/&#34;&gt;Next&lt;/a&gt; we wrote the code to handle a single round of the game. Today we are going to tie all of our scenes together to make a complete, playable game of interactive fiction. We are going to approach it from an experimental view, playing with different approaches until we find one that makes us happy. Well, one that makes &lt;em&gt;me&lt;/em&gt; happy.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>python</category>  <category>interactive-fiction</category>  <category>coolnamehere</category> 
  <content:encoded><![CDATA[<p>This is the second part of an <a href="/post/2007/04/interactive-fiction-with-python/">ongoing series</a> about using <a href="/card/python/">Python</a> to create interactive fiction.  I hope to show you one fun use of Python while teaching you more about the basics of this language.  We started by defining how our game was going to work and creating a set of scenes for play. <a href="/post/2007/04/python-interactive-fiction-01-handling-a-single-round/">Next</a> we wrote the code to handle a single round of the game. Today we are going to tie all of our scenes together to make a complete, playable game of interactive fiction. We are going to approach it from an experimental view, playing with different approaches until we find one that makes us happy. Well, one that makes <em>me</em> happy.</p>
<h2 id="specifying-a-scene">Specifying a scene</h2>
<p><code>ifiction.py</code> already does a good job of describing a scene, but we want to describe any one of several scenes. That won&rsquo;t happen unless we have an effective way to store all of the scenes and get at a specific one.  It&rsquo;s immediately obvious that we can&rsquo;t have a separate variable for each scene along with a separate list for each scene&rsquo;s available actions. That will become clumsy far too quickly. Let&rsquo;s think this through.</p>
<p>We are tracking two items for each scene.</p>
<ol>
<li>The scene&rsquo;s description</li>
<li>A list of actions the user can take, leading to other scenes.</li>
</ol>
<p>We need both of these items any time we deal with a scene. It makes sense to store them together. The easiest way to do that with our current knowledge would be to use a list, and grab <code>description</code> and <code>paths</code> from that list.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># ifiction.py</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  - An interactive fiction game</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">textwrap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">scene</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># description</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;You are standing in a field. To the north of you are some mountains, &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;to the east of you is a forest, to the west of you is a cave, and to &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;the south of you is a valley.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># paths</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go to the mountains&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go into the forest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go into the cave&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go to the valley&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">description</span> <span class="o">=</span> <span class="n">scene</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">paths</span> <span class="o">=</span> <span class="n">scene</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">textwrap</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Show the menu for this scene.</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">menu_item</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">menu_item</span><span class="p">,</span> <span class="n">path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">(0 Quit)&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">next_step</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Get the user selection from the menu.</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">next_step</span> <span class="o">==</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">choice</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="s2">&#34;Make a selection: &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">menu_selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">menu_selection</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_step</span> <span class="o">=</span> <span class="s2">&#34;quit&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">index</span> <span class="o">=</span> <span class="n">menu_selection</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_step</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span> <span class="n">index</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="s2">&#34;Choice&#34;</span><span class="p">,</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;-&#34;</span><span class="p">,</span> <span class="n">next_step</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="p">(</span><span class="ne">IndexError</span><span class="p">,</span> <span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="s2">&#34;You decided to:&#34;</span><span class="p">,</span> <span class="n">next_step</span></span></span></code></pre>
</figure><p>Did you see that array just sitting there in the middle of <code>scene</code>? Arrays can hold anything, even other arrays. But why didn&rsquo;t I declare an array variable to hold the paths? Well, the answer boils down to &ldquo;why bother?&rdquo; The array of paths doesn&rsquo;t really have a meaning outside of the scene, so I don&rsquo;t want to clutter up the names by adding a variable I will only use once. Why do I then go and declare a <code>path</code> array later on? To make it easier to use the paths of different scenes when that becomes an issue for me.</p>
<p>Go ahead and try that code out. It still functions exactly the same. That&rsquo;s good. You don&rsquo;t want the whole thing collapsing just because you made one change. So, why did I keep <code>description</code> and <code>paths</code> instead of referring to <code>scene[0]</code> and <code>scene[1]</code> in this version? The answer is as easy as you think it is. No way am I going to remember that <code>scene[1]</code> refers to the paths for that scene. I kept the variable name because it&rsquo;s easy to remember, and works the same regardless of what scene I use.</p>
<p>Don&rsquo;t believe me? Here, let&rsquo;s add another scene.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># ifiction.py</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  - An interactive fiction game</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">textwrap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">field_scene</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># description</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;You are standing in a field. To the north of you are some mountains, &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;to the east of you is a forest, to the west of you is a cave, and to &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;the south of you is a valley.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># paths</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go to the mountains&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go into the forest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go into the cave&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go to the valley&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">mountain_scene</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># description</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;You are standing at the foot of a mountain range. Huge impassable peaks &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;loom over you. There is a cave to the east, and a field south of you &#34;</span>    \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;leading into a valley.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># paths</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go into the cave&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go south into the field&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">scene</span> <span class="o">=</span> <span class="n">mountain_scene</span>
</span></span><span class="line"><span class="cl"><span class="n">description</span> <span class="o">=</span> <span class="n">scene</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">paths</span> <span class="o">=</span> <span class="n">scene</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span></span></span></code></pre>
</figure><p>Hey, we have two scenes! Did you notice that I added yet another variable layer, by remembering one of the scenes in <code>scene</code>? I am very lazy, and will work extremely hard to avoid extra work. We still haven&rsquo;t had to do anything to the logic of our application, and we didn&rsquo;t even have to change how <code>description</code> and <code>paths</code> get assigned.</p>
<p>Oh, did you run it?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python ifiction.py
You are standing at the foot of a mountain range. Huge impassable
peaks loom over you. There is a cave to the east, and a field south of
you leading into a valley.
        1 Go into the cave
        2 Go south into the field
        (0 Quit)
Make a selection: 2
Choice 2 - Go south into the field
You decided to: Go south into the field</code></pre>
</figure><p>We have confirmed that our code works equally well regardless of which scene we use. It is time to start tying all the scenes together. First, let&rsquo;s get all the scenes into the code.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">field_scene</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># description</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;You are standing in a field. To the north of you are some mountains, &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;to the east of you is a forest, to the west of you is a cave, and to &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;the south of you is a valley.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># paths</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go to the mountains&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go into the forest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go into the cave&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go to the valley&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">mountain_scene</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># description</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;You are standing at the foot of a mountain range. Huge impassable peaks &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;loom over you. There is a cave to the east, and a field south of you &#34;</span>    \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;leading into a valley.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># paths</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go into the cave&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go south into the field&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">forest_scene</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># description</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;A giant confused bear mistakes your for one of her cubs and takes you &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;away with her. Although you eventually learn to love your &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;new bear family, your adventuring days are over.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># paths</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># No paths - this is a story ending</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cave_scene</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># description</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;You are in a long dark cave. You see points of daylight at either end of &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;the cave, one to the northeast and one to the southwest.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># paths</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go northwest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Go southwest&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">valley_scene</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># description</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;You are standing in the middle of a huge, beautiful valley. Standing right &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;before you is ... whatever it was you were looking for. Success!&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># paths</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># No paths - this is a game ending</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">scene</span> <span class="o">=</span> <span class="n">valley_scene</span></span></span></code></pre>
</figure><p>Experiment with using different scenes for <code>scene</code> in the game, just to make sure everything works.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >You are standing in the middle of a huge, beautiful valley. Standing
right before you is ... whatever it was you were looking for. Success!
        (0 Quit)
Make a selection: 0
You decided to: quit</code></pre>
</figure><p>How do we go from selecting a path to describing the selected scene? The easiest way to do that right now is to expand the list of paths for each list, turning a path into a list holding the string describing the path and the name of the scene which the path points to. Another one which is easier to show than to describe.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">field_scene</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># description</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;You are standing in a field. To the north of you are some mountains, &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;to the east of you is a forest, to the west of you is a cave, and to &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;the south of you is a valley.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># paths</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span> <span class="s2">&#34;Go to the mountains&#34;</span><span class="p">,</span> <span class="n">mountain_scene</span> <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span> <span class="s2">&#34;Go into the forest&#34;</span><span class="p">,</span>  <span class="n">forest_scene</span>   <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span> <span class="s2">&#34;Go into the cave&#34;</span><span class="p">,</span>    <span class="n">cave_scene</span>     <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span> <span class="s2">&#34;Go to the valley&#34;</span><span class="p">,</span>    <span class="n">valley_scene</span>   <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">mountain_scene</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># description</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;You are standing at the foot of a mountain range. Huge impassable peaks &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;loom over you. There is a cave to the east, and a field south of you &#34;</span>    \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;leading into a valley.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># paths</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span> <span class="s2">&#34;Go into the cave&#34;</span><span class="p">,</span>        <span class="n">cave_scene</span>  <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span> <span class="s2">&#34;Go south into the field&#34;</span><span class="p">,</span> <span class="n">field_scene</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">forest_scene</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># description</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;A giant confused bear mistakes your for one of her cubs and takes you &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;away with her. Although you eventually learn to love your &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;new bear family, your adventuring days are over.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># paths</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># No paths - this is a story ending</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cave_scene</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># description</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;You are in a long dark cave. You see points of daylight at either end of &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;the cave, one to the northeast and one to the southwest.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># paths</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span> <span class="s2">&#34;Go northwest&#34;</span><span class="p">,</span> <span class="n">mountain_scene</span> <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span> <span class="s2">&#34;Go southwest&#34;</span><span class="p">,</span> <span class="n">field_scene</span>    <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">valley_scene</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># description</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;You are standing in the middle of a huge, beautiful valley. Standing right &#34;</span> \
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;before you is ... whatever it was you were loking for. Success!&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># paths</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># No paths - this is a game ending</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">scene</span> <span class="o">=</span> <span class="n">field_scene</span></span></span></code></pre>
</figure><p>Of course, my changes broke our code.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python ifiction.py
Traceback (most recent call last):
  File &#34;ifiction.py&#34;, line 6, in ?
    field_scene = [
NameError: name &#39;mountain_scene&#39; is not defined</code></pre>
</figure><p>Oh, that&rsquo;s no good at all. Of course we can&rsquo;t use <code>mountain_scene</code> before we tell Python what <code>mountain_scene</code> actually <em>is</em>. What are we going to do? We could make a handful of <code>None</code> assignments at the beginning of the code, but that fights against the flexibility of a language like Python. We could also create a big list called <code>scenes</code> and use the index of each scene instead of a variable name. That <em>would</em> work, but it&rsquo;s inconvenient. Everything could break again if we change the number of scenes. We&rsquo;ll also have to keep good notes in order to remember that <code>scenes[0]</code> is the &ldquo;field scene&rdquo;, <code>scenes[1]</code> is the &ldquo;mountain scene,&rdquo; and so on. Besides, do we really care what order the scenes are stored in? Everything should fall into place automatically once we decide what the starting scene is.</p>
<p>Python has a wonderful type for collecting things where the order doesn&rsquo;t matter. That type is called a <em>dictionary</em>, and it will be the subject of the next section.</p>
<h3 id="dictionaries">Dictionaries</h3>
<p>A dictionary is also the most perfectly named type. We have to think about what strings, integers, and arrays are, but a <em>dictionary</em> is easy.  You know how to use a dictionary, right? You want to know the meaning of a word, so you look it up by name, and there is the definition. The dictionary type works the same way. It uses <em>keys</em> instead of indexes. You look up values in a dictionary using their keys. Hey, we haven&rsquo;t gone to the console recently, and now&rsquo;s the perfect time.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; letters = {
...     &#34;a&#34;: &#34;The first letter in the alphabet&#34;,
...     &#34;b&#34;: &#34;The second letter in the alphabet&#34;,
...     &#34;banana pancakes&#34;: &#34;A tasty and nutritious breakfast treat&#34;
... }</code></pre>
</figure><p>Python recognizes that you are creating a hash when you use the curly brackets <code>{}</code>. Your initial keys and values will go within those brackets, much like when creating a list. The items in a hash â€” sorry, they&rsquo;re called dictionaries in Python, but hashes in many other languages. Dictionary is a much more sensible name, since it describes how you use it. Still, I do occasionally use the word &ldquo;hash&rdquo; instead of dictionary because I&rsquo;m so used to it from other languages. I could have corrected myself and you never need know, but I thought it seemed nice to take a second and point it out. Now when you hear somebody talking about hashes in Perl or Ruby, you will already know that they are describing what you know as dictionaries.</p>
<p>What was I saying? Oh, right. The items in a <em>dictionary</em> are pairs of keys and values. The bit on the left of the <code>:</code> character is the <em>key</em>, and that&rsquo;s what we use to look up a value. The <em>value</em> is the item on the right, and that&rsquo;s the bit you&rsquo;ll usually cared about. The values are strings in this case, but they can be anything. Actually, the same thing is true for the keys, but string keys are the most common. I will definitely be sticking with string keys in the near future.</p>
<p>Once you&rsquo;ve defined your dictionary, use square brackets <code>[]</code> to get to individual values. This is similar to the way you get at values in a list. This little bit of consistency is provided because both lists and dictionaries are <em>collection</em> types, and it&rsquo;s important to provide a consistent interface for similar tasks. The task in this case is accessing individual items in the collection.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; letters[&#34;a&#34;]
&#34;The first letter in the alphabet&#34;
&gt;&gt;&gt; letters[&#34;b&#34;]
&#34;The second letter in the alphabet&#34;
&gt;&gt;&gt; letters[&#34;banana pancakes&#34;]
&#39;A tasty and nutritious breakfast treat&#39;</code></pre>
</figure><p>Oh yeah, our keys are strings, so we need to remember the quotes when using them to access a value.</p>
<p>The logic here is straightforward. Again, think of a dictionary. You flip through the pages to look up &ldquo;banana pancakes&rdquo; and you find &ldquo;A tasty and nutritious breakfast treat&rdquo;.</p>
<p>What happens when you try to use a key that doesn&rsquo;t exist? TIAS! <em>(Try It And See, for those of you who don&rsquo;t turn every phrase into an acronym)</em></p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; letters[&#34;c&#34;]
Traceback (most recent call last):
  File &#34;&lt;stdin&gt;&#34;, line 1, in ?
KeyError: &#39;c&#39;</code></pre>
</figure><p>Python won&rsquo;t try to do anything clever when you use a key that hasn&rsquo;t been defined. It simply raises a <code>KeyError</code> exception.</p>
<p>Using a dictionary is straightforward, as you can see. There is one quirk you need to be aware of, though. Remember how I said that dictionaries were a good collection type for those situations where the order of things collected doesn&rsquo;t matter? That&rsquo;s because you cannot assume that the keys in a dictionary have any kind of order.</p>
<p>See for yourself with the dictionary method <code>keys</code>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; letters.keys()
[&#39;a&#39;, &#39;banana pancakes&#39;, &#39;b&#39;]
&gt;&gt;&gt;               </code></pre>
</figure><p>You can see that the keys are not in the alphabetical order you might expect. The reason is a little technical for my mood right now, but basically Python does a little preparation which makes it easier to store and access the keys later. The cost for us is that the keys look unsorted. It&rsquo;s a small cost, and one that we can work around easily if it&rsquo;s that important.</p>
<p>Okay, fine. But what was I saying earlier about <em>methods</em>, and why does it look like I have a function call pressed up against <code>letters</code>? That is our first peek at Object Oriented Programming, a popular approach which makes a lot of programs easier to describe.</p>
<p>I am having a hard time coming up with a description for objects, even though the basic idea is easy. You have been dealing so far with simple values for variables, like the number <code>3</code> or the string <code>&quot;bananagram&quot;</code>. Well, an object is <em>like</em> a simple value, but you can ask it to do things. Take a dictionary for example. You can ask it for its keys, you can ask it if it has a particular key, and a few other things. Many of those requests are done with <em>methods</em>. A method looks like an ordinary function, but it is associated with a particular type of object.</p>
<p>I have been lying a little bit about strings, actually. They are objects, not simple values.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; &#34;surprise&#34;.upper()
&#39;SURPRISE&#39;</code></pre>
</figure><p>An easy way to get at all of the values in a dictionary is to get the list of keys and iterate through the list with <code>for</code>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; keys = letters.keys()
&gt;&gt;&gt; for key in keys:
...     print key, &#34;is&#34;, letters[key]
...
a is The first letter in the alphabet
banana pancakes is A tasty and nutritious breakfast treat
b is The second letter in the alphabet</code></pre>
</figure><p>And if the order is important to us, we can sort the list of keys with the <code>sort</code> method common to all lists. See, you have been using objects quite a bit already!</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; keys.sort()
&gt;&gt;&gt; for key in keys:
...     print key, &#34;is&#34;, letters[key]
...
a is The first letter in the alphabet
b is The second letter in the alphabet
banana pancakes is A tasty and nutritious breakfast treat</code></pre>
</figure><p>I think it&rsquo;s been too long since we worked on our game. Let&rsquo;s put everything in a dictionary and make our game code work with that. Some big changes are coming to the code, so prepare yourself.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">scenes</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;field&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;You are standing in a field. To the north of you are some mountains, &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;to the east of you is a forest, to the west of you is a cave, and to &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;the south of you is a valley.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;paths&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;mountains&#34;</span><span class="p">,</span> <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go to the mountains&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;forest&#34;</span><span class="p">,</span>    <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go to the forest&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;cave&#34;</span><span class="p">,</span>      <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go into the cave&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;valley&#34;</span><span class="p">,</span>    <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go to the valley&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;mountains&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;You are standing at the foot of a mountain range. Huge impassable peaks &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;loom over you. There is a cave to the east, and a field south of you &#34;</span>    \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;leading into a valley.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;paths&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;cave&#34;</span><span class="p">,</span> <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go into the cave&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;field&#34;</span><span class="p">,</span> <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go south into the field&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;forest&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;A giant confused bear mistakes your for one of her cubs and takes you &#34;</span>   \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;away with her. Although you eventually learn to love your &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;new bear family, your adventuring days are over.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;paths&#34;</span><span class="p">:</span> <span class="p">[</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;cave&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;You are in a long dark cave. You see points of daylight at either end of &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;the cave, one to the northeast and one to the southwest.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;paths&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;mountains&#34;</span><span class="p">,</span> <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go northwest&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="s2">&#34;go_to&#34;</span><span class="p">:</span> <span class="s2">&#34;field&#34;</span><span class="p">,</span>     <span class="s2">&#34;phrase&#34;</span><span class="p">:</span> <span class="s2">&#34;Go southwest&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;valley&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;You are standing in the middle of a huge, beautiful valley. Standing right &#34;</span> \
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;before you is ... whatever it was you were looking for. Success!&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;paths&#34;</span><span class="p">:</span> <span class="p">[</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">scene</span> <span class="o">=</span> <span class="n">scenes</span><span class="p">[</span><span class="s2">&#34;field&#34;</span><span class="p">]</span></span></span></code></pre>
</figure><p>We are now using key names instead of variable names. This makes Python happier, since we aren&rsquo;t using variable names that haven&rsquo;t been defined yet. There is a pleasant side effect, too. Instead of having half a dozen different <code>scene</code> variables, we have contained all of them in a single <code>scenes</code> dictionary. I like to think that this makes the code a little cleaner. We use a convenient name as the key for each scene. Each scene is a dictionary as well, containing the description and paths for that scene. And then the paths collection for each scene is an array of dictionaries. Each element of the <code>paths</code> list contains the destination and a phrase describing the command. <em>(I&rsquo;m not comfortable with the
names I used for the path dictionaries. Let&rsquo;s revisit that later.)</em></p>
<p>It all sounds a little confusing, and eventually I&rsquo;ll come up with a better way to explain it. I think you&rsquo;ll find that dictionaries provide an incredibly convenient way to store information that is more complicated than a simple string or number as you get comfortable with them.</p>
<p>Now we need to fix our scene handling code so that it works with our new dictionary-based scenes.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">scene</span> <span class="o">=</span> <span class="n">scenes</span><span class="p">[</span><span class="s2">&#34;field&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">description</span> <span class="o">=</span> <span class="n">scene</span><span class="p">[</span><span class="s2">&#34;description&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">paths</span> <span class="o">=</span> <span class="n">scene</span><span class="p">[</span><span class="s2">&#34;paths&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">textwrap</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">description</span><span class="p">)</span></span></span></code></pre>
</figure><p>I used an array <em>(right name for a list &ndash; search and replace through text)</em> for a scene&rsquo;s paths because I still want to use numbers in our menu listing. This means that order is important, which is the best time to use an array.</p>
<p>Printing the menu is easy. We adjust the <code>print</code> statement so that it prints the value associated with the &ldquo;phrase&rdquo; key of <code>path</code>. You know what? That is too much of a mouthful. How about I start saying &ldquo;the &lsquo;phrase&rsquo; for this <code>path</code>&rdquo; or something like that? It means the same thing, and is probably easier to understand since it is so much shorter.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Show the menu for this scene.</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">menu_item</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">menu_item</span><span class="p">,</span> <span class="n">path</span><span class="p">[</span><span class="s2">&#34;phrase&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">(0 Quit)&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">next_step</span> <span class="o">=</span> <span class="kc">None</span></span></span></code></pre>
</figure><p>Processing the input is going to be a little trickier. We need to get the right assignment for <code>next_step</code>, but we also need to correctly handle a user decision to quit.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Get the user selection from the menu.</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">next_step</span> <span class="o">==</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">choice</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="s2">&#34;Make a selection: &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">menu_selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">menu_selection</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_step</span> <span class="o">=</span> <span class="s2">&#34;quit&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">index</span> <span class="o">=</span> <span class="n">menu_selection</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_step</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span> <span class="n">index</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="p">(</span><span class="ne">IndexError</span><span class="p">,</span> <span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">next_step</span> <span class="o">==</span> <span class="s2">&#34;quit&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;Good bye!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;You decided to:&#34;</span><span class="p">,</span> <span class="n">next_step</span><span class="p">[</span><span class="s2">&#34;phrase&#34;</span><span class="p">]</span></span></span></code></pre>
</figure><p>That exception handling code is starting to bother me. It catches errors well enough, but it doesn&rsquo;t give any useful information to the user. We have provided the user with a menu and some numbers, but we are assuming that she knows what she is supposed to enter. Our user needs to know what we expect from her so that she can enjoy the game. Please remember: we are <em>not</em> going to assume that the user is stupid, but we <em>are</em> going to assume that she has better things to do with her time than decipher our menu.</p>
<p>I think we&rsquo;ll be safe by adding a little bit of direction as part of our input prompt.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">prompt</span> <span class="o">=</span> <span class="s2">&#34;Make a selection (0 - </span><span class="si">%i</span><span class="s2">): &#34;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">next_step</span> <span class="o">==</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">choice</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span></span></span></code></pre>
</figure><p>Our prompt message is a little more complicated now, so we put it into its own variable. And I have introduced yet another way to construct strings.</p>
<p>String formatting gives us a mini-language for exact control over the contents of a string. It is a fairly simple language, consisting of placeholders marked with <code>%</code> and a conversion rule. I want to display the length of <code>paths</code> as an integer number, so my conversion rule is <code>i</code>. The string is followed by another <code>%</code> symbol and the value you want converted and placed in the string. Use a tuple after the <code>%</code> if you have more than one conversion to handle in your string:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; str = &#34;%s are better for you than %s, but I don&#39;t care&#34; % (&#34;apples&#34;, &#34;pancakes&#34;)
&gt;&gt;&gt; str
&#39;apples are better for you than pancakes&#39;</code></pre>
</figure><p>Your rules can become very elaborate, and I encourage you to play with them more. I&rsquo;ve rambled enough and there is a lot more to cover. Let&rsquo;s move on.</p>
<p>Guess what? It&rsquo;s time to create the game loop, which means that we are about to have a playable version of our interactive fiction game! Take another break. Shake your fingers out. Have a taste of coffee, juice, or whatever your beverage of choice is. We&rsquo;ll pick this up again soon.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Python Interactive Fiction - 01 Handling a Single Round</title>
  <link>https://randomgeekery.org/post/2007/04/python-interactive-fiction-01-handling-a-single-round/</link>
  <pubDate>Thu, 19 Apr 2007 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2007/04/python-interactive-fiction-01-handling-a-single-round/</guid>
  <description>&lt;p&gt;I think the next step is to write the code for a single round of the game. Weâ€™ll limit ourselves to Scene 1 to stay focused.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>python</category>  <category>interactive-fiction</category>  <category>coolnamehere</category> 
  <content:encoded><![CDATA[<p>I think the next step is to write the code for a single round of the game. We&rsquo;ll limit ourselves to Scene 1 to stay focused.</p>
<h3 id="presenting-a-scene-to-the-user">Presenting a Scene to the user</h3>
<p>First you want to show the description. Start a new <a href="/card/python/">Python</a> file in your favorite editor, or in IDLE with the menu command &ldquo;File&rdquo; -&gt; &ldquo;New&rdquo;.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># ifiction.py</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  - An interactive fiction game</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;You are standing in a field. To the north of you are some mountains, &#34;</span> \
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;to the east of you is a forest, to the west of you is a cave, and to &#34;</span> \
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;the south of you is a valley.&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">description</span></span></span></code></pre>
</figure><p>The <code>\</code> character at the end of lines 6 and 7 tells Python the string is continuing to the next line. Python would complain at us if we left that out. Let&rsquo;s run the script and see what we get.</p>
<p>Save your new file as <code>ifiction.py</code> and run it. Press the <code>F5</code> key to run the script if you are using IDLE.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python ifiction.py

You are standing in a field. To the north of you are some mountains, to the ea
st of you is a forest, to the west of you is a cave, and to the south of you i
s a valley.</code></pre>
</figure><p>This may not be happening for you, but when I run the script the description text gets cut off at inconvenient points. What happens next is a little more advanced than I was planning to show you, but that is just going to bug me too much if I don&rsquo;t fix it now.</p>
<h4 id="wrapping-text-with-the-textwrap-module">Wrapping text with the <code>textwrap</code> module</h4>
<p>One of Python&rsquo;s charms is the fact that it has a <a href="http://docs.python.org/lib/" title="Python Standard Library Reference">huge standard library</a>. This means that a lot of things you would like to do have already been written and included for free. That&rsquo;s why some folks say that Python comes with &ldquo;batteries included.&rdquo; The standard library is a collection of modules with useful features and functions. I am just concerned with the <code>fill</code> function from the <a href="https://docs.python.org/2/library/textwrap.html">textwrap</a> module right now, because I want the text of the description wrapped so that no words get cut off.</p>
<p>You aren&rsquo;t automatically carrying all of those libraries around in your script, though. You need to use the <code>import</code> command to make the functions in a library available to your program.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># ifiction.py</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  - An interactive fiction game</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">textwrap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;You are standing in a field. To the north of you are some mountains, &#34;</span> \
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;to the east of you is a forest, to the west of you is a cave, and to &#34;</span> \
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;the south of you is a valley.&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">textwrap</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">description</span><span class="p">)</span></span></span></code></pre>
</figure><p>Notice that I had to use the module name as part of my call to <code>fill</code>. That is because Python needs to know where it can find the <code>fill</code> function, and for library functions it uses <em>modulename</em> followed by a dot (.) and then the function. You will be seeing a lot more of the dot operator as your Python knowledge expands.</p>
<p>There are ways to import the function in a way which removes that requirement, but for now I will stick with the more explicit version because it is easier for <em>us</em> to know where we found the function.</p>
<p>See what it looks like now?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python ifiction.py
You are standing in a field. To the north of you are some mountains,
to the east of you is a forest, to the west of you is a cave, and to
the south of you is a valley.</code></pre>
</figure><p>Of course, if the wrapping text isn&rsquo;t an issue for you, feel free to leave out the <code>textwrap</code> related code completely.</p>
<h3 id="back-to-the-game-paths">Back to the game: paths</h3>
<p>Now for the paths. We could just print the paths and make the user type in the full path to go anywhere, but that would be unkind. What we want is an easy way to show the list of paths and say &ldquo;You picked path #1: Go to the mountains&rdquo;.</p>
<p>Python&rsquo;s <a href="https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange">list</a> type is the perfect way to do this. A Python list is a collection of values - they could be literals or other variables - that holds each value in order. This lets you ask for the third item in a list, or ask for each value in order. Let&rsquo;s start by creating and displaying the paths.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># ifiction.py</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  - An interactive fiction game</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">textwrap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;You are standing in a field. To the north of you are some mountains, &#34;</span> \
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;to the east of you is a forest, to the west of you is a cave, and to &#34;</span> \
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;the south of you is a valley.&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">textwrap</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># The list of choices available to the user.</span>
</span></span><span class="line"><span class="cl"><span class="n">paths</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go to the mountains&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go into the forest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go into the cave&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go to the valley&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">paths</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="n">path</span></span></span></code></pre>
</figure><p>What does it look like now?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python ifiction.py
You are standing in a field. To the north of you are some mountains,
to the east of you is a forest, to the west of you is a cave, and to
the south of you is a valley.
Go to the mountains
Go into the forest
Go into the cave
Go to the valley</code></pre>
</figure><p>I want to do a bit of formatting to break things up, but you get the idea of what is going on. We have created a variable called <code>paths</code> to hold our list of paths. What can I say? I like my variable names to be obvious. You can recognize a list by the square brackets <code>[]</code>. Items in the list are separated by commas. I like to put each list item on a line by itself, using indentation to show that we are looking inside the list. Little things like this make your code easier to read, which gets very important as your program grows.</p>
<h4 id="the-for-loop">The <code>for</code> loop</h4>
<p>Okay, I need to take the next few ideas slowly, because I have put a lot of important new concepts in two lines of code.</p>
<p><code>for</code> is one of Python&rsquo;s looping <a href="/post/2004/07/control-structures/">control structures</a>. <code>for path in paths:</code> is going step to through each item in the list <code>paths</code>. That part is straightforward.  Another nice thing about Python code is that you can usually tell what&rsquo;s going on just by looking at it.</p>
<p>It also creates a variable called <code>path</code> which will hold the value of the current item in the list. The first time through the list, <code>path</code> is set to <em>&ldquo;Go to the mountains&rdquo;</em>, the second time  through <code>path</code> is set to <em>&ldquo;Go into the forest&rdquo;</em>, and so on.</p>
<p>What is Python going to do with <code>path</code>? That is decided in the indented line after the colon <code>:</code> character.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">paths</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="n">path</span></span></span></code></pre>
</figure><p>I kept it simple for now. All we do is print this path to the screen and move on. Do you see the extra indentation, though? Python uses indentation to know what code is supposed to be executed within the loop. If I try to describe it, I&rsquo;m just going to make things more confusing than they really are. Just remember this:</p>
<ul>
<li>One or more lines at the same indent level are often called a &ldquo;block&rdquo;</li>
<li>Everything right under the <code>for</code> statement which is indented belongs to the <code>for</code>
loop.</li>
<li>If you indent another level, it better be because you&rsquo;re starting a new block
<em>inside</em> the <code>for</code> loop.</li>
<li>If you unindent, it better be because you are done with the loop block.</li>
</ul>
<p>An indent without a control statement is an error in Python, except for special cases like the way I defined <code>description</code> and <code>paths</code>. It doesn&rsquo;t <em>really</em> matter how much you indent for a block, but it must be consistent throughout your program. The common standard suggested by Python creator Guido van Rossum is four spaces per block, with no tab characters used.</p>
<p><code>for &lt;item&gt; in &lt;list&gt;</code> is useful, and it will probably be the most common tool in your kit for examining every item in a list. It doesn&rsquo;t quite work for our exact needs today, though. We want to build a menu with an easy value for the user to enter. This will use the <code>range()</code> function combined with the <code>[]</code> operator for accessing list members.</p>
<p><code>range</code> is a simple function which returns a list of whole numbers in a certain range. It normally takes a single argument: the upper edge of the range. All the numbers in the list will be <em>less than</em> the upper edge. Here is a simple example:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; range(3)
[0, 1, 2]</code></pre>
</figure><p><code>range</code> can take additional arguments to set the starting number and the step size, but this is all we want for now. Oh, notice that the numbering starts at zero. This is going to be very useful, for reasons which will become clear in a few moments.</p>
<p>I have shown you how to look at a complete list, as well as how to look at each item in a list one at a time. How do you look at a single item in the list? You use <code>[]</code>. What do they call that, anyways? I can&rsquo;t really tell from the Python docs. Let&rsquo;s call it the <em>indexing operation</em>. Why &ldquo;operation?&rdquo; Because we&rsquo;re doing something, but not with a function. Why &ldquo;indexing?&rdquo; Because we will be using a specific value to get at the item, sort of like using the index or table of contents in a book.</p>
<p>So let&rsquo;s try it out. It is easy to use the indexing operation. Add the left bracket, the index number of the item you want, and then the right bracket. Go back to the Python shell and try it out for yourself, getting the value at index 1 of a list:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; items = [ &#39;apples&#39;, &#39;chocolate bugs&#39;, &#39;bananas&#39;]
&gt;&gt;&gt; items[1]
&#39;chocolate bugs&#39;</code></pre>
</figure><p>That was a little confusing, wasn&rsquo;t it? We were expecting apples but got chocolate bugs instead You would <em>think</em> that the index would be easy: the first item would be at index 1, the second at index 2, and so on. Unfortunately, that&rsquo;s not the wayindexes work in Python. Numbering starts with the first item being zero.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; items[0]
&#39;apples&#39;</code></pre>
</figure><p>Zero-based indexing is one of those language features that&rsquo;s there for historical reasons. It made perfect sense a long time ago in another language, but now it just serves to confuse newcomers and create a lot of &ldquo;off-by-one&rdquo; errors. You may want to use a mental trick for reducing confusion: think of the index as the distance from the first item. The first item <em>is</em> the first item, so the distance is zero: <code>items[0]</code>. The next item is one away from the first item, so the distance is one: <code>items[1]</code>. And so on.</p>
<p>Or you could just subtract one from the number you&rsquo;re thinking of and get on with it. Things that are shortcuts for me could just be useless clutter for you. I&rsquo;m happy as long as you remember that list index numbers start at zero.</p>
<p>So where do the index numbers stop? You could count the items in the list code by hand and work with that number, but that is far too much work. Use Python&rsquo;s built-in <code>len</code> function. <code>len</code> is blissfully simple. You hand it a list, and it tells you how many items are in the list. Try it yourself if you still have that shell open:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; len(items)
3</code></pre>
</figure><p>There are three items in the list, so the index starts at zero and ends at two. <code>len</code> works perfectly with <code>range</code>, which hands you a list of numbers starting at zero and ending at one less than the upper edge. Back to the shell, where we&rsquo;ll step through our list using &rsquo;len&rsquo;, &lsquo;range&rsquo;, and list indexing.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; for index in range(len(items)):
...     print index, items[index]
...
0 apples
1 chocolate bugs
2 bananas</code></pre>
</figure><p>Oh, I didn&rsquo;t mention blocks in the shell, did I? When Python thinks you are in a block, it prints <code>...</code> instead of <code>&gt;&gt;&gt;</code>. Indent by hitting spaces (or I just use the tab key when I&rsquo;m in the shell). Hitting Enter on a line with no code tells the Python shell that you are done with the block and it&rsquo;s time to execute.</p>
<p>Just so you know - <em>indexing operation</em> is just something I came up with after looking around on the Web a little bit. That is not the official name for <code>[]</code>, and I&rsquo;ll be updating this section as soon as I find out what that name is.</p>
<p>This has been a quick crash course through list handling in Python. Let&rsquo;s apply what we&rsquo;ve learned about lists to our interactive story.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># ifiction.py</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  - An interactive fiction game</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">textwrap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;You are standing in a field. To the north of you are some mountains, &#34;</span> \
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;to the east of you is a forest, to the west of you is a cave, and to &#34;</span> \
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;the south of you is a valley.&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">textwrap</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># The list of choices available to the user.</span>
</span></span><span class="line"><span class="cl"><span class="n">paths</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go to the mountains&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go into the forest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go into the cave&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go to the valley&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">menu_item</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">menu_item</span><span class="p">,</span> <span class="n">path</span></span></span></code></pre>
</figure><p>I used <code>i + 1</code> instead of <code>i</code> because &hellip; well, Python may count from zero but most people count from one. We&rsquo;re writing this for people, not for Python.</p>
<p>We didn&rsquo;t <em>really</em> need to set up each <code>path</code> and <code>menu_item</code> as a variable, but I thought it would make things easier to read than <code>print &quot;\t&quot;, i+1, paths[i]</code>. You want to aim for readabality when you are starting out or you will quickly become lost. Actually, it&rsquo;s a good idea to aim for readability all the way through your programming life. It will make your code easier to maintain. Besides, putting these values in a variable leaves room for us to change our mind about <code>path</code> and <code>menu_item</code> are constructed in the future.</p>
<p>Run the script and see what you get.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >You are standing in a field. To the north of you are some mountains,
to the east of you is a forest, to the west of you is a cave, and to
the south of you is a valley.
  1 Go to the mountains
  2 Go into the forest
  3 Go into the cave
  4 Go to the valley</code></pre>
</figure><p>It&rsquo;s starting to look like something! Now go take a break for a minute. I threw a lot of information at you all at once, and you may still need to process it. You at least need to look at something besides a computer monitor for a few seconds and shake your fingers loose. It&rsquo;s good for you.</p>
<h3 id="getting-the-users-selection">Getting the user&rsquo;s selection</h3>
<p>I am pleased that we have the scene description code working, but user input is still missing. All we need is <code>raw_input</code>, which we encountered in the initial <a href="/post/2001/01/python-babysteps-tutorial/">Python Babysteps</a>. Add a line to get user input and another line to show the result.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># ifiction.py</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  - An interactive fiction game</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">textwrap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;You are standing in a field. To the north of you are some mountains, &#34;</span> \
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;to the east of you is a forest, to the west of you is a cave, and to &#34;</span> \
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;the south of you is a valley.&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">textwrap</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># The list of choices available to the user.</span>
</span></span><span class="line"><span class="cl"><span class="n">paths</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go to the mountains&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go into the forest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go into the cave&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go to the valley&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">menu_item</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">menu_item</span><span class="p">,</span> <span class="n">path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">choice</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="s2">&#34;Make a selection: &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="s2">&#34;Choice&#34;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="s2">&#34;-&#34;</span><span class="p">,</span> <span class="n">paths</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span></span></span></code></pre>
</figure><p>Running this code is very exciting indeed:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >You are standing in a field. To the north of you are some mountains,
to the east of you is a forest, to the west of you is a cave, and to
the south of you is a valley.
  1 Go to the mountains
  2 Go into the forest
  3 Go into the cave
  4 Go to the valley
Make a selection: 3
Choice 3 - Go into the cave</code></pre>
</figure><h4 id="quitting-the-game">Quitting the game</h4>
<p>Our specification mentioned that users may quit the game at any point, so we should add the code to make that possible.  Normal choices are numbers and they start at one, so let&rsquo;s take the easy way out and say that zero quits the game. The <code>if</code> selection control structures can be used to recognize the quit command.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># ifiction.py</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  - An interactive fiction game</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">textwrap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;You are standing in a field. To the north of you are some mountains, &#34;</span> \
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;to the east of you is a forest, to the west of you is a cave, and to &#34;</span> \
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;the south of you is a valley.&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">textwrap</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># The list of choices available to the user.</span>
</span></span><span class="line"><span class="cl"><span class="n">paths</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go to the mountains&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go into the forest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go into the cave&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go to the valley&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">menu_item</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">menu_item</span><span class="p">,</span> <span class="n">path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">(0 Quit)&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">choice</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span> <span class="n">raw_input</span><span class="p">(</span><span class="s2">&#34;Make a selection: &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">choice</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;Good bye!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;Choice&#34;</span><span class="p">,</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;-&#34;</span><span class="p">,</span> <span class="n">paths</span><span class="p">[</span><span class="n">choice</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span></span></span></code></pre>
</figure><p>A little note about being careful. I spent five minutes debugging the above code. I kept getting <code>Choice 3 Go into the cave</code>, for every non-zero choice I entered. Turns out that I had cut and pasted some debugging code from earlier which was using the <code>i</code> variable. <code>i</code> was last set to <code>3</code>, so that&rsquo;s what Python kept printing for me. It can be very easy to get distracted while writing code, and although Python can catch a lot of errors, you must keep an eye out for little mistakes like that. Once I replace <code>i</code> with <code>choice</code> in the last line, everything was happy.</p>
<p>Now, why did I use the <code>int</code> function on the user input? Keyboard input comes to you in the form of a String, which is a different <a href="/post/2002/06/simple-types-in-python/">type</a> than numbers. If we want to be able to use the input as an index for the <code>paths</code> list, we need a way to turn that String into an integer, or whole number. This is exactly what <code>int</code> does. What happens when the user entry can&rsquo;t be turned into a number? That&rsquo;s part of the next topic.</p>
<h3 id="ensuring-valid-choices">Ensuring valid choices</h3>
<p>User input needs to be in the form of a number. Not only that, but that number needs to be a valid index for <code>paths</code>. If either of these turns out to be false, Python panics. Let&rsquo;s explore this in the shell. As a special treat, I&rsquo;ll show you a glimpse at making functions in Python.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; def get_index():
...     list = [ 10, 20, 30 ]
...     prompt = &#34;Pick a number (0 - 2): &#34;
...     index = int( raw_input(prompt) )
...     print list[index]
...
&gt;&gt;&gt;</code></pre>
</figure><p>If you make a mistake, hit Enter twice to end the function definition and start over. Don&rsquo;t forget your indentation! Incidentally, I chose to put the prompt in its own variable because all of those parentheses on the same line were making me a little dizzy.</p>
<p>Test <code>get_index</code> with a valid number first.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; get_index()
Pick a number (0 - 2): 0
10</code></pre>
</figure><p>What happens when you enter a number that&rsquo;s too big? Try it and see.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; get_index()
Pick a number (0 - 2): 20
Traceback (most recent call last):
  File &#34;&lt;stdin&gt;&#34;, line 1, in ?
  File &#34;&lt;stdin&gt;&#34;, line 5, in get_index
IndexError: list index out of range</code></pre>
</figure><p>How about when you enter something that&rsquo;s not a number again? Once again, TIAS <em>(Try It And See)</em>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt;&gt;&gt; get_index()
Pick a number (0 - 2): banana
Traceback (most recent call last):
  File &#34;&lt;stdin&gt;&#34;, line 1, in ?
  File &#34;&lt;stdin&gt;&#34;, line 4, in get_index
ValueError: invalid literal for int(): banana</code></pre>
</figure><p>Python raises an <em>exception</em> at you whenever it encounters a situation it can&rsquo;t handle on its own. An exception is a special type of object that is specially used for errors, accidents, or plain old weird events in your program. You can plan for them, though, and try to handle them when they happen. That is going to require a new kind of block: The <code>try</code> block. This sort of block is easier to understand in the context of a full program, so let&rsquo;s go back to <code>ifiction.py</code>. We&rsquo;ll start with catching every kind of exception in one go:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># ifiction.py</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  - An interactive fiction game</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">textwrap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;You are standing in a field. To the north of you are some mountains, &#34;</span> \
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;to the east of you is a forest, to the west of you is a cave, and to &#34;</span> \
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;the south of you is a valley.&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">textwrap</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># The list of choices available to the user.</span>
</span></span><span class="line"><span class="cl"><span class="n">paths</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go to the mountains&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go into the forest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go into the cave&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go to the valley&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">menu_item</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">menu_item</span><span class="p">,</span> <span class="n">path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">(0 Quit)&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">choice</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span> <span class="n">raw_input</span><span class="p">(</span><span class="s2">&#34;Make a selection: &#34;</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">choice</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;Good bye!&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;Choice&#34;</span><span class="p">,</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;-&#34;</span><span class="p">,</span> <span class="n">paths</span><span class="p">[</span><span class="n">choice</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span></span></span></code></pre>
</figure><p>A <code>try</code> block usually has at least 2 parts:</p>
<ul>
<li><code>try</code>: The code we think might cause an exception to be raise</li>
<li>One or more <code>except</code> blocks: tells Python what to do when an exception is encountered</li>
</ul>
<p>We can specify what exceptions we would expect to see, but that is more than I want to look at right now. We&rsquo;ll just put up a single <code>except</code> block that will catch every exception raised within the <code>try</code> block.  We can test the code by entering a number that is too large.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >You are standing in a field. To the north of you are some mountains,
to the east of you is a forest, to the west of you is a cave, and to
the south of you is a valley.
        1 Go to the mountains
        2 Go into the forest
        3 Go into the cave
        4 Go to the valley
        (0 Quit)
Make a selection: 20
Choice 20 - 20 is not a valid selection!</code></pre>
</figure><p>This is odd-looking. Our error message prints at exactly the spot where the exceptional situation was encountered: trying to access <code>paths[19]</code>.  Well, at least I&rsquo;ve illustrated exactly how dynamic Python is. It doesn&rsquo;t look ahead to see if something bad is going to happen, so it has to trust us to know when to look for an error. I think it would be a little cleaner to put the choice description in its own variable before printing it.  That way we get an exception before we try to give normal feedback to the user.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">choice</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span> <span class="n">raw_input</span><span class="p">(</span><span class="s2">&#34;Make a selection: &#34;</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">choice</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;Good bye!&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">next_step</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span><span class="n">choice</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;Choice&#34;</span><span class="p">,</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;-&#34;</span><span class="p">,</span> <span class="n">next_step</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span></span></span></code></pre>
</figure><p>Our code is starting to get a little long to show the whole thing for every little change, so I have decided to focus on the chunk of code that is being modified. Anyways, you can see that I have made a new <code>next_step</code> variable. Python will raise the exception about bad indexing here, instead of in the middle of printing out feedback. We have also made the code more readable in the process, which is a nice thing.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >You are standing in a field. To the north of you are some mountains,
to the east of you is a forest, to the west of you is a cave, and to
the south of you is a valley.
        1 Go to the mountains
        2 Go into the forest
        3 Go into the cave
        4 Go to the valley
        (0 Quit)
Make a selection: 20
20 is not a valid selection!</code></pre>
</figure><p>Our input code handles bad indexes. Test the code again by entering a non-number for <code>choice</code>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >You are standing in a field. To the north of you are some mountains,
to the east of you is a forest, to the west of you is a cave, and to
the south of you is a valley.
        1 Go to the mountains
        2 Go into the forest
        3 Go into the cave
        4 Go to the valley
        (0 Quit)
Make a selection: steak and eggs
Traceback (most recent call last):
  File &#34;ifiction.py&#34;, line 35, in ?
    print choice, &#34;is not a valid selection!&#34;
NameError: name &#39;choice&#39; is not defined</code></pre>
</figure><p>Oops. I raised a whole new exception because <code>choice</code> isn&rsquo;t defined until <em>after</em> it&rsquo;s converted to a number, but I referred to it in the <code>except</code> block. Another intermediate variable will save us from that error.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">choice</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="s2">&#34;Make a selection: &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">menu_selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">menu_selection</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;Good bye!&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">index</span> <span class="o">=</span> <span class="n">menu_selection</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">next_step</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span> <span class="n">index</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="s2">&#34;Choice&#34;</span><span class="p">,</span> <span class="n">menu_selection</span><span class="p">,</span> <span class="s2">&#34;-&#34;</span><span class="p">,</span> <span class="n">next_step</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span></span></span></code></pre>
</figure><p>There are several very small changes here. <code>choice</code> now refers only to the raw user input, and we have created a new variable <code>menu_selection</code> to hold the choice converted to an integer. This means we had to adjust the variable names where we were really talking about the number the user provided and not the keystrokes. You might have noticed that I created an <code>index</code> variable in the <code>else</code> block. This is a personal taste thing. I often start out using a raw expression and later replace it with a variable when I think it would make my meaning clearer.  The &ldquo;start sloppy and refine as you go&rdquo; approach happens to work for me, but use whatever tactic you are most comfortable with.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >Make a selection: an iced coffee would good right now
an iced coffee would good right now is not a valid selection!</code></pre>
</figure><p>Right. We can recognize bad input from the user. What do we want to do about it? The best approach may be to continue asking the user for input until we get something acceptable for the next step that she wants to take. We can use a simple <code>while</code> loop to handle this.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Keep asking for input until we have a valid choice for the next step</span>
</span></span><span class="line"><span class="cl"><span class="n">next_step</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">next_step</span> <span class="o">==</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">choice</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="s2">&#34;Make a selection: &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">menu_selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">menu_selection</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_step</span> <span class="o">=</span> <span class="s2">&#34;quit&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">index</span> <span class="o">=</span> <span class="n">menu_selection</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_step</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span> <span class="n">index</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="s2">&#34;Choice&#34;</span><span class="p">,</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;-&#34;</span><span class="p">,</span> <span class="n">next_step</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="s2">&#34;You decided to:&#34;</span><span class="p">,</span> <span class="n">next_step</span></span></span></code></pre>
</figure><p>Now we&rsquo;ve given our user endless opportunities to enter a valid choice.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >Make a selection: Rad
Rad is not a valid selection!
Make a selection: 42
42 is not a valid selection!
Make a selection: 0
You decided to: quit</code></pre>
</figure><p>What is going on here? We have created a variable <code>next_step</code> and assigned it the value of &hellip;. <code>None</code>? We are going to be using <code>next_step</code> in the test condition of our loop, and Python will complain to us if the variable isn&rsquo;t defined before we start testing its value.  Using the <code>None</code> value is more convenient than arbitrarily declaring a particular value to be invalid and using that. <code>None</code> is a special value meaning &ldquo;nothing at all&rdquo; - not even the numeric value of zero. Think of the statement <code>next_step = None</code> as our way to tell Python &ldquo;I plan on using a variable called <code>next_step</code> but I don&rsquo;t have a value for it yet. Just remember that I told you I wanted the variable.&rdquo;</p>
<p>Now for the <code>while</code> loop. We specify a condition here, similar to the way we did with <code>if</code> earlier. The condition is that <code>next_step</code> must not be <code>None</code>. It is an easy enough requirement. The test will fail if we successfully assign a <code>next_step</code> in the loop.</p>
<h4 id="catching-specific-exceptions">Catching specific exceptions</h4>
<p>There is one more minor issue to take care of before we wrap up this stage of writing the game. It is good that we are handling exceptions raised from user input, but we are catching <em>every</em> exception that is raised. This doesn&rsquo;t sound like a bad thing until you remember that our error message is really written for a specific kind of error: the user entered something that can&rsquo;t be used by our menu handler. There are <a href="https://docs.python.org/2/library/exceptions.html" title="Python built-in exceptions summary">many things</a>) that can go wrong in a Python code.  We don&rsquo;t want to be handling exceptions that we aren&rsquo;t ready for. Why not? The error messages won&rsquo;t make sense, for starters. Say you decided to hit <code>Control-C</code> in the program to force quit. Here&rsquo;s what we end up seeing:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >Make a selection: ^CTraceback (most recent call last):
  File &#34;ifiction.py&#34;, line 40, in ?
    print choice, &#34;is not a valid selection!&#34;
NameError: name &#39;choice&#39; is not defined</code></pre>
</figure><blockquote>
<p><strong>WARNING</strong></p>
<p>Please don&rsquo;t explore this with other types of bad input. You could end up with a Python process that won&rsquo;t quit unless you force it to quit from your task / process manager.</p>
</blockquote>
<p>The problem is that the original exception was a <code>KeyboardInterrupt</code>. We don&rsquo;t see that here, because we referred to <code>choice</code> which isn&rsquo;t defined until the user provides some input. This causes a <code>NameError</code> to be raised, which hides the original exception. Python usually tells you only about the most recent exception that happened. If something truly unexpected happens here, we will never know about it. Python normally tells you about the most recent exception only.</p>
<p>We caused a <code>KeyboardInterrupt</code> by hitting <code>Control-C</code>. Python sees our catch-all <code>except</code> block and hands the <code>KeyboardInterrupt</code> exception to that block. Inside the block, we try to include the menu choice in our error message. Unfortunately, <code>choice</code> hasn&rsquo;t been defined yet. We never entered a choice! This is a whole new exception, and we don&rsquo;t have any code to handle it. Python&rsquo;s rule is to always stop and inform you of the first unhandled exception it encounters. and because of the way we defined and wrote our <code>except</code> block, every exception is treated like bad input - from <code>Control-C</code> to a missing hard drive. As far as Python is concerned, we&rsquo;ve handled the <code>KeyboardInterrupt</code>. The <code>NameError</code> caused by <code>choice</code> <em>in</em> the exception handler is the surprise that makes Python panic.</p>
<p>That is enough of a lecture. I am sure you understand by now that we want to be specific about what exceptions we are ready for. It is time to make it happen. The two exceptions that we care about are:</p>
<dl>
<dt>IndexError</dt>
<dd>we tried to use a bad number as a list index</dd>
<dt>ValueError</dt>
<dd>the user input couldn&rsquo;t be converted to a number</dd>
</dl>
<p>Let&rsquo;s add a handler for IndexError.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">while</span> <span class="n">next_step</span> <span class="o">==</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">choice</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="s2">&#34;Make a selection: &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">menu_selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">menu_selection</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_step</span> <span class="o">=</span> <span class="s2">&#34;quit&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">index</span> <span class="o">=</span> <span class="n">menu_selection</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_step</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span> <span class="n">index</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="s2">&#34;Choice&#34;</span><span class="p">,</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;-&#34;</span><span class="p">,</span> <span class="n">next_step</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">IndexError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span></span></span></code></pre>
</figure><p>This change now handles <code>IndexError</code> just fine. Look at what happens when we hit <code>Control-C</code>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >Make a selection: ^CTraceback (most recent call last):
  File &#34;ifiction.py&#34;, line 30, in ?
    choice = raw_input(&#34;Make a selection: &#34;)
KeyboardInterrupt</code></pre>
</figure><p>Of course, we&rsquo;re only looking for <code>IndexError</code>, so look what happens right now if we enter something that isn&rsquo;t a number.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >Make a selection: mmm coffee
Traceback (most recent call last):
  File &#34;ifiction.py&#34;, line 31, in ?
    menu_selection = int(choice)
ValueError: invalid literal for int(): mmm coffee</code></pre>
</figure><p>Now we add the code to handle <code>ValueError</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">IndexError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span></span></span></code></pre>
</figure><p>Yes, Python can handle multiple <code>except</code> blocks just fine. This can be very handy. A calculator program would want to handle &ldquo;no input&rdquo; differently from &ldquo;user tried to divide by zero.&rdquo; What does the program look like with these changes?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >Make a selection: 12
12 is not a valid selection!
Make a selection: Can I have a banana?
Can I have a banana? is not a valid selection!
Make a selection: ^CTraceback (most recent call last):
  File &#34;ifiction.py&#34;, line 30, in ?
    choice = raw_input(&#34;Make a selection: &#34;)
KeyboardInterrupt</code></pre>
</figure><p>Wonderful! Our exception handling code is now behaving politely instead of trying to grab every exception that occurs. Now for the style issue. Both of our <code>except</code> blocks do exactly the same thing. I suppose we could have a slightly different error message for each kind of exception, and you are free to do exactly that. It&rsquo;s not something I&rsquo;m concerned about, though. I am comfortable with using the same error message. I <em>would</em> prefer to cut down on the repetition.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">except</span> <span class="p">(</span><span class="ne">IndexError</span><span class="p">,</span> <span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span></span></span></code></pre>
</figure><p>I would like to look again at this code in the future, but for now it is good enough.</p>
<p>We can handle multiple exceptions in the same <code>except</code> block by placing the exception types in a special list called a <em>tuple</em>.  I am not going to spend any time on tuples, because I worry that it would only confuse things. All you need to remember right now is that a tuple looks like an ordinary list using <code>()</code> instead of <code>[]</code> to wrap it, and that you should use normal lists unless I tell you otherwise.</p>
<p>It looks like we have all the code we need for handling a single round in our game. I had to cover more new concepts than I thought, because things can become complicated when we start doing things with user input. We dabbled into importing modules thanks to the way things were printing out in my shell. We looked at the common control structures for selection and repetition, and we examined <code>try</code> for trying out code that we know can misbehave. Here&rsquo;s the full source of what we&rsquo;ve done so far, along with a couple of additional comments intended to clarify what the program is doing.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># ifiction.py</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  - An interactive fiction game</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">textwrap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;You are standing in a field. To the north of you are some mountains, &#34;</span> \
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;to the east of you is a forest, to the west of you is a cave, and to &#34;</span> \
</span></span><span class="line"><span class="cl">              <span class="s2">&#34;the south of you is a valley.&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">textwrap</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># The list of choices available to the user.</span>
</span></span><span class="line"><span class="cl"><span class="n">paths</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go to the mountains&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go into the forest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go into the cave&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Go to the valley&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Show the menu for this scene.</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">menu_item</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">menu_item</span><span class="p">,</span> <span class="n">path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="s2">&#34;</span><span class="se">\t</span><span class="s2">(0 Quit)&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">next_step</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Get the user selection from the menu.</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">next_step</span> <span class="o">==</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">choice</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="s2">&#34;Make a selection: &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">menu_selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">menu_selection</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_step</span> <span class="o">=</span> <span class="s2">&#34;quit&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">index</span> <span class="o">=</span> <span class="n">menu_selection</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_step</span> <span class="o">=</span> <span class="n">paths</span><span class="p">[</span> <span class="n">index</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="s2">&#34;Choice&#34;</span><span class="p">,</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;-&#34;</span><span class="p">,</span> <span class="n">next_step</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="p">(</span><span class="ne">IndexError</span><span class="p">,</span> <span class="ne">ValueError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span> <span class="n">choice</span><span class="p">,</span> <span class="s2">&#34;is not a valid selection!&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="s2">&#34;You decided to:&#34;</span><span class="p">,</span> <span class="n">next_step</span></span></span></code></pre>
</figure><p>Now go take a break. I really mean it this time. We have covered a lot, and you need time to process. Listen to some music, have a sandwich, and come back when you&rsquo;re ready.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Interactive Fiction with Python</title>
  <link>https://randomgeekery.org/post/2007/04/interactive-fiction-with-python/</link>
  <pubDate>Wed, 18 Apr 2007 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2007/04/interactive-fiction-with-python/</guid>
  <description>&lt;p&gt;The idea for this article came from a coolnamehere reader named Laura. Thanks, Laura! I was looking for good &lt;a href=&#34;https://randomgeekery.org/card/python/&#34;&gt;Python&lt;/a&gt; ideas.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>python</category>  <category>coolnamehere</category> 
  <content:encoded><![CDATA[<p>The idea for this article came from a coolnamehere reader named Laura. Thanks, Laura! I was looking for good <a href="/card/python/">Python</a> ideas.</p>
<h2 id="introduction">Introduction</h2>
<p>I loved <a href="http://www.cyoa.com/" title="Choose Your Own Adventure Home">Choose Your Own Adventure</a> books when as a kid. I consumed them pretty much non-stop until my hobbies expanded into gaming and programming.</p>
<p>One of my readers recently asked how hard it would be to write simple text adventure games. It occurred to me that she was essentially describing a digital version of &ldquo;Choose Your Own Adventure.&rdquo; Then I started figuring out how I would write this kind of game in order to answer her question.</p>
<p>I ended up sending her an email that said &ldquo;You can do it&rdquo; followed by several hundred words that really belonged in a tutorial. It would be better to put the information here than to clutter her inbox too much, I think.</p>
<p>By the way - if what you <em>really</em> want to do is create interactive fiction and you&rsquo;re not interested in creating the game engine itself, I suggest you take a close look at <a href="http://inform-fiction.org/">Inform</a>. It is a remarkable system with its own custom language for creating your tales.</p>
<h2 id="describing-the-game">Describing the Game</h2>
<p>Interactive fiction can be more straightforward than a lot of games, because the game author decides everything that can happen. The game we&rsquo;re making here is even more straightforward than most interactive fiction, because we are only providing the user with narrow lists of choices.</p>
<p>Our version of interactive fiction is going to consist of a bunch of scenes along with paths that can be taken in each scene. A path can lead to one of two things:</p>
<ol>
<li>Another scene, with its own list of paths</li>
<li>The end of the story, whether it is a success or a failure.</li>
</ol>
<p>Let&rsquo;s take a moment to describe game play. A game like this can be described in a single paragraph.</p>
<blockquote>
<p>The user is shown a scene description and a menu of actions that can be done in that scene. When she selects an action, she is presented with the description and menu for that scene. This is repeated for each action she chooses, until she reaches a scene with no actions. The game is over when she reaches a scene with no actions.</p>
</blockquote>
<p>This is a fair description of what we are trying to do, but it is missing at least one element: quitting. Let&rsquo;s make &ldquo;quit&rdquo; an option available on every menu, even if there are no actions available.</p>
<blockquote>
<p>There is a <em>quit</em> command available on every menu, whether there are actions available for that scene or not. Selecting <em>quit</em> will end the program.</p>
</blockquote>
<h2 id="the-story-map">The Story Map</h2>
<p>Okay - you&rsquo;ve got the rough idea of what you want. You probably want to map the story out on paper before turning it into code, because that will make the task of programming it a lot easier. Let&rsquo;s start with a really small story, say five scenes. Each scene has a description and a menu of paths to other scenes.</p>
<h3 id="scene-1-the-field">Scene 1: The Field</h3>
<blockquote>
<p>You are standing in a field. To the north of you are some mountains, to the east of you is a forest, to the west of you is a cave, and to the south of you is a valley.</p>
</blockquote>
<p>Paths</p>
<ul>
<li>Go to the mountains</li>
<li>Go into the forest</li>
<li>Go into the cave</li>
<li>Go to the valley</li>
</ul>
<h3 id="scene-2-the-mountains">Scene 2: The Mountains</h3>
<blockquote>
<p>You are standing at the foot of a mountain range. Huge impassable peaks loom over you. There is a cave to the east, and a field south of you leading into a valley.</p>
</blockquote>
<p>Paths</p>
<ul>
<li>Go into the cave</li>
<li>Go south into the field</li>
</ul>
<h3 id="scene-3-the-forest">Scene 3: The Forest</h3>
<blockquote>
<p>A giant confused bear mistakes you for one of her cubs and takes you away with her. Although you eventually learn to love your new bear family, your adventuring days are over.</p>
</blockquote>
<p>Paths</p>
<ul>
<li>None <em>(This is a story ending)</em></li>
</ul>
<h3 id="scene-4-the-cave">Scene 4: The Cave</h3>
<blockquote>
<p>You are in a long dark cave. You see points of daylight at either end of the cave, one to the northeast and one to the southwest.</p>
</blockquote>
<p>Paths</p>
<ul>
<li>Go northeast <em>(leads to the mountains)</em></li>
<li>Go southwest <em>(leads to the field)</em></li>
</ul>
<h3 id="scene-5-the-valley">Scene 5: The Valley</h3>
<blockquote>
<p>You are standing in the middle of a huge, beautiful valley. Standing right before you is &hellip; whatever it you were looking for. Success!</p>
</blockquote>
<p>Paths</p>
<ul>
<li>None <em>(This is a story ending)</em></li>
</ul>
<p>We have scenes and we have a complete description of how the game works. This is more or less what they call a &ldquo;specification,&rdquo; because it specifies what the program will need to do. Specifications can become incredibly huge as your goals become more complex. Writing them is an art - you have to get all the requirements down on paper, but you also try to keep things short and sweet so that your development team will actually <em>read</em> them. It is even harder than that, because the requirements change as development continues. Yep - writing specs is hard, and I haven&rsquo;t gotten the art down myself.</p>]]></content:encoded>
</item>
</channel>
</rss>
