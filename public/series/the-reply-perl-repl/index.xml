<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>The Reply Perl REPLonRandom Geekery</title>
    <link>https://randomgeekery.org/series/the-reply-perl-repl/</link>
    <description>
      Recent contentinThe Reply Perl REPL on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Tue, 19 Aug 2014 00:00:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/series/the-reply-perl-repl/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: replyrc And Mojo</title>
  <link>https://randomgeekery.org/post/2014/08/replyrc-and-mojo/</link>
  <pubDate>Tue, 19 Aug 2014 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2014/08/replyrc-and-mojo/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;https://randomgeekery.org/post/2014/08/../../../attachments/img/2014/cover-2014-08-19.png&#34; alt=&#34;attachments/img/2014/cover-2014-08-19.png&#34;/&gt;&lt;/p&gt;
&lt;p&gt;It has been a few days since I &lt;a href=&#34;https://randomgeekery.org/post/2014/08/repl-in-perl-with-reply/&#34;&gt;started playing&lt;/a&gt; with &lt;a href=&#34;https://metacpan.org/pod/Reply&#34;&gt;Reply&lt;/a&gt;, and I still enjoy it. Command history features from the &lt;a href=&#34;https://metacpan.org/pod/Reply::Plugin::ReadLine&#34;&gt;ReadLine plugin&lt;/a&gt; became available once I installed &lt;a href=&#34;http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html&#34;&gt;GNU ReadLine&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Term::ReadLine::Gnu&#34;&gt;Term::ReadLine::Gnu&lt;/a&gt;.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>reply</category>  <category>mojolicious</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>Customizing Perl Reply and using -Mojo</h2><p><img src="/post/2014/08/../../../attachments/img/2014/cover-2014-08-19.png" alt="attachments/img/2014/cover-2014-08-19.png"/></p>
<p>It has been a few days since I <a href="/post/2014/08/repl-in-perl-with-reply/">started playing</a> with <a href="https://metacpan.org/pod/Reply">Reply</a>, and I still enjoy it. Command history features from the <a href="https://metacpan.org/pod/Reply::Plugin::ReadLine">ReadLine plugin</a> became available once I installed <a href="http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html">GNU ReadLine</a> and <a href="https://metacpan.org/pod/Term::ReadLine::Gnu">Term::ReadLine::Gnu</a>.</p>
<p>There are still customizations that I would like to make. For example, I write most of my personal code using <a href="/card/perl/">card/Perl</a> 5.20&rsquo;s experimental <a href="http://perldoc.perl.org/perldelta.html#Experimental-Subroutine-signatures">subroutine signature</a> and <a href="http://perldoc.perl.org/perldelta.html#Experimental-Postfix-Dereferencing">postderef</a> features.</p>
<h2 id="use-shiny-perl-520-features-automatically">Use Shiny Perl 5.20 Features Automatically</h2>
<p>A default <code>$HOME/.replyrc</code> is created the first time you run Reply - unless you already have one, of course. It includes a selection of plugins that will be loaded and a collection of <code>script_line</code> entries that are evaluated automatically for any new Reply session. I fiddled with mine so that I had a Perl with syntactical sugar in place.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="na">script_line1</span> <span class="o">=</span> <span class="s">use 5.20.0</span>
</span></span><span class="line"><span class="cl"><span class="na">script_line2</span> <span class="o">=</span> <span class="s">use warnings</span>
</span></span><span class="line"><span class="cl"><span class="na">script_line3</span> <span class="o">=</span> <span class="s">use feature qw(signatures postderef)</span>
</span></span><span class="line"><span class="cl"><span class="na">script_line4</span> <span class="o">=</span> <span class="s">no warnings &#39;experimental&#39;</span></span></span></code></pre>
</figure><p>Each line gets its own numbered <code>script_line</code> entry because of the INI format and the way that input is parsed by Reply.</p>
<p>With this base level of behavior defined, I can run <code>reply</code> and rewrite my <code>greet</code> subroutine.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">0&gt; sub greet ($name) { &#34;Hello $name!&#34; }
</span></span><span class="line"><span class="cl">1&gt; my $me = &#34;Brian&#34;
</span></span><span class="line"><span class="cl">$res[0] = &#39;Brian&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">2&gt; greet $me
</span></span><span class="line"><span class="cl">$res[1] = &#39;Hello Brian!&#39;</span></span></code></pre>
</figure><p>That&rsquo;s better.</p>
<h2 id="enabling-the-editor">Enabling The Editor</h2>
<p>You need <a href="https://metacpan.org/pod/Proc::InvokeEditor">Proc::InvokeEditor</a> in order to activate the <a href="https://metacpan.org/pod/Reply::Plugin::Editor">Editor plugin</a>. I suppose that makes sense. Proc::InvokeEditor is a module that makes it easy to launch your default text editor on behalf of the application, sending the editor buffer back to your application as user input.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> cpanm Proc::InvokeEditor
</span></span></code></pre>
</figure><p>Add the Editor plugin entry to your <code>.replyrc</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="k">[Editor]</span></span></span></code></pre>
</figure><p>And just like that, here is a new <code>#e</code> command.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">0&gt; #e</span></span></code></pre>
</figure><p>It can probably work with <a href="/post/2014/06/start-using-emacsclient/">EmacsClient</a>, but I have been lazy lately and fallen back to Vim as my <code>$EDITOR</code> default.</p>
<h2 id="specifying-a-module-at-start">Specifying a Module at Start</h2>
<p>I have been exploring <a href="/card/mojolicious/">card/Mojolicious</a>, which is a surprisingly full-featured framework considering its small size. The <a href="http://mojolicio.us/perldoc/ojo">ojo</a> library is a Mojolicious command line tool focused on making your one-liners even more useful. Since Reply is sort of an extended one-liner environment - okay, you can call it a &ldquo;shell&rdquo; - ojo and Reply can go together perfectly.</p>
<p>There is no need to add ojo to my <code>.replyrc</code>, because I will not be needing its functionality every single time I load Reply. Instead I will just tell Reply to load the library when starting those particular sessions.</p>
<p>Let&rsquo;s keep with the Questhub.io example from the earlier post. I start <code>reply</code> with the <code>-M</code> flag to load a specific module on startup.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ reply -Mojo
</span></span><span class="line"><span class="cl">0&gt; sort map { $_-&gt;{name} } j( g( &#39;https://questhub.io/api/realm&#39; )-&gt;body )-&gt;@*
</span></span><span class="line"><span class="cl">$res[0] = [
</span></span><span class="line"><span class="cl">  &#39;Big Data&#39;,
</span></span><span class="line"><span class="cl">  &#39;Chaos&#39;,
</span></span><span class="line"><span class="cl">  &#39;Code&#39;,
</span></span><span class="line"><span class="cl">  &#39;DC Metro Region&#39;,
</span></span><span class="line"><span class="cl">  &#39;Fitness&#39;,
</span></span><span class="line"><span class="cl">  &#39;Haskell&#39;,
</span></span><span class="line"><span class="cl">  &#39;Japanese&#39;,
</span></span><span class="line"><span class="cl">  &#39;Lisp&#39;,
</span></span><span class="line"><span class="cl">  &#39;MOOCs&#39;,
</span></span><span class="line"><span class="cl">  &#39;Meta&#39;,
</span></span><span class="line"><span class="cl">  &#39;Node.js&#39;,
</span></span><span class="line"><span class="cl">  &#39;Perl&#39;,
</span></span><span class="line"><span class="cl">  &#39;Portland&#39;,
</span></span><span class="line"><span class="cl">  &#39;Python (Ru)&#39;,
</span></span><span class="line"><span class="cl">  &#39;Read&#39;,
</span></span><span class="line"><span class="cl">  &#39;Testing&#39;,
</span></span><span class="line"><span class="cl">  &#39;Yoga + Meditation&#39;
</span></span><span class="line"><span class="cl">]</span></span></code></pre>
</figure><p>I know. This is confusing if you are unfamiliar with ojo and the experimental Perl 5.20 postderef feature. We can look at it in smaller pieces.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="c1"># Using ojo::g</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="p">(</span> <span class="s">&#39;https://questhub.io/api/realm&#39;</span> <span class="p">)</span><span class="o">-&gt;</span><span class="n">body</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># is roughly the same as this</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ua</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span> <span class="s">&#39;http://questhub.io/api/realm&#39;</span> <span class="p">)</span><span class="o">-&gt;</span><span class="nn">res</span><span class="o">-&gt;</span><span class="n">body</span></span></span></code></pre>
</figure><p><a href="http://mojolicio.us/perldoc/ojo#g"><code>g</code></a> is a shortcut for the <code>get</code> method of <a href="http://mojolicio.us/perldoc/Mojo/UserAgent">Mojo::UserAgent</a>. There are shortcuts for numerous HTTP verbs in ojo.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="c1"># using ojo::j and ojo::g</span>
</span></span><span class="line"><span class="cl"><span class="n">j</span><span class="p">(</span> <span class="n">g</span><span class="p">(</span> <span class="s">&#39;https://questhub.io/api/realm&#39;</span> <span class="p">)</span><span class="o">-&gt;</span><span class="n">body</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># is rougly the same as this</span>
</span></span><span class="line"><span class="cl"><span class="n">decode_json</span><span class="p">(</span> <span class="nv">$ua</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span> <span class="s">&#39;https://questhub.io/api/realm&#39;</span> <span class="p">)</span><span class="o">-&gt;</span><span class="nn">res</span><span class="o">-&gt;</span><span class="n">body</span> <span class="p">)</span></span></span></code></pre>
</figure><p><a href="http://mojolicio.us/perldoc/ojo#j"><code>j</code></a> is a convenience function from <a href="http://mojolicio.us/perldoc/Mojo/JSON#j">Mojo::JSON</a> for encoding and decoding JSON. My experience so far has been that it does what I mean when I use it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="c1"># using j, g, and postderef</span>
</span></span><span class="line"><span class="cl"><span class="n">j</span><span class="p">(</span> <span class="n">g</span><span class="p">(</span> <span class="s">&#39;https://questhub.io/api/realm&#39;</span> <span class="p">)</span><span class="o">-&gt;</span><span class="n">body</span> <span class="p">)</span><span class="o">-&gt;</span><span class="nv">@</span><span class="err">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">#</span> <span class="nv">is</span> <span class="n">rougly</span> <span class="n">the</span> <span class="n">same</span> <span class="n">as</span> <span class="n">this</span>
</span></span><span class="line"><span class="cl"><span class="nv">@</span><span class="p">{</span> <span class="n">decode_json</span><span class="p">(</span> <span class="nv">$ua</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span> <span class="s">&#39;https://questhub.io/api/realm&#39;</span> <span class="p">)</span><span class="o">-&gt;</span><span class="nn">res</span><span class="o">-&gt;</span><span class="n">body</span><span class="p">)</span> <span class="p">}</span></span></span></code></pre>
</figure><p><code>$ref-&gt;@*</code> is an experimental new syntax for accessing the contents of an array reference. It is equivalent to <code>@{ $ref }</code> or <code>@$ref</code>. The postderef syntax is a little easier for me to read, but your experience may be different.</p>
<h2 id="all-done">All Done</h2>
<p>That is enough for now. With the ReadLine plugin and Editor plugin enabled, a nice 2014-ish Perl setup in my <code>.replyrc</code>, and ojo available when I want it, Reply is downright useful for me.</p>]]></content:encoded>
</item>
<item>
  <title>Post: REPL In Perl With Reply</title>
  <link>https://randomgeekery.org/post/2014/08/repl-in-perl-with-reply/</link>
  <pubDate>Thu, 14 Aug 2014 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2014/08/repl-in-perl-with-reply/</guid>
  <description>Time for a quick post about Reply, a new Perl toy from Jesse Luers. There will not be much for me to say, because I have only been playing with it for about twenty minutes.
NOTE
This post used Questhub.io for a subject. Unfortunately, that site is no longer with us.
Reply is a REPL for Perl. It is an interactive shell that simplifies quick experimentation with language features. It is extensible via a plugin system that I may look at later if I have more time.</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>reply</category>  <category>mojolicious</category>  <category>tools</category> 
  <content:encoded><![CDATA[<p><img src="/post/2014/08/../../../attachments/img/2014/cover-2014-08-14.png" alt="attachments/img/2014/cover-2014-08-14.png"/></p>
<p>Time for a quick post about <a href="https://metacpan.org/release/Reply">Reply</a>, a new <a href="/card/perl/">Perl</a> toy from <a href="http://tozt.net/">Jesse Luers</a>. There will not be much for me to say, because I have only been playing with it for about twenty minutes.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>This post used Questhub.io for a subject. Unfortunately, that site is no longer with us.</p>
</blockquote>
<p>Reply is a <a href="http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a> for Perl. It is an interactive shell that simplifies quick experimentation with language features. It is extensible via a <a href="https://metacpan.org/source/DOY/Reply-0.35/lib/Reply/Plugin.pm">plugin</a> system that I may look at later if I have more time.</p>
<h2 id="installation">Installation</h2>
<p>I use <a href="http://perlbrew.pl">perlbrew</a> and <a href="https://github.com/miyagawa/cpanminus">cpanm</a>, so installation was easy.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ cpanm Reply</code></pre>
</figure><p>Oh. It is worth pointing out that if you do not have <a href="http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html">GNU Readline</a> or a similar library installed, you will not get command-line editing or history in Reply.</p>
<h2 id="hello-reply">Hello Reply</h2>
<p>The <code>reply</code> command starts a new session. Once the session is going, it’s pretty much just Perl.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ reply
0&gt; &#34;Hello World&#34;
$res[0] = &#39;Hello World&#39;

1&gt; my $name = &#34;Brian&#34;
$res[1] = &#39;Brian&#39;

2&gt; &#34;Hello $name&#34;
$res[2] = &#39;Hello Brian&#39;</code></pre>
</figure><p>Getting user input via <code>STDIN</code> works pretty much how you would expect.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >3&gt; chomp( $name = &lt;STDIN&gt; )
Brian
$res[3] = 1

4&gt; $name
$res[4] = &#39;Brian&#39;</code></pre>
</figure><p>Defining subroutines is no big deal.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >5&gt; sub greeting { &#34;Hello $_[0]&#34; }
6&gt; greeting $name
$res[5] = &#39;Hello Brian&#39;</code></pre>
</figure><p>And <code>exit</code> will quit Reply. It all seems straightforward.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >7&gt; exit</code></pre>
</figure><h2 id="a-marginally-more-complex-example">A Marginally More Complex Example</h2>
<p>I have been working on a little experiment: fetching Questhub.io JSON with <a href="http://mojolicio.us/perldoc/Mojo/UserAgent">Mojo::UserAgent</a> and <a href="http://mojolicio.us/perldoc/Mojo/JSON">Mojo::JSON</a>. I decided to see if I could try some of that experiment in Reply.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >0&gt; use Mojo::UserAgent
1&gt; use Mojo::JSON &#39;decode_json&#39;
2&gt; my $ua = Mojo::UserAgent-&gt;new
$res[0] = bless( {}, &#39;Mojo::UserAgent&#39; )

3&gt; sort map { $_-&gt;{name} } @{ decode_json( $ua-&gt;get( &#39;https://questhub.io/api/realm&#39; )-&gt;res-&gt;body ) }
$res[1] = [
  &#39;Big Data&#39;,
  &#39;Chaos&#39;,
  &#39;Code&#39;,
  &#39;DC Metro Region&#39;,
  &#39;Fitness&#39;,
  &#39;Haskell&#39;,
  &#39;Japanese&#39;,
  &#39;Lisp&#39;,
  &#39;MOOCs&#39;,
  &#39;Meta&#39;,
  &#39;Node.js&#39;,
  &#39;Perl&#39;,
  &#39;Portland&#39;,
  &#39;Python (Ru)&#39;,
  &#39;Read&#39;,
  &#39;Testing&#39;,
  &#39;Yoga &#43; Meditation&#39;
]</code></pre>
</figure><p>Yes, I can.</p>
<h2 id="what-do-i-think">What Do I Think?</h2>
<p>I like Reply overall. I am not used to thinking in REPL terms when it comes to Perl, and need to spend more than twenty minutes with it. I like Reply enough that I do expect to spend more time with it.</p>
<p>I noticed that my coding style was more terse within the confines of Reply. Maybe I should install GNU Readline support on my machine or enable the <a href="https://metacpan.org/pod/Reply::Plugin::Editor">Editor plugin</a>.</p>
]]></content:encoded>
</item>
</channel>
</rss>
