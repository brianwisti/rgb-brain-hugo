<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>orgconfigonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/orgconfig/</link>
    <description>
      Recent contentinorgconfig on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sat, 27 Jun 2020 00:00:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/orgconfig/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Ox Hugo for the Orgconfig</title>
  <link>https://randomgeekery.org/post/2020/06/ox-hugo-for-the-orgconfig/</link>
  <pubDate>Sat, 27 Jun 2020 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/06/ox-hugo-for-the-orgconfig/</guid>
  <description>What? I’m combining all my card/Org config files into one, and then using ox-hugo to generate Markdown files for my card/Hugo site.
Why? Hugo renders Org files just fine, but I wanted my config to be a bit more tightly integrated. ox-hugo works well as both plain old Org and as an intermediary that exports Hugo content. A single Org file can become as many Hugo pages as I want.</description>
   <category>post</category> 
   <category>post</category> 
   <category>orgconfig</category>  <category>orgmode</category>  <category>site</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>Putting a couple how-to details down for easy searching later</h2><p><img src="/post/2020/06/../../../attachments/img/2020/cover-2020-06-27.png" alt="attachments/img/2020/cover-2020-06-27.png"/></p>
<h2 id="what">What?</h2>
<p>I’m combining all my <a href="/card/org/">card/Org</a> config files into one, and then using <a href="https://ox-hugo.scripter.co"><code>ox-hugo</code></a> to generate Markdown files for my <a href="/card/hugo/">card/Hugo</a> site.</p>
<h2 id="why">Why?</h2>
<p>Hugo renders Org files just fine, but I wanted my config to be a bit more tightly integrated.  <code>ox-hugo</code> works well as both plain old Org and as an intermediary that exports Hugo content.  A single Org file can become as many Hugo pages as I want.</p>
<h2 id="getting-it-to-work">Getting it to work</h2>
<p>This week my favorite Emacs flavor is <a href="https://github.com/hlissner/doom-emacs">Doom Emacs</a>.  Their <a href="https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/org">org module</a> supports <code>ox-hugo</code> as an option, so enabling that option in my init should do the trick — after a <code>doom sync</code> of course.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">doom!</span>
</span></span><span class="line"><span class="cl"> <span class="err">⋮</span>
</span></span><span class="line"><span class="cl"> <span class="nb">:lang</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nv">org</span> <span class="nv">+hugo</span><span class="p">))</span>
</span></span></code></pre></div><p>Off in the depths of my <code>~/org/</code> folder, I create a new <code>config.org</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="cs">#+title</span><span class="c">: My Orgconfig</span>
</span></span><span class="line"><span class="cl"><span class="cs">#+hugo_base_dir</span><span class="c">: ~/Sites/random-geekery-blog/</span>
</span></span><span class="line"><span class="cl"><span class="cs">#+hugo_section</span><span class="c">: config</span>
</span></span></code></pre></div><p>Everything here will end up going in the <code>config</code> section of my site, under <code>~/Sites/random-geekery-blog/content/config</code>.</p>
<blockquote>
<p>[!NOTE]
A while back I got stuck with <code>ox-hugo</code> for my site because of how big each section is.  Using an Org file per section might work really well!  It works great for this case, that’s for sure.</p>
</blockquote>
<p>Each top-level section will be a page in <code>/config/</code>. I show <em>which</em> page in the subtree’s <code>:properties:</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="k">+ </span>Emacs config
</span></span><span class="line"><span class="cl"><span class="c">:properties:
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="cs">:export_description: Be kinda weird if I didn&#39;t manage that one in Org, yes?
</span></span></span><span class="line"><span class="cl"><span class="cs">:export_file_name: emacs
</span></span></span><span class="line"><span class="cl"><span class="cs">:export_hugo_weight: 5
</span></span></span><span class="line"><span class="cl"><span class="cs"></span><span class="c">:end:</span>
</span></span></code></pre></div><p><code>ox-hugo</code> automatically <a href="https://ox-hugo.scripter.co/doc/org-meta-data-to-hugo-front-matter/%5D">converts</a> the <code>export</code> properties to Hugo front matter.  <code>:export_file_name:</code> of <code>emacs</code> maps out to a generated file <code>emacs/index.md</code> under <code>content/config/</code>.</p>
<blockquote>
<p>[!WARNING]
If you’re playing along, remember to tag sensitive config sections as <code>:noexport:</code>!</p>
</blockquote>
<p>Since I’m showing off <a href="https://orgmode.org/worg/org-contrib/babel/intro.html">Babel</a>’s ability to tangle, I want to show the tangle references.  <code>:noweb no-export</code> tells Babel to tangle when evaluating the block, but <em>not</em> when exporting.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="cs">#+name</span><span class="c">: zsh/base-variables</span>
</span></span><span class="line"><span class="cl"><span class="c">#+begin_src </span><span class="cs">text</span><span class="c"> :noweb no-export
</span></span></span><span class="line"><span class="cl"><span class="c"></span>&lt;&lt;zsh/set-base-path&gt;&gt;
</span></span><span class="line"><span class="cl">&lt;&lt;zsh/define-editor&gt;&gt;
</span></span><span class="line"><span class="cl">&lt;&lt;zsh/clicolor&gt;&gt;
</span></span><span class="line"><span class="cl">&lt;&lt;zsh/add-home-bin&gt;&gt;
</span></span><span class="line"><span class="cl"><span class="c">#+end_src</span>
</span></span></code></pre></div><p>And — yeah.  I still haven’t figured out a nice way to highlight those tangle bits, so for the moment I default to calling my mostly-tangled blocks &ldquo;text&rdquo;.</p>
<p>I also create a subtree for the section <code>_index.md</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="k">+ </span>My personal orgconfig
</span></span><span class="line"><span class="cl"><span class="c">:properties:
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="cs">:export_file_name: _index
</span></span></span><span class="line"><span class="cl"><span class="cs"></span><span class="c">:end:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#+begin_note
</span></span><span class="line"><span class="cl">This is my live config, written as an [[<span class="na">https://orgmode.org/</span>][<span class="nt">Org</span>]] file and integrated with my site with [[<span class="na">https://ox-hugo.scripter.co/</span>][<span class="nt">=ox-hugo=</span>]].
</span></span><span class="line"><span class="cl">⋮
</span></span></code></pre></div><p>Now my config section summary is part of the config org file.  I find this aesthetically pleasing.</p>
<h2 id="the-rest-is-implementation-details">The rest is implementation details</h2>
<p>This whole process is fiddly.  Org mode.  Literate config.  Hugo.  <code>ox-hugo</code>. That makes the whole thing fiddly^4 or something.  But these quick notes covered things that got in my way while gluing the whole thing together.  If you want to try it out, at least <em>some</em> of the fiddliness should be clearer.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: so chemacs is kinda cool</title>
  <link>https://randomgeekery.org/post/2020/06/so-chemacs-is-kinda-cool/</link>
  <pubDate>Thu, 25 Jun 2020 22:33:35 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/06/so-chemacs-is-kinda-cool/</guid>
  <description>Chemacs gave me a way to try out Doom Emacs without messing up my current Emacs settings.
Neat.
Time to try out a whole bunch of others too.</description>
   <category>post</category> 
   <category>note</category> 
   <category>emacs</category>  <category>orgconfig</category> 
  <content:encoded><![CDATA[<p><img src="/post/2020/06/../../../attachments/img/2020/cover-2020-06-25.png" alt="attachments/img/2020/cover-2020-06-25.png"/></p>
<p><a href="https://github.com/plexus/chemacs">Chemacs</a> gave me a way to try out <a href="https://github.com/hlissner/doom-emacs">Doom Emacs</a> without messing up my current <a href="/card/emacs/">Emacs</a> settings.</p>
<p>Neat.</p>
<p>Time to try out a whole bunch of others too.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Wanted a uses page, made a config section</title>
  <link>https://randomgeekery.org/post/2020/06/wanted-a-uses-page-made-a-config-section/</link>
  <pubDate>Wed, 03 Jun 2020 12:32:47 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/06/wanted-a-uses-page-made-a-config-section/</guid>
  <description>All jealous of john sj anderson’s uses page. Started making my own. Decided it would be easier just to share my config. Might as well, since card/Hugo directly supports card/Org content via go-org.
I’ll add /uses later. Anyways, time for music.</description>
   <category>post</category> 
   <category>note</category> 
   <category>orgconfig</category>  <category>site</category>  <category>overshare</category>  <category>music</category> 
  <content:encoded><![CDATA[<p>All jealous of <a href="https://genehack.org">john sj anderson</a>&rsquo;s <a href="https://genehack.org/uses/">uses</a> page. Started making my own. Decided it would be easier just to share my <a href="/config/">config</a>. Might as well, since <a href="/card/hugo/">card/Hugo</a> directly supports <a href="/card/org/">card/Org</a> content via <a href="https://github.com/niklasfasching/go-org">go-org</a>.</p>
<p>I&rsquo;ll add <code>/uses</code> later. Anyways, time for music.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/peqpQ_XpNrk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
]]></content:encoded>
</item>
<item>
  <title>Post: Made an Emacs Binding for Config Quick Edit</title>
  <link>https://randomgeekery.org/post/2020/05/made-an-emacs-binding-for-config-quick-edit/</link>
  <pubDate>Thu, 07 May 2020 14:30:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/05/made-an-emacs-binding-for-config-quick-edit/</guid>
  <description>I hit F5, Emacs opens my config.org for editing. It might not be much but it feels good to scratch such a specific itch. Feeling pretty good about myself.
(global-set-key (kbd &#34;&lt;f5&gt;&#34;) (lambda () (interactive) (find-file &#34;~/.dotfiles/config.org&#34;))) </description>
   <category>post</category> 
   <category>note</category> 
   <category>emacs</category>  <category>orgconfig</category> 
  <content:encoded><![CDATA[<p>I hit <code>F5</code>, <a href="/card/emacs/">Emacs</a> opens my <code>config.org</code> for editing. It might not be much but it feels good to scratch such a specific itch. Feeling pretty good about myself.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&#34;&lt;f5&gt;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="nb">lambda</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl">                  <span class="p">(</span><span class="nb">interactive</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                  <span class="p">(</span><span class="nv">find-file</span> <span class="s">&#34;~/.dotfiles/config.org&#34;</span><span class="p">)))</span>
</span></span></code></pre></div>]]></content:encoded>
</item>
<item>
  <title>Post: From Dotfiles to Org File</title>
  <link>https://randomgeekery.org/post/2020/04/from-dotfiles-to-org-file/</link>
  <pubDate>Tue, 28 Apr 2020 01:36:54 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/04/from-dotfiles-to-org-file/</guid>
  <description>I read Literate Configuration by Diego Zamboni. Now I want to replace my Dotbot-managed dotfiles with an card/Org file.
Literate Configuration? Literate configuration comes out of literate programming, which mixes code and text about the code in a single document. Okay yes. Like code comments. Where literate programming gets more interesting than comments is how it “tangles” snippets together, creating files out of these code snippets you’ve described. It’ll be a little easier to understand when you try it.</description>
   <category>post</category> 
   <category>post</category> 
   <category>emacs</category>  <category>shell</category>  <category>orgmode</category>  <category>orgconfig</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>at 1:30am they're all good ideas</h2><p><img src="/post/2020/04/../../../attachments/img/2020/cover-2020-04-28.png" alt="attachments/img/2020/cover-2020-04-28.png"/></p>
<p>I read <a href="https://leanpub.com/lit-config/">Literate Configuration</a> by <a href="https://zzamboni.org/">Diego Zamboni</a>. Now I want to replace my <a href="https://github.com/anishathalye/dotbot">Dotbot</a>-managed dotfiles with an <a href="/card/org/">card/Org</a> file.</p>
<h2 id="literate-configuration">Literate Configuration?</h2>
<p>Literate configuration comes out of <a href="http://literateprogramming.com/index.html">literate programming</a>, which mixes code and text about the code in a single document. Okay yes. Like code comments. Where literate programming gets more interesting than comments is how it &ldquo;tangles&rdquo; snippets together, creating files out of these code snippets you’ve described. It’ll be a little easier to understand when you try it. But you can describe the reasoning behind your code or look at your code as high level components.</p>
<p>Folks still argue whether literate programming is a useful approach to software development. But it could be a good way to handle config files. Personal configuration tends to collect disparate elements with little organization. Weaving them together in a single document could help create a coherent story of how you use your systems.</p>
<p>Diego Zamboni’s booklet includes 17 pages of instruction and 80 pages of sample config for Emacs, the <a href="https://www.hammerspoon.org/">Hammerspoon</a> macOS automation tool, and the <a href="https://elv.sh/">Elvish</a> shell, all of which you can also find <a href="https://zzamboni.org/post/2017-12-17-my-emacs-configuration-with-commentary/">on his blog</a>. I have no regrets about spending $5 on <em>Literate Configuration</em>. The
formatting is better, for one thing.</p>
<h2 id="dotfiles">Dotfiles?</h2>
<p>An informal reference to one person’s collection of configurations and settings. They’re named for the common Unix convention of using a leading dot in config filenames: <code>.zshrc</code>, for example. Many folks, including me, like to keep those dotfiles in version control. Makes it easier to track changes or roll back when something doesn’t work like you thought it would. Also simplifies setting up new machines.</p>
<p>You can find a nice introductory site for the version-controlled dotfiles approach on <a href="https://dotfiles.github.io/">Github</a>.</p>
<h2 id="in-an-org-file">In an Org file?</h2>
<p>Well of course. What did you think I was going to use — <a href="https://github.com/jostylr/literate-programming">Markdown</a>? <a href="https://slott56.github.io/PyLit-3/_build/html/index.html">reStructuredText</a>? <a href="https://aimlesslygoingforward.com/blog/2019/10/02/roguelike-tutorial-up-to-date-and-literate/">Asciidoctor</a>?</p>
<p>Actually those are pretty cool. I could maybe work up an extension for more pleasing notation, and — no! I already started this with Org mode. I can finish this with Org mode.</p>
<p>Maybe later, Asciidoctor.</p>
<p>Yeah, Org. <a href="https://orgmode.org/worg/org-contrib/babel/">Babel</a> lets Org execute and/or <a href="https://orgmode.org/manual/Extracting-Source-Code.html#Extracting-Source-Code">extract</a> source code. It supports a long list of <a href="https://orgmode.org/worg/org-contrib/babel/languages.html">languages</a>. I don’t need to find or write extensions for basic functionality.</p>
<h2 id="prepare-org-mode">Prepare Org mode</h2>
<p>Babel used to be an extension to Org, but it’s been a core part of the framework for a bit now. Thing is, Babel is powerful and a little dangerous. You need to give it permission.</p>
<p><strong><code>~/.emacs</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">org</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:ensure</span> <span class="nv">org-plus-contrib</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:defer</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:custom</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">org-confirm-babel-evaluate</span> <span class="no">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">; ...</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:config</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">org-babel-do-load-languages</span>
</span></span><span class="line"><span class="cl">   <span class="ss">&#39;org-babel-load-languages</span>
</span></span><span class="line"><span class="cl">   <span class="o">&#39;</span><span class="p">((</span><span class="nv">shell</span> <span class="o">.</span> <span class="no">t</span><span class="p">))))</span> 
</span></span></code></pre></div><ul>
<li><code>shell</code> is a general-purpose mode that covers <code>sh</code>, <code>bash</code>, <code>zsh</code>, and so on.</li>
</ul>
<p>Babel wants to know what languages it can load. I’m only tangling shell files, so that’s all I put in <code>org-babel-load-languages</code>.</p>
<p>By default, Babel requests confirmation from you for every code block it handles. That’s smart, but also annoying. Disabling <code>org-confirm-babel-evaluate</code> means I’m okay with Babel executing or extracting any code it finds. It also means I need to ensure that my code blocks don’t request any dangerous actions. Leave this setting enabled if smart matters more to you than annoying.</p>
<blockquote>
<p>[!NOTE] Correction
The Babel settings I added are for code <em>extraction</em>, not code evaluation. Babel extracts anything you want. <a href="https://orgmode.org/manual/Evaluating-Code-Blocks.html#Evaluating-Code-Blocks">Code evaluation</a> is a different feature, and not needed for this post. Skip my <code>:custom</code> and <code>:config</code> items if you’re just tangling.</p>
</blockquote>
<p>Zamboni’s booklet provides directions for automatic export on save, but I’m still new to this. I’ll stick with manually triggering extraction for now.</p>
<h2 id="my-literate-config">My literate config</h2>
<p>Let’s keep my starting point really really simple. Just a little bit out of my <a href="https://www.zsh.org/">Zsh</a> config.</p>
<p><strong><code>config.org</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="cs">#+title</span><span class="c">: My config</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gh">*</span><span class="gs"> Notes</span>
</span></span><span class="line"><span class="cl"><span class="nb">{{{kbd(C-c C-v t)}}}</span> to tangle until I&#39;m ready to add hooks
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gh">*</span><span class="gs"> zsh</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">**</span> zshenv
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Loaded for all sessions.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">#+begin_src </span><span class="cs">shell</span><span class="c"> :tangle ~/.zshenv
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nv">EDITOR</span><span class="o">=</span><span class="s2">&#34;vim&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c">#+end_src</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">**</span> zshrc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Loaded for interactive sessions
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">#+begin_src </span><span class="cs">shell</span><span class="c"> :tangle ~/.zshrc
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">source</span> ~/.config/broot/launcher/bash/br
</span></span><span class="line"><span class="cl"><span class="c">#+end_src</span>
</span></span></code></pre></div><p>Then I hit <code>C-c C-v t</code> to run <code>org-babel-tangle</code>, which tells me:</p>
<pre tabindex="0"><code>Tangled 2 code blocks from config.org
</code></pre><p>So I look in my files.</p>
<p><strong><code>~/.zshenv</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nv">EDITOR</span><span class="o">=</span><span class="s2">&#34;vim&#34;</span>
</span></span></code></pre></div><p><strong><code>~/.zshrc</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nb">source</span> ~/.config/broot/launcher/bash/br
</span></span></code></pre></div><p>Yay it worked!</p>
<p>There’s not much being &ldquo;tangled&rdquo; though, is there?</p>
<p>I’ve been playing with <a href="https://antigen.sharats.me/">Antigen</a>, but I may go back to <a href="https://ohmyz.sh/">Oh My Zsh</a>. Let’s put the Antigen stuff in its own block.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="cs">#+name</span><span class="c">: antigen</span>
</span></span><span class="line"><span class="cl"><span class="c">#+begin_src </span><span class="cs">shell</span><span class="c">
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">source</span> ~/.dotfiles/zsh/antigen.zsh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen use oh-my-zsh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen bundle git
</span></span><span class="line"><span class="cl">antigen bundle nvm
</span></span><span class="line"><span class="cl">antigen bundle pyenv
</span></span><span class="line"><span class="cl">antigen bundle rbenv
</span></span><span class="line"><span class="cl">antigen bundle taskwarrior
</span></span><span class="line"><span class="cl">antigen bundle tmux
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen bundle zsh-users/zsh-syntax-highlighting
</span></span><span class="line"><span class="cl">antigen theme gozilla
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen apply
</span></span><span class="line"><span class="cl"><span class="c">#+end_src</span>
</span></span></code></pre></div><p>Now we update the <code>~/.zshrc</code> block to tangle with <code>:noweb yes</code> and include that new block.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="c">#+begin_src </span><span class="cs">shell</span><span class="c"> :tangle ~/.zshrc :noweb yes
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="s">&lt;&lt;antigen&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">source /home/ran</span>dom/.config/broot/launcher/bash/br
</span></span><span class="line"><span class="cl"><span class="c">#+end_src</span>
</span></span></code></pre></div><p>C-c C-v t again, and there it is!</p>
<p><strong><code>~/.zshrc</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nb">source</span> ~/.dotfiles/zsh/antigen.zsh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen use oh-my-zsh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen bundle brew
</span></span><span class="line"><span class="cl">antigen bundle git
</span></span><span class="line"><span class="cl">antigen bundle nvm
</span></span><span class="line"><span class="cl">antigen bundle pyenv
</span></span><span class="line"><span class="cl">antigen bundle rbenv
</span></span><span class="line"><span class="cl">antigen bundle taskwarrior
</span></span><span class="line"><span class="cl">antigen bundle tmux
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen bundle zsh-users/zsh-syntax-highlighting
</span></span><span class="line"><span class="cl">antigen theme gozilla
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen apply
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">source</span> /home/random/.config/broot/launcher/bash/br
</span></span></code></pre></div><p>Okay now to finish getting the rest of my zsh config. Oh, and put <code>config.org</code> in version control.</p>
<p><strong>Emacs code extraction key bindings</strong></p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Function</th>
<th>Action</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>C-c C-v t</code></td>
<td><code>org-babel-tangle</code></td>
<td>Extract and write code blocks in the current Org file</td>
</tr>
</tbody>
</table>
]]></content:encoded>
</item>
<item>
  <title>Post: Trying Beorg</title>
  <link>https://randomgeekery.org/post/2018/10/trying-beorg/</link>
  <pubDate>Sun, 14 Oct 2018 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2018/10/trying-beorg/</guid>
  <description>This is not a review. This is me, excitedly sharing screenshots of the shiny thing I am playing with.
[!NOTE] My beorg screenshots are in the Dark theme, which is currently the only paid add-on for the app. All functionality I look at today is part of the free core. I’m perfectly happy putting out 99 cents if it helps development a little bit.
You can also contribute directly to feature development by making a contribution in Settings.</description>
   <category>post</category> 
   <category>post</category> 
   <category>orgconfig</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>The beorg iOS app has me playing with Org mode again</h2><p>This is not a review. This is me, excitedly sharing screenshots of the shiny thing I am playing with.</p>
<p><img src="/post/2018/10/../../../attachments/img/2018/cover-2018-10-14.png" alt="attachments/img/2018/cover-2018-10-14.png"/></p>
<blockquote>
<p>[!NOTE]
My beorg screenshots are in the Dark theme, which is currently the only paid add-on for the app. All functionality I look at today is part of the free core. I’m perfectly happy putting out 99 cents if it helps development a little bit.</p>
<p>You can also contribute directly to feature development by making a contribution in Settings.</p>
</blockquote>
<p>Does <a href="https://beorgapp.com/">beorg</a> support your favorite <a href="/card/org/">card/Org</a> feature? I have no idea. But I can add,
schedule, edit, and save tasks.</p>
<p>You <em>could</em> manage everything on your phone, but synchronization is an important feature for me. Synchronizing org files via <a href="https://www.dropbox.com/">Dropbox</a> – or <a href="https://en.wikipedia.org/wiki/WebDAV">WebDAV</a> if that’s more your thing – works in both directions. I prefer <a href="https://syncthing.net/">Syncthing</a> but I’ll take what I can get. Who knows? Maybe I’ll figure out WebDAV later.</p>
<p><img src="/post/2018/10/attachments/img/2018/emacs-synced.png" alt="Emacs showing task added in beorg"/></p>
<h2 id="todo-view">TODO view</h2>
<p>The TODO view lists tasks, including clear indications of scheduled completion – assuming you understand the notation.</p>
<p><img src="/post/2018/10/attachments/img/2018/agenda-view.png" alt="TODO view"/></p>
<p>The Rainer König Org <a href="https://www.youtube.com/watch?v=sQS06Qjnkcc&amp;list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE">tutorials</a> on YouTube are great stuff. I’m going through them again myself for a refresher, and I highly recommend them if you want to learn Emacs Org mode.</p>
<p>The TODO view supports multiple filters.</p>
<p><img src="/post/2018/10/attachments/img/2018/agenda-filtered.png" alt="Filtered TODO view"/></p>
<h2 id="notifications">Notifications</h2>
<p>The app icon badge shows the count of overdue tasks.</p>
<p><img src="/post/2018/10/attachments/img/2018/notifications.jpg" alt="Overdue count shown on app icon"/></p>
<p>Alarms pop up for deadlines.</p>
<p><img src="/post/2018/10/attachments/img/2018/alarm.png" alt="Task notification"/></p>
<p>I better wrap it up.</p>
<h2 id="also">Also</h2>
<p>beorg includes other features I don’t feel like looking at today.</p>
<p>The Agenda view integrates with your calendar events, which is both very handy and not something I feel comfortable sharing with the entire world :smile:</p>
<p>The Files view gives you something closer to a raw edit of your Org files, but honestly that’s pretty darned clunky on a phone for me. For the moment I’ll stick with high level task management on the phone, and Emacs org mode if I need anything more involved.</p>
<h2 id="anyways">Anyways</h2>
<p>Try out <a href="https://beorgapp.com/">beorg</a> if you’re on iOS. Read the <a href="https://beorgapp.com/manual/">manual</a> for a more in-depth look at features and usage. I’m going to go reschedule that art project. I have other things that are higher priority.</p>
]]></content:encoded>
</item>
</channel>
</rss>
