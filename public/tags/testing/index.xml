<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>testingonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/testing/</link>
    <description>
      Recent contentintesting on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 28 Feb 2021 00:00:00 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/tags/testing/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Playwright for Python</title>
  <link>https://randomgeekery.org/post/2021/02/playwright-dev/</link>
  <pubDate>Sun, 28 Feb 2021 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/02/playwright-dev/</guid>
  <description>There’s a card/Python interface to the very handy Playwright browser automation library. The 1.9.x releases feel more Pythonic. Naming conventions, stuff like that. Feels much less like just a wrapper.
Don’t forget to install browser drivers whenever you install or upgrade Playwright!
$ python -m playwright install With pytest The pytest-playwright plugin provides fixtures, marks, and extra pytest args for browser testing. So far the only fixture I’ve used is page, the stand-in for a default browser session.</description>
   <category>post</category> 
   <category>bookmark</category> 
   <category>python</category>  <category>testing</category>  <category>browser-testing</category> 
  <content:encoded><![CDATA[<h2>Cross-browser end-to-end testing for modern web apps</h2><p>There&rsquo;s a <a href="/card/python/">card/Python</a> interface to the very handy <a href="https://playwright.dev">Playwright</a> browser automation library. The 1.9.x releases feel more Pythonic. Naming conventions, stuff like that. Feels much less like just a wrapper.</p>
<p>Don&rsquo;t forget to install browser drivers whenever you install or upgrade Playwright!</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python -m playwright install</code></pre>
</figure><h2 id="with-pytest">With pytest</h2>
<p>The <a href="https://github.com/microsoft/playwright-pytest">pytest-playwright</a> plugin provides fixtures, marks, and extra <code>pytest</code> args for browser testing. So far the only fixture I&rsquo;ve used is <code>page</code>, the stand-in for a default browser session. Pairs nicely with <a href="https://pytest-django.readthedocs.io/">pytest-django</a>&rsquo;s <code>live_server</code> fixture.</p>
<p>Headless by default, but use <code>pytest --headful</code> if you want to watch the browser do its thing.</p>
<blockquote>
<p><strong>WARNING</strong></p>
<p>Since pytest-playwright is still in <em>early</em> days — 0.0.12 as of this bookmark date — dependency managers might not acknowledge new releases. Watch the repo and manually update your dependencies when you see a new release.</p>
</blockquote>
]]></content:encoded>
</item>
</channel>
</rss>
