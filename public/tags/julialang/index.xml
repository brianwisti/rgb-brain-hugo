<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>julialangonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/julialang/</link>
    <description>
      Recent contentinjulialang on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Fri, 25 Dec 2020 00:00:00 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/tags/julialang/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: My first Julia script</title>
  <link>https://randomgeekery.org/post/2020/12/my-first-julia-script/</link>
  <pubDate>Fri, 25 Dec 2020 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/my-first-julia-script/</guid>
  <description>Drawn with Luxor.jl
Merry Christmas! I wrote a little Julia code.
The inspiration Been getting frustrated with card/Python’s type hinting system. I usually start with loose and informal code, but eventually I specify types. And when I do, I want the language to check my work. I dislike relying on an external tool like MyPy that runs separately.
I’ve also been looking at Pandas a lot recently for work stuff.</description>
   <category>post</category> 
   <category>post</category> 
   <category>julialang</category>  <category>literateprogramming</category>  <category>literateblogging</category>  <category>site</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Weaving code in Hugo posts with Julia</h2><p><figure>
    <img src="/../../../attachments/img/2020/cover-2020-12-25.png" alt="attachments/img/2020/cover-2020-12-25.png"/></figure>
Drawn with <a href="http://juliagraphics.github.io/Luxor.jl/stable/">Luxor.jl</a></p>
<p>Merry Christmas! I wrote a little <a href="https://julialang.org">Julia</a> code.</p>
<h2 id="the-inspiration">The inspiration</h2>
<p>Been getting frustrated with <a href="/card/python/">card/Python</a>&rsquo;s type hinting system. I usually start with loose and informal code, but eventually I specify types. And when I do, I want the language to check my work. I dislike relying on an external tool like <a href="https://mypy.readthedocs.io/en/stable/">MyPy</a> that runs separately.</p>
<p>I&rsquo;ve also been looking at <a href="https://pandas.pydata.org">Pandas</a> a lot recently for work stuff. Okay, Pandas looks interesting to my non-data science brain. I mainly use it to filter Excel files for database updates. But I can&rsquo;t help noticing how often the Julia programming language comes up in those posts about Data Science in Python.</p>
<p>So I check out Julia. It intrigues me. The type system and concurrency tools look nice, of course. But what&rsquo;s this? Math code that looks more like math?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="o">√</span><span class="mi">2</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span> <span class="n">with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span><span class="o">-</span><span class="n">element</span> <span class="kt">Vector</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="o">-</span><span class="mf">5.0</span>
</span></span><span class="line"><span class="cl"> <span class="o">-</span><span class="mf">3.585786437626905</span>
</span></span><span class="line"><span class="cl">  <span class="mf">0.6568542494923806</span>
</span></span><span class="line"><span class="cl">  <span class="mf">7.727922061357857</span></span></span></code></pre>
</figure><p>By way of contrast, this is Python&rsquo;s equivalent of those two lines of Julia code.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sqrt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">x</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span></span></span></code></pre>
</figure><p>It&rsquo;s similar enough that I don&rsquo;t feel massively disoriented. But the math stuff is just a little bit friendlier.</p>
<p>Time to run through the &ldquo;is this language worth my time&rdquo; checklist.</p>
<ul>
<li>Julia is <a href="https://docs.julialang.org/en/v1/">well-documented</a></li>
<li>even though scientific programming is Julia&rsquo;s main niche, it includes a solid  base and standard library for the general-purpose utility code I write</li>
<li>the <a href="https://juliapackages.com">package ecosystem</a> looks healthy</li>
<li>I found at least one useful-looking <a href="https://www.genieframework.com">Web framework</a></li>
<li>I found at least one <a href="https://juliapackages.com/p/octo">high-level library</a> to interact with assorted database
servers</li>
<li>and — of course — somebody&rsquo;s written a <a href="/card/static-site-generator/">card/Static Site Generator</a> in Julia, called <a href="https://franklinjl.org">Franklin.jl</a></li>
</ul>
<p>So yeah. I can poke around a little more.</p>
<p>I love <a href="http://literateprogramming.com/index.html">literate programming</a>. One of the first things I did was look to see if someone in the Julia world did too. And they do!</p>
<p>There&rsquo;s <a href="https://fredrikekre.github.io/Literate.jl/v2/">Literate.jl</a>, which processes Markdown and code in Julia scripts. <a href="http://weavejl.mpastell.com/stable/">Weave.jl</a> is more my style, processing Julia code in Markdown files. I can write my post and weave it into an ordinary-looking Markdown file. <a href="/card/hugo/">card/Hugo</a> won&rsquo;t have to know the difference.</p>
<h2 id="the-setup">The setup</h2>
<p>Julia treats environment and package management as core functionality. Everything I need is in <a href="https://docs.julialang.org/en/v1/stdlib/Pkg/">Pkg</a>. Not to pick too much on Python — it really is a great language — but its environment management options are <a href="https://xkcd.com/1987/">infamously byzantine</a>.</p>
<p>To set up a package for my existing site, I drop into the REPL&rsquo;s <code>pkg</code> mode.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">julia&gt; ]</span></span></code></pre>
</figure><p>Here I can initialize my project and add dependencies.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >(v1.5) pkg&gt; initialize .
(rgb-hugo-legacy)&gt; add Weave
...</code></pre>
</figure><p>Now I have <code>Project.toml</code> and <code>Manifest.toml</code> files describing my Hugo site&rsquo;s new Julia needs. I can start writing this post.</p>
<h3 id="writing-with-weave">Writing with Weave</h3>
<p>Write the stuff you want to write, using <a href="https://docs.julialang.org/en/v1/stdlib/Markdown/">Julia-flavored Markdown</a>. Any code block fenceposted with triple backticks and labeled as &ldquo;julia&rdquo; gets evaluated by
Weave.</p>
<p>Set different <a href="http://weavejl.mpastell.com/stable/chunk_options/">chunk options</a> for the block if you want to tweak the code&rsquo;s treatment.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >```julia; term = true
f(x) = √2x^2 - 5
[f(x) for x in [0, 1, 2, 3]]
```</code></pre>
</figure><p>Weave does its thing, and produces something interesting depending on what output options you use.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >```julia
julia&gt; f(x) = √2x^2 - 5
f (generic function with 1 method)

julia&gt; [f(x) for x in [0, 1, 2, 3]]
4-element Array{Float64,1}:
-5.0
-3.585786437626905
0.6568542494923806
7.727922061357857
```</code></pre>
</figure><h2 id="the-script">The script</h2>
<p>AKA the point of this blog post. It looks in my content folder for recently modified <code>.jmd</code> files. Anything found gets handed off to <code>weave</code>, which does the hard work. Heck, <code>weave</code> even has a <code>hugo</code> option so I can generate Markdown specifically formatted to satisfy Hugo.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Logging</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Weave</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">content_folder</span> <span class="o">=</span> <span class="s">&#34;content&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">weave_extensions</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#34;.jmd&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">weave_files</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@debug</span> <span class="s">&#34;content is in </span><span class="si">$content_folder</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span><span class="p">)</span> <span class="k">in</span> <span class="n">walkdir</span><span class="p">(</span><span class="n">content_folder</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">file</span> <span class="k">in</span> <span class="n">files</span>
</span></span><span class="line"><span class="cl">            <span class="n">ext</span> <span class="o">=</span> <span class="n">splitext</span><span class="p">(</span><span class="n">file</span><span class="p">)[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">ext</span> <span class="k">in</span> <span class="n">weave_extensions</span>
</span></span><span class="line"><span class="cl">                <span class="n">weave_file</span> <span class="o">=</span> <span class="n">joinpath</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nd">@debug</span> <span class="s">&#34;Found weave file&#34;</span> <span class="n">weave_file</span>
</span></span><span class="line"><span class="cl">                <span class="n">target_file</span> <span class="o">=</span> <span class="n">joinpath</span><span class="p">(</span><span class="n">dirname</span><span class="p">(</span><span class="n">weave_file</span><span class="p">),</span> <span class="s">&#34;index.md&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">isfile</span><span class="p">(</span><span class="n">target_file</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">mtime</span><span class="p">(</span><span class="n">weave_file</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">mtime</span><span class="p">(</span><span class="n">target_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">push!</span><span class="p">(</span><span class="n">weave_files</span><span class="p">,</span> <span class="n">weave_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">end</span>
</span></span><span class="line"><span class="cl">            <span class="k">end</span>
</span></span><span class="line"><span class="cl">        <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@info</span> <span class="s">&#34;Weave-able files found:&#34;</span> <span class="n">weave_files</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">weave_file</span> <span class="k">in</span> <span class="n">weave_files</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@info</span> <span class="s">&#34;Weaving&#34;</span> <span class="n">weave_file</span>
</span></span><span class="line"><span class="cl">        <span class="n">weave</span><span class="p">(</span><span class="n">weave_file</span><span class="p">;</span> <span class="n">out_path</span><span class="o">=</span><span class="ss">:doc</span><span class="p">,</span> <span class="n">doctype</span><span class="o">=</span><span class="s">&#34;hugo&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@info</span> <span class="s">&#34;Done?&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">main</span><span class="p">()</span></span></span></code></pre>
</figure><p>This is probably not idiomatic Julia. Maybe it&rsquo;ll get there when I learn what idiomatic Julia even looks like.</p>
<p>Obviously there&rsquo;s no error handlng of any kind. That can come later.</p>
<p>A few things I noticed:</p>
<ul>
<li>functions like <code>walkdir</code> end up making the flow look a bit like Python</li>
<li>I kept making my code more complicated than it needed to be, when both Julia and Weave were ready with reasonable defaults</li>
<li>especially in regard to types; everything works fine without specifying  details; I can find out what happens when I add details later</li>
</ul>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >❯ just weave
julia --project=. scripts/weave-content.jl
┌ Info: Files that need weaving:
│   weave_files =
│    1-element Array{Any,1}:
└     &#34;content/post/2020/12/my-first-julia-script/index.jmd&#34;
┌ Info: Weaving
└   weave_file = &#34;content/post/2020/12/my-first-julia-script/index.jmd&#34;
┌ Info: Weaving chunk 1 from line 45
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 163
└   progress = 0.3333333333333333
┌ Info: Weaving chunk 3 from line 249
└   progress = 0.6666666666666666
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Weaved to /home/random/Sites/rgb-hugo-legacy/content/post/2020/12/my-first-julia-script/index.md
[ Info: Done?</code></pre>
</figure><p>Okay. That&rsquo;s great. I mean — all that so I could do a little math, but whatever.</p>
<h2 id="thats-it">That&rsquo;s it?</h2>
<p>Hey. Maybe we could do something cool. Make a cover image for this post with <a href="http://juliagraphics.github.io/Luxor.jl/stable/">Luxor</a>.</p>
<p>Let&rsquo;s try it out. I&rsquo;ll borrow heavily from the Luxor manual since I don&rsquo;t really know what I&rsquo;m doing,</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Colors</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Luxor</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">draw</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">foregroundcolors</span> <span class="o">=</span> <span class="n">Colors</span><span class="o">.</span><span class="n">diverging_palette</span><span class="p">(</span><span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">:</span><span class="mi">360</span><span class="p">),</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">:</span><span class="mi">360</span><span class="p">),</span> <span class="mi">200</span><span class="p">,</span> <span class="n">s</span> <span class="o">=</span> <span class="mf">0.99</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mf">0.8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">gsave</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">translate</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">-</span><span class="mi">150</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">julialogo</span><span class="p">(</span><span class="n">action</span><span class="o">=</span><span class="ss">:clip</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">500</span>
</span></span><span class="line"><span class="cl">        <span class="n">sethue</span><span class="p">(</span><span class="n">foregroundcolors</span><span class="p">[</span><span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">:</span><span class="k">end</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">        <span class="n">circle</span><span class="p">(</span><span class="n">rand</span><span class="p">(</span><span class="o">-</span><span class="mi">50</span><span class="o">:</span><span class="mi">350</span><span class="p">),</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">:</span><span class="mi">300</span><span class="p">),</span> <span class="mi">15</span><span class="p">,</span> <span class="ss">:fillstroke</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">clipreset</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">sethue</span><span class="p">(</span><span class="s">&#34;black&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">julialogo</span><span class="p">(</span><span class="n">action</span><span class="o">=</span><span class="ss">:stroke</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">translate</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">125</span><span class="p">,</span> <span class="n">y</span><span class="o">+</span><span class="mi">150</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">spiral</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">period</span><span class="o">=</span><span class="mi">20</span><span class="nb">π</span><span class="p">,</span> <span class="ss">:stroke</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">grestore</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">currentwidth</span> <span class="o">=</span> <span class="mi">850</span>
</span></span><span class="line"><span class="cl"><span class="n">currentheight</span> <span class="o">=</span> <span class="mi">500</span>
</span></span><span class="line"><span class="cl"><span class="n">Drawing</span><span class="p">(</span><span class="n">currentwidth</span><span class="p">,</span> <span class="n">currentheight</span><span class="p">,</span> <span class="s">&#34;cover.png&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">origin</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">background</span><span class="p">(</span><span class="s">&#34;white&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">setopacity</span><span class="p">(</span><span class="mf">.4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">scale</span><span class="p">(</span><span class="mf">1.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">draw</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">finish</span><span class="p">()</span></span></span></code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>First off, PNG format works better than SVG when you&rsquo;re drawing 500 random circles.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ exa -l content/post/2020/12/my-first-julia-script/cover*
</span></span><span class="line"><span class="cl">.rw-r--r--  99k random <span class="m">25</span> Dec 12:42 cover.png
</span></span><span class="line"><span class="cl">.rw-r--r-- 4.8M random <span class="m">25</span> Dec 12:37 cover.svg</span></span></code></pre>
</figure><p>Second, I added an <code>eval = false</code> chunk option after the image was good enough. No point regenerating the cover every time I fix a typo.</p>
</blockquote>
<p>That&rsquo;s enough writing about writing with Julia. I have a couple other drafts I want to revisit now.</p>
<p>Besides, it&rsquo;s Christmas! Christmas 2020. Which means my only regret is forgetting to order Christmas-themed face masks.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Project dependencies in Julia</title>
  <link>https://randomgeekery.org/post/2020/12/bkamins-github-io/</link>
  <pubDate>Wed, 23 Dec 2020 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/bkamins-github-io/</guid>
  <description>Step by step breakdown for setting up a project environment in card/Julia, using the REPL. I’ve only been looking close at Julia for a couple days, but they sure do love their REPL!
My practices for managing project dependencies in Julia</description>
   <category>post</category> 
   <category>bookmark</category> 
   <category>julialang</category> 
  <content:encoded><![CDATA[<p>Step by step breakdown for setting up a project environment in <a href="/card/julia/">card/Julia</a>, using the REPL. I&rsquo;ve only been looking close at Julia for a couple days, but they sure do love their REPL!</p>
<p><a href="https://bkamins.github.io/julialang/2020/05/18/project-workflow.html">My practices for managing project dependencies in Julia</a></p>
]]></content:encoded>
</item>
</channel>
</rss>
