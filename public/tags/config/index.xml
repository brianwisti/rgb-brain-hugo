<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>configonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/config/</link>
    <description>
      Recent contentinconfig on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Mon, 22 Jan 2024 14:33:49 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/tags/config/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Config: My autorun.sh for awesome</title>
  <link>https://randomgeekery.org/config/linux/awesome/autorun.sh/</link>
  <pubDate>Mon, 22 Jan 2024 14:33:49 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/linux/awesome/autorun.sh/</guid>
  <description>This goes to autorun.sh.
#!/usr/bin/env bash ## run (only once) processes which spawn with the same name function run { if (command -v $1 &amp;&amp; ! pgrep $1); then $@&amp; fi } ## run (only once) processes which spawn with different name if (command -v gnome-keyring-daemon &amp;&amp; ! pgrep gnome-keyring-d); then gnome-keyring-daemon --daemonize --login &amp; fi if (command -v start-pulseaudio-x11 &amp;&amp; ! pgrep pulseaudio); then start-pulseaudio-x11 &amp; fi if (command -v /usr/lib/mate-polkit/polkit-mate-authentication-agent-1 &amp;&amp; !</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p>This goes to <code>autorun.sh</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">## run (only once) processes which spawn with the same name</span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> run <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="o">(</span><span class="nb">command</span> -v <span class="nv">$1</span> <span class="o">&amp;&amp;</span> ! pgrep <span class="nv">$1</span><span class="o">)</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">     <span class="nv">$@</span><span class="p">&amp;</span>
</span></span><span class="line"><span class="cl">   <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## run (only once) processes which spawn with different name</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">(</span><span class="nb">command</span> -v gnome-keyring-daemon <span class="o">&amp;&amp;</span> ! pgrep gnome-keyring-d<span class="o">)</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    gnome-keyring-daemon --daemonize --login <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">(</span><span class="nb">command</span> -v start-pulseaudio-x11 <span class="o">&amp;&amp;</span> ! pgrep pulseaudio<span class="o">)</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    start-pulseaudio-x11 <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">(</span><span class="nb">command</span> -v /usr/lib/mate-polkit/polkit-mate-authentication-agent-1 <span class="o">&amp;&amp;</span> ! pgrep polkit-mate-aut<span class="o">)</span> <span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    /usr/lib/mate-polkit/polkit-mate-authentication-agent-1 <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">(</span><span class="nb">command</span> -v  xfce4-power-manager <span class="o">&amp;&amp;</span> ! pgrep xfce4-power-man<span class="o">)</span> <span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    xfce4-power-manager <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#run xfsettingsd</span>
</span></span><span class="line"><span class="cl"><span class="c1">#run nm-applet</span>
</span></span><span class="line"><span class="cl"><span class="c1">#run light-locker</span>
</span></span><span class="line"><span class="cl"><span class="c1">#run xcape -e &#39;Super_L=Super_L|Control_L|Escape&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#run thunar --daemon</span>
</span></span><span class="line"><span class="cl"><span class="c1">#run pa-applet</span>
</span></span><span class="line"><span class="cl"><span class="c1">#run pamac-tray</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## The following are not included in minimal edition by default</span>
</span></span><span class="line"><span class="cl"><span class="c1">## but autorun.sh will pick them up if you install them</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">(</span><span class="nb">command</span> -v system-config-printer-applet <span class="o">&amp;&amp;</span> ! pgrep applet.py <span class="o">)</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  system-config-printer-applet <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">run compton --shadow-exclude <span class="s1">&#39;!focused&#39;</span>
</span></span><span class="line"><span class="cl">run blueman-applet
</span></span><span class="line"><span class="cl"><span class="c1">#run msm_notifier</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Config: My awesome tags.lua</title>
  <link>https://randomgeekery.org/config/linux/awesome/main/tags.lua/</link>
  <pubDate>Mon, 22 Jan 2024 14:33:49 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/linux/awesome/main/tags.lua/</guid>
  <description>Awesome uses string tags to enumerate and identify virtual desktops.
local awful = require(&#34;awful&#34;) local _M = {} local tag_names = { &#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;4&#34;, &#34;5&#34; } awful.screen.connect_for_each_screen(function(s) _M[s] = awful.tag(tag_names, s, RC.layouts[1]) end) return _M </description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p>Awesome uses string tags to enumerate and identify virtual desktops.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">awful</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;awful&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">_M</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">tag_names</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&#34;1&#34;</span><span class="p">,</span> <span class="s2">&#34;2&#34;</span><span class="p">,</span> <span class="s2">&#34;3&#34;</span><span class="p">,</span> <span class="s2">&#34;4&#34;</span><span class="p">,</span> <span class="s2">&#34;5&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">awful.screen</span><span class="p">.</span><span class="n">connect_for_each_screen</span><span class="p">(</span><span class="kr">function</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">_M</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="n">awful.tag</span><span class="p">(</span><span class="n">tag_names</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">RC.layouts</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">return</span> <span class="n">_M</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Config: My awesome theme.lua</title>
  <link>https://randomgeekery.org/config/linux/awesome/main/theme.lua/</link>
  <pubDate>Mon, 22 Jan 2024 14:33:49 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/linux/awesome/main/theme.lua/</guid>
  <description>Themes define colours, icons, font and wallpapers.
After installing awesome, I can find the default themes under /usr/share/awesome/themes.
The builtin themes that come with every awesome install:
default gtk sky xresources zenburn Load the theme handler.
local gears = require(&#34;gears&#34;) local awful = require(&#34;awful&#34;) local beautiful = require(&#34;beautiful&#34;) I just want to make sure things work. Start with one of the built-in themes and reasonable defaults.
beautiful.init(&#34;/usr/share/awesome/themes/zenburn/theme.lua&#34;) beautiful.font = &#34;Noto Sans Regular 12&#34; beautiful.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p>Themes define colours, icons, font and wallpapers.</p>
<p>After installing <code>awesome</code>,
I can find the default themes under <code>/usr/share/awesome/themes</code>.</p>
<p>The builtin themes that come with every awesome install:</p>
<ul>
<li><code>default</code></li>
<li><code>gtk</code></li>
<li><code>sky</code></li>
<li><code>xresources</code></li>
<li><code>zenburn</code></li>
</ul>
<p>Load the theme handler.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">gears</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;gears&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">awful</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;awful&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">beautiful</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;beautiful&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><p>I just want to make sure things work.
Start with one of the built-in themes and reasonable defaults.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">beautiful.init</span><span class="p">(</span><span class="s2">&#34;/usr/share/awesome/themes/zenburn/theme.lua&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">beautiful.font</span> <span class="o">=</span> <span class="s2">&#34;Noto Sans Regular 12&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">beautiful.notification_font</span> <span class="o">=</span> <span class="s2">&#34;Noto Sans Bold 16&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">beautiful.icon_theme</span><span class="o">=</span><span class="s2">&#34;Papirus-Dark&#34;</span></span></span></code></pre>
</figure><p>Set up background wallpaper if there is one — and if the file exists.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kr">if</span> <span class="p">(</span><span class="n">RC.vars</span><span class="p">.</span><span class="n">wallpaper</span><span class="p">)</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">    <span class="kd">local</span> <span class="n">wallpaper</span> <span class="o">=</span> <span class="n">RC.vars</span><span class="p">.</span><span class="n">wallpaper</span>
</span></span><span class="line"><span class="cl">    <span class="kr">if</span> <span class="n">awful.util</span><span class="p">.</span><span class="n">file_readable</span><span class="p">(</span><span class="n">wallpaper</span><span class="p">)</span> <span class="kr">then</span> <span class="n">beautiful.wallpaper</span> <span class="o">=</span> <span class="n">wallpaper</span> <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="n">beautiful.wallpaper</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">    <span class="kr">for</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">screen.count</span><span class="p">()</span> <span class="kr">do</span>
</span></span><span class="line"><span class="cl">        <span class="n">gears.wallpaper</span><span class="p">.</span><span class="n">maximized</span><span class="p">(</span><span class="n">beautiful.wallpaper</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span></span></span></code></pre>
</figure><p>Add a signal handler to redraw wallpaper when screen resolution changes.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="kr">function</span> <span class="nf">set_wallpaper</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kr">if</span> <span class="n">beautiful.wallpaper</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">        <span class="kd">local</span> <span class="n">wallpaper</span> <span class="o">=</span> <span class="n">beautiful.wallpaper</span>
</span></span><span class="line"><span class="cl">        <span class="c1">-- If wallpaper is a function, call it with the screen</span>
</span></span><span class="line"><span class="cl">        <span class="kr">if</span> <span class="n">type</span><span class="p">(</span><span class="n">wallpaper</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&#34;function&#34;</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">            <span class="n">wallpaper</span> <span class="o">=</span> <span class="n">wallpaper</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="kr">end</span>
</span></span><span class="line"><span class="cl">        <span class="n">gears.wallpaper</span><span class="p">.</span><span class="n">maximized</span><span class="p">(</span><span class="n">wallpaper</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">screen.connect_signal</span><span class="p">(</span><span class="s2">&#34;property::geometry&#34;</span><span class="p">,</span> <span class="n">set_wallpaper</span><span class="p">)</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Config: My awesomewm config error-handling.lua</title>
  <link>https://randomgeekery.org/config/linux/awesome/main/error-handling.lua/</link>
  <pubDate>Mon, 22 Jan 2024 14:33:49 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/linux/awesome/main/error-handling.lua/</guid>
  <description>I’ll need to notify about errors. Loading naughty for its notification function.
local naughty = require(&#34;naughty&#34;) Check if awesome encountered an error during startup and fell back to another config.
Note This code should only ever execute for the fallback config.
if awesome.startup_errors then naughty.notify({ preset = naughty.config.presets.critical, title = &#34;Oops, there were errors during startup!&#34;, text = awesome.startup_errors }) end Handle runtime errors after an otherwise normal startup.
do local in_error = false awesome.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p>I&rsquo;ll need to notify about errors.
Loading <em>naughty</em> for its notification function.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">naughty</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;naughty&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><p>Check if awesome encountered an error during startup and fell back to another config.</p>
<aside class="info">
    <header>
      <h3>Note</h3>
    </header>
<p>This code should only ever execute for the fallback config.</p>
</aside>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kr">if</span> <span class="n">awesome.startup_errors</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">  <span class="n">naughty.notify</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="n">preset</span> <span class="o">=</span> <span class="n">naughty.config</span><span class="p">.</span><span class="n">presets.critical</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Oops, there were errors during startup!&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">text</span> <span class="o">=</span> <span class="n">awesome.startup_errors</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span></span></span></code></pre>
</figure><p>Handle runtime errors after an otherwise normal startup.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kr">do</span>
</span></span><span class="line"><span class="cl">  <span class="kd">local</span> <span class="n">in_error</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">  <span class="n">awesome.connect_signal</span><span class="p">(</span><span class="s2">&#34;debug::error&#34;</span><span class="p">,</span> <span class="kr">function</span> <span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">-- Make sure we don&#39;t go into an endless error loop</span>
</span></span><span class="line"><span class="cl">    <span class="kr">if</span> <span class="n">in_error</span> <span class="kr">then</span> <span class="kr">return</span> <span class="kr">end</span>
</span></span><span class="line"><span class="cl">    <span class="n">in_error</span> <span class="o">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">naughty.notify</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="n">preset</span> <span class="o">=</span> <span class="n">naughty.config</span><span class="p">.</span><span class="n">presets.critical</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Oops, an error happened!&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">text</span> <span class="o">=</span> <span class="n">tostring</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="n">in_error</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Config: My awesomewm config user-variables.lua</title>
  <link>https://randomgeekery.org/config/linux/awesome/main/user-variables.lua/</link>
  <pubDate>Mon, 22 Jan 2024 14:33:49 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/linux/awesome/main/user-variables.lua/</guid>
  <description>user-variables.lua holds my defaults for other contexts: what terminal to load, which modifier key starts shortcuts, what to edit files with.
Return it as a table that can be held in the global RC table.
local terminal = &#34;wezterm&#34; local editor = os.getenv(&#34;EDITOR&#34;) or &#34;nvim&#34; local editor_cmd = terminal .. &#34; -e &#34; .. editor local _M = { terminal = terminal, editor = editor, editor_cmd = editor_cmd, modkey = &#34;Mod4&#34;, wallpaper = &#34;/usr/share/endeavouros/backgrounds/endeavouros-wallpaper.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p><code>user-variables.lua</code> holds my defaults for other contexts:
what terminal to load, which modifier key starts shortcuts, what to edit files with.</p>
<p>Return it as a table that can be held in the global <code>RC</code> table.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">terminal</span> <span class="o">=</span> <span class="s2">&#34;wezterm&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">editor</span> <span class="o">=</span> <span class="n">os.getenv</span><span class="p">(</span><span class="s2">&#34;EDITOR&#34;</span><span class="p">)</span> <span class="ow">or</span> <span class="s2">&#34;nvim&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">editor_cmd</span> <span class="o">=</span> <span class="n">terminal</span> <span class="o">..</span> <span class="s2">&#34; -e &#34;</span> <span class="o">..</span> <span class="n">editor</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">_M</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">terminal</span> <span class="o">=</span> <span class="n">terminal</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">editor</span> <span class="o">=</span> <span class="n">editor</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">editor_cmd</span> <span class="o">=</span> <span class="n">editor_cmd</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">modkey</span> <span class="o">=</span> <span class="s2">&#34;Mod4&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">wallpaper</span> <span class="o">=</span> <span class="s2">&#34;/usr/share/endeavouros/backgrounds/endeavouros-wallpaper.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">return</span> <span class="n">_M</span></span></span></code></pre>
</figure><p><code>Mod4</code> is the Windows key on most keyboards I see.</p>
]]></content:encoded>
</item>
<item>
  <title>Config: My awesomewm layouts.lua</title>
  <link>https://randomgeekery.org/config/linux/awesome/main/layouts.lua/</link>
  <pubDate>Mon, 22 Jan 2024 14:33:49 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/linux/awesome/main/layouts.lua/</guid>
  <description>awful.layout provides predefined approaches to organizing windows. I specify which ones to use, leaving out those which aren’t useful on my ludicrously wide monitor.
Eventually I need to come up with my own layout, because I can be very fussy.
local awful = require(&#34;awful&#34;) local lain = require(&#34;lain&#34;) Mainly got the lain centerwork in there for my wide monitor. I want to cut down on the total layout selection. I don’t use many of these.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p><a href="https://awesomewm.org/apidoc/libraries/awful.layout.html#"><code>awful.layout</code></a> provides predefined approaches to organizing
windows. I specify which ones to use, leaving out those which aren&rsquo;t useful on
my ludicrously wide monitor.</p>
<p>Eventually I need to come up with my own layout, because I can be <em>very</em> fussy.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">awful</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;awful&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">lain</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;lain&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><p>Mainly got the <em>lain</em> centerwork in there for my wide monitor.
I want to cut down on the total layout selection.
I don&rsquo;t use many of these.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">_M</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">lain.layout</span><span class="p">.</span><span class="n">centerwork</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">awful.layout</span><span class="p">.</span><span class="n">suit.floating</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">awful.layout</span><span class="p">.</span><span class="n">suit.tile</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">awful.layout</span><span class="p">.</span><span class="n">suit.tile</span><span class="p">.</span><span class="n">left</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">awful.layout</span><span class="p">.</span><span class="n">suit.fair</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">awful.layout</span><span class="p">.</span><span class="n">suit.fair</span><span class="p">.</span><span class="n">horizontal</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">awful.layout</span><span class="p">.</span><span class="n">suit.spiral</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">awful.layout</span><span class="p">.</span><span class="n">suit.spiral</span><span class="p">.</span><span class="n">dwindle</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">awful.layout</span><span class="p">.</span><span class="n">suit.magnifier</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">awful.layout</span><span class="p">.</span><span class="n">suit.corner</span><span class="p">.</span><span class="n">nw</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">return</span> <span class="n">_M</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Config: My awesomewm menu.lua</title>
  <link>https://randomgeekery.org/config/linux/awesome/main/menu.lua/</link>
  <pubDate>Mon, 22 Jan 2024 14:33:49 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/linux/awesome/main/menu.lua/</guid>
  <description>My awesomewm application menu.
local awful = require(&#34;awful&#34;) local hotkeys_popup = require(&#34;awful.hotkeys_popup&#34;).widget local beautiful = require(&#34;beautiful&#34;) local freedesktop = require(&#34;freedesktop&#34;) local M = {} Awesome-specific actions The most important stuff — interacting with Awesome itself.
M.awesome = { { &#34;hotkeys&#34;, function() hotkeys_popup.show_help(nil, awful.screen.focused()) end }, { &#34;manual&#34;, RC.vars.terminal .. &#34; -e man awesome&#34; }, { &#34;edit config&#34;, RC.vars.editor_cmd .. &#34; &#34; .. awesome.conffile }, { &#34;restart&#34;, awesome.restart }, { &#34;quit&#34;, function() awesome.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p>My awesomewm application menu.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">awful</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;awful&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">hotkeys_popup</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;awful.hotkeys_popup&#34;</span><span class="p">).</span><span class="n">widget</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">beautiful</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;beautiful&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">freedesktop</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;freedesktop&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">M</span> <span class="o">=</span> <span class="p">{}</span></span></span></code></pre>
</figure><h2 id="awesome-specific-actions">Awesome-specific actions</h2>
<p>The most important stuff —
interacting with Awesome itself.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">M.awesome</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;hotkeys&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="n">hotkeys_popup.show_help</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="n">awful.screen</span><span class="p">.</span><span class="n">focused</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="kr">end</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="s2">&#34;manual&#34;</span><span class="p">,</span> <span class="n">RC.vars</span><span class="p">.</span><span class="n">terminal</span> <span class="o">..</span> <span class="s2">&#34; -e man awesome&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="s2">&#34;edit config&#34;</span><span class="p">,</span> <span class="n">RC.vars</span><span class="p">.</span><span class="n">editor_cmd</span> <span class="o">..</span> <span class="s2">&#34; &#34;</span> <span class="o">..</span> <span class="n">awesome.conffile</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="s2">&#34;restart&#34;</span><span class="p">,</span> <span class="n">awesome.restart</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="s2">&#34;quit&#34;</span><span class="p">,</span> <span class="kr">function</span><span class="p">()</span> <span class="n">awesome.quit</span><span class="p">()</span> <span class="kr">end</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h2 id="applications">Applications</h2>
<p>I let <code>freedesktop</code> build the menu via XDG-related settings.
That&rsquo;s the stuff already in my KDE application menu.
It just loads straight over.
I&rsquo;ll put <code>awesome_menu</code> at the top and a quick entry for loading my preferred terminal emulator at the bottom.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">M.main</span> <span class="o">=</span> <span class="n">freedesktop.menu</span><span class="p">.</span><span class="n">build</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">before</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span> <span class="s2">&#34;awesome&#34;</span><span class="p">,</span> <span class="n">M.awesome</span><span class="p">,</span> <span class="n">beautiful.awesome_icon</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="n">after</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span> <span class="s2">&#34;Terminal&#34;</span><span class="p">,</span> <span class="n">RC.vars</span><span class="p">.</span><span class="n">terminal</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">return</span> <span class="n">M</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Config: My Dotbot config</title>
  <link>https://randomgeekery.org/config/install.conf.yaml/</link>
  <pubDate>Mon, 22 Jan 2024 14:33:49 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/install.conf.yaml/</guid>
  <description>After Yarner extracts code and Markdown from my Config sources, inbox/Dotbot creates symlinks from generated code files to their expected locations in my home folder.
I adjust my defaults to allow creation of parent directories when they do not already exist.
- defaults: link: create: true Then I define my links!
- link: ~/.config/nvim/init.lua: code/editor/nvim/init.lua ~/.tmux.conf: code/tmux.conf ~/.config/starship.toml: code/starship.toml ~/.config/systemd/user/autostart.target: code/systemd/user/autostart.target ~/.config/wezterm: code/wezterm ~/.config/nushell/config.nu: code/shell/nushell/config.nu ~/.config/nushell/env.nu: code/shell/nushell/env.nu ~/.config/nushell/login.nu: code/shell/nushell/login.nu ~/.config/nushell/lib: code/nushell/lib ~/.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p>After <em>Yarner</em> extracts code and Markdown from my <a href="/config/">Config</a> sources, <em>inbox/Dotbot</em> creates symlinks from generated code files to their expected locations in my home folder.</p>
<p>I adjust my defaults to allow creation of parent directories when they do not already exist.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">- <span class="nt">defaults</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">link</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">create</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span></span></span></code></pre>
</figure><p>Then I define my links!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">- <span class="nt">link</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/nvim/init.lua</span><span class="p">:</span><span class="w"> </span><span class="l">code/editor/nvim/init.lua</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.tmux.conf</span><span class="p">:</span><span class="w"> </span><span class="l">code/tmux.conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/starship.toml</span><span class="p">:</span><span class="w"> </span><span class="l">code/starship.toml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/systemd/user/autostart.target</span><span class="p">:</span><span class="w"> </span><span class="l">code/systemd/user/autostart.target</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/wezterm</span><span class="p">:</span><span class="w"> </span><span class="l">code/wezterm</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/nushell/config.nu</span><span class="p">:</span><span class="w"> </span><span class="l">code/shell/nushell/config.nu</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/nushell/env.nu</span><span class="p">:</span><span class="w"> </span><span class="l">code/shell/nushell/env.nu</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/nushell/login.nu</span><span class="p">:</span><span class="w"> </span><span class="l">code/shell/nushell/login.nu</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/nushell/lib</span><span class="p">:</span><span class="w"> </span><span class="l">code/nushell/lib</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/awesome/rc.lua</span><span class="p">:</span><span class="w"> </span><span class="l">code/linux/awesome/rc.lua</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/awesome/main</span><span class="p">:</span><span class="w"> </span><span class="l">code/linux/awesome/main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/awesome/autorun.sh</span><span class="p">:</span><span class="w"> </span><span class="l">code/linux/awesome/autorun.sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/qtile/config.py</span><span class="p">:</span><span class="w"> </span><span class="l">code/linux/qtile/config.py</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/qtile/autostart.sh</span><span class="p">:</span><span class="w"> </span><span class="l">code/linux/qtile/autostart.sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/qtile/modules</span><span class="p">:</span><span class="w"> </span><span class="l">code/linux/qtile/modules</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/dunst/dunstrc</span><span class="p">:</span><span class="w"> </span><span class="l">code/linux/dunst/dunstrc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.bash_profile</span><span class="p">:</span><span class="w"> </span><span class="l">code/shell/bash/bash_profile</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.bashrc</span><span class="p">:</span><span class="w"> </span><span class="l">code/shell/bash/bashrc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.bash_aliases</span><span class="p">:</span><span class="w"> </span><span class="l">code/shell/bash/bash_aliases</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Config: My dunst dunstrc</title>
  <link>https://randomgeekery.org/config/linux/dunst/dunstrc/</link>
  <pubDate>Mon, 22 Jan 2024 14:33:49 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/linux/dunst/dunstrc/</guid>
  <description>Just a dump of the inline documentation for the EndeavourOS dunst user defaults.
Global Settings [global] Display Which monitor notifications should be displayed on.
I only have one, so it’s an easy choice.
monitor = 0 Display notification on focused monitor. Possible modes are:
mouse follow mouse pointer keyboard follow window with keyboard focus none don’t follow anything keyboard needs a window manager that exports the _NET_ACTIVE_WINDOW property. This should be the case for almost all modern window managers.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p>Just a dump of the inline documentation for the EndeavourOS dunst user defaults.</p>
<h2 id="global-settings">Global Settings</h2>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >[global]</code></pre>
</figure><h3 id="display">Display</h3>
<figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Which monitor notifications should be displayed on.</p>
  </blockquote></figure>
<p>I only have one, so it&rsquo;s an easy choice.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >monitor = 0</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Display notification on focused monitor.  Possible modes are:</p>
<dl>
<dt><code>mouse</code></dt>
<dd>follow mouse pointer</dd>
<dt><code>keyboard</code></dt>
<dd>follow window with keyboard focus</dd>
<dt><code>none</code></dt>
<dd>don&rsquo;t follow anything</dd>
</dl>
<p><code>keyboard</code> needs a window manager that exports the <code>_NET_ACTIVE_WINDOW</code> property.
This should be the case for almost all modern window managers.</p>
<p>If this option is set to mouse or keyboard, the monitor option will be ignored.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >follow = mouse</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>The geometry of the window: <code>[{width}]x{height}[+/-{x}+/-{y}]</code></p>
<p>The geometry of the message window.</p>
<p>The height is measured in number of notifications everything else in pixels.
If the width is omitted but the height is given (<code>&quot;-geometry x2&quot;</code>),
the message window expands over the whole screen (dmenu-like).
If width is 0, the window expands to the longest message displayed.
A positive x is measured from the left, a negative from the right side of the screen.
Y is measured from the top and down respectively.</p>
<p>The width can be negative.
In this case the actual width is the screen width minus the width defined in within the geometry option.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >geometry = &#34;0x0-30&#43;20&#34;</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Show how many messages are currently hidden (because of geometry).</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >indicate_hidden = yes</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Shrink window if it&rsquo;s smaller than the width.
Will be ignored if width is 0.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >shrink = no</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>The transparency of the window.  Range: [0; 100].</p>
<p>This option will only work if a compositing window manager is present
(e.g. xcompmgr, compiz, etc.).</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >transparency = 0</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>The height of the entire notification.
If the height is smaller than the font height and padding combined,
it will be raised to the font height and padding.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >notification_height = 0</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Draw a line of <code>separator_height</code> pixel height between two notifications.</p>
<p>Set to <code>0</code> to disable.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >    separator_height = 2</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Padding between text and separator.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >padding = 8</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Horizontal padding.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >horizontal_padding = 8</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Defines width in pixels of frame around the notification window.</p>
<p>Set to 0 to disable.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >frame_width = 3</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Defines color of the frame around the notification window.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >frame_color = &#34;#aaaaaa&#34;</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Define a color for the separator.
possible values are:</p>
<dl>
<dt><code>auto</code></dt>
<dd>dunst tries to find a color fitting to the background</dd>
<dt><code>foreground</code></dt>
<dd>use the same color as the foreground</dd>
<dt><code>frame</code></dt>
<dd>use the same color as the frame</dd>
</dl>
<p>Anything else will be interpreted as a X color.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >separator_color = auto</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Sort messages by urgency.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >sort = yes</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Don&rsquo;t remove messages,
if the user is idle (no mouse or keyboard input) for longer than idle_threshold seconds.</p>
<p>Set to 0 to disable.</p>
<p>A client can set the &rsquo;transient&rsquo; hint to bypass this.
See the rules section for how to disable this if necessary</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >idle_threshold = 120</code></pre>
</figure><h3 id="text">Text</h3>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >font = JetBrains Mono Medium 10</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>The spacing between lines.
If the height is smaller than the font height, it will get raised to the font height.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >line_height = 0</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Possible values are:</p>
<dl>
<dt>full</dt>
<dd>Allow a small subset of html markup in notifications
For a complete reference see <a href="http://developer.gnome.org/pango/stable/PangoMarkupFormat.html">http://developer.gnome.org/pango/stable/PangoMarkupFormat.html</a>.</dd>
<dt>strip</dt>
<dd>This setting is provided for compatibility with some broken
clients that send markup even though it&rsquo;s not enabled on the
server. Dunst will try to strip the markup but the parsing is
simplistic so using this option outside of matching rules for
specific applications <em>IS GREATLY DISCOURAGED</em>.</dd>
<dt>no</dt>
<dd>Disable markup parsing, incoming notifications will be treated as
plain text. Dunst will not advertise that it has the body-markup
capability if this is set as a global setting.</dd>
</dl>
<p>It&rsquo;s important to note that markup inside the format option will be parsed
regardless of what this is set to.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >markup = full</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>The format of the message.
Possible variables are:</p>
<table>
<thead>
<tr>
<th>Variable</th>
<th>Represents</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>%a</code></td>
<td>appname</td>
</tr>
<tr>
<td><code>%s</code></td>
<td>summary</td>
</tr>
<tr>
<td><code>%b</code></td>
<td>body</td>
</tr>
<tr>
<td><code>%i</code></td>
<td>iconname (including its path)</td>
</tr>
<tr>
<td><code>%I</code></td>
<td>iconname (without its path)</td>
</tr>
<tr>
<td><code>%p</code></td>
<td>progress value if set ([  0%] to [100%]) or nothing</td>
</tr>
<tr>
<td><code>%n</code></td>
<td>progress value if set without any extra characters</td>
</tr>
<tr>
<td><code>%%</code></td>
<td>Literal <code>%</code></td>
</tr>
</tbody>
</table>
<p>Markup is allowed</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >format = &#34;&lt;b&gt;%s&lt;/b&gt;\n%b&#34;</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Alignment of message text.</p>
<p>Possible values are &ldquo;left&rdquo;, &ldquo;center&rdquo; and &ldquo;right&rdquo;.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >alignment = center</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Show age of message if message is older than <code>show_age_threshold</code> seconds.</p>
<p>Set to <code>-1</code> to disable.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >show_age_threshold = 60</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Split notifications into multiple lines if they don&rsquo;t fit into geometry.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >word_wrap = yes</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>When word_wrap is set to no, specify where to make an ellipsis in long lines.</p>
<p>Possible values are &ldquo;start&rdquo;, &ldquo;middle&rdquo; and &ldquo;end&rdquo;.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >ellipsize = middle</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Ignore newlines <code>\n</code> in notifications.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >ignore_newline = no</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Stack together notifications with the same content</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >stack_duplicates = true</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Hide the count of stacked notifications with the same content</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >hide_duplicate_count = false</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Display indicators for URLs (U) and actions (A).</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >show_indicators = yes</code></pre>
</figure><h3 id="icons">Icons</h3>
<figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Align icons left/right/off</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >icon_position = left</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Scale larger icons down to this size, set to 0 to disable</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >max_icon_size = 32</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>icon_path = /usr/share/icons/gnome/16x16/status/:/usr/share/icons/gnome/16x16/devices/</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      ># Paths to default icons.</code></pre>
</figure><h3 id="history">History</h3>
<figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Should a notification popped up from history be sticky or timeout as if it would normally do.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >sticky_history = yes</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Maximum amount of notifications kept in history</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >history_length = 20</code></pre>
</figure><h3 id="misc--advanced">Misc / Advanced</h3>
<figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>dmenu path.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >dmenu = /usr/bin/dmenu -p dunst:</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Browser for opening urls in context menu.</p>
  </blockquote></figure>
<p>Defaults to Brave.
I use Firefox.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >browser = /usr/bin/firefox</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Always run rule-defined scripts, even if the notification is suppressed</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >always_run_script = true</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Define the title of the windows spawned by dunst</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >title = Dunst</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Define the class of the windows spawned by dunst</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >class = Dunst</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Print a notification on startup.</p>
<p>This is mainly for error detection, since dbus (re-)starts dunst automatically after a crash.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >startup_notification = false</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Manage dunst&rsquo;s desire for talking</p>
<p>Can be one of the following values:</p>
<dl>
<dt>crit</dt>
<dd>Critical features. Dunst aborts</dd>
<dt>warn</dt>
<dd>Only non-fatal warnings</dd>
<dt>mesg</dt>
<dd>Important Messages</dd>
<dt>info</dt>
<dd>all unimportant stuff</dd>
<dt>ebug</dt>
<dd>all less than unimportant stuff
</blockquote></figure>
</dd>
</dl>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >verbosity = mesg</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Define the corner radius of the notification window in pixel size.
If the radius is 0, you have no rounded corners.</p>
<p>The radius will be automatically lowered if it exceeds half of the notification height to avoid clipping text and/or icons.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >corner_radius = 5</code></pre>
</figure><h3 id="legacy">Legacy</h3>
<figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Use the Xinerama extension instead of RandR for multi-monitor support.
This setting is provided for compatibility with older nVidia drivers that
do not support RandR and using it on systems that support RandR is highly
discouraged.</p>
<p>By enabling this setting dunst will not be able to detect when a monitor
is connected or disconnected which might break follow mode if the screen
layout changes.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >force_xinerama = false</code></pre>
</figure><h3 id="mouse">Mouse</h3>
<figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Defines action of mouse event</p>
<p>Possible values are:</p>
<dl>
<dt><code>none</code></dt>
<dd>Don&rsquo;t do anything.</dd>
<dt><code>do_action</code></dt>
<dd>If the notification has exactly one action, or one is marked as default,
invoke it. If there are multiple and no default, open the context menu.</dd>
<dt><code>close_current</code></dt>
<dd>Close current notification.</dd>
<dt><code>close_all</code></dt>
<dd>Close all notifications.
</blockquote></figure>
</dd>
</dl>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >mouse_left_click = do_action
mouse_middle_click = close_all
mouse_right_click = close_current</code></pre>
</figure><h2 id="experimental">Experimental</h2>
<figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Experimental features that may or may not work correctly.
Do not expect them to have a consistent behaviour across releases.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >[experimental]</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Calculate the dpi to use on a per-monitor basis.</p>
<p>If this setting is enabled the Xft.dpi value will be ignored and instead
dunst will attempt to calculate an appropriate dpi value for each monitor
using the resolution and physical size. This might be useful in setups
where there are multiple screens with very different dpi values.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >per_monitor_dpi = false</code></pre>
</figure><h2 id="shortcuts">Shortcuts</h2>
<figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Shortcuts are specified as <code>[modifier+][modifier+]...key</code></p>
<p>Available modifiers are &ldquo;ctrl&rdquo;, &ldquo;mod1&rdquo; (the alt-key), &ldquo;mod2&rdquo;,
&ldquo;mod3&rdquo; and &ldquo;mod4&rdquo; (windows-key).</p>
<p>Xev might be helpful to find names for keys.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >[shortcuts]</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Close notification.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >close = ctrl&#43;space</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Close all notifications.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >close_all = ctrl&#43;shift&#43;space</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Redisplay last message(s).</p>
<p>On the US keyboard layout &ldquo;grave&rdquo; is normally above TAB and left of &ldquo;1&rdquo;.
Make sure this key actually exists on your keyboard layout,
e.g. check output of <code>xmodmap -pke</code></p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >history = ctrl&#43;grave</code></pre>
</figure><figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>Context menu.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >context = ctrl&#43;shift&#43;period</code></pre>
</figure><h2 id="low-urgency-notifications">Low Urgency Notifications</h2>
<figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    >
<p>IMPORTANT: colors have to be defined in quotation marks.
Otherwise the &ldquo;#&rdquo; and following would be interpreted as a comment.</p>
  </blockquote></figure>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >[urgency_low]
background = &#34;#2b2b2b&#34;
foreground = &#34;#ffffff&#34;
timeout = 5</code></pre>
</figure><h2 id="normal-urgency-notifications">Normal Urgency Notifications</h2>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >[urgency_normal]
background = &#34;#2b2b2b&#34;
foreground = &#34;#ffffff&#34;
timeout = 5</code></pre>
</figure><h2 id="critical-urgency-notifications">Critical Urgency Notifications</h2>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >[urgency_critical]
background = &#34;#900000&#34;
foreground = &#34;#ffffff&#34;
frame_color = &#34;#ff0000&#34;
timeout = 5</code></pre>
</figure><h2 id="everything-else">Everything else</h2>
<p>There&rsquo;s a lot.
See the EndeavourOS Qtile Community Edition <a href="https://github.com/EndeavourOS-Community-Editions/qtile/blob/main/.config/dunst/dunstrc">dunstrc</a> for the whole
thing.</p>
]]></content:encoded>
</item>
<item>
  <title>Config: My init.lua for Neovim</title>
  <link>https://randomgeekery.org/config/editor/nvim/init.lua/</link>
  <pubDate>Mon, 22 Jan 2024 14:33:49 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/editor/nvim/init.lua/</guid>
  <description>A snapshot of my Neovim config, literate programming style.
Right now, everything goes in init.lua. I may tidy that up later.
init.lua global prep Most Neovim Lua functionality is contained in the vim module. Pull some of the frequently used ones into the current namespace, to save a little typing for our fingers.
vim.cmd vim commands (eg cmd(&#39;pwd&#39;)) vim.fn vim functions (eg fn.buffer()) vim.g a table for global variables vim.opt vim options local cmd = vim.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p>A snapshot of my <a href="/card/neovim/">Neovim</a> config, literate programming style.</p>
<p>Right now, everything goes in <code>init.lua</code>. I may tidy that up later.</p>
<h2 id="initlua-global-prep"><code>init.lua</code> global prep</h2>
<p>Most Neovim Lua functionality is contained in the <code>vim</code> module. Pull some of
the frequently used ones into the current namespace, to save a little typing
for our fingers.</p>
<dl>
<dt><code>vim.cmd</code></dt>
<dd>vim commands (eg <code>cmd('pwd')</code>)</dd>
<dt><code>vim.fn</code></dt>
<dd>vim functions (eg <code>fn.buffer()</code>)</dd>
<dt><code>vim.g</code></dt>
<dd>a table for global variables</dd>
<dt><code>vim.opt</code></dt>
<dd>vim options</dd>
</dl>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">vim.cmd</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">fn</span> <span class="o">=</span> <span class="n">vim.fn</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">g</span> <span class="o">=</span> <span class="n">vim.g</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">opt</span> <span class="o">=</span> <span class="n">vim.opt</span></span></span></code></pre>
</figure><h2 id="helper-functions">Helper functions</h2>
<p>There&rsquo;s just <code>map</code> for the moment.
It creates mappings with <code>noremap</code> option enabled by default.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="kr">function</span> <span class="nf">map</span><span class="p">(</span><span class="n">mode</span><span class="p">,</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">local</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{</span><span class="n">noremap</span> <span class="o">=</span> <span class="kc">true</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">if</span> <span class="n">opts</span> <span class="kr">then</span> <span class="n">options</span> <span class="o">=</span> <span class="n">vim.tbl_extend</span><span class="p">(</span><span class="s1">&#39;force&#39;</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span> <span class="kr">end</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_set_keymap</span><span class="p">(</span><span class="n">mode</span><span class="p">,</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span></span></span></code></pre>
</figure><h2 id="bootstrap-packernvim">Bootstrap <code>packer.nvim</code></h2>
<p>Make sure the <a href="https://github.com/wbthomason/packer.nvim">Packer</a> plugin manager is instealled and ready.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">install_path</span> <span class="o">=</span> <span class="n">fn.stdpath</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">)</span><span class="o">..</span><span class="s1">&#39;/site/pack/packer/start/packer.nvim&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="n">fn.empty</span><span class="p">(</span><span class="n">fn.glob</span><span class="p">(</span><span class="n">install_path</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">  <span class="n">packer_bootstrap</span> <span class="o">=</span> <span class="n">fn.system</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;git&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;clone&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;--depth&#39;</span><span class="p">,</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;https://github.com/wbthomason/packer.nvim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">install_path</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s1">&#39;packer&#39;</span><span class="p">).</span><span class="n">startup</span><span class="p">(</span><span class="kr">function</span><span class="p">(</span><span class="n">use</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">use</span> <span class="s2">&#34;wbthomason/packer.nvim&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Specify</span> <span class="n">my</span> <span class="n">packages</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">if</span> <span class="n">packer_bootstrap</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">    <span class="n">require</span><span class="p">(</span><span class="s1">&#39;packer&#39;</span><span class="p">).</span><span class="n">sync</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span><span class="p">)</span></span></span></code></pre>
</figure><h2 id="the-packages">The Packages</h2>
<p>It&rsquo;s mostly <code>use &quot;source/repo&quot;</code>.
I&rsquo;ll pull the more interesting bits out into their own blocks.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Specify</span> <span class="n">my</span> <span class="n">packages</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;nvim-lua/popup.nvim&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;nvim-lua/plenary.nvim&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;kyazdani42/nvim-web-devicons&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;neovim/nvim-lspconfig&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;EdenEast/nightfox.nvim&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;RRethy/nvim-base16&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span> <span class="s2">&#34;catppuccin/nvim&#34;</span><span class="p">,</span> <span class="n">as</span> <span class="o">=</span> <span class="s2">&#34;catpuccin&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s1">&#39;folke/tokyonight.nvim&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;meliora-theme/neovim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">requires</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;rktjmp/lush.nvim&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s1">&#39;pineapplegiant/spaceduck&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Load</span> <span class="n">treesitter</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Load</span> <span class="n">filetype.nvim</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Load</span> <span class="n">telescope.nvim</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Load</span> <span class="n">null</span><span class="o">-</span><span class="n">ls.nvim</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Load</span> <span class="n">which</span><span class="o">-</span><span class="n">key.nvim</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Load</span> <span class="n">lualine.nvim</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Load</span> <span class="n">programming</span> <span class="n">language</span> <span class="n">support</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Load</span> <span class="n">riv.vim</span><span class="p">.</span></span></span></code></pre>
</figure><h3 id="treesitter">Treesitter</h3>
<p><a href="https://github.com/nvim-treesitter/nvim-treesitter"><code>nvim-treesitter</code></a> is an experimental binding for Neovim. Something to do with syntax highlighting? Both it and the plugins that use it change frequently. So I better follow the instructions about keeping everything up to date when I sync.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Load</span> <span class="n">treesitter</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;nvim-treesitter/nvim-treesitter&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">run</span> <span class="o">=</span> <span class="s2">&#34;:TSUpdate&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">require</span><span class="p">(</span><span class="s2">&#34;nvim-treesitter.configs&#34;</span><span class="p">).</span><span class="n">setup</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">ensure_installed</span> <span class="o">=</span> <span class="s2">&#34;all&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">highlight</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">enable</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="n">additional_vim_regex_highlighting</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">local</span> <span class="n">parser_config</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;nvim-treesitter.parsers&#34;</span><span class="p">).</span><span class="n">get_parser_configs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser_config.just</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">install_info</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;https://github.com/IndianBoy42/tree-sitter-just&#34;</span><span class="p">,</span> <span class="c1">-- local path or git repo</span>
</span></span><span class="line"><span class="cl">        <span class="n">files</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&#34;src/parser.c&#34;</span><span class="p">,</span> <span class="s2">&#34;src/scanner.cc&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="n">branch</span> <span class="o">=</span> <span class="s2">&#34;main&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="n">maintainers</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&#34;@IndianBoy42&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h2 id="filetype">filetype</h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Load</span> <span class="n">filetype.nvim</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;nathom/filetype.nvim&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">require</span><span class="p">(</span><span class="s2">&#34;filetype&#34;</span><span class="p">).</span><span class="n">setup</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">overrides</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">extensions</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">tf</span> <span class="o">=</span> <span class="s2">&#34;terraform&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">tfvars</span> <span class="o">=</span> <span class="s2">&#34;terraform&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">tfstate</span> <span class="o">=</span> <span class="s2">&#34;json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h3 id="telescope">Telescope</h3>
<p><a href="https://github.com/nvim-telescope/telescope.nvim"><code>telescope.nvim</code></a> is a ridiculously fancy fuzzy-finder.</p>
<p>Not sure if I <em>must</em> specify <code>plenary.nvim</code> as a requirement when I&rsquo;m already loading it. Better safe than sorry.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Load</span> <span class="n">telescope.nvim</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span> <span class="s2">&#34;nvim-telescope/telescope.nvim&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">requires</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span><span class="s2">&#34;nvim-lua/plenary.nvim&#34;</span><span class="p">}</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h4 id="global-key-bindings-for-telescopenvim">Global key bindings for <code>telescope.nvim</code></h4>
<p>Showing the global <code>telescope.nvim</code> key bindings here, though Yarner will be
inserting them outside all this plugin definition stuff. I haven&rsquo;t figured out
how to do global keybindings in a plugin setup quite yet.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Add</span> <span class="n">global</span> <span class="n">bindings</span> <span class="kr">for</span> <span class="n">telescope.nvim</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;leader&gt;ff&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;cmd&gt;lua require(&#39;telescope.builtin&#39;).find_files()&lt;cr&gt;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;leader&gt;fg&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;cmd&gt;lua require(&#39;telescope.builtin&#39;).live_grep()&lt;cr&gt;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;leader&gt;fb&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;cmd&gt;lua require(&#39;telescope.builtin&#39;).buffers()&lt;cr&gt;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;leader&gt;fh&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;cmd&gt;lua require(&#39;telescope.builtin&#39;).help_tags()&lt;cr&gt;&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><h3 id="null-ls">null-ls</h3>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Load</span> <span class="n">null</span><span class="o">-</span><span class="n">ls.nvim</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;jose-elias-alvarez/null-ls.nvim&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">require</span><span class="p">(</span><span class="s2">&#34;null-ls&#34;</span><span class="p">).</span><span class="n">setup</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="n">sources</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">require</span><span class="p">(</span><span class="s2">&#34;null-ls&#34;</span><span class="p">).</span><span class="n">builtins.formatting</span><span class="p">.</span><span class="n">stylua</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">require</span><span class="p">(</span><span class="s2">&#34;null-ls&#34;</span><span class="p">).</span><span class="n">builtins.code_actions</span><span class="p">.</span><span class="n">proselint</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h3 id="which-key">which-key</h3>
<p>I first bumped into the <a href="https://github.com/folke/which-key.nvim"><code>which-key</code></a> help menu in <a href="https://github.com/hlissner/doom-emacs">Doom Emacs</a>. Start a chained key binding like <code>SPC</code>, a menu pops up showing what chains are available. Indispensable there. Indispensable here. Thank goodness folks are porting so many Emacs packages to Neovim.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Load</span> <span class="n">which</span><span class="o">-</span><span class="n">key.nvim</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;folke/which-key.nvim&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">require</span><span class="p">(</span><span class="s2">&#34;which-key&#34;</span><span class="p">).</span><span class="n">setup</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h3 id="lualine">lualine</h3>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Load</span> <span class="n">lualine.nvim</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span> <span class="s1">&#39;nvim-lualine/lualine.nvim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">requires</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;kyazdani42/nvim-web-devicons&#39;</span><span class="p">,</span> <span class="n">opt</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">require</span><span class="p">(</span><span class="s1">&#39;lualine&#39;</span><span class="p">).</span><span class="n">setup</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="c1">-- options = { theme = &#34;duskfox&#34;, }</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h3 id="programming-languages">Programming Languages</h3>
<p>A couple of the tools I use regularly require some special handling.</p>
<ul>
<li><a href="https://github.com/psf/black">Black</a> adds Python code formatting</li>
<li><a href="https://github.com/LhKipp/nvim-nu">nvim-nu</a> adds support for <a href="/card/nushell/">Nushell</a> scripts</li>
<li><a href="https://github.com/habamax/vim-asciidoctor">vim-asciidoctor</a> improves support for <a href="/card/asciidoctor/">Asciidoctor</a> — with block folding</li>
<li><a href="https://github.com/vim-crystal/vim-crystal">vim-crystal</a> for <a href="/card/crystal/">Crystal</a> programming</li>
<li><a href="https://github.com/Glench/Vim-Jinja2-Syntax">Vim-Jinja2-Syntax</a> highlights the Jinja / Nunjucks / Tera family of text template languages</li>
</ul>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Load</span> <span class="n">programming</span> <span class="n">language</span> <span class="n">support</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;habamax/vim-asciidoctor&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;vim-crystal/vim-crystal&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;glench/vim-jinja2-syntax&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;LhKipp/nvim-nu&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">run</span> <span class="o">=</span> <span class="s2">&#34;:TSInstall nu&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">require</span><span class="p">(</span><span class="s2">&#34;nu&#34;</span><span class="p">).</span><span class="n">setup</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span> <span class="s2">&#34;psf/black&#34;</span><span class="p">,</span> <span class="n">cmd</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;Black&#34;</span><span class="p">}}</span></span></span></code></pre>
</figure><h3 id="rivvim">Riv.vim</h3>
<p>I bounce way too much between systems. Right now I use <a href="https://github.com/gu-fan/riv.vim">Riv</a> when in Neovim. What can I say? I like reStructuredText.</p>
<dl>
<dt><code>g:riv_file_link_style</code></dt>
<dd>use Riv&rsquo;s <code>:doc:</code> role instead of <code>[[...]]</code> for wiki links</dd>
</dl>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Load</span> <span class="n">riv.vim</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Rykka/riv.vim&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">riv_main</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">path</span> <span class="o">=</span> <span class="s2">&#34;~/Dropbox/riv/main&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">vim.g</span><span class="p">.</span><span class="n">riv_projects</span> <span class="o">=</span> <span class="p">{</span><span class="n">riv_main</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">vim.g</span><span class="p">.</span><span class="n">riv_file_link_style</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="n">vim.g</span><span class="p">.</span><span class="n">riv_highlight_code</span> <span class="o">=</span> <span class="s2">&#34;lua,python,cpp,javascript,sh,terraform|hcl&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h2 id="global-options">Global options</h2>
<aside class="info">
    <header>
      <h3>Note to self</h3>
    </header>
<p>Some of this can be handled by plugins, particularly <code>filetype.nvim</code>.</p>
</aside>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">opt.autoread</span> <span class="o">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.background</span> <span class="o">=</span> <span class="s1">&#39;dark&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.completeopt</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;menuone&#39;</span><span class="p">,</span> <span class="s1">&#39;noinsert&#39;</span><span class="p">,</span> <span class="s1">&#39;noselect&#39;</span><span class="p">}</span>  <span class="c1">-- completion options (for deoplete)</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.cursorline</span> <span class="o">=</span> <span class="kc">true</span>               <span class="c1">-- highlight current line</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.encoding</span> <span class="o">=</span> <span class="s2">&#34;utf-8&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.expandtab</span> <span class="o">=</span> <span class="kc">true</span>                <span class="c1">-- spaces instead of tabs</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.hidden</span> <span class="o">=</span> <span class="kc">true</span>                   <span class="c1">-- enable background buffers</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.ignorecase</span> <span class="o">=</span> <span class="kc">true</span>               <span class="c1">-- ignore case in search</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.joinspaces</span> <span class="o">=</span> <span class="kc">false</span>              <span class="c1">-- no double spaces with join</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.list</span> <span class="o">=</span> <span class="kc">true</span>                     <span class="c1">-- show some invisible characters</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.maxmempattern</span> <span class="o">=</span> <span class="mi">1000</span>            <span class="c1">-- for Riv</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.mouse</span> <span class="o">=</span> <span class="s2">&#34;nv&#34;</span>                    <span class="c1">-- Enable mouse in normal and visual modes</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.number</span> <span class="o">=</span> <span class="kc">true</span>                   <span class="c1">-- show line numbers</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.relativenumber</span> <span class="o">=</span> <span class="kc">true</span>           <span class="c1">-- number relative to current line</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.scrolloff</span> <span class="o">=</span> <span class="mi">4</span>                   <span class="c1">-- lines of context</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.shiftround</span> <span class="o">=</span> <span class="kc">true</span>               <span class="c1">-- round indent</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.shiftwidth</span> <span class="o">=</span> <span class="mi">2</span>                  <span class="c1">-- size of indent</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.sidescrolloff</span> <span class="o">=</span> <span class="mi">8</span>               <span class="c1">-- columns of context</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.smartcase</span> <span class="o">=</span> <span class="kc">true</span>                <span class="c1">-- do not ignore case with capitals</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.smartindent</span> <span class="o">=</span> <span class="kc">true</span>              <span class="c1">-- insert indents automatically</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.splitbelow</span> <span class="o">=</span> <span class="kc">true</span>              <span class="c1">-- put new windows below current</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.splitright</span> <span class="o">=</span> <span class="kc">true</span>               <span class="c1">-- put new vertical splits to right</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.termguicolors</span> <span class="o">=</span> <span class="kc">true</span>            <span class="c1">-- truecolor support</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.wildmode</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;list&#39;</span><span class="p">,</span> <span class="s1">&#39;longest&#39;</span><span class="p">}</span>  <span class="c1">-- command-line completion mode</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.wrap</span> <span class="o">=</span> <span class="kc">false</span>  <span class="c1">-- disable line wrap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cmd</span><span class="s">[[filetype plugin on]]</span>
</span></span><span class="line"><span class="cl"><span class="n">cmd</span><span class="s">[[autocmd FileType * setlocal formatoptions-=cro]]</span>
</span></span><span class="line"><span class="cl"><span class="n">cmd</span><span class="s">[[autocmd FocusGained * checktime]]</span>
</span></span><span class="line"><span class="cl"><span class="n">cmd</span><span class="s">[[colorscheme nightfox]]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cmd</span><span class="s">[[autocmd BufWritePre *.py execute &#39;Black&#39;]]</span>
</span></span><span class="line"><span class="cl"><span class="n">cmd</span><span class="s">[[autocmd BufEnter *.astro set ft=astro]]</span></span></span></code></pre>
</figure><h2 id="global-variables">Global variables</h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">g.mapleader</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">g.maplocalleader</span> <span class="o">=</span> <span class="s1">&#39;,&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">g.python3_host_prog</span> <span class="o">=</span> <span class="s1">&#39;~/.pyenv/versions/neovim/bin/python&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">g.markdown_fenced_languages</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;bash=sh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;python&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;lua&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">g.rst_syntax_code_list</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&#34;python&#34;</span> <span class="p">}</span></span></span></code></pre>
</figure><h2 id="diagnostics">Diagnostics</h2>
<p>Because I dislike unexpected floating text in my terminal.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">vim.diagnostic</span><span class="p">.</span><span class="n">config</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="n">virtual_text</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre>
</figure><h2 id="keybindings">Keybindings</h2>
<ul>
<li><code>&lt;bs&gt;</code> clears search highlights</li>
</ul>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;bs&gt;&#34;</span><span class="p">,</span> <span class="s2">&#34;:nohlsearch&lt;cr&gt;&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Add</span> <span class="n">global</span> <span class="n">bindings</span> <span class="kr">for</span> <span class="n">telescope.nvim</span><span class="p">.</span></span></span></code></pre>
</figure><h2 id="language-server-protocol-lsp">Language Server Protocol (LSP)</h2>
<p>For a fancy IDE-like experience when editing code.
And other structured text, if you&rsquo;re so inclined.</p>
<p>I pretty much use the standard suggested config.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">lsp_opts</span> <span class="o">=</span> <span class="p">{</span> <span class="n">noremap</span><span class="o">=</span><span class="kc">true</span><span class="p">,</span> <span class="n">silent</span><span class="o">=</span><span class="kc">true</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;e&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.diagnostic.open_float()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;[d&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.diagnostic.goto_prev()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;]d&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.diagnostic.goto_next()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;q&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.diagnostic.setloclist()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">-- Use an on_attach function to only map the following keys</span>
</span></span><span class="line"><span class="cl"><span class="c1">-- after the language server attaches to the current buffer</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">lspconfig_on_attach</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">bufnr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">-- Enable completion triggered by &lt;c-x&gt;&lt;c-o&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_option</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;omnifunc&#39;</span><span class="p">,</span> <span class="s1">&#39;v:lua.vim.lsp.omnifunc&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">-- Mappings.</span>
</span></span><span class="line"><span class="cl">  <span class="c1">-- See `:help vim.lsp.*` for documentation on any of the below functions</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;gD&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.declaration()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;gd&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.definition()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;K&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;gi&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.implementation()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;C-k&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.signature_help()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;wa&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.add_workspace_folder()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;wr&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.remove_workspace_folder()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;wl&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;D&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.type_definition()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;rn&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.rename()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;ca&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.code_action()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;gr&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.references()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;f&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.formatting()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s2">&#34;lspconfig&#34;</span><span class="p">).</span><span class="n">pyright.setup</span> <span class="p">{</span> <span class="n">on_attach</span> <span class="o">=</span> <span class="n">lspconfig_on_attach</span><span class="p">,</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s2">&#34;lspconfig&#34;</span><span class="p">).</span><span class="n">tsserver.setup</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">on_attach</span> <span class="o">=</span> <span class="n">lspconfig_on_attach</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>And that&rsquo;s it!</p>
]]></content:encoded>
</item>
</channel>
</rss>
