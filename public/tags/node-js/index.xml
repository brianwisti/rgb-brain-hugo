<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>node-jsonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/node-js/</link>
    <description>
      Recent contentinnode-js on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 16 Jan 2022 20:30:00 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/tags/node-js/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Slowly pulling in tools for site flow</title>
  <link>https://randomgeekery.org/post/2022/01/slowly-pulling-in-tools-for-site-flow/</link>
  <pubDate>Sun, 16 Jan 2022 20:30:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/01/slowly-pulling-in-tools-for-site-flow/</guid>
  <description>Made a toot with Masto. Kinda need that for content syndication.
The Mastodon Twitter Crossposter works great, but waiting for the announcement toot to show up as a tweet was a tedious manual step that I hope to discard. So I figured out how to make a tweet with twitter-api-v2.
Those are the pieces I need to get POSSE syndication working in this card/Eleventy iteration of the site.
Now I just need to staple those pieces together, grab a sharpie, and label it “workflow.</description>
   <category>post</category> 
   <category>note</category> 
   <category>node-js</category>  <category>indieweb</category>  <category>posse</category>  <category>site</category> 
  <content:encoded><![CDATA[<p>Made a <a href="https://hackers.town/@randomgeek/107630284879354154">toot</a> with <a href="https://www.npmjs.com/package/masto">Masto</a>. Kinda need that for content syndication.</p>
<p><img src="/post/2022/01/attachments/img/2022/toot.png" title="Here&#39;s my toot" alt="Here&rsquo;s my toot"/></p>
<p>The <a href="https://crossposter.masto.donte.com.br/">Mastodon Twitter Crossposter</a> works great, but waiting for the announcement toot to show up as a tweet was a tedious manual step that I hope to discard. So I figured out how to make a tweet with <a href="https://www.npmjs.com/package/twitter-api-v2">twitter-api-v2</a>.</p>
<p>Those are the pieces I need to get <a href="https://indieweb.org/POSSE">POSSE</a> syndication working in this <a href="/card/eleventy/">card/Eleventy</a> iteration of the site.</p>
<p>Now I just need to staple those pieces together, grab a sharpie, and label it &ldquo;workflow.&rdquo;</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Building my Eleventy site</title>
  <link>https://randomgeekery.org/post/2022/01/building-my-eleventy-site/</link>
  <pubDate>Mon, 03 Jan 2022 22:30:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/01/building-my-eleventy-site/</guid>
  <description>sometimes the tools break
Not a huge post. I’m using this card/Eleventy incarnation of the site as a way to learn a few card/Node.js topics, and many of those concepts are still sinking in.
So how am I building this thing? We know it’s Eleventy. But what did I find to get a decent web nerd workflow?
Let’s go down the list. You may know better choices. I won’t complain if you share them nicely.</description>
   <category>post</category> 
   <category>note</category> 
   <category>eleventy</category>  <category>node-js</category>  <category>site</category> 
  <content:encoded><![CDATA[<h2>something something "right tool for the right job"</h2><p><img src="/post/2022/01/../../../attachments/img/2022/cover-2022-01-03.jpg" alt="attachments/img/2022/cover-2022-01-03.jpg"/>
sometimes the tools break</p>
<p>Not a huge post. I&rsquo;m using this <a href="/card/eleventy/">card/Eleventy</a> incarnation of the site as a way to learn a few <a href="/card/node.js/">card/Node.js</a> topics, and many of those concepts are still sinking in.</p>
<h2 id="so-how-am-i-building-this-thing">So how am I building this thing?</h2>
<p>We know it&rsquo;s Eleventy. But what did I find to get a decent web nerd workflow?</p>
<p>Let&rsquo;s go down the list. You may know better choices. I won&rsquo;t complain if you share them nicely.</p>
<p>You may <em>not</em> know better choices. If you come wandering in from some search engine, <em>this page is not expert opinion.</em> It&rsquo;s just what I was able to find that could glue everything together long enough to publish a site.</p>
<p>So let&rsquo;s go down the list.</p>
<h3 id="yarn-to-run-everything"><code>yarn</code> to run everything</h3>
<p>I opted to drive this with <a href="https://yarnpkg.com.">Yarn</a> For my beginner brain it looks equivalent to <a href="https://docs.npmjs.com/cli/v8">npm</a> but I find Yarn&rsquo;s usage and invocation more pleasant.</p>
<h3 id="packagejson-to-tell-yarn-what-i-want-it-to-do"><code>package.json</code> to tell Yarn what I want it to do</h3>
<p>Everybody seems to treat the <a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json#scripts"><code>scripts</code></a> block of a <a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json"><code>package.json</code></a> pretty
much the same as the targets of a <code>Makefile</code> so I embraced that.</p>
<p>Here are my core scripts / tasks:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;dev&#34;</span><span class="p">:</span> <span class="s2">&#34;npm-run-all --parallel serve watch:style&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;build:dev&#34;</span><span class="p">:</span> <span class="s2">&#34;npm-run-all --serial site:img site:style site:content&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;build:prod&#34;</span><span class="p">:</span> <span class="s2">&#34;npm-run-all --serial site:img site:style site:content:prod&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;clean&#34;</span><span class="p">:</span> <span class="s2">&#34;rimraf dist&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;push&#34;</span><span class="p">:</span> <span class="s2">&#34;rsync -av dist/ vps:randomgeekery.org&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;serve&#34;</span><span class="p">:</span> <span class="s2">&#34;eleventy --serve --quiet&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;site:img&#34;</span><span class="p">:</span> <span class="s2">&#34;ts-node build_tasks/process_images.ts&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;site:content&#34;</span><span class="p">:</span> <span class="s2">&#34;eleventy --quiet&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;site:content:prod&#34;</span><span class="p">:</span> <span class="s2">&#34;INCLUDE_ANALYTICS=1 eleventy --quiet&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;site:style&#34;</span><span class="p">:</span> <span class="s2">&#34;sass ./src/assets/scss/main.scss ./dist/assets/css/main.css&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;watch:style&#34;</span><span class="p">:</span> <span class="s2">&#34;sass --watch ./src/assets/scss/main.scss ./dist/assets/css/main.css&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Build, develop, clean, upload. All the basics are there. I don&rsquo;t think <code>package.json</code> <em>really</em> has namespaces, but I use <code>:</code> to pretend.</p>
<blockquote>
<p>[!NOTE]
I have a few more entries but until I smooth them out a bit they&rsquo;ll just add noise. I left them out for now.</p>
<p><code>site:img</code> is part of that noise to be honest, but it&rsquo;s mentioned prominently in other entries. Basically I preprocess my images with <a href="https://www.11ty.dev/docs/plugins/image/">eleventy-img</a>. We&rsquo;ll talk more about that another day maybe.</p>
</blockquote>
<h3 id="ts-node-to-execute-typescript-code"><code>ts-node</code> to execute TypeScript code</h3>
<p>In the process of learning <a href="/card/typescript/">card/TypeScript</a>, and I&rsquo;m very much a &ldquo;learn by doing&rdquo; sort of person. &ldquo;Doing&rdquo; here means &ldquo;typing the code and making it run.&rdquo; I&rsquo;ll learn the compilation framework of <code>tsc</code> soon enough, but <a href="https://typestrong.org/ts-node/">ts-node</a> lets me execute my TypeScript code immediately.</p>
<p>I like that.</p>
<h3 id="sass-to-make-things-pretty--eventually"><code>sass</code> to make things pretty — eventually</h3>
<p>I&rsquo;m sure I&rsquo;ll get deeper into <a href="https://tailwindcss.com">Tailwind</a> or <a href="https://windicss.org">Windi</a> eventually, but for now it&rsquo;s still easier to write my styles in <a href="https://sass-lang.com">Sass</a>.</p>
<p>And yes I know my styles are rough right now. Decided if I let myself linger and wait for the perfect layout I&rsquo;d never push the update. But I&rsquo;ll get to it.</p>
<h3 id="npm-run-all-so-i-can-do-two-things-with-one-command"><code>npm-run-all</code> so I can do <em>two</em> things with <em>one</em> command</h3>
<p>The only thing I couldn&rsquo;t figure out how to do with <code>package.json</code> was run two tasks with a single command. That&rsquo;s apparently because it doesn&rsquo;t do that on its own. <code>package.json</code> is not a <code>Makefile</code>.</p>
<p>Have no fear. <a href="https://github.com/mysticatea/npm-run-all"><code>npm-run-all</code></a> is here. It&rsquo;s a CLI application focused on letting you run multiple <code>package.json</code> script commands, sequentially or in parallel.</p>
<h3 id="rsync-to-share-it-when-im-ready"><code>rsync</code> to share it when I&rsquo;m ready</h3>
<p>This is a static site served by <a href="https://httpd.apache.org">Apache</a>. It doesn&rsquo;t need some continuous integration / deployment pipeline. I have files. <a href="https://rsync.samba.org">rsync</a> uploads them with a quickness.</p>
<p><code>rsync</code> has been part of my toolkit for years. I&rsquo;ll replace it when I don&rsquo;t need it anymore.</p>
<h3 id="rimraf-to-clean-up-after-myself"><code>rimraf</code> to clean up after myself</h3>
<p>Everyone else is using <a href="https://github.com/isaacs/rimraf"><code>rimraf</code></a> to clean build and intermediate files. I don&rsquo;t know enough to choose any different.</p>
<h2 id="thats-all-the-important-stuff-anyways">That&rsquo;s all the important stuff anyways</h2>
<p>I wanted to go over everything, but there&rsquo;s just too much. A lot of the ideas are still cooking. Expect more on every blogger&rsquo;s favorite topic: &ldquo;how I built my blog.&rdquo;</p>
<p>I&rsquo;m having fun though!</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Wrote a Node.js version of my content format counter</title>
  <link>https://randomgeekery.org/post/2021/09/wrote-a-node-js-version-of-my-content-format-counter/</link>
  <pubDate>Sat, 04 Sep 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/09/wrote-a-node-js-version-of-my-content-format-counter/</guid>
  <description>That’s a fair number of files
I’ve been haphazardly attempting to organize my site files for a while. One thing I routinely need to know is what sort of content I’m working with.
I started with a Raku one-liner:
hugo list all \ | raku -e &#39;say bag(map({ $*SPEC.extension(split(&#34;,&#34;, $_)[0]) }, lines[1..*]))&#39; Not pretty, but quick and effective.
Bag(html(39) md(542)) Unfortunately, it didn’t cover all the content extension once I figured out that Hugo can ignore *.</description>
   <category>post</category> 
   <category>post</category> 
   <category>node-js</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>I only golfed it the tiniest bit</h2><p><img src="/post/2021/09/../../../attachments/img/2021/cover-2021-09-04.png" alt="attachments/img/2021/cover-2021-09-04.png"/>
That&rsquo;s a fair number of files</p>
<p>I&rsquo;ve been haphazardly attempting to organize my site files for a while. One thing I routinely need to know is what sort of content I&rsquo;m working with.</p>
<p>I started with a Raku <a href="/post/2020/03/listing-hugo-content-extensions-with-raku/">one-liner</a>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo list all <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> raku -e <span class="s1">&#39;say bag(map({ $*SPEC.extension(split(&#34;,&#34;, $_)[0]) }, lines[1..*]))&#39;</span>
</span></span></code></pre></div><p>Not pretty, but quick and effective.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Bag(html(39) md(542))
</span></span></code></pre></div><p>Unfortunately, it didn&rsquo;t cover all the content extension once I figured out that Hugo can ignore <code>*.txt</code> files, allowing me to try all sorts of <a href="/post/2021/08/trying-a-thing-with-neovim/">tricks</a> with content generation.</p>
<p>So I&rsquo;ve had this <a href="/card/ruby/">card/Ruby</a> code embedded in my <a href="/card/just/">justfile</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env ruby</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;tty-table&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">content_exts</span> <span class="o">=</span> <span class="sx">%w{.md .md.txt .rst .rst.txt .adoc .org}</span>
</span></span><span class="line"><span class="cl"><span class="n">ext_glob</span> <span class="o">=</span> <span class="s2">&#34;*\{</span><span class="si">#{</span><span class="n">content_exts</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">\}&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">format_glob</span> <span class="o">=</span> <span class="s2">&#34;content/**/</span><span class="si">#{</span><span class="n">ext_glob</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="n">format_glob</span>
</span></span><span class="line"><span class="cl"><span class="n">t</span> <span class="o">=</span> <span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="n">format_glob</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="no">File</span><span class="o">.</span><span class="n">file?</span> <span class="n">f</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">content_exts</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">end_with?</span> <span class="n">e</span> <span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="o">.</span><span class="n">tally</span>
</span></span><span class="line"><span class="cl"> <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="o">[</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="no">TTY</span><span class="o">::</span><span class="no">Table</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="s2">&#34;Format&#34;</span><span class="p">,</span> <span class="s2">&#34;Count&#34;</span><span class="o">]</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="ss">:unicode</span><span class="p">)</span>
</span></span></code></pre></div><p>More verbose than the Raku solution for sure, but much of that is making sure it looks nice in a <a href="https://github.com/piotrmurach/tty-table">TTY Table</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">❯ just formats
</span></span><span class="line"><span class="cl">content/**/*{.md,.md.txt,.rst,.rst.txt,.adoc,.org}
</span></span><span class="line"><span class="cl">┌────────┬─────┐
</span></span><span class="line"><span class="cl">│Format  │Count│
</span></span><span class="line"><span class="cl">├────────┼─────┤
</span></span><span class="line"><span class="cl">│.md     │590  │
</span></span><span class="line"><span class="cl">│.md.txt │22   │
</span></span><span class="line"><span class="cl">│.rst.txt│19   │
</span></span><span class="line"><span class="cl">└────────┴─────┘
</span></span></code></pre></div><p>It works! It&rsquo;s great. Nothin wrong with it whatsoever.</p>
<p>But I&rsquo;ve been looking at <a href="/card/node.js/">card/Node.js</a> recently for assorted reasons, including the possibility of porting this site to one of the many Node-based static site generators.</p>
<p>So why not try the task in Node.js?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">glob</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;glob&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">contentExts</span> <span class="o">=</span> <span class="s2">&#34;md md.txt rst rst.txt adoc adoc.txt org&#34;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">contentGlob</span> <span class="o">=</span> <span class="sb">`content/**/*.{</span><span class="si">${</span><span class="nx">contentExts</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">)</span><span class="si">}</span><span class="sb">}`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">glob</span><span class="p">(</span><span class="nx">contentGlob</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">paths</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Path.extname would be fine here if not for my BASE.FORMAT.txt habit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kd">let</span> <span class="nx">countedExts</span> <span class="o">=</span> <span class="nx">contentExts</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">extCounts</span><span class="p">,</span> <span class="nx">ext</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">extMatchCount</span> <span class="o">=</span> <span class="nx">paths</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">matchCount</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">path</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="nx">ext</span><span class="p">)</span> <span class="o">?</span> <span class="o">++</span><span class="nx">matchCount</span> <span class="o">:</span> <span class="nx">matchCount</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">extMatchCount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">extCounts</span><span class="p">[</span><span class="nx">ext</span><span class="p">]</span> <span class="o">=</span> <span class="nx">extMatchCount</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">extCounts</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span> <span class="p">{});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">table</span><span class="p">(</span><span class="nx">countedExts</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>I&rsquo;m only now attempting to use the platform with any kind of seriousness, so I apologize if there&rsquo;s anything in there that&rsquo;s not quite idiomatic.</p>
<p>I grabbed <a href="https://github.com/isaacs/node-glob">glob</a> to simplify the task of recursively drilling down into <code>content/</code>. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"><code>Array.reduce</code></a> helps me count files matching each of my content extensions, then construct an object with those tallies. Since <a href="https://nodejs.org/dist/latest-v14.x/docs/api/console.html#console_console_table_tabulardata_properties"><code>Console.table</code></a> comes standard, I didn&rsquo;t need to dig for any formatting libraries today.</p>
<p>Though I might later for a little more control over display.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">┌─────────┬────────┐
</span></span><span class="line"><span class="cl">│ (index) │ Values │
</span></span><span class="line"><span class="cl">├─────────┼────────┤
</span></span><span class="line"><span class="cl">│   md    │  590   │
</span></span><span class="line"><span class="cl">│ md.txt  │   22   │
</span></span><span class="line"><span class="cl">│ rst.txt │   19   │
</span></span><span class="line"><span class="cl">└─────────┴────────┘
</span></span></code></pre></div><p>But hey it works.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Eleventy</title>
  <link>https://randomgeekery.org/post/2019/04/eleventy/</link>
  <pubDate>Sat, 06 Apr 2019 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/04/eleventy/</guid>
  <description>&lt;p&gt;Spring has sprung, and with it comes thoughts of new tools to build a Web site. Okay no the picture has nothing to do with Web sites but isn’t it pretty?&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>node-js</category>  <category>eleventy</category>  <category>tools</category> 
  <content:encoded><![CDATA[<p>Spring has sprung, and with it comes thoughts of new tools to build a Web site. Okay no the picture has nothing to do with Web sites but isn&rsquo;t it pretty?</p>
<p><img src="/post/2019/04/../../../attachments/img/2019/cover-2019-04-06.jpg" alt="attachments/img/2019/cover-2019-04-06.jpg"/></p>
<p>I use <a href="/card/hugo/">card/Hugo</a> to build this site, and have for <a href="/post/2015/09/next-hugo/">a while</a> now. Hugo builds fast, includes loads of features, and by now has the added benefit of being familiar. It&rsquo;s still fun to see what else people use for their sites, though.</p>
<p><a href="/card/eleventy/">card/Eleventy</a> caught my eye with its claims at being a simpler static site generator. <a href="/card/node.js/">card/Node.js</a> powers Eleventy. That caught my attention because of how much I&rsquo;ve been using the platform at work recently.</p>
<p>Aided by the <a href="https://www.11ty.io/docs/">core documentation</a>, I&rsquo;ll make a single page site with a stylesheet. To my mind, that&rsquo;s the <a href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program">&ldquo;Hello World&rdquo;</a> of static site generators. It covers the three core elements: content, layouts, and including files outside of the content/layout flow (stylesheets, images, etc).</p>
<blockquote>
<p>[!NOTE] What if you just want to blog?
Use one of the <a href="https://www.11ty.io/docs/starter/">starter projects</a>, packaged with the configuration and plugins needed for blogging in Eleventy. I don&rsquo;t know enough about Eleventy or Node.js to tell you which one to use though!</p>
</blockquote>
<h2 id="starting-fresh-with-packagejson">Starting fresh with <code>package.json</code></h2>
<p>I&rsquo;ll follow the <a href="https://www.11ty.io/docs/local-installation/">suggestion</a> from docs and install Eleventy locally to the site project.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> mkdir rgb-eleventy
</span></span><span class="line"><span class="cl"><span class="gp">$</span> <span class="nb">cd</span> rgb-eleventy
</span></span><span class="line"><span class="cl"><span class="gp">$</span> npm init
</span></span><span class="line"><span class="cl"><span class="gp">$</span> npm install --save-dev @11ty/eleventy
</span></span><span class="line"><span class="cl"><span class="gp">$</span> npx eleventy
</span></span><span class="line"><span class="cl"><span class="go">Processed 0 files in 0.03 seconds
</span></span></span></code></pre></div><p>Yay, the process works! Now I need content.</p>
<h2 id="content-read-markdown-write-html">Content: Read Markdown, write HTML</h2>
<p>I can stick with familiar <a href="/card/markdown/">card/Markdown</a> content, since Eleventy supports it through <a href="https://markdown-it.github.io/">markdown-it</a>. Throw a couple sentences in <code>index.md</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="gh"># Random Geekery Blog
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>
</span></span><span class="line"><span class="cl">But in [Eleventy][].
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[Eleventy]: https://www.11ty.io/
</span></span></code></pre></div><p>And rebuild the site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ npx eleventy
</span></span><span class="line"><span class="cl">Writing _site/index.html from ./index.md.
</span></span><span class="line"><span class="cl">Processed <span class="m">1</span> file in 0.07 seconds
</span></span></code></pre></div><p>So what&rsquo;s in <code>_site/index.html</code>?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Random Geekery Blog<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>But in <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://www.11ty.io/&#34;</span><span class="p">&gt;</span>Eleventy<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>That&rsquo;s HTML, all right. But I need a full HTML page. Rather than make my content file more complex, I&rsquo;ll use a layout template.</p>
<h2 id="templates">Templates</h2>
<p>Eleventy <a href="https://www.11ty.io/docs/layouts/">layouts</a> are similar to layouts in other site generators. They provide a skeletal HTML file along with special directives. These files get combined with your content files, creating complete pages that have a consistent layout and design.</p>
<p>Rather than focus on all the templating languages Eleventy supports, I&rsquo;ll use
<a href="https://mozilla.github.io/nunjucks/">Nunjucks</a>. I don&rsquo;t want to spend time looking at all the templating languages supported by Eleventy. I&rsquo;ll just use Nunjucks since it appears frequently in the docs.</p>
<p>My <code>_includes/layout.njk</code> is pretty much your basic minimal HTML 5 skeleton.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>{{title}}<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>{{title}}<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    {{ content | safe }}
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>content</code> comes from the body of the content file, while <code>title</code> is in <code>index.md</code>&rsquo;s <a href="https://www.11ty.io/docs/data-frontmatter/">front matter</a>. That&rsquo;s also where I specify layout.</p>
<p>So yeah. I should probably add some front matter.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">layout: layout.njk
</span></span><span class="line"><span class="cl">title: Random Geekery Blog
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">But in [Eleventy][].
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[Eleventy]: https://www.11ty.io/
</span></span></code></pre></div><p>Rebuild, and now <code>_site/index.html</code> looks like a Web page.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Random Geekery Blog<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Random Geekery Blog<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>But in <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://www.11ty.io/&#34;</span><span class="p">&gt;</span>Eleventy<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><h2 id="use-pass-through-file-copy-for-static-content">Use Pass-through File Copy for static content</h2>
<p>Finally, I want to put in some CSS. I could just insert it in the template, but I prefer to keep styles in their own file.</p>
<p>Eleventy&rsquo;s default behavior is minimal. It knows content. It knows templates. Going beyond that requires special instructions. In order to add static content like stylesheets, we must <a href="https://www.11ty.io/docs/config/">configure</a> Eleventy to recognize them.</p>
<p>My <code>.eleventy.js</code> tells Eleventy that everything in the folder <code>static/css</code> gets copied into site output unmodified.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">eleventyConfig</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">eleventyConfig</span><span class="p">.</span><span class="nx">addPassthroughCopy</span><span class="p">(</span><span class="s2">&#34;static/css&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">passthroughFileCopy</span><span class="o">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
</item>
</channel>
</rss>
