<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cog-dbonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/cog-db/</link>
    <description>
      Recent contentincog-db on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Fri, 29 Jul 2022 22:50:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/cog-db/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: [2022-07-29 Fri 22:50]</title>
  <link>https://randomgeekery.org/post/2022/07/2022-07-29-fri-2250/</link>
  <pubDate>Fri, 29 Jul 2022 22:50:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/07/2022-07-29-fri-2250/</guid>
  <description>&lt;p&gt;Used &lt;a href=&#34;https://cogdb.io&#34;&gt;CogDB&lt;/a&gt; to describe a folder hierarchy. Easier than figuring out how to annotate recursive structures for [Mypy](&lt;a href=&#34;http://mypy-lang.org&#34;&gt;http://mypy-lang.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I got some weird ideas of hard vs easy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://randomgeekery.org/post/2022/07/../../../attachments/img/2022-07-29-graph.png&#34; alt=&#34;attachments/img/2022-07-29-graph.png&#34;/&gt;
No labels or code because itâ€™s work(ish)&lt;/p&gt;</description>
   <category>post</category> 
   <category>note</category> 
   <category>python</category>  <category>cog-db</category> 
  <content:encoded><![CDATA[<p>Used <a href="https://cogdb.io">CogDB</a> to describe a folder hierarchy. Easier than figuring out how to annotate recursive structures for [Mypy](<a href="http://mypy-lang.org">http://mypy-lang.org</a>.</p>
<p>I got some weird ideas of hard vs easy.</p>
<p><img src="/post/2022/07/../../../attachments/img/2022-07-29-graph.png" alt="attachments/img/2022-07-29-graph.png"/>
No labels or code because it&rsquo;s work(ish)</p>
<p>Okay <em>fine</em>. Here&rsquo;s a cleaned-up version of the code looking at my <a href="https://randomgeekery.org">main
blog</a> Markdown sources.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Set</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cog.torque</span> <span class="kn">import</span> <span class="n">Graph</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@dataclass</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Folder</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">root</span><span class="p">:</span> <span class="n">Path</span>
</span></span><span class="line"><span class="cl">    <span class="n">pattern</span><span class="p">:</span> <span class="nb">str</span>
</span></span><span class="line"><span class="cl">    <span class="n">graph</span><span class="p">:</span> <span class="n">Graph</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="n">init</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">files</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="n">init</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">graph_paths</span><span class="p">:</span> <span class="n">Set</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="n">init</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">default_factory</span><span class="o">=</span><span class="nb">set</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">__post_init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span> <span class="o">=</span> <span class="n">Graph</span><span class="p">(</span><span class="s2">&#34;files&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__load_files</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">__load_files</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">files</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pattern</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">load_path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">graph_path_for</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Path</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># some funkiness because this started on windows</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s2">&#34;/&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">path</span><span class="o">.</span><span class="n">relative_to</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">)</span><span class="o">.</span><span class="n">parts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">load_path</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">graph_path</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph_path_for</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">files</span><span class="p">[</span><span class="n">graph_path</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;FILLER&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">graph_paths</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">graph_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">place_graph_path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">place_graph_path</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">path</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">parent</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="n">parent</span>
</span></span><span class="line"><span class="cl">        <span class="n">graph_child</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph_path_for</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">graph_parent</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph_path_for</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">graph_paths</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">graph_parent</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">graph_parent</span><span class="p">,</span> <span class="s2">&#34;parent&#34;</span><span class="p">,</span> <span class="n">graph_child</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">place_graph_path</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">root</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s2">&#34;~/Sites/rgb-hugo&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">expanduser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">folder</span> <span class="o">=</span> <span class="n">Folder</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="s2">&#34;**/*.md&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">url</span> <span class="o">=</span> <span class="n">folder</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">v</span><span class="p">()</span><span class="o">.</span><span class="n">tag</span><span class="p">(</span><span class="s2">&#34;from&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">out</span><span class="p">(</span><span class="s2">&#34;parent&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">tag</span><span class="p">(</span><span class="s2">&#34;to&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">view</span><span class="p">(</span><span class="s2">&#34;parent&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">url</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">url</span><span class="p">)</span></span></span></code></pre>
</figure><p><img src="/post/2022/07/../../../attachments/img/2022-07-29-rgb-hugo.png" alt="attachments/img/2022-07-29-rgb-hugo.png"/>
that image took a lot longer to render</p>
<p>Aside from the pretty picture, the nested structure that is now a graph helps me pull some files into <a href="/card/logseq/">card/Logseq</a> for better notes.</p>
<p>ooh i could pull my site into logseq</p>
<p>Go to bed, Brian.</p>]]></content:encoded>
</item>
</channel>
</rss>
