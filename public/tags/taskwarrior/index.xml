<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>taskwarrioronRandom Geekery</title>
    <link>https://randomgeekery.org/tags/taskwarrior/</link>
    <description>
      Recent contentintaskwarrior on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 12 Jun 2022 19:05:19 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/taskwarrior/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: [2022-06-12 Sun 19:05]</title>
  <link>https://randomgeekery.org/post/2022/06/2022-06-12-sun-1905/</link>
  <pubDate>Sun, 12 Jun 2022 19:05:19 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/06/2022-06-12-sun-1905/</guid>
  <description>&lt;p&gt;I’m gonna fill this space with the contents of a tweet thread describing my adventures importing &lt;a href=&#34;https://randomgeekery.org/card/taskwarrior/&#34;&gt;card/Taskwarrior&lt;/a&gt; tasks into &lt;a href=&#34;https://randomgeekery.org/card/logseq/&#34;&gt;card/Logseq&lt;/a&gt;.&lt;/p&gt;</description>
   <category>post</category> 
   <category>note</category> 
   <category>workflow</category>  <category>logseq</category>  <category>taskwarrior</category> 
  <content:encoded><![CDATA[<p>I&rsquo;m gonna fill this space with the contents of a tweet thread describing my adventures importing <a href="/card/taskwarrior/">card/Taskwarrior</a> tasks into <a href="/card/logseq/">card/Logseq</a>.</p>
<p>Course, it started as a toot thread. But I don&rsquo;t have a shortcode handy for embedding those. You get a link:</p>
<p><a href="https://hackers.town/@randomgeek/108466853429885208">For Tooters</a></p>
<p>But I <em>do</em> have a Twitter shortcode handy, so I&rsquo;ll embed the interesting tweets.</p>
<p>{{&lt; twitter user=&ldquo;brianwisti&rdquo; id=&ldquo;1536113701132066820&rdquo; &gt;}}</p>
<p>Right, I started with Obsidian. Then I thought about how Logseq has task management features built-in. Decided to shift focus there.</p>
<p>Took me a bit to figure out how I wanted to link everything up. Ended up with a more cohesive graph &mdash; to my eyes, at least.</p>
<p>{{&lt; twitter user=&ldquo;brianwisti&rdquo; id=&ldquo;1536166882352455681&rdquo; &gt;}}</p>
<p>The secondary purpose was to get more comfortable using <a href="/card/typescript/">card/TypeScript</a> and <a href="/card/node.js/">card/Node.js</a>. I didn&rsquo;t revert to Python, Perl, or Ruby for <em>any</em> of this. Mission accomplished!</p>
<p>You want to <em>see</em> the code? Ah. Well. Maybe later. This was flailing and puttering code, not showing off code.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">task add project:Site +blog <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  write better on taskwarrior logseq import</span></span></code></pre>
</figure><p>There. Now it can haunt me for the next couple years.</p>]]></content:encoded>
</item>
<item>
  <title>Post: OrgMode-ish VimWiki</title>
  <link>https://randomgeekery.org/post/2020/07/orgmode-ish-vimwiki/</link>
  <pubDate>Fri, 03 Jul 2020 23:51:27 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/07/orgmode-ish-vimwiki/</guid>
  <description>I just wanted to see if I can something like the card/Org experience in card/Vim without vim-orgmode. I can. Sort of. Using Vimwiki with TaskWiki for Taskwarrior integration. Not appearing in this image: vim-table-mode. Appearing but not relevant to the Org-ish experiment is vim-which-key. Completely missing: any sort of Babel code evaluation/tangling.
That agenda-ish task list is real cool but needs to show more info, like tags.</description>
   <category>post</category> 
   <category>note</category> 
   <category>vim</category>  <category>taskwarrior</category>  <category>orgmode</category> 
  <content:encoded><![CDATA[<p><img src="/post/2020/07/../../../attachments/img/2020/cover-2020-07-03.png" alt="attachments/img/2020/cover-2020-07-03.png"/></p>
<p>I just wanted to see if I can something like the <a href="/card/org/">card/Org</a> experience in <a href="/card/vim/">card/Vim</a> without <a href="https://github.com/jceb/vim-orgmode">vim-orgmode</a>. I can. Sort of. Using <a href="https://vimwiki.github.io/">Vimwiki</a> with <a href="https://github.com/tbabej/taskwiki">TaskWiki</a> for Taskwarrior integration. Not appearing in this image: <a href="https://github.com/dhruvasagar/vim-table-mode">vim-table-mode</a>. Appearing but not relevant to the Org-ish experiment is <a href="https://github.com/liuchengxu/vim-which-key">vim-which-key</a>. Completely missing: any sort of <a href="https://orgmode.org/worg/org-contrib/babel/intro.html">Babel</a> code evaluation/tangling.</p>
<p>That agenda-ish task list is <em>real</em> cool but needs to show more info, like tags.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Taskwarrior Custom Reports</title>
  <link>https://randomgeekery.org/post/2020/04/taskwarrior-custom-reports/</link>
  <pubDate>Thu, 30 Apr 2020 01:02:43 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/04/taskwarrior-custom-reports/</guid>
  <description>output of my custom task top report
It happened again. I have a couple dozen great ideas for the blog. Loads of other things I need to get at as well. So yeah. I got myself a little overwhelmed, and I need to stop and get a solid idea of the top tasks: the ones I want to be working on now or soon.
I’ve been dutifully adding everything to Taskwarrior, assigning priorities as I go.</description>
   <category>post</category> 
   <category>post</category> 
   <category>taskwarrior</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>I made a priority task to cut down on the priority tasks, and here we are
</h2><p><img src="/post/2020/04/../../../attachments/img/2020/cover-2020-04-30.png" alt="attachments/img/2020/cover-2020-04-30.png"/>
output of my custom <code>task top</code> report</p>
<p>It happened again. I have a couple dozen great ideas for the blog. Loads of other things I need to get at as well. So yeah. I got myself a little overwhelmed, and I need to stop and get a solid idea of the top tasks: the ones I want to be working on now or soon.</p>
<p>I’ve been dutifully adding everything to Taskwarrior, assigning
<a href="/post/2017/12/taskwarrior-priorities/">priorities</a> as I go.</p>
<p>In case you forgot, or haven’t been following from the <a href="/post/2017/12/taskwarrior/">beginning</a>, I use <a href="/card/taskwarrior/">card/Taskwarrior</a>’s <code>Priority</code> field to show how soon I want to work on a task. <code>Priority:M</code>? I want to work on it soon. <code>Priority:H</code>? Either I am working on it right now or I really want to be.</p>
<blockquote>
<p>[!NOTE] Yeah I know
Taskwarrior lets you assign <a href="/post/2018/01/taskwarrior-due-dates/">due dates</a> and <a href="/post/2018/02/setting-task-dependencies-in-taskwarrior/">dependencies</a>. Tasks that are due or that block something else get higher <code>Urgency</code>, and bubble to the top of reports. For some folks, that works great.</p>
<p>For me? They mostly lead to heartbreak and self-recrimination. I refer you to these words of wisdom from a greater mind:</p>
<blockquote>
<p>I love deadlines. I love the whooshing noise they make as they go by.</p>
<p>— Douglas Adams</p>
</blockquote>
<p>I get more done quicker by flagging a few tasks as important, a few more tasks as less important, and the rest as &ldquo;whatever.&rdquo;</p>
<p>I still use [[post/2018/12/active-tasks-in-taskwarrior|<code>start</code>]] to remember what I’m doing right now though. I’m not completely weird.</p>
</blockquote>
<p>Time for me to figure out <code>or</code> in Taskwarrior.</p>
<h2 id="filtering-with-or">Filtering with <code>or</code></h2>
<p>Filters already have an implied <code>and</code>. It looks like this.</p>
<p>How many active tasks do I have?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task &#43;PENDING count
198</code></pre>
</figure><p>How many active tasks do I want to work on soon?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task &#43;PENDING priority:M count
28</code></pre>
</figure><p>That’s filtering tasks to those for which <code>+PENDING</code> <strong>and</strong> <code>priority:M</code> are true.</p>
<p>How many active tasks do I want to be working on now?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task &#43;PENDING priority:H count
6</code></pre>
</figure><p>That’s a bit much. It should be more like four or five.</p>
<p>How many active tasks do I want to work on now or soon? That is, which tasks are <code>+PENDING</code> and have either <code>priority:M</code> or <code>priority:H</code>?</p>
<p>We can use <code>or</code> to join two filters. If either of them is true for the task, that task is included. Use parentheses to build more complex filters.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task &#43;PENDING (priority:H or priority:M) count
zsh: unknown file attribute: i</code></pre>
</figure><p>Tada — oops. Hang on. This stuff goes through the shell before it reaches Taskwarrior. Let’s put the filter in a string.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task &#39;&#43;PENDING (priority:H or priority:M)&#39; count
34</code></pre>
</figure><p>Tada!</p>
<p>Okay, it works, but I just know there will be more typos using this filter from memory. How can I avoid typing it in every time?</p>
<h2 id="use-a-context">Use a context</h2>
<p>I could add that priority filter to my &ldquo;focused&rdquo; <a href="/post/2018/02/taskwarrior-contexts/">context</a>, used when I need to ignore distracting ideas.</p>
<p><strong><code>~/.taskrc</code></strong></p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >context.focused=-idea -shelved (priority:H or priority:M)</code></pre>
</figure><p>Now <em>every</em> report skips low priority tasks.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task context focused
Context &#39;focused&#39; set. Use &#39;task context none&#39; to remove.
$ task &#43;PENDING count
34</code></pre>
</figure><p>This is great, but I want to know my top tasks even when I’m not in focused context.</p>
<p>Plus it’s easy to forget which context you’re in. I once spent 15 minutes trying to find a <code>+work</code> task before remembering I was still in <code>offwork</code> context. Which reminds me — </p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task context blog</code></pre>
</figure><h2 id="use-a-shell-alias">Use a shell alias</h2>
<p>Part of Taskwarrior’s charm is the fact that we use <code>task</code> from the command line. I could take advantage of that with a shell alias for <code>task</code> using the preface filter.</p>
<p><strong><code>~/.aliases</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">ttop</span><span class="o">=</span><span class="s1">&#39;task +PENDING &#34;(priority:H or priority:M)&#34;&#39;</span></span></span></code></pre>
</figure><p>This gives me sort of an on-the-fly context.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ttop count
34</code></pre>
</figure><p>I could use <code>ttop</code> with any Taskwarrior command, so <code>ttop next</code> would be a fine way to look at my important tasks.</p>
<p>But I’d kind of like to have a custom report for reviewing tasks I’ve set as important. Something with a little more information than <code>task minimal</code> but a bit less than <code>task next</code>.</p>
<h2 id="use-a-custom-report">Use a custom report</h2>
<p>Might be easier to show than tell. For more of a &ldquo;tell&rdquo; approach, check the &ldquo;REPORTS&rdquo; section of <code>man taskrc</code>. Here’s my custom &ldquo;top&rdquo; report, loosely based on Taskwarrior’s <code>minimal</code> report.</p>
<p><strong><code>~/.taskrc</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl"># Almost-minimal view of tasks I want to work on most
</span></span><span class="line"><span class="cl">report.top.columns=id,priority,project,tags,description.count 
</span></span><span class="line"><span class="cl">report.top.description=&#39;Minimal details of tasks&#39;
</span></span><span class="line"><span class="cl">report.top.filter=status:pending (priority:H or priority:M)
</span></span><span class="line"><span class="cl">report.top.labels=ID,Pri,Project,Tags,Description
</span></span><span class="line"><span class="cl">report.top.sort=priority-/,project-,description+ </span></span></code></pre>
</figure><ul>
<li>
<p><code>description.count</code> column is used for the description text and the number of annotations for the task.</p>
</li>
<li>
<p><code>sort</code> specifies columns to sort by, in descending or ascending order. <code>priority-/</code> means “descending, dividing each block of priorities with a  blank row.”</p>
</li>
</ul>
<p>And here’s what my <code>top</code> report looks like.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task top
ID  Pri Project    Tags              Description
 28 H   Site       blog taskwarrior  custom reports [1]
194 H   Site       blog              describe workflow
193 H   Site       ops               use content UUID in RSS feed
192 H   Site       blog              walk through setting up webmention.io and bridgy
184 H   Make.yarn  knitting personal hemmed edge hat for diedre
185 H              ops               persist xrandr fix

170 M   VimWiki    ops               back up current wiki pages
 76 M   Site.Notes site              note pics do not need zoom link
 70 M   Site       ops               Evaluate new permalink templates
188 M   Site       ops               blogroll of indieweb folks I mentioned
114 M   Site       blog ops          clean up hard drive
198 M   Site       layout            consolidate content format
148 M   Site       ops               cron job to fetch site logs
181 M   Site       learn ops         pamac for manjaro
191 M   Site       ops               permanent local server for site
196 M   Site       blog ops          sending webmentions
 20 M   Site       layout            store link on every page
167 M   Site       ops               task to list posts via `hugo list`
147 M   Site       blog taskwarrior  taskwarrior aliases
143 M   Site       blog              testing a static website
146 M   Site       blog              update taskwarrior notes script post to show usage
197 M   OrgConfig  ops               add awesomewm settings
 30 M   Artbiz     research          coloring book options
 39 M   Artbiz     art inventory     redo Voodoo Vince for dbh
 46 M   Artbiz     art learn         udemy affinity designer course [1]
 99 M              dev readlist      Art of PostgreSQL
186 M              emacs ops         Try telega for emacs
178 M              ops               add windows option to manjaro boot
179 M              ops               folding at home fah-config
176 M              ops               get task count in status
187 M              ops               get wsl xorg emacs autostart in windows
 50 M              javascript learn  node-tap Node TAP testing library
145 M              ops               refactor sync cronjob to script
 16 M              tools             try out newsboat news reader
34 tasks
Filter: ( status = pending and ( priority = H or priority = M ) )</code></pre>
</figure><p>I can apply additional filters just like with any other report.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$  rgb-hugo (master) task project:OrgConfig top
ID  Pri Project   Tags Description
197 M   OrgConfig ops  add awesomewm settings
1 task
Filter: ( status = pending and ( priority = H or priority = M ) ) and ( project = OrgConfig )</code></pre>
</figure><p>So that’s pretty handy. But clearly I need to clean this up a bit. Some of those aren’t really things I want to work on soon. But at least now I have one less <code>priority:H</code> task.</p>
<p>You can see Taskwarrior’s settings for the <code>minimal</code> report, or any other, with <code>show report.NAME</code>:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task show report.minimal

Config Variable            Value
report.minimal.columns     id,project,tags.count,description.count
report.minimal.description Minimal details of tasks
report.minimal.filter      status:pending or status:waiting
report.minimal.labels      ID,Project,Tags,Description
report.minimal.sort        project&#43;/,description&#43;</code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Post: Taskwarrior Sync</title>
  <link>https://randomgeekery.org/post/2020/01/taskwarrior-sync/</link>
  <pubDate>Sun, 26 Jan 2020 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/01/taskwarrior-sync/</guid>
  <description>inthe.AM is pretty, that’s for sure.
2024-01-14
This post no longer works as-is. Freecinc and InThe.AM have both shut down. Their efforts all these years have been appreciated!
The problem You’ve been doing great with your Taskwarrior tasks. You tag them. You collect them into projects. You set priorities and due dates. Maybe you even track blockers and active tasks.
Everything’s great until the day you need to get at your tasks on a different machine: laptop, work computer, whatever.</description>
   <category>post</category> 
   <category>post</category> 
   <category>taskwarrior</category>  <category>tools</category> 
  <content:encoded><![CDATA[<p><img src="/post/2020/01/../../../attachments/img/2020/cover-2020-01-26.png" alt="attachments/img/2020/cover-2020-01-26.png"/>
inthe.AM is pretty, that&rsquo;s for sure.</p>
<blockquote>
<p><strong>2024-01-14</strong></p>
<p>This post no longer works as-is. Freecinc and InThe.AM have both shut down. Their efforts all these years have been appreciated!</p>
</blockquote>
<h2 id="the-problem">The problem</h2>
<p>You’ve been doing great with your <a href="/card/taskwarrior/">Taskwarrior</a> tasks. You tag them. You collect them into projects. You set priorities and due dates. Maybe you even track blockers and active tasks.</p>
<p>Everything’s great until the day you need to get at your tasks on a different machine: laptop, work computer, whatever.</p>
<p>How do you get at your carefully maintained task list from another machine?</p>
<blockquote>
<p>[!NOTE] Why not just use your phone?
Well, the mobile Taskwarrior experience is not great. There are a couple Android apps, but they lack the polish of other mobile task managers. So far I haven’t seen anything for iOS except a couple seemingly abandoned projects. You <em>could</em> use the mobile web interface for <code>inthe.AM</code>. Some folks type in <code>task</code> commands through a mobile terminal emulator like <a href="https://termux.com/">Termux</a>.</p>
<p>Me? Mostly I take notes when out and about. Sometimes those notes become tasks when I’m in front of a computer.</p>
</blockquote>
<h2 id="a-solution-taskservers">A solution: taskservers</h2>
<p>Technically, you could keep your task files on a shared folder like <code>Sync/</code>, <code>Dropbox/</code>. I do not recommend it. Eventually your task management gets ahead of folder synchronization. Now you’re sorting out file conflicts.</p>
<p>Taskwarrior provides a better solution with <a href="https://taskwarrior.org/docs/taskserver/why.html">taskservers</a>. Taskservers manage the details of accessing the task list. They help you avoid file conflicts, and — even better — give you a backup of your task history.</p>
<h3 id="run-your-own-task-server">Run your own task server</h3>
<p>I’ve done this. It’s fiddly. Not impossible. Just fiddly. Anyone who wants to host their own taskserver should just play along with <a href="https://gitpitch.com/GothenburgBitFactory/taskserver-setup#/">this slide deck</a>. It provides explicit and careful instructions for setup.</p>
<p>I also suggest you put the taskserver on a host or VPS — something you can reach from outside your home. I put mine on a Raspberry Pi at home, but never exposed it to the outside world. Made it difficult to stay properly synchronized.</p>
<h3 id="hosted-taskservers">Hosted taskservers</h3>
<p>They did the hard work of setting up a taskserver, and made it easy for you to connect. Hosted taskservers are easy to reach anywhere you have Internet access.</p>
<p>On the other hand, a copy of your data is on someone else’s server. If you want total control, you may want to go ahead and run your own.</p>
<p>I’m comfortable with hosted services, so let’s look at a couple I’ve tried.</p>
<h4 id="freecinc">Freecinc</h4>
<p><img src="/post/2020/01/attachments/img/2020/freecinc.png" alt="freecinc.com"/></p>
<p>Freecinc seems to have one goal: make it easy to connect to a taskserver. There are no frills or extra features. It only serves tasks. But it does that well, with clear and friendly instructions on setting yourself up. Depending on how long it takes you to click, copy, and paste, you could be synchronizing tasks in under a minute. Freecinc is also open source. <a href="https://github.com/freecinc/freecinc-web">freecinc-web</a> is available under the <a href="https://github.com/freecinc/freecinc-web/blob/master/LICENSE">MIT License</a>. Clone the repo and deploy your own instance!</p>
<p>Though yeah — that’s a bit more involved than just connecting to theirs.</p>
<h4 id="intheam">inthe.AM</h4>
<p><img src="/post/2020/01/attachments/img/2020/inthe-am.png" alt="inthe.AM Web interface"/></p>
<p><code>inthe.AM</code> provides features, that’s for sure. You get task synchronization. Like Freecinc, it provides a hosted taskserver and makes the <a href="https://github.com/coddingtonbear/inthe.am">source code</a> available, using GNU’s <a href="https://github.com/coddingtonbear/inthe.am/blob/development/LICENSE">AGPL license</a>. You get a decent — if occasionally sluggish — Web interface. You get <a href="https://trello.com/">Trello</a> integration. You get <a href="https://github.com/coddingtonbear/taskwarrior-inthe.am">taskwarrior-inthe.am</a>, a helpful command line setup tool.</p>
<p><img src="/post/2020/01/attachments/img/2020/inthe-am-trello.png" alt="Trello showing my active tasks"/></p>
<p>This is fantastic if you use those features. I have not. For my usage style, Freecinc and inthe.AM are pretty much the same.</p>
<h2 id="using-task-sync">Using <code>task sync</code></h2>
<p>Since I’m not really using inthe.AM’s features, let’s set myself up on Freecinc. I click the big friendly &ldquo;Generate My Keys&rdquo; link, and the site tells me what to do.</p>
<p><img src="/post/2020/01/attachments/img/2020/freecinc-setup.png" alt="The first couple steps of Freecinc setup"/></p>
<p>There are six total steps, consistently almost entirely of downloading some small files and copying and pasting some commands. Once the <code>.pem</code> files are safe and I set the <code>taskd</code> settings, I initialize synchronization.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task sync init
Please confirm that you wish to upload all your pending tasks to the Taskserver (yes/no) yes
Syncing with freecinc.com:53589

Sync successful.  1516 changes uploaded.</code></pre>
</figure><p>Follow their instructions to set up any other machines you need connected to the Freecinc taskserver.</p>
<p>Once you go through all that work to set things up, how hard is it to <em>use</em> the <a href="https://taskwarrior.org/docs/commands/synchronize.html">synchronize</a> command?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task log &#43;taskwarrior set up freecinc
Logged task f053e7ab-1332-4131-8ceb-c2e121e8b00e.
$ task sync
Syncing with freecinc.com:53589

Sync successful.  1 changes uploaded.</code></pre>
</figure><p>That’s it. Run <code>task sync</code> occasionally and you’re golden.</p>
<h2 id="nits-and-tips">Nits and tips</h2>
<p>Task servers dramatically improve life with Taskwarrior. Some little annoyances become more apparent though. Let’s deal with those now.</p>
<h3 id="cutting-down-on-the-verbosity">Cutting down on the verbosity</h3>
<p>You get tired of this pretty quick:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >226 tasks, truncated to 61 lines
There are local changes.  Sync required.</code></pre>
</figure><p>The second you need to make a change, you get that message about local changes. Configure verbosity in your <code>.taskrc</code> if you don’t care about that particular update.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="na">verbose</span><span class="o">=</span><span class="s">blank,header,footnote,label,new-id,affected,edit,special,project,filter,unwait</span></span></span></code></pre>
</figure><p>This removes messages about sync while leaving everything else. If you want more quiet, try <code>verbose=off</code> or even <code>verbose=nothing</code>.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>See <code>man taskrc</code> for more details about Taskwarrior configuration.</p>
</blockquote>
<h3 id="sync-automatically-with-a-cron-job">Sync automatically with a cron job</h3>
<p>The hardest part of synchronization is remembering to do it. Let’s set up a <a href="https://opensource.com/article/17/11/how-use-cron-linux">cron</a> job so I don’t have to remember.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ crontab -e</code></pre>
</figure><p>Hourly should suffice. The <a href="https://crontab.guru/#0_*">https://crontab.guru/#0_*</a><em>*</em>*_*[crontab guru] says &ldquo;hourly&rdquo; would look like this:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >0 * * * * /usr/bin/task sync</code></pre>
</figure><p>And that works. But I haven’t gotten around to setting up mail on that machine, so <code>cron</code> discards the output. I have no idea what the sync result was.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >0 * * * * { printf &#34;\%s: &#34; &#34;$(date &#34;&#43;\%F \%T&#34;)&#34;; /usr/bin/task sync } &gt;&gt; /home/randomgeek/logs/task-sync.log 2&gt;&amp;1</code></pre>
</figure><p>This appends a timestamp and the result of <code>task sync</code> — including standard and error ouputs — to a log file.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >2020-01-26 16:00:00: Sync successful.  1 changes uploaded.</code></pre>
</figure><p><em>There</em> we go. I better turn this into a script before I get any more elaborate with it though. Except I have to go take care of something else.</p>
<p>No problem, I’ll make a task.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task add &#43;ops &#43;taskwarrior priority:M refactor sync cronjob to script</code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Post: A Quick Notes Script for Taskwarrior</title>
  <link>https://randomgeekery.org/post/2020/01/a-quick-notes-script-for-taskwarrior/</link>
  <pubDate>Sun, 12 Jan 2020 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/01/a-quick-notes-script-for-taskwarrior/</guid>
  <description>I need more than annotations for my Taskwarrior tasks. Let’s write some card/Python!
People with blogs need to keep in mind that most people do not know how blogs work. A little bit of explanatory text can go a long way towards making your site easier to follow.
I plan to work on that today, but — well — there’s another problem too.
What’s the problem? What tasks am I working on right now?</description>
   <category>post</category> 
   <category>post</category> 
   <category>taskwarrior</category>  <category>python</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p><img src="/post/2020/01/../../../attachments/img/2020/cover-2020-01-12.png" alt="attachments/img/2020/cover-2020-01-12.png"/></p>
<p>I need more than annotations for my <a href="/card/taskwarrior/">Taskwarrior</a> tasks. Let’s write some <a href="/card/python/">card/Python</a>!</p>
<p>People with blogs need to keep in mind that most people do not know how  blogs work. A little bit of explanatory text can go a long way towards making your site easier to follow.</p>
<p>I plan to work on that today, but — well — there’s another problem too.</p>
<h2 id="whats-the-problem">What’s the problem?</h2>
<p>What tasks am I working on right now? Let’s get the <a href="/post/2018/12/active-tasks-in-taskwarrior/">active</a> task report.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task active

ID  Started    Active Age P Project Tags        Due        Description
232 2020-01-12 2min   2h  H         taskwarrior 2020-01-12 quick and easy notes script
220 2020-01-12 51min  2w    Site    content     2020-01-11 describe RSS and link to
                                                           tools in Follow page
                                                             2019-12-28 reference
                                                           https://twitter.com/brianwi-
                                                           sti/status/1210771041783447-
                                                           553</code></pre>
</figure><p>This is a mess. My task descriptions can get verbose. That makes my reports look busy. Annotations give additional information, but at the cost of cluttering the report even more.</p>
<p>The <a href="/post/2019/09/taskwarrior-editing-refinements/">edit</a> view isn’t any better, really.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task 220 edit</code></pre>
</figure><p><code>task edit</code> gives me something like this:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      ># Annotations look like this: &lt;date&gt; -- &lt;text&gt; and there can be any number of them.
# The &#39; -- &#39; separator between the date and text field should not be removed.
# A &#34;blank slot&#34; for adding an annotation follows for your convenience.
  Annotation:        2019-12-28 14:33:53 -- reference https:\/\/twitter.com\/brianwisti\/status\/1210771041783447553
  Annotation:        2020-01-12 13:43:40 --</code></pre>
</figure><p>I want some way of adding and reviewing information about a particular task without cluttering my Taskwarrior reports.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Honestly <a href="/card/org/">card/Org</a> provides all this functionality and more. Someday I may even get comfortable enough to prefer it. But right now? Taskwarrior and shell tools are easier for me.</p>
</blockquote>
<h2 id="what-i-need-today">What I need today</h2>
<p>I need the ability to open a text file with notes for a specific task. I shouldn’t have to find or name the file myself. If the file doesn’t exist yet, it should be created.</p>
<h2 id="what-i-dont-need-today">What I don’t need today</h2>
<p>Things I’m sure will be useful at some point, but I don’t need <em>today</em>.</p>
<ul>
<li>Listing notes</li>
<li>Adding metadata like task description or tags before editing</li>
<li>Deleting notes</li>
<li>Adding one note to multiple tasks</li>
<li>Deep Taskwarrior integration</li>
<li>Configuration. For now, everything’s hard-coded in the script.
Except <code>$EDITOR</code>.</li>
</ul>
<h2 id="lets-get-to-it">Let’s get to it.</h2>
<p>I’m not good at Python for quick glue tasks. Maybe <a href="/card/perl/">card/Perl</a>? I need to learn how to do this in Python at some point. Let’s try anyways.</p>
<p>That will be today’s learning experience.</p>
<h3 id="writing-notes">Writing notes</h3>
<blockquote>
<p>Given a task, open <code>$EDITOR</code> in a Markdown file for that task. The task can be indicated via ID, UUID, or a filter that returns a single task</p>
</blockquote>
<p>How can we identify tasks consistently? IDs change as we complete tasks. Task descriptions change as we modify them. Fortunately, Every task has a <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">UUID</a> — a Universally Unique Identifier.</p>
<p>The <a href="https://taskwarrior.org/docs/commands/_get.html"><code>_get</code></a> command gives us access to specific attributes of a task.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task _get 220.uuid
7887cab7-5ec4-4e8f-a257-edbd28f61301</code></pre>
</figure><p>But how do I get this information <em>from Python</em>?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;Manage Taskwarrior notes&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">task_id</span> <span class="o">=</span> <span class="mi">220</span>
</span></span><span class="line"><span class="cl"><span class="n">task_uuid</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;task _get </span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2">.uuid&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Task </span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2"> has UUID </span><span class="si">{</span><span class="n">task_uuid</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task-note.py
Task 220 has UUID 7887cab7-5ec4-4e8f-a257-edbd28f61301</code></pre>
</figure><p>That wasn’t so hard. I got lost in <a href="https://docs.python.org/3/library/subprocess.html">subprocess</a> last time I tried anything interesting with Python and processes. Turns out <a href="https://docs.python.org/3/library/os.html#os.popen">os.popen</a> provides a relatively straightforward approach.</p>
<p>Where will I put my notes? Maybe <code>~/task-notes</code>. No, <code>~/Dropbox/task-notes</code>. That way everything is synchronized across my machines.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">notes_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">expanduser</span><span class="p">(</span><span class="s2">&#34;~/Dropbox/task-notes&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">notes_dir</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Saving notes to </span><span class="si">{</span><span class="n">notes_dir</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><p>Later I might want to be more careful with directory creation. But today’s guideline is &ldquo;quick and dirty.&rdquo; <a href="https://docs.python.org/3/library/os.html#os.makedirs">os.makedirs</a> will recursively create <code>notes_dir</code> if needed. Since I specified <code>exist_ok=True</code>, we silently move on if <code>notes_dir</code> already exists.</p>
<p>I want the file to be named something like <code>UUID.md</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">notes_basename</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">task_uuid</span><span class="si">}</span><span class="s2">.md&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">notes_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">notes_dir</span><span class="p">,</span> <span class="n">notes_basename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">notes_file</span><span class="p">)</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task-note.py
Task 220 has UUID 7887cab7-5ec4-4e8f-a257-edbd28f61301
Saving notes to /home/randomgeek/Dropbox/task-notes
/home/randomgeek/Dropbox/task-notes/7887cab7-5ec4-4e8f-a257-edbd28f61301.md</code></pre>
</figure><figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">editor</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">&#34;EDITOR&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">os</span><span class="o">.</span><span class="n">execlp</span><span class="p">(</span><span class="n">editor</span><span class="p">,</span> <span class="n">editor</span><span class="p">,</span> <span class="n">notes_file</span><span class="p">)</span></span></span></code></pre>
</figure><p>The various <code>exec*</code> functions of module <a href="https://docs.python.org/3/library/os.html">os</a> replace the Python process with a new command. The suffixes indicate additional details.</p>
<ul>
<li>The <code>l</code> — that’s a lowercase <code>L</code> — simplifies the case when you know exactly what arguments to use. All I needed was <code>$EDITOR &lt;file&gt;</code>. <code>execl*</code> functions let me specify program arguments as arguments to the function itself.</li>
<li>The <code>p</code> indicates that I expect <code>$EDITOR</code> to be somewhere in the current <code>$PATH</code>.</li>
</ul>
<p>So <a href="https://docs.python.org/3/library/os.html#os.execlp">os.execlp</a> tells Python I’m running <code>editor</code>. I expect to find <code>editor</code> in my environment path. The rest of the function arguments will be handed to <code>editor</code>.</p>
<p><img src="/post/2020/01/attachments/img/2020/task-notes-view.png" alt="Neovim launched by Python"/></p>
<p>Sweet. It worked!</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Specifying the program twice confused me at first. Things clicked for me when I tried the <code>v</code> variant:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">os</span><span class="o">.</span><span class="n">execvp</span><span class="p">(</span><span class="n">editor</span><span class="p">,</span> <span class="p">[</span><span class="n">editor</span><span class="p">,</span> <span class="n">notes_file</span><span class="p">])</span></span></span></code></pre>
</figure><p>With v, you construct your program arguments with a list or tuple. Now It looks we’re constructing the <code>ARGV</code> list — or <a href="https://docs.python.org/3/library/sys.html#sys.argv">sys.argv</a> in Python. The program itself usually gets the first slot in <code>ARGV</code>. For example, here’s sys.argv for my <code>task-note.py</code> invocation:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[</span><span class="s1">&#39;/home/randomgeek/bin/task-note.py&#39;</span><span class="p">,</span> <span class="s1">&#39;220&#39;</span><span class="p">]</span></span></span></code></pre>
</figure><p>Most user-facing programs hide that detail from you — even Vim.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="p">:</span><span class="nx">echo</span> <span class="nx">argv</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">[<span class="s1">&#39;/home/randomgeek/Dropbox/task-notes/7887cab7-5ec4-4e8f-a257-edbd28f61301.md&#39;</span>]</span></span></code></pre>
</figure><p>I <em>think</em> that’s what’s going on anyways.</p>
<p>I won’t lie. This <code>exec*</code> stuff is easier to say in Perl:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="nb">exec</span><span class="p">(</span><span class="nv">$ENV</span><span class="p">{</span><span class="n">EDITOR</span><span class="p">},</span> <span class="nv">$notes_file</span><span class="p">);</span></span></span></code></pre>
</figure></blockquote>
<h2 id="generalize-for-any-task">Generalize for any task</h2>
<p>I learned what I needed to learn. Next is cleaning up and accepting command line arguments.</p>
<p><a href="https://docs.python.org/3/library/argparse.html">argparse</a> will take care of the command line arguments. Might as well replace <code>print</code> with <a href="https://docs.python.org/3/library/logging.html">logging</a> calls. You know, just a little bit of tidying.</p>
<p><strong><code>task-note.py</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;Manage Taskwarrior notes&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">argparse</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">NOTES_DIR</span> <span class="o">=</span> <span class="s2">&#34;~/Dropbox/task-notes&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">EDITOR</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s2">&#34;EDITOR&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">write_note</span><span class="p">(</span><span class="n">task_id</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Open `$EDITOR` to take notes about task with ID `task_id`.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">task_uuid</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;task _get </span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2">.uuid&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">task_uuid</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2"> has no UUID!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">logging</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Task </span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2"> has UUID </span><span class="si">{</span><span class="n">task_uuid</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">notes_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">expanduser</span><span class="p">(</span><span class="n">NOTES_DIR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">notes_dir</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">notes_basename</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">task_uuid</span><span class="si">}</span><span class="s2">.md&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">notes_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">notes_dir</span><span class="p">,</span> <span class="n">notes_basename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Notes file is </span><span class="si">{</span><span class="n">notes_file</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">notes_file</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;Adding description to empty notes file&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">task_description</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;task _get </span><span class="si">{</span><span class="n">task_id</span><span class="si">}</span><span class="s2">.description&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">notes_file</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;description: </span><span class="si">{</span><span class="n">task_description</span><span class="si">}</span><span class="se">\n\n</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">f</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">execlp</span><span class="p">(</span><span class="n">EDITOR</span><span class="p">,</span> <span class="n">EDITOR</span><span class="p">,</span> <span class="n">notes_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s2">&#34;Write Taskwarrior notes&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;task_id&#39;</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s1">&#39;ID&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s2">&#34;ID of the task to note&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">write_note</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">task_id</span><span class="p">)</span></span></span></code></pre>
</figure><p>I know. I didn’t want task metadata yet. It quickly became obvious that I would forget what task is involved unless I put <em>something</em>. So now the script adds the task description to a header line the first time a note is opened.</p>
<blockquote>
<p><strong>WARNING</strong></p>
<p>Remember to <code>flush</code> your filehandles before handing control over to external processes like <a href="/card/vim/">card/Vim</a>. Python takes care of files and buffers on its own schedule. Launching an external process interrupts Python’s schedule. So let Python know!</p>
</blockquote>
<p>Also threw in some error checking after the first time I tried writing notes for a nonexistent task.</p>
<h2 id="whats-next">What’s Next?</h2>
<ul>
<li>Keeping that description header current</li>
<li>Adding other task data?</li>
<li>Maybe a <a href="https://taskwarrior.org/docs/udas.html">UDA</a> to integrate this more with Taskwarrior itself</li>
</ul>
<p>But what’s really next is finishing that other task. Should be easier now that I have my notes.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: On moving your life forward</title>
  <link>https://randomgeekery.org/post/2019/10/on-moving-your-life-forward/</link>
  <pubDate>Wed, 30 Oct 2019 17:49:52 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/10/on-moving-your-life-forward/</guid>
  <description>From Art of Manliness: Stop Living Life “Paycheck to Paycheck”:
When you metaphorically live life “paycheck to paycheck,” you do just enough each week to maintain your current existence. You take care of the urgent and outstanding tasks the neglect of which would disrupt the status quo, but you never take action on things that would improve and progress your situation.
Even with Taskwarrior to help me tackle my TODO list, I feel the pain of living paycheck to paycheck&#34;:</description>
   <category>post</category> 
   <category>note</category> 
   <category>life</category>  <category>tasks</category>  <category>taskwarrior</category>  <category>so-much-time-and-so-little-to-do</category>  <category>strike-that</category>  <category>reverse-it</category> 
  <content:encoded><![CDATA[<p>From <a href="https://www.artofmanliness.com/articles/sunday-firesides-stop-living-life-paycheck-to-paycheck/">Art of Manliness: Stop Living Life “Paycheck to Paycheck”</a>:</p>
<blockquote>
<p>When you metaphorically live life “paycheck to paycheck,” you do just enough  each week to maintain your current existence.  You take care of the urgent and outstanding tasks the neglect of which would disrupt the status quo, but you never take action on things that would improve and progress your situation.</p>
</blockquote>
<p>Even with <a href="/card/taskwarrior/">Taskwarrior</a> to help me tackle my TODO list, I feel the pain of living  paycheck to paycheck&quot;:</p>
<p>I have the numbers to show that I&rsquo;m getting lots done. Somehow I feel like I&rsquo;m treading water. There&rsquo;s always more. Both the great ideas and the big goals grow stale as I address the urgent issues that must be done <em>now</em>.</p>
<p>What is the recommendation to get out of that loop?</p>
<blockquote>
<p>All it takes is completing one single to-do — one single task that moves your life forward, even slightly — each week.</p>
</blockquote>
<p>Okay, I can do that. Well, sort of. I&rsquo;m still trying to build some kind of idea what &ldquo;forward&rdquo; means for me. However, I <em>can</em> make a point of completing one task a week that&rsquo;s been pushed aside by the high-<a href="/post/2017/12/taskwarrior-priorities/">priority</a>, immediately-<a href="/post/2018/01/taskwarrior-due-dates/">due</a> attention grabbers at the top of <code>task next</code>.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Taskwarrior Editing Refinements</title>
  <link>https://randomgeekery.org/post/2019/09/taskwarrior-editing-refinements/</link>
  <pubDate>Thu, 05 Sep 2019 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/09/taskwarrior-editing-refinements/</guid>
  <description>card/tldr
edit and append give additional ways to update your Taskwarrior tasks. undo is there for the errors you catch quickly.
I mentioned modify early on, and it works. But it’s real easy to make silly mistakes. Time to talk about a couple extra commands that reduce the impact of little daily blunders.
modify So let’s say I got a book for work-related learning. I create a task.
$ task add &#39;Read &#34;Two Scoops of Django&#34;&#39; Created task 201 Oh wait, this a learning task, so I should add the &#43;learn tag.</description>
   <category>post</category> 
   <category>post</category> 
   <category>taskwarrior</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>In which I mention more ways to edit Taskwarrior tasks</h2><p><img src="/post/2019/09/../../../attachments/img/2019/cover-2019-09-05.png" alt="attachments/img/2019/cover-2019-09-05.png"/></p>
<blockquote>
<p><strong><a href="/card/tldr/">card/tldr</a></strong></p>
<p><code>edit</code> and <code>append</code> give additional ways to update your <a href="/card/taskwarrior/">Taskwarrior</a> tasks. <code>undo</code> is there for the errors you catch quickly.</p>
</blockquote>
<p>I mentioned <code>modify</code> early on, and it works. But it’s real easy to make silly mistakes. Time to talk about a couple extra <a href="https://taskwarrior.org/docs/commands/">commands</a> that reduce the impact of little daily blunders.</p>
<h2 id="modify"><code>modify</code></h2>
<p>So let’s say I got a <a href="https://www.twoscoopspress.com/">book</a> for work-related learning. I create a task.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task add &#39;Read &#34;Two Scoops of Django&#34;&#39;
Created task 201</code></pre>
</figure><p>Oh wait, this a learning task, so I should add the <code>+learn</code> tag. I’ll use <code>modify</code> to add the forgotten tag.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task 201 modify &#43;learn
$ task 201 ls

ID  Tags  Description
201 learn Read &#34;Two Scoops of Django&#34;</code></pre>
</figure><p><code>task ls</code> shows a condensed report with the most important details of filtered tasks. Very useful for quick summaries and blog posts.</p>
<p>So far so good, right? As long as there’s no confusion about what you’re changing, <code>modify</code> does the right thing. But a typo? A typo can rewrite your description.</p>
<p>Maybe I’ll add that task to my &ldquo;WorkSkills&rdquo; project. What if my fingers forget that the syntax is <code>project:WorkSkills</code>?</p>
<p>It happens. Frequently. Judge me all you want.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task 201 modify project WorkSkills
$ task 201 ls

ID  Tags  Description
201 learn project WorkSkills</code></pre>
</figure><p>Oops.</p>
<p>Fortunately I caught it quick, so I can fix my mistake with <code>undo</code>.</p>
<h2 id="undo"><code>undo</code></h2>
<p><code>task undo</code> reverts the last change you made, and can keep going back through your history one change at a time.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task undo

The last modification was made 9/3/2019

             Prior Values                          Current Values
description  Read &#34;Two Scoops of Django&#34;           project WorkSkills
entry        2019-09-03                            2019-09-03
modified     2019-09-03                            2019-09-03
status       pending                               pending
tags         learn                                 learn
uuid         2b9a18c6-e5cd-47e1-a5b1-b1ea9e076369  2b9a18c6-e5cd-47e1-a5b1-b1ea9e076369

The undo command is not reversible.  Are you sure you want to revert to the previous state? (yes/no) yes
Modified task reverted.</code></pre>
</figure><p>Taskwarrior tells me what values will be affected by an <code>undo</code>, which I find helpful. Yes, I want to restore previous state.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task 201 ls

ID  Tags  Description
201 learn Read &#34;Two Scoops of Django&#34;</code></pre>
</figure><p>Whew. All better.</p>
<p>History is a JSON stream in <code>~/.task/undo.data</code> if you’re curious. I don’t really know how far back it goes. I often miss my mistakes until after I made other changes that I’d rather not undo.</p>
<h2 id="append"><code>append</code></h2>
<p>My typos tend to happen when I’m on a roll. As a result, I don’t notice them until it’s far too late to <code>undo</code>. I use <code>append</code> for quick changes to reduce the risk of a typo making the description unrecognizable. It behaves like <code>modify</code> for adding and changing properties. However, anything interpreted as a description change gets tacked on the end of the current description by <code>append</code>.</p>
<p>Here’s the same project story as before, but with <code>append</code> instead of <code>modify</code>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task 201 append project WorkSkills
$ task 201 ls

ID  Tags  Description
201 learn Read &#34;Two Scoops of Django&#34; project WorkSkills</code></pre>
</figure><p>I still made my mistake, but at least I can find the task by its original description.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p><code>prepend</code> also exists, and is useful much the same way append is. Which you use is a matter of preference.</p>
</blockquote>
<p>But what about bigger changes? Or what about when I change the description and don’t notice until a couple weeks later?</p>
<h2 id="edit"><code>edit</code></h2>
<p>The <code>edit</code> command loads the task details into a template, which it sends off to your <code>$EDITOR</code>. Once written, Taskwarrior updates the task to reflect changes.</p>
<p><img src="/post/2019/09/attachments/img/2019/cover-2019-09-05.png" alt="Taskwarrior edit view"/></p>
<p>Those <code>✘</code> characters are just how I show trailing whitespace in Vim with <a href="https://vim.fandom.com/wiki/Highlight_unwanted_spaces">listchars</a>. Anyways, I added &ldquo;WorkSkills&rdquo; to the &ldquo;Project&rdquo; line and fixed the description. There is even a line where I can add an annotation if I want, but not today. As soon as I save the file and quit my editor, Taskwarrior applies my changes.</p>
<p>See?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task 201 ls

ID  Project    Tags  Description
201 WorkSkills learn Read &#34;Two Scoops of Django&#34;</code></pre>
</figure><p>I feel better now. I’ve been wanting to mention these commands in the series for a while now. Since February 2018, according to my task list.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Yanick made me do it</title>
  <link>https://randomgeekery.org/post/2019/08/yanick-made-me-do-it/</link>
  <pubDate>Fri, 30 Aug 2019 08:24:04 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/08/yanick-made-me-do-it/</guid>
  <description>Inspired by yenzie to add a point estimate UDA to my Taskwarrior tasks.
Yeah, I know. I need to add a post to the series. I will. You can see I have some catching up to do.</description>
   <category>post</category> 
   <category>note</category> 
   <category>taskwarrior</category>  <category>look-what-i-can-do</category> 
  <content:encoded><![CDATA[<p>Inspired by <a href="https://twitter.com/yenzie/status/1167437274612736002">yenzie</a> to add a point estimate <a href="https://taskwarrior.org/docs/udas.html">UDA</a> to my <a href="/card/taskwarrior/">Taskwarrior</a> tasks.</p>
<p><img src="/post/2019/08/../../../attachments/img/2019/cover-2019-08-30.png" alt="attachments/img/2019/cover-2019-08-30.png"/></p>
<p>Yeah, I know. I need to add a post to the series. I will. You can see I have some catching up to do.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Trying the Crystal Language</title>
  <link>https://randomgeekery.org/post/2019/08/trying-the-crystal-language/</link>
  <pubDate>Sun, 25 Aug 2019 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/08/trying-the-crystal-language/</guid>
  <description>card/Crystal is a statically typed, compiled programming language that looks a lot like card/Ruby. Let’s try it out! Maybe even work on a Taskwarrior thing I’ve been wanting to do.
Motivation I want to play with a compiled language, but I’m not in the mood for Go or Rust.
Crystal looks friendly. Similar syntax to Ruby. Statically typed, ruling out a category of silly mistakes I always make (passing the wrong kind of value).</description>
   <category>post</category> 
   <category>post</category> 
   <category>crystal</category>  <category>taskwarrior</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>In which I use Crystal for a simple shell task</h2><p><img src="/post/2019/08/../../../attachments/img/2019/cover-2019-08-25.png" alt="attachments/img/2019/cover-2019-08-25.png"/></p>
<p><a href="/card/crystal/">card/Crystal</a> is a statically typed, compiled programming language that looks a <em>lot</em> like <a href="/card/ruby/">card/Ruby</a>. Let’s try it out! Maybe even work on a <a href="/card/taskwarrior/">Taskwarrior</a> thing I’ve been wanting to do.</p>
<h2 id="motivation">Motivation</h2>
<p>I want to play with a compiled language, but I’m not in the mood for Go or Rust.</p>
<p>Crystal looks friendly. Similar syntax to Ruby. Statically typed, ruling out a category of silly mistakes I always make (passing the wrong kind of value). Uses type inference, which means it can figure out what type a variable is without us telling it. Compiled, so you can run things quicker than in Ruby.</p>
<p>The philosophy summarized on the front page of the Crystal home page is &ldquo;Fast as C, slick as Ruby&rdquo;. That works for me.</p>
<p>I don’t care if it compiles super fast or the executable is super fast. An executable that runs quicker than my utility scripts, written in a language just as friendly, will be nice.</p>
<h2 id="installation">Installation</h2>
<p>The documentation provides instructions on <a href="https://crystal-lang.org/reference/installation/">how to install Crystal</a> across
several platforms. Today I’m on my Windows partition. Though they’re working on a full Windows port, the best path for now is to use <a href="https://brew.sh/">Homebrew</a> on <em>inbox/WSL</em>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ brew install crystal
...
$ crystal version
Crystal 0.30.1 (2019-08-15)
LLVM: 8.0.1
Default target: x86_64-unknown-linux-gnu</code></pre>
</figure><p><code>crystal</code> provides a collection of subcommands.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ crystal help

Usage: crystal [command] [switches] [program file] [--] [arguments]

Command:
    init                     generate a new project
    build                    build an executable
    docs                     generate documentation
    env                      print Crystal environment information
    eval                     eval code from args or standard input
    play                     starts Crystal playground server
    run (default)            build and run program
    spec                     build and run specs (in spec directory)
    tool                     run a tool
    help, --help, -h         show this help
    version, --version, -v   show version</code></pre>
</figure><p>Oh my there are some interesting commands in there! I’ll just focus on the ones that result in me running code.</p>
<h2 id="one-liners-with-eval">One-liners with <code>eval</code></h2>
<p>Crystal does not ship with an interactive shell. Makes sense, considering that it’s supposed to be a compiled language. Still, it’s more flexible than I expected. If all I want is a one-liner, Crystal can do that!</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ crystal eval &#39;puts &#34;Hi!&#34;&#39;
Hi!</code></pre>
</figure><p>Okay, that wasn’t super exciting. What about pretty-printing the current environment variables?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ crystal eval &#39;pp ENV&#39;
{&#34;BF&#34; =&gt; &#34;$albumartist | $album | $track/$tracktotal | $title&#34;,
&#34;BREW_PREFIX&#34; =&gt; &#34;/home/linuxbrew/.linuxbrew&#34;,
&#34;CLICOLOR&#34; =&gt; &#34;1&#34;,
...
&#34;_&#34; =&gt; &#34;/home/linuxbrew/.linuxbrew/bin/crystal&#34;,
&#34;wg_date&#34; =&gt; &#34;#[]%Y-%m-%d %H:%M%z#[default]&#34;}</code></pre>
</figure><p><a href="https://crystal-lang.org/api/ENV.html">ENV</a> is a Hash-like accessor. You can access and iterate through environment variables as if they were keys in a Hash.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ crystal eval &#39;ENV.each { |k, v| puts &#34;#{k}: #{v}&#34; }&#39;</code></pre>
</figure><p>Except that the <code>pp</code> output was sorted. That’s fine. We’ll sort the keys.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ crystal eval &#39;ENV.keys.sorted.each { |k| puts &#34;#{k}: #{ENV[k]}&#34; }&#39;</code></pre>
</figure><p>Printing data as JSON is a pretty common task. Common enough that it’s a Hash method here. Except ENV isn’t a <a href="https://crystal-lang.org/api/Hash.html">Hash</a>. It’s a &ldquo;Hash-like accessor.&rdquo;</p>
<p>No problem, we can make a Hash from <code>ENV</code>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ crystal eval &#39;require &#34;json&#34;; env = Hash.zip(ENV.keys, ENV.values); puts env.to_json&#39;
{&#34;NVM_DIR&#34;:&#34;/home/random/.nvm&#34;,&#34;HOSTTYPE&#34;:&#34;x86_64&#34;,&#34;PYENV_HOME&#34;:&#34;/home/random/.pyenv&#34;, ...
&#34;WSLENV&#34;:&#34;&#34;,&#34;_&#34;:&#34;/home/linuxbrew/.linuxbrew/bin/crystal&#34;}</code></pre>
</figure><p>Well. I lost my sorting and the JSON isn’t exactly pretty-printed. I know I can fix this from inside Crystal, but my one-liner would get clunky. Hey, this is a one-liner. Let’s pipe it to <a href="https://stedolan.github.io/jq/">jq</a>!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> crystal <span class="nb">eval</span> <span class="s1">&#39;require &#34;json&#34;; env = Hash.zip(ENV.keys, ENV.values); puts env.to_json&#39;</span> <span class="p">|</span> jq --sort-keys <span class="s1">&#39;.&#39;</span>
</span></span></code></pre>
</figure><p>There, now it’s all pretty-printed.</p>
<p><img src="/post/2019/08/attachments/img/2019/crystal-env-jq.png" alt="Colorized JSON via jq"/></p>
<p>One-liners are fun.</p>
<p>What was I doing next? Oh right. Crystal source files.</p>
<h2 id="shell-scripts-with-run">Shell scripts with <code>run</code></h2>
<p>I have no idea how to do dependency management in Crystal yet. Something
about <a href="https://crystal-lang.org/reference/the_shards_command/">shards</a>. But even stock Crystal looks like it would work as a glue language for shell scripts. Plus, the <code>run</code> command lets you ignore the build process and pretend your code is being run directly.</p>
<p><strong><code>hello-user.cr</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1">#!/usr/bin/env crystal</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="s2">&#34;Who are you? &#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">name</span> <span class="o">=</span> <span class="nb">gets</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;USER&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">  <span class="nb">puts</span> <span class="s2">&#34;Hey there </span><span class="si">#{</span><span class="n">name</span><span class="si">}</span><span class="s2">!&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">tasks</span> <span class="o">=</span> <span class="sb">`task +DUE count`</span><span class="o">.</span><span class="n">to_i</span>
</span></span><span class="line"><span class="cl">  <span class="nb">puts</span> <span class="s2">&#34;You have </span><span class="si">#{</span><span class="n">tasks</span><span class="si">}</span><span class="s2"> tasks due.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">puts</span> <span class="s2">&#34;Better get on it!&#34;</span> <span class="k">if</span> <span class="n">tasks</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">  <span class="nb">puts</span> <span class="s2">&#34;I was not expecting you to say </span><span class="se">\&#34;</span><span class="si">#{</span><span class="n">name</span><span class="si">}</span><span class="se">\&#34;</span><span class="s2">!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><ul>
<li>Since <code>run</code> is the default command, you could make a plain old Crystal script! What can I say, I like the old ways.</li>
<li>Crystal ignores trailing whitespace in <code>to_i</code>. You’ll still want to <code>chomp</code> when examining the output of a command.</li>
</ul>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ chmod 700 hello-user.cr
$ ./hello-user.cr
Who are you? random
Hey there random!
You have 3 tasks due.
Better get on it!</code></pre>
</figure><p>Remember, this is just me using <code>#!</code> to say <code>crystal run hello-user.cr</code></p>
<p>It looks a <em>lot</em> like Ruby. You could take out that <code>#!</code> and it would <em>almost</em> work as-is.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ruby hello-user.cr
Who are you? random
I was not expecting you to say &#34;random
&#34;!</code></pre>
</figure><p>Almost.</p>
<h2 id="build"><code>build</code></h2>
<p>Okay, directly running scripts is great for testing or quick tasks, but Crystal <em>is</em> a compiled language. Let’s compile something.</p>
<p><a href="https://twitter.com/pjf/status/852466839145795584">Paul Fenwick</a> and <a href="https://jacoby.github.io/2017/10/25/making-taskwarrior-work-for-me.html">Dave Jacoby</a> have — or had, no idea if they still do — a neat trick to show quick task status in their shell prompt. I’ll do the same thing, but in Crystal.</p>
<p><strong><code>task-indicator.cr</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="no">URGENT</span>       <span class="o">=</span> <span class="sc">&#39;\u{2757}&#39;</span>  <span class="c1"># exclamation</span>
</span></span><span class="line"><span class="cl"><span class="no">DUE_TOMORROW</span> <span class="o">=</span> <span class="sc">&#39;\u{1f4c5}&#39;</span> <span class="c1"># calendar</span>
</span></span><span class="line"><span class="cl"><span class="no">DUE_TODAY</span>    <span class="o">=</span> <span class="sc">&#39;\u{1f631}&#39;</span> <span class="c1"># screaming</span>
</span></span><span class="line"><span class="cl"><span class="no">OVERDUE</span>      <span class="o">=</span> <span class="sc">&#39;\u{2620}&#39;</span>  <span class="c1"># ded</span>
</span></span><span class="line"><span class="cl"><span class="no">OK</span>           <span class="o">=</span> <span class="s2">&#34;$&#34;</span>         <span class="c1"># normal</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">has_ready_tasks</span><span class="p">(</span><span class="n">extra_filter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="sb">`task +READY </span><span class="si">#{</span><span class="n">extra_filter</span><span class="si">}</span><span class="sb"> count`</span><span class="o">.</span><span class="n">to_i</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">task_indicator</span>
</span></span><span class="line"><span class="cl">  <span class="k">case</span>
</span></span><span class="line"><span class="cl">  <span class="k">when</span> <span class="n">has_ready_tasks</span><span class="p">(</span><span class="s2">&#34;+OVERDUE&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="no">OVERDUE</span>
</span></span><span class="line"><span class="cl">  <span class="k">when</span> <span class="n">has_ready_tasks</span><span class="p">(</span><span class="s2">&#34;+TODAY&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="no">DUE_TODAY</span>
</span></span><span class="line"><span class="cl">  <span class="k">when</span> <span class="n">has_ready_tasks</span><span class="p">(</span><span class="s2">&#34;+TOMORROW&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="no">DUE_TOMORROW</span>
</span></span><span class="line"><span class="cl">  <span class="k">when</span> <span class="n">has_ready_tasks</span><span class="p">(</span><span class="s2">&#34;urgency </span><span class="se">\\</span><span class="s2">&gt; 10&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="no">URGENT</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;$&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">task_indicator</span></span></span></code></pre>
</figure><p>Does it work?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ crystal run task-indicator.cr
{{}}</code></pre>
</figure><p>Yeah, I know. I’m working on it. <em>Anyways</em> let’s build this thing.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ crystal build task-indicator.cr
$ ls -lhF
total 1.3M
-rwxrwxr-x 1 random random 1.3M Aug 25 14:17 task-indicator*
-rw-rw-r-- 1 random random  546 Aug 25 14:05 task-indicator.cr</code></pre>
</figure><p>There’s a new executable called <code>task-indicator</code>. It’s not exactly small, but it produces the same output. Yes, the screaming face.</p>
<h2 id="build---release"><code>build --release</code></h2>
<p>The default build includes a lot of debugging information that I won’t need in my daily usage. I’ll make a release version.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ crystal build --release task-indicator.cr -o task-indicator-release
$ ls -lhF
total 2.0M
-rwxrwxr-x 1 random random 1.3M Aug 25 14:17 task-indicator*
-rwxrwxr-x 1 random random 665K Aug 25 14:23 task-indicator-release*
-rw-rw-r-- 1 random random  546 Aug 25 14:05 task-indicator.cr</code></pre>
</figure><p>I didn’t <em>have</em> to give it a different name. I wanted to see the size difference between debug and release builds.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ cp task-indicator-release ~/bin/task-indicator</code></pre>
</figure><p>Then over in my <code>.bashrc</code>:</p>
<p><strong><code>~/.bashrc</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Terminal colours (after installing GNU coreutils)</span>
</span></span><span class="line"><span class="cl"><span class="nv">NM</span><span class="o">=</span><span class="s2">&#34;\[\033[0;38m\]&#34;</span>  <span class="c1"># means no background and white lines</span>
</span></span><span class="line"><span class="cl"><span class="nv">HI</span><span class="o">=</span><span class="s2">&#34;\[\033[0;34m\]&#34;</span>  <span class="c1"># change this for username letter colors</span>
</span></span><span class="line"><span class="cl"><span class="nv">HII</span><span class="o">=</span><span class="s2">&#34;\[\033[0;31m\]&#34;</span> <span class="c1"># change this for hostname letter colors</span>
</span></span><span class="line"><span class="cl"><span class="nv">SI</span><span class="o">=</span><span class="s2">&#34;\[\033[0;33m\]&#34;</span>  <span class="c1"># this is for the current directory</span>
</span></span><span class="line"><span class="cl"><span class="nv">IN</span><span class="o">=</span><span class="s2">&#34;\[\033[0;0m\]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">PS1</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$NM</span><span class="s2">[ </span><span class="nv">$HI</span><span class="s2">\u </span><span class="nv">$SI</span><span class="s2">\w</span><span class="nv">$NM</span><span class="s2"> ] \$(__git_ps1) </span><span class="nv">$IN</span><span class="s2">\n\$(task-indicator) &#34;</span></span></span></code></pre>
</figure><p><img src="/post/2019/08/attachments/img/2019/run-task-indicator.png" alt="Output of task-indicator.cr showing something due today"/></p>
<p>Nice.</p>
<p>At first I put the output of <code>task-indicator</code> in a variable, and put the variable in <code>$PS1</code>. Except that variable was only evaluated on shell start. Instead put the invocation directly in <code>$PS1</code> with a leading backslash. Now the indicator is live, as I expected it to be.</p>
<h2 id="done">Done!</h2>
<p>I wanted to learn some basic Crystal usage and find ways to work the language into my daily shell routine. With <code>eval</code>, <code>run</code>, and <code>build</code> all at my disposal, it sure looks like a success! I even used Crystal to make a Taskwarrior indicator, which has been on my task list since last year.</p>
<p>I don’t know yet if Crystal is <em>better</em> than Ruby. Even at this early point it’s just as useful and just as much fun. Since &ldquo;be useful and have fun&rdquo; is a major thing for me, I’ll be exploring Crystal more!</p>
]]></content:encoded>
</item>
<item>
  <title>Post: task add &#39;admit a mistake&#39;</title>
  <link>https://randomgeekery.org/post/2019/07/task-add-admit-a-mistake/</link>
  <pubDate>Wed, 03 Jul 2019 09:18:47 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/07/task-add-admit-a-mistake/</guid>
  <description>My glance at the Idea Bucket only worked by luck. The &#43;LATEST virtual tag is for the latest task in the system, not just the latest in the filter. I want the newest report, which lists tasks by freshness, then limit: to control the number of tasks reported.
$ task &#39;(&#43;idea or &#43;learn)&#39; newest limit:1 ID Created Age Mod Project Tags Description 180 2019-07-02 19h 19h Site idea ops automate permalink switches 2019-07-02 for when I do a mass change, create aliases of old form 54 tasks, 1 shown Okay right.</description>
   <category>post</category> 
   <category>note</category> 
   <category>taskwarrior</category>  <category>oops</category> 
  <content:encoded><![CDATA[<p>My <a href="/post/2019/06/checking-in-on-my-idea-bucket/">glance</a> at the Idea Bucket only worked by luck. The <code>+LATEST</code> virtual tag is for the latest task in the system, not just the latest in the filter. I want the <code>newest</code> report, which lists tasks by freshness, then <code>limit:</code> to control the number of tasks reported.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task &#39;(&#43;idea or &#43;learn)&#39; newest limit:1

ID  Created    Age Mod Project Tags     Description
180 2019-07-02 19h 19h Site    idea ops automate permalink switches
                                          2019-07-02 for when I do a mass change, create aliases of old form

54 tasks, 1 shown</code></pre>
</figure><p>Okay right. I threw some new ideas in the last few days. Better set a higher limit.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ task &#39;(&#43;idea or &#43;learn)&#39; newest limit:3

ID  Created    Age Mod Project Tags             Description
180 2019-07-02 19h 19h Site    idea ops         automate permalink switches
                                                  2019-07-02 for when I do a mass change, create aliases of old form
176 2019-06-28 4d  4d          db learn         json1 extension for sqlite
175 2019-06-28 4d  4d          javascript learn set up entropic for Node</code></pre>
</figure>]]></content:encoded>
</item>
</channel>
</rss>
