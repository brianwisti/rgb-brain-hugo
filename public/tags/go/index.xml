<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>goonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/go/</link>
    <description>
      Recent contentingo on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 08 Sep 2019 00:00:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/go/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Colorized my go output with grc</title>
  <link>https://randomgeekery.org/post/2019/09/colorized-my-go-output-with-grc/</link>
  <pubDate>Sun, 08 Sep 2019 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/09/colorized-my-go-output-with-grc/</guid>
  <description>Enjoying myself with card/Go as I go through Learn Go with Tests by Chris James.
some go compiler output all pretty
I didn’t enjoy myself on the official tour, or with whatever LinkedIn course it was that I took. The structure and flow of the learn-by-testing piece gives me a familiar context and the pace seems just about right. It’s giving me ideas where I might enjoy Go for my own projects.</description>
   <category>post</category> 
   <category>post</category> 
   <category>go</category>  <category>shell</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>In which I spent Sunday having fun learning stuff</h2><p>Enjoying myself with <a href="/card/go/">card/Go</a> as I go through <a href="https://github.com/quii/learn-go-with-tests">Learn Go with Tests</a> by <a href="https://quii.dev/">Chris James</a>.</p>
<p><img src="/post/2019/09/../../../attachments/img/2019/cover-2019-09-08.png" alt="attachments/img/2019/cover-2019-09-08.png"/>
some go compiler output all pretty</p>
<p>I didn’t enjoy myself on the <a href="https://tour.golang.org/welcome/1">official tour</a>, or with whatever LinkedIn course it was that I took. The structure and flow of the learn-by-testing piece gives me a familiar context and the pace seems just about right. It’s giving me ideas where I might enjoy Go for my own projects.</p>
<p>So yeah I like it.</p>
<p>Still having some <em>tiny</em> issues with the output of <code>go test</code>.</p>
<p><img src="/post/2019/09/attachments/img/2019/plain.png" alt="normal go test output"/></p>
<p>Part of it’s that my brain hasn’t gotten used to how Go displays its errors. Some of it’s that my brain always has — and always will — panic at random symbols without context.</p>
<p>I figured I wasn’t the first with this problem, so I went looking. Found a <a href="https://stackoverflow.com/a/40160711">Stack Overflow answer</a> pointing me to <a href="https://github.com/garabik/grc">grc</a>. Installed via <a href="https://brew.sh/">Homebrew</a>, then followed directions from Stack Overflow to configure grc, with a slight tweak to <code>~/.grc/conf.gotest</code>.</p>
<p>grc needs an entry in <code>~/.grc/grc.conf</code> for Go test runs.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl"> # Go
</span></span><span class="line"><span class="cl"> \bgo.* test\b
</span></span><span class="line"><span class="cl"> conf.gotest</span></span></code></pre>
</figure><p>I did make a slight tweak to the suggested <code>~/.grc/conf.gotest</code>, so that &ldquo;panic&rdquo; lines get highlighted as failures.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">regexp==== RUN .*
</span></span><span class="line"><span class="cl">colour=blue
</span></span><span class="line"><span class="cl">-
</span></span><span class="line"><span class="cl">regexp=--- PASS: .*
</span></span><span class="line"><span class="cl">colour=green
</span></span><span class="line"><span class="cl">-
</span></span><span class="line"><span class="cl">regexp=^PASS$
</span></span><span class="line"><span class="cl">colour=green
</span></span><span class="line"><span class="cl">-
</span></span><span class="line"><span class="cl">regexp=^(ok|\?) .*
</span></span><span class="line"><span class="cl">colour=magenta
</span></span><span class="line"><span class="cl">-
</span></span><span class="line"><span class="cl">regexp=^\s*panic: .*
</span></span><span class="line"><span class="cl">colour=red
</span></span><span class="line"><span class="cl">-
</span></span><span class="line"><span class="cl">regexp=--- FAIL: .*
</span></span><span class="line"><span class="cl">colour=red
</span></span><span class="line"><span class="cl">-
</span></span><span class="line"><span class="cl">regexp=[^\s]+\.go(:\d+)?
</span></span><span class="line"><span class="cl">colour=cyan</span></span></code></pre>
</figure><p>Now when I run tests through <code>grc go test</code>, output is colorized and I can track it more easily!</p>
<p><img src="/post/2019/09/attachments/img/2019/cover-2019-09-08.png" alt="colorized by grc go test"/></p>
<p>Of course I’ll probably get used to how Go presents errors and then forget all about <code>grc</code>, but it’s great for today. Might be more generally useful too, if I want colorized output that my tools don’t already provide!</p>
]]></content:encoded>
</item>
</channel>
</rss>
