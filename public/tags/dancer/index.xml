<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>danceronRandom Geekery</title>
    <link>https://randomgeekery.org/tags/dancer/</link>
    <description>
      Recent contentindancer on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Mon, 11 Jul 2016 00:00:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/dancer/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Hello Dancer2</title>
  <link>https://randomgeekery.org/post/2016/07/hello-dancer2/</link>
  <pubDate>Mon, 11 Jul 2016 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2016/07/hello-dancer2/</guid>
  <description>The PerlDancer team’s Dancer2 project is a card/Perl framework for writing Web applications with less boilerplate code than other Web frameworks. I am slowly exploring what it offers. Feel free to follow along.
This is sort of a tutorial. I assume you know Perl and maybe a bit about Web server programming, but not that you have mastered either. My pace may annoy you if you have mastered Perl, Web programming, or Dancer2.</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>dancer</category>  <category>learn</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Some simple first steps with the Perl 5 Dancer2 web framework</h2><p>The <a href="https://github.com/PerlDancer/">PerlDancer</a> team’s <a href="https://metacpan.org/pod/Dancer2">Dancer2</a> project is a <a href="/card/perl/">card/Perl</a> framework for writing Web applications with less <a href="https://en.wikipedia.org/wiki/Boilerplate_code">boilerplate code</a> than other Web frameworks. I am slowly exploring what it offers. Feel free to follow along.</p>
<p>This is sort of a tutorial. I assume you know Perl and maybe a bit about Web server programming, but not that you have mastered either. My pace may annoy you if you <em>have</em> mastered Perl, Web programming, or Dancer2.</p>
<h2 id="installation">Installation</h2>
<p>I use Perl 5.24.0 and <a href="https://metacpan.org/pod/App::cpanminus">cpanm</a> via <a href="http://perlbrew.pl/">Perlbrew</a>. Installation of Dancer2 and its dependencies requires a single command.</p>
<pre tabindex="0"><code>$ cpanm Dancer2
</code></pre><h2 id="hey">Hey</h2>
<p>You do not need much code to create a Dancer2 application.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Dancer2</span><span class="p">;</span>     <span class="c1"># Load Dancer2 and its keywords</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">get</span> <span class="s">&#39;/hey&#39;</span> <span class="o">=&gt;</span> <span class="k">sub</span> <span class="p">{</span> <span class="c1"># Define some routes</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="s">&#39;Hey!&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">start</span><span class="p">;</span>           <span class="c1"># Run the application</span>
</span></span></code></pre></div><p>Even better: you can hand this code to Perl and it starts a server!</p>
<pre tabindex="0"><code>$ perl hey.pl
&gt;&gt; Dancer2 v0.200002 server 15388 listening on http://0.0.0.0:3000
</code></pre><p>Loading <code>http://localhost:3000/hey</code> in a browser shows our simple message.</p>
<p><img src="/post/2016/07/attachments/img/2016/dancer2-hey.png" title="Hey from Dancer2!" alt="Hey from Dancer2"/></p>
<p>Dancer2 gives you a <a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL</a> — Domain-Specific Language — to describe your application. These DSL <a href="https://metacpan.org/pod/distribution/Dancer2/lib/Dancer2/Manual.pod#DSL-KEYWORDS">keywords</a> cut down the boilerplate code common in some Web development frameworks.</p>
<h3 id="get"><code>get</code></h3>
<p>The <a href="https://metacpan.org/pod/distribution/Dancer2/lib/Dancer2/Manual.pod#get">get</a> keyword defines a <a href="https://metacpan.org/pod/Dancer2::Core::Route">route</a> for Dancer2. Routes tell Dancer2 how to respond when someone requests a path — the /hey bit — from your application. <code>get</code> is also a method from <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">HTTP</a>. Use it when you only want to &ldquo;get&rdquo; something from the application. Dancer2 has keywords for more HTTP methods, but <code>get</code> is fine for now.</p>
<p>What happens if someone requests a path that you did not define?</p>
<p>Your Dancer2 application returns an error page informing them that the path does not exist.</p>
<p>With the HTTP method and path defined, the last important part of our route is the code. Your application runs that code and sends its return value to the visitor. Our first route code example is an anonymous subroutine that returns the text &ldquo;Hello!&rdquo;, but they can be as complicated as you need.</p>
<h3 id="start"><code>start</code></h3>
<p><a href="https://metacpan.org/pod/distribution/Dancer2/lib/Dancer2/Manual.pod#start">start</a> tells Dancer2 that you finished defining your application and it can begin serving to the world.</p>
<p>DSL = Keywords + Sugar</p>
<p>Keywords make the Dancer2 DSL work, but the code style takes advantage of Perl’s flexible syntax. Our route looks like this with less <a href="https://en.wikipedia.org/wiki/Syntactic_sugar">syntactic sugar</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="n">get</span><span class="p">(</span><span class="s">&#39;/hey&#39;</span><span class="p">,</span> <span class="k">sub</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&#39;Hey!&#39;</span><span class="p">;</span> <span class="p">});</span>
</span></span></code></pre></div><h2 id="hey-you">Hey You</h2>
<p>How about greeting the visitor by name? Since form processing involves more steps than I want to think about today, we use route parameters instead.</p>
<p>Dancer2 allows placeholders in route paths. The simplest placeholders are tokens prefixed with a colon, such as <code>:name</code> or <code>:id</code>. When you make a request that matches, such as <code>/hey/brian</code>, Dancer2 saves the matching path part. Here, look at some code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Dancer2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># A simple greeting: /hey</span>
</span></span><span class="line"><span class="cl"><span class="n">get</span> <span class="s">&#39;/hey&#39;</span> <span class="o">=&gt;</span> <span class="k">sub</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="s">&#39;Hey!&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># A personalized greeting: /hey/Brian</span>
</span></span><span class="line"><span class="cl"><span class="n">get</span> <span class="s">&#39;/hey/:name&#39;</span> <span class="o">=&gt;</span> <span class="k">sub</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$name</span> <span class="o">=</span> <span class="nn">route_parameters</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="s">&#34;Hey $name!&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">start</span><span class="p">;</span>
</span></span></code></pre></div><p>Route handlers can get <a href="https://metacpan.org/pod/distribution/Dancer2/lib/Dancer2/Manual.pod#Route-Handlers">much more complicated</a>, but not today. Our application treats a general greeting and a greeting with a distinct name at two different actions, so we use two different routes.</p>
<p>In order to use the new code, we need to stop the Perl process. <code>Control-C</code> should do it. Then launch it again, and the new code will be loaded.</p>
<pre tabindex="0"><code>$ perl hey.pl
&gt;&gt; Dancer2 v0.200002 server 31385 listening on http://0.0.0.0:3000
</code></pre><p>Now we should be able to see <a href="http://localhost:3000/hey/Brian">http://localhost:3000/hey/Brian</a> — or whatever name you prefer.</p>
<p><img src="/post/2016/07/attachments/img/2016/dancer2-hey-brian.png" alt="&ldquo;Hey Brian!&rdquo; in Dancer2"/></p>
<h3 id="route_parameters"><code>route_parameters</code></h3>
<p><a href="https://metacpan.org/pod/distribution/Dancer2/lib/Dancer2/Manual.pod#route_parameters">route_parameters</a> returns a <a href="https://metacpan.org/pod/Hash::MultiValue">hash-like object</a> which stores tokens and their values from a route match. Use the <code>get</code> method when you need those values in your route code.</p>
<h2 id="wrap-it-up">Wrap It Up</h2>
<p>We installed Dancer2, made just about the simplest Web application I could think of, and explored a little bit about declaring routes.</p>
<p>What’s next? I plan to look at using template files to produce real Web pages.</p>
]]></content:encoded>
</item>
</channel>
</rss>
