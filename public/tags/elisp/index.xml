<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>elisponRandom Geekery</title>
    <link>https://randomgeekery.org/tags/elisp/</link>
    <description>
      Recent contentinelisp on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sat, 19 Dec 2020 16:30:00 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/tags/elisp/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Learning a little elisp</title>
  <link>https://randomgeekery.org/post/2020/12/learning-a-little-elisp/</link>
  <pubDate>Sat, 19 Dec 2020 16:30:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/learning-a-little-elisp/</guid>
  <description>&lt;p&gt;Excuse me while I share a sleep-deprived ramble from last night through about five lines of &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html%5Fnode/eintr/index.html&#34;&gt;Emacs Lisp&lt;/a&gt;, the extension language for &lt;a href=&#34;https://randomgeekery.org/card/emacs/&#34;&gt;Emacs&lt;/a&gt;&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>elisp</category>  <category>emacs</category>  <category>org-mode</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Don't get impressed yet</h2><p>Excuse me while I share a sleep-deprived ramble from last night through about five lines of <a href="https://www.gnu.org/software/emacs/manual/html%5Fnode/eintr/index.html">Emacs Lisp</a>, the extension language for <a href="/card/emacs/">Emacs</a></p>
<p>There&rsquo;s <a href="https://www.gnu.org/software/emacs/manual/html%5Fnode/eintr/index.html">tons</a> of <a href="https://caiorss.github.io/Emacs-Elisp-Programming/">detailed</a> information about Emacs LISP — aka Emacs Lisp, elisp, ELisp, and &ldquo;oh my god they love parentheses&rdquo; — out there.  I just want my old &ldquo;Babysteps&rdquo; approach, so all the detailed sites won&rsquo;t be so intimidating.</p>
<p>Gotta do it myself, I guess.</p>
<h2 id="why">Why</h2>
<p>So far I have treated elisp as an arcane configuration language.  But it’s so much more than that.  It’s also an arcane <em>programming</em> language.  I do love learning programming languages.</p>
<p>I’ll have an easier time configuring Emacs, and most likely get strange new ideas for ways to extend my frenemy text editing environment.</p>
<h2 id="how">How</h2>
<p>Using <a href="https://www.gnu.org/software/emacs/">Emacs</a>, of course!  A little bit with the deep integration for both <a href="https://www.gnu.org/software/emacs/manual/html%5Fnode/emacs/Lisp-Eval.html#Lisp-Eva">evaluation</a> and documentation_ of Lisp.  Probably a bit more with <a href="https://orgmode.org/worg/org-contrib/babel/intro.html">Org Babel</a>, which provides a layer for evaluating code and exporting the results — say, for example, to a blog post like this one.</p>
<p>Expect side notes about <a href="https://github.com/hlissner/doom-emacs">Doom Emacs</a>, since that’s the flavor I use lately.</p>
<h2 id="lets-get-started">Let’s get started</h2>
<p>I looked up &ldquo;Hello World in ELisp&rdquo; and found something like this.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nf">message</span> <span class="s">&#34;Hey World!&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="elisp-evaluation">ELisp evaluation</h3>
<p>Want to write some Emacs Lisp? Here you go.</p>
<ul>
<li>open Emacs</li>
<li>type <code>(message &quot;Hey World!&quot;)</code></li>
<li>put your cursor — the <em>point</em> — just outside the closing parenthesis.</li>
<li>Hit <em>C-x e</em></li>
<li>Emacs prints <code>Hey World!</code></li>
</ul>
<p>Boom.  Done.</p>
<p>The <code>()</code> indicate an <a href="https://en.wikipedia.org/wiki/S-expression">s-expression</a>.  That’s a <em>symbolic expression</em>, or <em>sexpr</em> if you’re cool.  S-expressions aren’t quite the atoms of a Lisp program.  There are smaller bits, like the symbol <code>message</code> or the value <code>&quot;Hey World!&quot;</code>.  But it’s the smallest <em>useful</em> element.  Oh I know.  S-expressions are the <em>molecules</em> of a Lisp program.</p>
<p>No?  How about words vs sentences?  Okay, whatever.</p>
<p>This particular s-expression holds an <em>ordered pair</em>, <code>message</code> and <code>&quot;Hey World!&quot;</code>.  <em>Pair</em> because there are two items.  <em>Ordered</em> because the order matters.</p>
<p>When ELisp sees an ordered pair, it knows what to do:</p>
<ul>
<li>figure out what it gets from the second thing</li>
<li>hand that to the first thing</li>
<li>hand <em>that</em> result to you</li>
</ul>
<p>The part that feels magic is each of the items in the pair can be s-expressions too!  Try <code>(sqrt (* 37 37))</code>.  <code>37.0</code>, right?</p>
<p>That <code>*</code> is for multiplication.  So we’re multiplying <code>37</code> by <code>37</code> and proving to ourselves that <code>sqrt</code> hands us back <code>37</code>.  It’s a bit of a pointless example, but hey welcome to me learning stuff.  And there’s my first lesson:</p>
<p>A Lisp program is pretty much just infinitely nested s-expressions.</p>
<p>And macros.  Macros, near as I can tell, are infinitely nested s-expressions with gloves and a nice hat.</p>
<p>BTW I don’t know Lisp.  I hope you did not come here expecting a tutorial.</p>
<h3 id="elisp-documentation">ELisp documentation</h3>
<p>When we have a question about ELisp functions, we don’t need to look everything up online.  Emacs comes with notes.</p>
<ul>
<li>put <em>point</em> over <code>message</code> in <code>(message &quot;Hey world!&quot;)</code></li>
<li>hit <code>C-h f</code></li>
<li>see the prompt asking me to specify a function, with <code>message</code> pre-filled</li>
<li>hit <code>ENTER</code></li>
<li>Learn things!</li>
</ul>
<blockquote>
<p>[!NOTE]
Doom uses <kbd>SPC h f</kbd> to fetch function descriptions.  Oh hey, while you’re at it try <kbd>SPC h d h</kbd> for general Doom help, or <kbd>SPC h d m</kbd> for help with a specific mode!</p>
</blockquote>
<h3 id="elisp-in-org-babel">ELisp in Org Babel</h3>
<p>This is great and all, but I am less concerned about live evaluation of ELisp. Org mode is more interesting to me.  I could make my <a href="/config/">config</a> smarter.  For example, only tangle a section if it’s relevant for that machine.</p>
<p>And, of course, really handy for blogging about ELisp.</p>
<blockquote>
<p>[!NOTE]
Configuration of Org and Babel is traditionally an elaborate ritual.  In Doom, it’s enough for this post to enable <code>org</code>.</p>
<p>Somewhere in my <code>init.el</code> I have these lines.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="nb">:lang</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nv">org</span> <span class="nv">+roam</span> <span class="nv">+hugo</span><span class="p">)</span>
</span></span></code></pre></div><p>Okay, I added <code>+hugo</code> since I’m using <code>ox-hugo</code> to integrate with my workflow. And <code>+roam</code> because <a href="https://www.orgroam.com/">org-roam</a> is kinda cool.  But not relevant for today.</p>
</blockquote>
<p>I need a code block written in a language that Babel knows.  It should not
surprise us that Babel knows ELisp.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">#+begin_src elisp
</span></span><span class="line"><span class="cl">(message &#34;Hey World!&#34;)
</span></span><span class="line"><span class="cl">#+end_src
</span></span></code></pre></div><p>I press <kbd>C-c C-c</kbd> with <em>point</em> over the code block.</p>
<blockquote>
<p>[!NOTE]
Or <kbd>ENTER</kbd> in Doom.</p>
</blockquote>
<p>Suddenly: a <code>#+RESULTS:</code> block!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">#+RESULTS:
</span></span><span class="line"><span class="cl">: Hey World!
</span></span></code></pre></div><p>I can also write my ELisp inline:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">src_elisp{(sqrt (* 37 37))}, right?
</span></span></code></pre></div><p>Written like this, Babel replaces my code with its result when <code>ox-hugo</code> exports the post.</p>
<p>All right. That’s the very basics of evaluating ELisp in Emacs generally and Org mode in particular.</p>
<p>Let’s get back to the code, please. How do I do variables?</p>
<h2 id="displaying-a-variable">Displaying a variable</h2>
<p>Let’s see. <code>setq</code> to set a variable for my name. identifiers can be pretty much whatever. I’ll use lowercase letters and a hyphen.</p>
<p>Looks like <code>format</code> can smush it into a string for <code>message</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">my-name</span> <span class="s">&#34;Brian&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">message</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nf">format</span> <span class="s">&#34;hello %s&#34;</span> <span class="nv">my-name</span><span class="p">))</span>
</span></span></code></pre></div><p><code>format</code> does its work and hands the result back to <code>message</code>, which displays the result.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">hello Brian
</span></span></code></pre></div><p>Thing is, now <code>my-name</code> is floating around forever what with being a global variable.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nf">message</span> <span class="nv">my-name</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Brian
</span></span></code></pre></div><p>What if I used a local variable instead?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">new-name</span> <span class="s">&#34;Whozzomongo&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nf">message</span> <span class="nv">new-name</span><span class="p">))</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Whozzomongo
</span></span></code></pre></div><p>But back out here it doesn’t exist.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">new-name</span><span class="p">)</span>
</span></span></code></pre></div><p>You don’t see anything out here, but when I tried to <kbd>C-c C-c</kbd> that, Emacs complained:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Symbol’s function definition is void: new-name
</span></span></code></pre></div><p>I consider that a good thing. Global variables make me nervous, especially in long-running applications.</p>
<p>So I know how to set global or local variables.  I know how to display them.</p>
<p>How to get them from the user?</p>
<h2 id="getting-user-input">Getting user input</h2>
<p><a href="http://www.ergoemacs.org/emacs/elisp%5Fidioms%5Fprompting%5Finput.html">Xah Lee</a> gives a nice rundown on how to get user input. <code>read-string</code> is the one I want.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nf">read-string</span> <span class="s">&#34;What&#39;s your name? &#34;</span><span class="p">)</span>
</span></span></code></pre></div><p><code>read-string</code> returns whatever I answer.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Waffle Smasher The Magnificent Pineapple
</span></span></code></pre></div><p>Let’s make a question prompt.  The inside-out approach of nested evaluation confuses me a bit, so I’ll happily let Emacs indent things however it wants.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nf">message</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nb">let</span>
</span></span><span class="line"><span class="cl">     <span class="p">((</span><span class="nv">question</span> <span class="s">&#34;What&#39;s your name?&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nf">message</span> <span class="s">&#34;Go to bed, %s!&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nf">format</span> <span class="nf">message</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="nf">read-string</span> <span class="p">(</span><span class="nf">format</span> <span class="s">&#34;%s &#34;</span> <span class="nv">question</span><span class="p">)))))</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Go to bed, Dude!
</span></span></code></pre></div><p>I did some things.  <code>read-string</code> puts the cursor right after the <code>question</code> prompt.  So to help myself while I’m figuring all this out, I created some local variables.  <code>question</code> holds the question to be answered. <code>message</code> holds the —</p>
<p>Wait, there’s already a global <em>standard</em> function called <code>message</code>!</p>
<p>It’s cool.  By the time I need the function, <code>let</code> is done and my variable
doesn’t exist.  Still.  I shouldn’t make this a habit.</p>
<h2 id="wrapping-it-in-a-function">Wrapping it in a function</h2>
<p>I wasn’t planning on looking at functions today, but I’m more than halfway there already.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">ask-and-respond</span> <span class="p">(</span><span class="nv">question-for-user</span> <span class="nv">our-response</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Ask the user a question and show them a response.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">interactive</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">message</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nf">format</span> <span class="nv">our-response</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="nf">read-string</span> <span class="p">(</span><span class="nf">format</span> <span class="s">&#34;%s &#34;</span> <span class="nv">question-for-user</span><span class="p">)))))</span>
</span></span></code></pre></div><p>Use the <a href="https://www.gnu.org/software/emacs/manual/html%5Fnode/eintr/defun.html#defun">defun</a> macro to <em>define functions</em>. It’s similar enough to function definitions in other languages.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">NAME</span> <span class="p">(</span><span class="nv">ARGUMENTS</span><span class="err">…</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;A docstring&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">THE</span> <span class="nv">CODE</span><span class="p">)</span>
</span></span></code></pre></div><p>Though there are some differences right off the bat.  <code>ask-and-respond</code> needs user input.  ELisp requires I mark those as interactive_.</p>
<p>Other than <em>that</em> it’s similar enough to function definitions in other languages.</p>
<p>I already know how to call a function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">ask-and-respond</span> <span class="s">&#34;What&#39;s your name?&#34;</span> <span class="s">&#34;Goodnight, %s!&#34;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Goodnight, Brian!
</span></span></code></pre></div><p>Okay, time to take my own hint.  Good night!</p>]]></content:encoded>
</item>
<item>
  <title>Post: Emacs in a Box</title>
  <link>https://randomgeekery.org/post/2020/12/caiorss-github-io/</link>
  <pubDate>Sun, 13 Dec 2020 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/caiorss-github-io/</guid>
  <description>Emacs In a Box - Elisp Programming and Customization
Maybe the bookmark should have been to the Elisp Snippets page. That’s the one I keep going back to. The whole site is a well-organized collection of notes on using and extending Emacs.</description>
   <category>post</category> 
   <category>bookmark</category> 
   <category>emacs</category>  <category>elisp</category> 
  <content:encoded><![CDATA[<p><a href="https://caiorss.github.io/Emacs-Elisp-Programming/">Emacs In a Box - Elisp Programming and Customization</a></p>
<p>Maybe the bookmark should have been to the <a href="https://caiorss.github.io/Emacs-Elisp-Programming/Elisp_Snippets.html">Elisp Snippets</a> page.
That&rsquo;s the one I keep going back to. The whole site is a well-organized collection of notes on using and extending <a href="/card/emacs/">Emacs</a>.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Elisp Functions Described in the Emacs Tutorial</title>
  <link>https://randomgeekery.org/post/2014/05/elisp-functions-described-in-the-emacs-tutorial/</link>
  <pubDate>Tue, 27 May 2014 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2014/05/elisp-functions-described-in-the-emacs-tutorial/</guid>
  <description>&lt;p&gt;The &lt;a href=&#34;https://randomgeekery.org/post/2014/05/the-emacs-tutorial-as-elisp-tour/&#34;&gt;other day&lt;/a&gt; I talked some sort of nonsense about organizing my notes into some sort of coherent blog post. Heck with that. Life is too short. Instead I will just dump them here and hope somebody finds them useful. Maybe later I can do something with it. For now it’s just supplemental material for the official &lt;a href=&#34;https://randomgeekery.org/card/emacs/&#34;&gt;Emacs&lt;/a&gt; tutorial.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>emacs</category>  <category>elisp</category>  <category>tutorial</category>  <category>tools</category> 
  <content:encoded><![CDATA[<p>The <a href="/post/2014/05/the-emacs-tutorial-as-elisp-tour/">other day</a> I talked some sort of nonsense about organizing my notes into some sort of coherent blog post. Heck with that. Life is too short. Instead I will just dump them here and hope somebody finds them useful. Maybe later I can do something with it. For now it&rsquo;s just supplemental material for the official <a href="/card/emacs/">Emacs</a> tutorial.</p>
<h2 id="functions-in-the-emacs-tutorial">Functions in the Emacs Tutorial</h2>
<table>
<thead>
<tr>
<th>Function</th>
<th>Keybinding</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>save-buffers-kill-terminal</code></td>
<td><code>C-x C-c</code></td>
<td>Save and quit Emacs</td>
</tr>
<tr>
<td><code>keyboard-quit</code></td>
<td><code>C-g</code></td>
<td>Cancels entry of a command</td>
</tr>
<tr>
<td><code>scroll-up-command</code></td>
<td><code>C-v</code></td>
<td>Scroll content up</td>
</tr>
<tr>
<td><code>scroll-down-command</code></td>
<td><code>M-v</code></td>
<td>Scroll cowntent down</td>
</tr>
<tr>
<td><code>recenter-top-bottom</code></td>
<td><code>C-l</code></td>
<td>Redraw window cycling point through center/top/bottom of window</td>
</tr>
<tr>
<td><code>previous-line</code></td>
<td><code>C-p</code></td>
<td>Put point on previous line</td>
</tr>
<tr>
<td><code>next-line</code></td>
<td><code>C-n</code></td>
<td>Put point on next line</td>
</tr>
<tr>
<td><code>backward-char</code></td>
<td><code>C-b</code></td>
<td>Put point on previous character</td>
</tr>
<tr>
<td><code>forward-char</code></td>
<td><code>C-f</code></td>
<td>Put point on next character</td>
</tr>
<tr>
<td><code>forward-word</code></td>
<td><code>M-f</code></td>
<td>Put point on next word</td>
</tr>
<tr>
<td><code>backward-word</code></td>
<td><code>M-b</code></td>
<td>Put point on previous word</td>
</tr>
<tr>
<td><code>move-beginning-of-line</code></td>
<td><code>C-a</code></td>
<td>Put point on line start</td>
</tr>
<tr>
<td><code>move-end-of-line</code></td>
<td><code>C-e</code></td>
<td>Put point on line end</td>
</tr>
<tr>
<td><code>backward-sentence</code></td>
<td><code>M-a</code></td>
<td>Put point on previous sentence start</td>
</tr>
<tr>
<td><code>forward-sentence</code></td>
<td><code>M-e</code></td>
<td>Put point on next sentence start</td>
</tr>
<tr>
<td><code>beginning-of-buffer</code></td>
<td><code>M-&lt;</code></td>
<td>Put point on buffer start</td>
</tr>
<tr>
<td><code>end-of-buffer</code></td>
<td><code>M-&gt;</code></td>
<td>Put point on buffer end</td>
</tr>
<tr>
<td><code>universal-argument</code></td>
<td><code>C-u</code></td>
<td>Begin a numeric argument for the following command</td>
</tr>
<tr>
<td><code>delete-other-windows</code></td>
<td><code>C-x 1</code></td>
<td>Make window fill its frame</td>
</tr>
<tr>
<td><code>self-insert-command</code></td>
<td><code>&lt;character&gt;</code></td>
<td>Inserts the character you type</td>
</tr>
<tr>
<td><code>newline</code></td>
<td><code>RETURN</code></td>
<td>Insert a newline &amp; move point to next line</td>
</tr>
<tr>
<td><code>delete-backward-char</code></td>
<td><code>DEL</code></td>
<td>Delete characters before point</td>
</tr>
<tr>
<td><code>delete-char</code></td>
<td><code>C-d</code></td>
<td>Delete characters after point</td>
</tr>
<tr>
<td><code>backward-kill-word</code></td>
<td><code>M-DEL</code></td>
<td>Delete word before point</td>
</tr>
<tr>
<td><code>kill-word</code></td>
<td><code>M-d</code></td>
<td>Delete word after point</td>
</tr>
<tr>
<td><code>kill-line</code></td>
<td><code>C-k</code></td>
<td>Kill from point to end of line</td>
</tr>
<tr>
<td><code>kill-sentence</code></td>
<td><code>M-k</code></td>
<td>Kill from point to end of sentence</td>
</tr>
<tr>
<td><code>set-mark-command</code></td>
<td><code>C-SPACE</code></td>
<td>Start marking a region for later action</td>
</tr>
<tr>
<td><code>kill-region</code></td>
<td><code>C-w</code></td>
<td>Cut text in marked region</td>
</tr>
<tr>
<td><code>yank</code></td>
<td><code>C-y</code></td>
<td>Yank (paste) text at point</td>
</tr>
<tr>
<td><code>yank-pop</code></td>
<td><code>M-y</code></td>
<td>cycle through kill ring w/last yank</td>
</tr>
<tr>
<td><code>undo</code></td>
<td><code>C-/</code></td>
<td>Undo last command</td>
</tr>
<tr>
<td><code>find-file</code></td>
<td><code>C-x C-f</code></td>
<td>Prompt in minibuffer to open a file in buffer</td>
</tr>
<tr>
<td><code>save-buffer</code></td>
<td><code>C-x C-s</code></td>
<td>Save buffer contents to file</td>
</tr>
<tr>
<td><code>list-buffers</code></td>
<td><code>C-x C-b</code></td>
<td>Display a list of existing buffers</td>
</tr>
<tr>
<td><code>switch-to-buffer</code></td>
<td><code>C-x b</code></td>
<td>Minibuffer prompt switch window view to different buffer</td>
</tr>
<tr>
<td><code>save-some-buffers</code></td>
<td><code>C-x s</code></td>
<td>Prompt to save each changed buffer</td>
</tr>
<tr>
<td><code>suspend-frame</code></td>
<td><code>C-z</code> or <code>C-x C-z</code></td>
<td>exit Emacs temporarily</td>
</tr>
<tr>
<td><code>replace-string</code></td>
<td><code>M-x replace-string</code></td>
<td>minibuffer - replace instances of a string in buffer after point</td>
</tr>
<tr>
<td><code>recover-file</code></td>
<td><code>M-x recover-file</code></td>
<td>Revisit buffer using last auto-saved contents</td>
</tr>
<tr>
<td><code>text-mode</code></td>
<td><code>M-x text-mode</code></td>
<td>Major mode for editing text for humans to read</td>
</tr>
<tr>
<td><code>describe-mode</code></td>
<td><code>C-h m</code></td>
<td>Show documentation for current major and minor modes</td>
</tr>
<tr>
<td><code>auto-fill-mode</code></td>
<td><code>M-x auto-fill-mode</code></td>
<td>Toggle automatic line breaking</td>
</tr>
<tr>
<td><code>fill-paragraph</code></td>
<td><code>M-q</code></td>
<td>Fill paragraph at / after point.</td>
</tr>
<tr>
<td><code>isearch-forward</code></td>
<td><code>C-s</code></td>
<td>minibuffer - Do incremental search forward</td>
</tr>
<tr>
<td><code>isearch-backward</code></td>
<td><code>C-r</code></td>
<td>minibuffer - Do incremental search backward</td>
</tr>
<tr>
<td><code>split-window-below</code></td>
<td><code>C-x 2</code></td>
<td>Split selected window horizontally. Selected window becomes top</td>
</tr>
<tr>
<td><code>scroll-other-window</code></td>
<td><code>C-M-v</code></td>
<td>Scroll next window</td>
</tr>
<tr>
<td><code>other-window</code></td>
<td><code>C-x o</code></td>
<td>Select next window in cyclic window order</td>
</tr>
<tr>
<td><code>delete-other-windows</code></td>
<td><code>C-x 1</code></td>
<td>Make selected window fill its frame</td>
</tr>
<tr>
<td><code>find-file-other-window</code></td>
<td><code>C-x 4 C-f</code></td>
<td>Edit file in other window</td>
</tr>
<tr>
<td><code>make-frame</code></td>
<td><code>C-x 5 2</code></td>
<td>Return newly created frame displaying current buffer</td>
</tr>
<tr>
<td><code>delete-frame</code></td>
<td><code>C-x 5 0</code></td>
<td>Delete selected frame</td>
</tr>
<tr>
<td><code>help-for-help</code></td>
<td><code>C-h ?</code></td>
<td>Launches interactive help mode</td>
</tr>
<tr>
<td><code>describe-key-briefly</code></td>
<td><code>C-h c &lt;key&gt;</code></td>
<td>Prints name of function invoked by <code>&lt;key&gt;</code></td>
</tr>
<tr>
<td><code>describe-key</code></td>
<td><code>C-h k &lt;key&gt;</code></td>
<td>Display documentation of function invoked by <code>&lt;key&gt;</code></td>
</tr>
<tr>
<td><code>describe-function</code></td>
<td><code>C-h f &lt;function&gt;</code></td>
<td>Display documentation of <code>&lt;function&gt;</code></td>
</tr>
<tr>
<td><code>describe-variable</code></td>
<td><code>C-h v &lt;variable&gt;</code></td>
<td>Display documentation of <code>&lt;variable&gt;</code></td>
</tr>
<tr>
<td><code>apropos-command</code></td>
<td><code>C-h a &lt;pattern&gt;</code></td>
<td>Show all commands with names containing <code>&lt;pattern&gt;</code></td>
</tr>
<tr>
<td><code>info</code></td>
<td><code>C-h i</code></td>
<td>Enter the Info documentation browser</td>
</tr>
<tr>
<td><code>info-emacs-manual</code></td>
<td><code>C-h r</code></td>
<td>Display the Emacs manual in Info mode</td>
</tr>
</tbody>
</table>
<h2 id="notes">Notes</h2>
<p>I found some things noteworthy while building this list.</p>
<h3 id="numeric-arguments">Numeric Arguments</h3>
<ul>
<li>Digits or minus sign after <code>C-u</code> form the numeric argument.</li>
<li>Default is <code>4</code></li>
<li>Usually treated as numeric argument</li>
<li>Sometimes it&rsquo;s just a flag. The following command changes behavior based on the presence of <code>universal-argument</code> rather than the details of its value</li>
</ul>
<table>
<thead>
<tr>
<th>Example</th>
<th>Action</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>C-u 8 C-f</code></td>
<td>Move forward 8 characters</td>
</tr>
<tr>
<td><code>C-u C-f</code></td>
<td>Move forward 4 characters</td>
</tr>
<tr>
<td><code>C-u 2 C-v</code></td>
<td>Scroll screen 2 lines</td>
</tr>
</tbody>
</table>
<h3 id="disabled-commands">Disabled Commands</h3>
<p>Some commands such as <code>downcase-region</code> <code>C-x C-l</code> are disabled by default in Emacs. They confuse beginners. You get an interactive prompt to try it, enable it, and whatever.</p>
<p>There&rsquo;s no big list of disabled commands. Instead each command has a hook telling whether it&rsquo;s disabled or not. The EmacsWiki <a href="http://www.emacswiki.org/emacs/DisabledCommands">DisabledCommands</a> page presents functions to list and enable disabled functions.</p>
<h3 id="inserting-and-deleting">Inserting and Deleting</h3>
<p><em>Everything</em> you type invokes a function. Most of the alphanumeric keys simply insert the character and move point. Some, like <code>newline</code> and <code>delete-backward-character</code>, trigger functions that relate to behavior users expect when entering those keys.</p>
<p>They take numeric arguments too. <code>C-u 4 *</code> will insert <code>****</code> into the buffer.</p>
<h3 id="undo">Undo</h3>
<p>Undo ignores movement commands, and <code>self-insert-command</code> are lumped into groups of up to 20.</p>
<h3 id="extending-the-command-set">Extending the Command Set</h3>
<p>There are only so many keys on the average keyboard. Less common commands get invoked either through an extended keybinding like <code>C-x &lt;character&gt;</code> or direct invocation via <code>M-x &lt;name&gt;</code>.</p>
<ul>
<li><code>C-x &lt;character&gt;</code> Character eXtend</li>
<li><code>M-x &lt;name&gt;</code> Named command eXtend
<ul>
<li>Offers tab completion</li>
</ul>
</li>
</ul>
<h3 id="searching">Searching</h3>
<p>Incremental search is like a minibuffer mode. There are special bindings for the keys and everything.</p>
<h3 id="multiple-frames">Multiple Frames</h3>
<p><em>Frames</em> are what what most windowing systems refer to as <em>windows</em>, but Emacs was already using that term.</p>
<p>Frames only work in GUI, because the terminal can only display a single frame at a time. See <a href="/post/2017/01/elscreen/">elscreen</a> for an alternative that works in both terminal and GUI.</p>]]></content:encoded>
</item>
<item>
  <title>Post: The Emacs Tutorial as ELisp Tour</title>
  <link>https://randomgeekery.org/post/2014/05/the-emacs-tutorial-as-elisp-tour/</link>
  <pubDate>Sat, 24 May 2014 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2014/05/the-emacs-tutorial-as-elisp-tour/</guid>
  <description>&lt;p&gt;I am trying to &lt;em&gt;really&lt;/em&gt; learn how to use &lt;a href=&#34;https://randomgeekery.org/card/emacs/&#34;&gt;Emacs&lt;/a&gt;. One thing that strikes me is how the Emacs user interface can be thought of as a client application to an Emacs Lisp API. This is not a revolutionary thought, but it really stuck in my head. I reread the official tutorial, focusing on the functions rather than the keybindings that invoke them.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>emacs</category>  <category>elisp</category>  <category>tutorial</category>  <category>tools</category> 
  <content:encoded><![CDATA[<p>I am trying to <em>really</em> learn how to use <a href="/card/emacs/">Emacs</a>. One thing that strikes me is how the Emacs user interface can be thought of as a client application to an Emacs Lisp API. This is not a revolutionary thought, but it really stuck in my head. I reread the official tutorial, focusing on the functions rather than the keybindings that invoke them.</p>
<p>The first function is obviously the one to get the tutorial started.</p>
<table>
<thead>
<tr>
<th>Function</th>
<th>Keybinding</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>help-with-tutorial</code></td>
<td><code>C-h t</code></td>
<td>Launch the Emacs learn-by-doing tutorial</td>
</tr>
</tbody>
</table>
<p>Then I spent a couple days with liberal usage of <code>describe-key</code> and <code>describe-function</code> to better understand what the tutorial was describing. It was helpful. Now I just want to organize those notes and post them on the blog.</p>
<p>Or I could <em>Post/2014/05/elisp-functions-described-in-the-emacs-tutorialdump the list</em> onto a blog post.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Xah&#39;s Elisp Tutorial</title>
  <link>https://randomgeekery.org/post/2008/01/xahs-elisp-tutorial/</link>
  <pubDate>Thu, 03 Jan 2008 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2008/01/xahs-elisp-tutorial/</guid>
  <description>I’d really love to master an editor. Any editor. Vim has been my weapon of choice for years, but Emacs has always intrigued me. It’s easier to use than Vim, but the Elisp language is the real draw. Vim’s configuration / scripting language is awkward at best. Elisp is cryptically lispish, but at least it is possible to break it down without wondering what the heck &lt;sfile&gt; is supposed to be.</description>
   <category>post</category> 
   <category>post</category> 
   <category>elisp</category>  <category>link</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>I&rsquo;d <em>really</em> love to master an editor. Any editor. Vim has been my weapon of choice for years, but <a href="/card/emacs/">Emacs</a> has always intrigued me. It&rsquo;s easier to use than Vim, but the Elisp language is the real draw. Vim&rsquo;s configuration / scripting language is awkward at best. Elisp is cryptically lispish, but at least it is possible to break it down without wondering what the heck <code>&lt;sfile&gt;</code> is supposed to be.</p>
<p>So yeah. I&rsquo;m mostly a Vim guy but I&rsquo;d love to get more out of my Emacs sessions. With that in mind, I&rsquo;ll be taking a close look at Xah&rsquo;s <a href="http://xahlee.org/emacs/emacs.html">Emacs</a> and <a href="http://xahlee.org/emacs/elisp.html">Elisp</a> tutorials.</p>
]]></content:encoded>
</item>
</channel>
</rss>
