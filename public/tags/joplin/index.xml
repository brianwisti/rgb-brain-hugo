<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>joplinonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/joplin/</link>
    <description>
      Recent contentinjoplin on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Mon, 24 May 2021 20:00:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/joplin/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Joplin CLI Batch Processing With Raku</title>
  <link>https://randomgeekery.org/post/2021/05/joplin-cli-batch-processing-with-raku/</link>
  <pubDate>Mon, 24 May 2021 20:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/05/joplin-cli-batch-processing-with-raku/</guid>
  <description>don’t get excited; these are the only notes I took
[!NOTE] This sidetracks enough for three blog posts, mostly about card/Raku. Sorry about that. No time to make it shorter. You know how it is. There’s a little card/Joplin stuff in here.
This is embarrassing. I fired up the Joplin desktop app this morning and it told me there was an update. Makes sense. I haven’t loaded the desktop app in a couple months.</description>
   <category>post</category> 
   <category>post</category> 
   <category>tools</category>  <category>joplin</category>  <category>raku-lang</category>  <category>regular-expressions</category>  <category>shell</category>  <category>oops</category>  <category>i-fixed-it</category> 
  <content:encoded><![CDATA[<h2>In which a minor update veers off on a Raku regex tangent</h2><p><img src="/post/2021/05/../../../attachments/img/2021/cover-2021-05-24.jpg" alt="attachments/img/2021/cover-2021-05-24.jpg"/>
don&rsquo;t get excited; these are the only notes I took</p>
<blockquote>
<p>[!NOTE]
This sidetracks enough for three blog posts, mostly about <a href="/card/raku/">card/Raku</a>.  Sorry about that.  No time to make it shorter.  You know how it is.  There&rsquo;s a little <a href="/card/joplin/">card/Joplin</a> stuff in here.</p>
</blockquote>
<p>This is embarrassing.  I fired up the Joplin <a href="https://joplinapp.org/desktop/">desktop app</a> this morning and it told me there was an update.  Makes sense.  I haven&rsquo;t loaded the desktop app in a couple months.</p>
<p>Oh hang on.  What about the <a href="https://joplinapp.org/terminal/">terminal app</a> which I was just writing about over the last couple posts?</p>
<p>Yep.  The <a href="https://joplinapp.org/changelog_cli">Changelog</a> shows updates, one of which includes batch processing.  Batch processing sounds like exactly the thing to address my many complaints about performance.</p>
<h2 id="update-joplin-with-volta">Update Joplin with Volta</h2>
<p>I use <a href="https://volta.sh">Volta</a> to manage my<a href="/card/node.js/">card/Node.js</a> resources.  Volta treats installing and updating as the same action.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">volta install joplin
</span></span></code></pre></div><p>This is what I have now:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> joplin version
</span></span><span class="line"><span class="cl"><span class="go">joplin 1.8.1 (prod)
</span></span></span></code></pre></div><p>Now I&rsquo;m up to date.  Let&rsquo;s see what changes I can make to my journaling code.</p>
<h2 id="fix-the-one-liners">Fix the one-liners</h2>
<p>The one-liner for adding journal entries works fine as-is.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="o">&amp;&amp;</span> joplin edit <span class="k">$(</span>date --iso<span class="o">=</span>minute<span class="k">)</span>
</span></span></code></pre></div><p>Reading the entries needs improvement.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">raku -e <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">  qqx{joplin cat $_}.subst(/^(&lt;[\dT:\-]&gt;+)/, { &#34;# $0&#34; }).say for qx{ joplin ls }.lines.sort
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="p">|</span> python -m rich.markdown -
</span></span></code></pre></div><p>Joplin CLI v1.8.1 added a <code>batch</code> command, which executes commands from a text file.  My challenge: <code>joplin batch</code> does not appear to have an option for standard input.  This means I can&rsquo;t casually pipe output from another process.  Here&rsquo;s what I came up with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin batch &lt;<span class="o">(</span>raku -e <span class="s1">&#39;qx{joplin ls}.lines.sort.map({ &#34;cat $_&#34; }).join(&#34;\n&#34;).say&#39;</span><span class="o">)</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> raku -ne <span class="s1">&#39;.subst(/^(&lt;[\dT:\-]&gt;+)$/, { &#34;# $0&#34; }).say&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> python -m rich.markdown -
</span></span></code></pre></div><p>We take advantage of a little shell magic to treat the output of another process as a file.</p>
<p>Don&rsquo;t ask me to understand the shell magic.  In <a href="https://www.gnu.org/software/bash/">GNU Bash</a>, <code>command &lt;(stuff)</code> means something along the lines of &ldquo;evaluate <em>stuff</em> and hand the output of that evaluation to <code>command</code> as if it was a file.&rdquo;</p>
<p>It&rsquo;s all a little inside-out and twisty.  It might help if we break up the chunks.</p>
<table>
<thead>
<tr>
<th>Chunk</th>
<th>What it does</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>qx{joplin ls}.lines.sort</code></td>
<td>collect the sorted entry list from this notebook</td>
</tr>
<tr>
<td><code>.map{ &quot;cat $_&quot; }</code></td>
<td>create a Joplin command to display this entry</td>
</tr>
<tr>
<td><code>.join(&quot;\n&quot;).say</code></td>
<td>print those commands as one multi-line string</td>
</tr>
<tr>
<td><code>joplin batch &lt;(...)</code></td>
<td>send <code>raku</code>&rsquo;s output to <code>joplin batch</code></td>
</tr>
<tr>
<td><code>... | .subst(...)</code></td>
<td>turn timestamp lines from output into Markdown headers</td>
</tr>
<tr>
<td><code>... | python -m rich.markdown -</code></td>
<td>format the output for terminal display</td>
</tr>
</tbody>
</table>
<p>We pull Raku in twice: once to build the command and again to parse the output. On the other hand we&rsquo;re only calling Joplin twice instead of forty or so times.</p>
<p>That makes the one-liner downright zippy, all things considered.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time joplin batch &lt;(raku -e &#39;qx{joplin ls}.lines.sort.map({ &#34;cat $_&#34; }).join(&#34;\n&#34;).say&#39;) \
</span></span><span class="line"><span class="cl">  | raku -ne &#39;.subst(/^(&lt;[\dT:\-]&gt;+)$/, { &#34;# $0&#34; }).say&#39; \
</span></span><span class="line"><span class="cl">  | python -m rich.markdown -
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m1.407s
</span></span><span class="line"><span class="cl">user    0m1.608s
</span></span><span class="line"><span class="cl">sys     0m0.140s
</span></span></code></pre></div><p>One and a half seconds for a formatted display of every journal entry.  Not bad, considering that I&rsquo;m running on <a href="https://docs.microsoft.com/en-us/windows/wsl/">WSL</a>.  Plus I don&rsquo;t really know one-liners, Raku, or Joplin.</p>
<blockquote>
<p>[!NOTE]
The documentation for <code>joplin ls</code> mentions a <code>--sort</code> flag, but as of v1.8.1 I got no difference when using <code>joplin ls --sort title</code>. Didn&rsquo;t see a mention of the specific issue, so I overcame my shyness and filed <a href="https://github.com/laurent22/joplin/issues/5004">#5004</a>.</p>
</blockquote>
<h2 id="fix-the-script">Fix the script</h2>
<p>Splitting up the Raku script into logical pieces the other day means that today I only need to fix a single function.  Thank goodness.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>How much does this function need to improve?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time jj today
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m3.001s
</span></span><span class="line"><span class="cl">user    0m3.281s
</span></span><span class="line"><span class="cl">sys     0m0.390s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ time jj all
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m31.253s
</span></span><span class="line"><span class="cl">user    0m31.779s
</span></span><span class="line"><span class="cl">sys     0m4.616s
</span></span></code></pre></div><p>Lots.  This function needs to be lots quicker.  It took three seconds to display today&rsquo;s lone entry, and over 30 seconds to display all 40 journal entries.  Every new entry slows the whole thing down, because every new entry means a new call to <code>joplin</code>.</p>
<blockquote>
<p>[!NOTE]
I don&rsquo;t jot <em>that</em> many notes in a day. Some of that&rsquo;s from reorganizing my Joplin notebooks, putting daily journals in with the quick entries.</p>
</blockquote>
<p>I tried mimicking the shell magic but couldn&rsquo;t figure out how in the time I allowed myself.  This isn&rsquo;t work code where you have to get things just so. This is a fun little utility for my own amusement.</p>
<p><code>joplin batch</code> expects a file?  Let&rsquo;s give it a file.  But I want that file to go away when I&rsquo;m done, so let&rsquo;s find a module to handle temporary files.</p>
<p>Poking through the directory of <a href="https://modules.raku.org">Raku modules</a> quickly showed me two possibilities:</p>
<dl>
<dt><a href="https://modules.raku.org/dist/Temp::Path:cpan:UFOBAT"><code>Temp::Path</code></a></dt>
<dd>gives you a friendly object you can write to or stringify when you need a filename</dd>
<dt><a href="https://modules.raku.org/dist/File::Temp:cpan:RBT"><code>File::Temp</code></a></dt>
<dd>presents a more utilitarian interface, providing filename and filehandle as separate variables</dd>
</dl>
<p>The end result is the same: a file that goes away when you no longer need it.</p>
<p>I like friendly. Let&rsquo;s see how <code>Temp::Path</code> does.</p>
<h3 id="try-temppath">Try <code>Temp::Path</code></h3>
<p>Need to install it, of course.  <a href="https://github.com/ugexe/zef"><code>zef</code></a> handles Raku modules.  I set that up a while back with [[post/2020/05/setting-up-raku-with-rakubrew|<code>rakubrew</code>]].</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">zef install Temp::Path
</span></span></code></pre></div><p>Then we let Raku know we&rsquo;re using the module.  That traditionally goes near the top of our script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Temp::Path</span><span class="p">;</span>
</span></span></code></pre></div><p>More or less following along Temp::Path&rsquo;s sample usage.  <a href="https://docs.raku.org/language/control#index-entry-control_flow_with"><code>with</code></a> creates a block for our temporary file.  It even sets the <a href="https://docs.raku.org/language/variables#The_$__variable">topic variable</a> <code>$_</code>.  Don&rsquo;t need to come up with a temporary variable name for our temporary file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">with</span> <span class="n">make-temp-path</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="nb">spurt</span><span class="p">(</span><span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="p">&#34;</span><span class="s2">cat </span><span class="nv">$_</span><span class="p">&#34;</span> <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="se">\n</span><span class="p">&#34;));</span>
</span></span><span class="line"><span class="cl">    <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin batch </span><span class="nv">$_</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span> <span class="p">/</span><span class="ni">^^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)</span><span class="ni">$$</span><span class="p">/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The regular expression is starting to look interesting.  <code>joplin batch</code> hands everything to us as one string.  We need to adjust the entry-oriented logic we had before.  Now we find any <em>line</em> containing a lone ISO-8601 timestamp, and convert it to a top-level Markdown header.  The <code>:g</code> flag tells <code>.subst</code> to replace every occurrence.</p>
<blockquote>
<p>[!NOTE] <code>^..$</code> vs <code>^^..$$</code>
Regular expressions in other languages treat <code>^</code> and <code>$</code> differently depending on whether you&rsquo;re applying the expression in a single-line or multiple-line context. Raku&rsquo;s <a href="https://docs.raku.org/language/regexes#Anchors">anchors</a> treat every expression as multi-line.</p>
<p>That&rsquo;s a nice consistency point in Raku&rsquo;s favor. Instead of memorizing more flags and contexts, and more special anchors for when the flags and context make things unclear, we get these two paired anchors.</p>
<table>
<thead>
<tr>
<th>Anchor</th>
<th>Where it matches</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>beginning of the string</td>
</tr>
<tr>
<td><code>$</code></td>
<td>end of the string</td>
</tr>
<tr>
<td><code>^^</code></td>
<td>beginning of a line</td>
</tr>
<tr>
<td><code>$$</code></td>
<td>end of a line</td>
</tr>
</tbody>
</table>
<p>There are plenty of other things for us to memorize, of course.</p>
<p>If you&rsquo;re more of a visual person, here&rsquo;s a quality page from my extensive notebook.</p>
<p><img src="/post/2021/05/attachments/img/2021/cover-2021-05-24.jpg" alt="diagram of multi-line string showing where these anchors match"/></p>
<p>So what if my Raku notebook only has this one page with this one diagram. It&rsquo;s a good diagram.  Very professional.  High quality learning aid.</p>
</blockquote>
<p>Those few lines don&rsquo;t change anything for me as a user.  Maybe the speed?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time jj today
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m2.969s
</span></span><span class="line"><span class="cl">user    0m3.385s
</span></span><span class="line"><span class="cl">sys     0m0.303s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ time jj all
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m3.034s
</span></span><span class="line"><span class="cl">user    0m3.328s
</span></span><span class="line"><span class="cl">sys     0m0.505s
</span></span></code></pre></div><p>Huh. It&rsquo;s not any faster than the best case for the initial script, with a single entry taking roughly the same amount of time to load and display.  Then again, <code>batch</code> is clearly doing its job.  One entry takes almost exactly the same amount of time as 40.  Since most days I&rsquo;ll have multiple entries, that is an effective optimization for the common case.</p>
<p>But why is my one-liner twice as fast?  Is it Temp::Path?  Raku?  Joplin? Something to do with file I/O on WSL 2?  No idea.</p>
<p>Let&rsquo;s find out if File::Temp does any better.</p>
<h3 id="try-filetemp">Try File::Temp</h3>
<p>Out comes <code>zef</code>…</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">zef install File::Temp
</span></span></code></pre></div><p>…then use File::Temp instead of Temp::Path…</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Temp</span><span class="p">;</span>
</span></span></code></pre></div><p>…then rewrite <code>read-entries</code> one more time…</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="p">(</span><span class="nv">$filename</span><span class="o">,</span> <span class="nv">$filehandle</span><span class="p">)</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$filehandle</span><span class="o">.</span><span class="nb">spurt</span><span class="p">(</span> <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="p">&#34;</span><span class="s2">cat </span><span class="nv">$_</span><span class="p">&#34;</span> <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="se">\n</span><span class="p">&#34;)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin batch </span><span class="nv">$filename</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^^</span><span class="sr"> </span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)</span><span class="sr"> </span><span class="ni">$$</span><span class="p">/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><blockquote>
<p>[!NOTE] Space is insignificant in regular expressions
Did you catch that?  Raku ignores whitespace in regular expressions unless you say otherwise with <a href="https://docs.raku.org/language/regexes#Sigspace"><code>:sigspace</code></a>.  Means you can make a regex easier to read.  This wasn&rsquo;t <em>much</em> easier to read, but at least we can tell where the anchors are and what I hope to find between those anchors.</p>
<p>For Perl folks, this plus the multi-line thing is like giving every regex <code>/mx</code>.  For  Python folks, like <code>re.MULTILINE</code> and <code>re.VERBOSE</code>.  For JavaScript folks — um — it&rsquo;s like having useful regular expressions.  Okay, it&rsquo;s like having <a href="https://xregexp.com">XRegExp</a> installed and using <code>'x'</code>.</p>
</blockquote>
<p>…and try it out.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time jj today
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m2.502s
</span></span><span class="line"><span class="cl">user    0m2.771s
</span></span><span class="line"><span class="cl">sys     0m0.326s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ time jj all
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m2.611s
</span></span><span class="line"><span class="cl">user    0m2.911s
</span></span><span class="line"><span class="cl">sys     0m0.381s
</span></span></code></pre></div><p>Ran each version a few times, just to be sure.  The version with File::Temp consistently finished a noticeable fraction of a section quicker than using Temp::Path.  Still nowhere near the one-liner&rsquo;s performance, but good enough
that I&rsquo;ll stick with File::Temp until I come up with something better.</p>
<p>Do I care enough to reboot into Linux and see how much of a difference that makes?</p>
<p>Not really.</p>
<p>I can probably optimize this, but it&rsquo;s not urgent or important.  So far I only skim my entries when I already have a few moments to spare.  Besides, the real optimizations almost definitely lie with using the Joplin API.</p>
<p>What I&rsquo;m saying is don&rsquo;t get hung up on trivia.</p>
<p>Speaking of trivia…</p>
<h2 id="about-that-regular-expression">About that regular expression</h2>
<p>I need to do something about this.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> ... </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^^</span><span class="sr"> </span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)</span><span class="sr"> </span><span class="ni">$$</span><span class="p">/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">);</span>
</span></span></code></pre></div><p>We already know that regular expressions are their own little language embedded in whatever programming language we happen to be getting work done in.  With Raku, we can treat regular expressions as part of the Raku language itself.</p>
<p>Let&rsquo;s tackle this backwards.  Top-down.  Whatever it is the fancy people say. I&rsquo;m going to split it out into its own function.  Makes it easier to think of this transformation in isolation.</p>
<h3 id="hide-it-in-a-function">Hide it in a function</h3>
<p>What do I want this function to do?  I want it to give me my <em>journal text</em>, but with <em>formatted headers</em> in the right places.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">format-headers</span><span class="p">(</span><span class="nv">$journal-text</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$journal-text</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">/</span><span class="ni">^^</span><span class="sr"> </span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)</span><span class="sr"> </span><span class="ni">$$</span><span class="p">/</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="use-a-named-capture">Use a named capture</h3>
<p>Do I want to format every <code>$0</code>? No. I want to format every <em>entry title</em>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">format-journal</span><span class="p">(</span><span class="nv">$journal-text</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$journal-text</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="o">...,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># $&lt;entry-title&gt;</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Of course Raku supports <a href="https://docs.raku.org/language/regexes#Named_captures">named captures</a>.  The part we care about is stored in the match object.  Behind the scenes, <code>$&lt;entry-title&gt;</code> is getting the value stored under the key <code>&quot;entry-title&quot;</code>.</p>
<h2 id="an-rx-block-for-legibility">An <code>rx{}</code> block for legibility</h2>
<p>How do I know the <em>entry title</em>?  I know the <em>entry title</em> because I found a
<em>lone timestamp</em>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">format-journal</span><span class="p">(</span><span class="nv">$journal-text</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$journal-text</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">rx</span><span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      </span><span class="nv">$&lt;entry-title&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="p">(</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">lone-timestamp</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">)</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="p">}</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># $&lt;entry-title&gt;</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>rx{ ... }</code> indicates an <a href="https://docs.raku.org/language/regexes#Anonymous_regex_definition_syntax">anonymous regex</a>.  &ldquo;Anonymous&rdquo; as opposed to what exactly?  I&rsquo;m getting there.  As our expressions get more complex, take advantage of all useful quoting mechanisms.</p>
<p>Notice that instead of a <code>(?&lt;name&gt; pattern)</code> approach to named captures, in Raku it looks a lot more like assigning a pattern to a variable.  Okay fine. Assigning a pattern to the match object&rsquo;s hash, under the key <code>&quot;entry-title&quot;</code>.  But still.  It looks like a more familiar programming language assignment.</p>
<p>But rather than the expected elaborate chain of metacharacters, the pattern we store is — another identifier?</p>
<p>I told you I was getting there.</p>
<h3 id="name-your-regex-not-just-your-capture">Name your regex, not just your capture</h3>
<p>What&rsquo;s a <em>lone timestamp</em>? It&rsquo;s a <em>timestamp</em> on a line by itself.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">lone-timestamp</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="ni">^^</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">timestamp</span><span class="p">&gt;</span><span class="sr"> </span><span class="ni">$$</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span></code></pre></div><p>Now we have a regular expression as its own scoped code object.  The <a href="https://docs.raku.org/language/regexes#Named_regex_definition_syntax">regex</a> is the rawest component of a family that includes tokens, rules, and entire <a href="https://docs.raku.org/language/grammar_tutorial">grammars</a>.  I&rsquo;m not ready to get into grammars yet, but I am absolutely getting closer.</p>
<h3 id="its-not-an-expression-its-a-composition">It&rsquo;s not an expression; it&rsquo;s a composition</h3>
<p>What does a <em>timestamp</em> look like?  Well, a <a href="https://docs.raku.org/type/DateTime#method_Str">DateTime String</a> holds an <em>ISO 8601 date</em>, a <em>clock time</em>, and and <em>offset</em>, with a <code>'T'</code> between the date and the clock time.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">timestamp</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">iso8601-date</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">T</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">clock-time</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">offset</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span></code></pre></div><p>If we&rsquo;re looking for a literal string, it&rsquo;s okay to use a string literal.</p>
<p>Now we have a few regex patterns to define.  An <em>ISO 8601 date</em> includes a <em>year</em>, a <em>month</em>, and a <em>day of the month</em>, separated by <code>'-'</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">iso8601-date</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">year</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">month</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">day-of-month</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span></code></pre></div><p>Playing more with a language gives me a feel for how to use it based on what it makes easy.  Raku makes it easy to create a program by composing it from small pieces.  Tiny pieces, even.</p>
<p>Mind you, I have no idea if that&rsquo;s what <code>raku</code> the <em>compiler</em> likes.  But the <em>syntax</em> loves it.</p>
<p>A <em>year</em> is four digits, a <em>month</em> is two digits, and the <em>day of the month</em> is two digits.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">year</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">4</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">month</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">day-of-month</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span></code></pre></div><p>The <a href="https://docs.raku.org/language/regexes#General_quantifier:_**_min..max">general quantifier</a> <code>**</code> indicates how many times you expect a chunk to appear.  To this day I can&rsquo;t remember the exact syntax for quantifiers in old-school regular expressions.  But I can remember the number 4.</p>
<blockquote>
<p>[!NOTE]
This regex is wrong for verifying real dates. It&rsquo;s not wrong enough to worry about today. I&rsquo;m identifying header lines, not validating forms. But if some day I decide to enforce zero-padded months from <code>01</code> to <code>12</code>, I know exactly which block to edit.</p>
</blockquote>
<p>Looks like <em>clock time</em> gets saved as <em>hours</em>, <em>minutes</em>, and <em>seconds</em>.  In the interest of time, we&rsquo;ll oversimplify those too.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">hours</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">minutes</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">seconds</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">clock-time</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">hours</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">minutes</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">seconds</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span></code></pre></div><p>And my offset holds an indicator, some <em>hours</em>, and some <em>minutes</em>.  Hey, I can reuse my existing regex definitions for those!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">offset</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;[</span><span class="sr">+-</span><span class="p">]&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">hours</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">minutes</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span></code></pre></div><p>All right.  I think that covers it.  I enjoyed reusing my expressions for <em>hours</em> and <em>minutes</em> like that.  Actual code reuse, in a regular expression. Who would&rsquo;ve thought?</p>
<p>When I take this <code>lone-timestamp</code> regex and match it against <code>&quot;2021-05-24T08:11:00-07:00&quot;</code> we can see those named expressions at work. The potential really starts to sink in for me.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">｢2021-05-24T08:11:00-07:00｣
</span></span><span class="line"><span class="cl"> lone-timestamp =&gt; ｢2021-05-24T08:11:00-07:00｣
</span></span><span class="line"><span class="cl">  timestamp =&gt; ｢2021-05-24T08:11:00-07:00｣
</span></span><span class="line"><span class="cl">   iso8601-date =&gt; ｢2021-05-24｣
</span></span><span class="line"><span class="cl">    year =&gt; ｢2021｣
</span></span><span class="line"><span class="cl">    month =&gt; ｢05｣
</span></span><span class="line"><span class="cl">    day-of-month =&gt; ｢24｣
</span></span><span class="line"><span class="cl">   clock-time =&gt; ｢08:11:00｣
</span></span><span class="line"><span class="cl">    hours =&gt; ｢08｣
</span></span><span class="line"><span class="cl">    minutes =&gt; ｢11｣
</span></span><span class="line"><span class="cl">    seconds =&gt; ｢00｣
</span></span><span class="line"><span class="cl">   offset =&gt; ｢-07:00｣
</span></span><span class="line"><span class="cl">    hours =&gt; ｢07｣
</span></span><span class="line"><span class="cl">    minutes =&gt; ｢00｣
</span></span></code></pre></div><p>And this is just me composing regex objects.  Eventually I&rsquo;m going to try grammars and then look out world!</p>
<blockquote>
<p>[!NOTE] but why?
This may all seem a little ridiculous, and for this use case — parsing my own entry titles — it is.  So why am I going through all this work? Aside from it being fun, of course.</p>
<p>Raku&rsquo;s sibling language Perl got a bad reputation for being dense and unreadable. Regular expressions factored heavily into that density. By providing language-level structures for defining our expressions, Raku gives us an opportunity to use their full power for handling text without resorting to the infamous density of 1990s regexen.</p>
<p>We should absolutely use that opportunity and encourage new languages to steal <em>these</em> regular expressions rather than the stuff that impressed us twenty years ago.</p>
</blockquote>
<h3 id="ship-it">Ship it!</h3>
<p>What am I doing on this soapbox? Time to step down.</p>
<p>My script works. It&rsquo;s still not fast, but at least it&rsquo;s never slow. It&rsquo;s readable. And most important of all, I had fun.</p>
<h2 id="the-complete-script">The complete script</h2>
<p>Includes a couple more steps into composition that I didn&rsquo;t feel merited extra blog post paragraphs.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env raku</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$notebook</span>     <span class="o">=</span> <span class="p">&#34;</span><span class="s2">Journal</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$entry-window</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">minute</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">digit</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">two-digits</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">digit</span><span class="p">&gt;</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">year</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">digit</span><span class="p">&gt;</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">4</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">month</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">day-of-month</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">hours</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">minutes</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">seconds</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">iso8601-date</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">year</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">month</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">day-of-month</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">clock-time</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">hours</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">minutes</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">seconds</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">offset</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;[</span><span class="sr">+-</span><span class="p">]&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">hours</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">minutes</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">timestamp</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">iso8601-date</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">T</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">clock-time</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">offset</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">lone-timestamp</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="ni">^^</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">timestamp</span><span class="p">&gt;</span><span class="sr"> </span><span class="ni">$$</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">add-entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$timestamp</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">truncated-to</span><span class="p">(</span><span class="nv">$entry-window</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$command</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin edit </span><span class="nv">$timestamp</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">shell</span><span class="p">(</span> <span class="nv">$command</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">all-entries</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin ls</span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">filtered-entries</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">all-entries</span><span class="o">.</span><span class="nb">grep</span><span class="p">({</span> <span class="o">.</span><span class="nb">starts-with</span><span class="p">(</span><span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-today</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-yesterday</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$yesterday</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">earlier</span><span class="p">(</span><span class="s">days</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1"># or :1day for the terse</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="nv">$yesterday</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="p">(</span><span class="nv">$filename</span><span class="o">,</span> <span class="nv">$filehandle</span><span class="p">)</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$filehandle</span><span class="o">.</span><span class="nb">spurt</span><span class="p">(</span> <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="p">&#34;</span><span class="s2">cat </span><span class="nv">$_</span><span class="p">&#34;</span> <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="se">\n</span><span class="p">&#34;)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">format-headers</span><span class="p">(</span> <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin batch </span><span class="nv">$filename</span><span class="s2"> </span><span class="p">}</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">format-headers</span><span class="p">(</span><span class="nv">$journal-text</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nv">$journal-text</span> <span class="o">~~</span> <span class="p">/&lt;</span><span class="nf">lone-timestamp</span><span class="p">&gt;/</span> <span class="p">{</span> <span class="nv">$/</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nv">$journal-text</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">rx</span><span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      </span><span class="nv">$&lt;entry-title&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="p">[</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">lone-timestamp</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">]</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="p">}</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># $&lt;entry-title&gt;</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">add</span><span class="p">&#34;)</span> <span class="p">{</span>   <span class="k">#= </span><span class="sd">Add an entry
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="n">add-entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">today</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read today&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-today</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">yesterday</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read yesterday&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-yesterday</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">all</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read all entries (SLOW!)
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">all-entries</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
</item>
<item>
  <title>Post: My Raku script for Journaling in Joplin</title>
  <link>https://randomgeekery.org/post/2021/05/my-raku-script-for-journaling-in-joplin/</link>
  <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/05/my-raku-script-for-journaling-in-joplin/</guid>
  <description>Setting the scene So yesterday I wrote a couple of one-liners for managing journal entries in the card/Joplin note-taking application, with help from card/Raku.
I made one for writing:
joplin use Journal &amp;&amp; joplin edit $(date --iso=minute) I made one for reading:
joplin use Journal \ &amp;&amp; raku -e &#39; for qx{ joplin ls }.lines.sort { qqx{ joplin cat $_ }.subst( /^(&lt;[\dT:\-]&gt;&#43;)/, { &#34;# $0&#34; } ).say }&#39; \ | python -m rich.</description>
   <category>post</category> 
   <category>post</category> 
   <category>programming</category>  <category>raku-lang</category>  <category>joplin</category>  <category>shell</category> 
  <content:encoded><![CDATA[<h2>Why mess with getopt when I can just use multi-dispatch?</h2><p><img src="/post/2021/05/../../../attachments/img/2021/cover-2021-05-22.png" alt="attachments/img/2021/cover-2021-05-22.png"/></p>
<h2 id="setting-the-scene">Setting the scene</h2>
<p>So yesterday I wrote a couple of <a href="/post/2021/05/cli-journaling-in-joplin-with-raku/">one-liners</a> for managing journal entries in the <a href="/card/joplin/">card/Joplin</a> note-taking application, with help from <a href="/card/raku/">card/Raku</a>.</p>
<p>I made one for writing:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="o">&amp;&amp;</span> joplin edit <span class="k">$(</span>date --iso<span class="o">=</span>minute<span class="k">)</span>
</span></span></code></pre></div><p>I made one for reading:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="o">&amp;&amp;</span> raku -e <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    for qx{ joplin ls }.lines.sort {
</span></span></span><span class="line"><span class="cl"><span class="s1">      qqx{ joplin cat $_ }.subst(
</span></span></span><span class="line"><span class="cl"><span class="s1">        /^(&lt;[\dT:\-]&gt;+)/, { &#34;# $0&#34; }
</span></span></span><span class="line"><span class="cl"><span class="s1">      ).say
</span></span></span><span class="line"><span class="cl"><span class="s1">    }&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> python -m rich.markdown -
</span></span></code></pre></div><p>They work.  That&rsquo;s great.</p>
<p>They don&rsquo;t work great, though.  Mainly the one-liner for reading.  It dumps every journal entry, which is both overwhelming and slow.  Overwhelming because I only want to see today&rsquo;s journal entries most of the time.  Slow because every one of those entries requires a separate call to <code>joplin</code>.  Joplin is lovely, but it expects to be used as a persistent application.  The command line functionality is optimized for convenience.  It is <em>not</em> optimized for being hammered repeatedly by an overenthusiastic command line script.</p>
<p>I can fix the overwhelming.  I can&rsquo;t properly fix the slow until I learn more about the <a href="https://joplinapp.org/api/overview/">Joplin API</a>.  At least I can make the experience less awful.</p>
<h2 id="make-it-less-awful">Make it less awful</h2>
<h3 id="less-hard-coding-please">Less hard-coding please</h3>
<p>First things first.  I might change the name of my journal notebook.  You might want a daily diary rather than a giant stack of entries.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$notebook</span>     <span class="o">=</span> <span class="p">&#34;</span><span class="s2">Journal</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$entry-window</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">minute</span><span class="p">&#34;;</span>
</span></span></code></pre></div><p>Focusing on daily journals? Set <code>$entry-window</code> to <code>&quot;day&quot;</code>.</p>
<h3 id="adding-an-entry">Adding an entry</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">add-entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$timestamp</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">truncated-to</span><span class="p">(</span><span class="nv">$entry-window</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$command</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin edit </span><span class="nv">$timestamp</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">shell</span><span class="p">(</span> <span class="nv">$command</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Raku&rsquo;s <a href="https://docs.raku.org/type/DateTime">DateTime</a> classes provide the gist of what we got with GNU Date. <a href="https://docs.raku.org/type/DateTime#method_truncated-to"><code>truncated-to</code></a> rounds our current timestamp — <a href="https://docs.raku.org/type/DateTime#method_now"><code>now</code></a> — down to the minute.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku -e <span class="s1">&#39;DateTime.now.say&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go">2021-05-22T11:52:28.380996-07:00
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">$</span> raku -e <span class="s1">&#39;DateTime.now.truncated-to(&#34;minute&#34;).say&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go">2021-05-22T11:52:00-07:00
</span></span></span></code></pre></div><p>It doesn&rsquo;t print exactly the same as <code>date</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> date --iso<span class="o">=</span>minute
</span></span><span class="line"><span class="cl"><span class="go">2021-05-22T11:52-07:00
</span></span></span></code></pre></div><p>It wouldn&rsquo;t take excessive effort to make them match, but I&rsquo;m just not concerned about it at the moment.</p>
<h4 id="use-a-main-sub">Use a <code>MAIN</code> sub</h4>
<p>Well, we went and put the logic for adding an entry into a function.  We want to call that function at some point, right?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">add-entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>We don&rsquo;t need <a href="https://docs.raku.org/routine/MAIN"><code>MAIN</code></a> yet.  If present, it&rsquo;s your Raku script&rsquo;s official entry point.  If not, you have a plain old script.  You&rsquo;re good either way.  Having that entry point will make things easier to manage in a minute, though.</p>
<p>If we run this as-is, it adds a new entry.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku journal
</span></span><span class="line"><span class="cl"><span class="go">Note does not exist: &#34;2021-05-22T12:18:00-07:00&#34;. Create it? (Y/n) y
</span></span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Note has been saved.
</span></span></span></code></pre></div><p>Okay, fine.  It works.  So far it&rsquo;s neither tidier nor more readable than the initial one-liner.  But writing an entry was never the problem.</p>
<p>The problem was reading the entries.</p>
<h3 id="read-all-the-entries">Read all the entries?</h3>
<p>Back in our one-liner, collecting entries and reading them got smushed together.  They&rsquo;re two distinct actions, though.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">all-entries</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin ls</span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Right.  Now we have subs for writing, and subs for reading.  How do we want to get at them?  Maybe a callback table with action keywords? Maybe a fancy <a href="https://modules.raku.org">module</a>?</p>
<p>Nope!  Well — we <em>could</em>.  But we don&rsquo;t need to.  Raku has <a href="https://docs.raku.org/language/functions#Multi-dispatch">multi-dispatch</a>!</p>
<h4 id="use-multiple-main-subs">Use multiple <code>MAIN</code> subs!</h4>
<p>We replace the initial <code>MAIN</code> definition with these:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">add</span><span class="p">&#34;)</span> <span class="p">{</span>   <span class="k">#= </span><span class="sd">Add an entry
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="n">add-entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">read</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read all entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span><span class="n">all-entries</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>multi</code> tells Raku to expect multiple definitions for this sub.  Without it, the compiler gets annoyed.</p>
<p><a href="https://en.wikipedia.org/wiki/Multiple_dispatch">Multiple dispatch</a> means a few things depending on which language you&rsquo;re using — or which computer scientist you&rsquo;re asking.  Basically it lets you avoid having one giant glob of a function with all sorts of special logic.  You do that by having a different version of the function for different situations.</p>
<p>Where I got surprised?  Most of the tiny amount I&rsquo;ve read out there for multiple dispatch talks about basing on types or pattern matching against variables.  You could absolutely do that with Raku.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$action</span> <span class="k">where</span> <span class="p">{</span> <span class="nv">$action</span> <span class="o">==</span> <span class="p">&#34;</span><span class="s2">add</span><span class="p">&#34;</span> <span class="p">})</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$action</span> <span class="k">where</span> <span class="p">{</span> <span class="nv">$action</span> <span class="o">==</span> <span class="p">&#34;</span><span class="s2">read</span><span class="p">&#34;</span> <span class="p">})</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</span></span></code></pre></div><p>Thing is, we&rsquo;re not doing anything with <code>$action</code>.  We <em>read</em> if the first command line argument is <code>read</code>.  We <em>add</em> if it&rsquo;s <code>add</code>.  Raku is happy enough matching that first argument against literal strings.  I assume other multi-dispatch languages can to the same, but nobody&rsquo;s been uncouth enough to bring it up in polite company.  It&rsquo;s always &ldquo;this type&rdquo; and &ldquo;that pattern&rdquo; or &ldquo;this enum.&rdquo;</p>
<p>What happens if we try to run the script with no arguments?  Well, if we didn&rsquo;t remove that initial version of <code>MAIN</code> we get a compiler error about redefining the sub.  But once that&rsquo;s out of the way, we no longer have a default path into the application!</p>
<p>No worries.  Raku&rsquo;s special handling of the entry point sub shows us the accepted usage.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku journal.raku
</span></span><span class="line"><span class="cl"><span class="go">Usage:
</span></span></span><span class="line"><span class="cl"><span class="go">  journal.raku add -- Add an entry
</span></span></span><span class="line"><span class="cl"><span class="go">  journal.raku read -- Read all entries
</span></span></span></code></pre></div><p>And that&rsquo;s where those <code>#=</code> comments come in.  They provide extra detail for the usage message displayed.</p>
<p>Let&rsquo;s try them out.  We&rsquo;ll <code>add</code> an entry and then make sure it shows up when we <code>read</code> them.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku journal.raku add
</span></span><span class="line"><span class="cl"><span class="go">Note does not exist: &#34;2021-05-22T12:55:00-07:00&#34;. Create it? (Y/n)
</span></span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Note has been saved.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> raku journal.raku <span class="nb">read</span>
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">#</span> 2021-05-22T12:55:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">[multi-dispatch]: https://docs.raku.org/language/functions#Multi-dispatch
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Raku Joplin journaling script, now with [multi-dispatch][]!
</span></span></span></code></pre></div><p>Nice.  Of course, at this point I&rsquo;m being handed 142 lines of text, and it&rsquo;s taking about 12 seconds to do it.  All that work and we finally reached the full &ldquo;overwhelming and slow&rdquo; point we were at this morning.</p>
<p>Things are about to improve!</p>
<h3 id="i-just-want-today">I just want today</h3>
<p>I&rsquo;ve been carefully using <em>inbox/ISO 8601</em> format for my entries.  That means I can filter to a specific date — or year, month, hour, etc — by constructing a date fragment and grabbing each entry that starts with the fragment.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">filtered-entries</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">all-entries</span><span class="o">.</span><span class="nb">grep</span><span class="p">({</span> <span class="o">.</span><span class="nb">starts-with</span><span class="p">(</span><span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Getting today&rsquo;s entries then becomes a matter of extracting a <code>yyyy-mm-dd</code> string from the ever-so-helpful DateTime.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-today</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><blockquote>
<p>[!NOTE] 2021-05-24
<a href="https://twitter.com/b2gills">@b2gills</a> mentioned that I could also use <a href="https://docs.raku.org/type/Date#method_today[Date.today]"><code>Date.today</code></a>
here!</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Why didn&#39;t you use Date.​today?<br><br>If you had a coercive parameter, you wouldn&#39;t even need to do anything more than Date.​today.<br><br> sub filtered-entries(Str(Date) $​date-funnel) {…}<br><br> sub entries-for-today() {<br> filtered-entries Date.​today<br> }</p>&mdash; Brad Gilbert (@b2gills) <a href="https://twitter.com/b2gills/status/1397038905405452296?ref_src=twsrc%5Etfw">May 25, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</blockquote>
<p>I haven&rsquo;t messed with <a href="https://docs.raku.org/syntax/Coercion%20type">parameter coercion</a> yet, but that looks like it will come in handy.</p>
<p>Need to touch up my reading <code>MAIN</code> definition, though.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">read</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read today&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-today</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Does it work?  Is it fast?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nb">time</span> raku journal.raku <span class="nb">read</span>
</span></span><span class="line"><span class="cl"><span class="gp">#</span> 2021-05-22T08:12:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Millie let me sleep in until 7:54. How gracious.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">[@liztormato]: https://twitter.com/liztormato
</span></span></span><span class="line"><span class="cl"><span class="go">[Reddit]: https://www.reddit.com/r/rakulang/comments/nif2sf/cli_journaling_in_joplin_with_raku_brian_wisti/
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Oh and last night&#39;s Joplin / Raku post got some legs. [@liztormato][] even
</span></span></span><span class="line"><span class="cl"><span class="go">shared it on [Reddit][]. That&#39;s cool. I always hope they like it when I post
</span></span></span><span class="line"><span class="cl"><span class="go">something about #RakuLang.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">#</span> 2021-05-22T10:43:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">My note script needs an option for &#34;read yesterday&#39;s notes.&#34;
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">#</span> 2021-05-22T12:18:00-07:00 Making sure that my Raku Joplin journaling script lets me add an entry.
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">#</span> 2021-05-22T12:55:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">[multi-dispatch]: https://docs.raku.org/language/functions#Multi-dispatch
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Raku Joplin journaling script, now with [multi-dispatch][]!
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">real    0m3.815s
</span></span></span><span class="line"><span class="cl"><span class="go">user    0m3.966s
</span></span></span><span class="line"><span class="cl"><span class="go">sys     0m0.502s
</span></span></span></code></pre></div><p>It works.  It&rsquo;s — it&rsquo;s not <em>fast</em> by any means, but 3.8 seconds is much faster than 12.  Again, there&rsquo;s an API waiting for when I&rsquo;m bored of abusing Joplin&rsquo;s command line conveniences.</p>
<h3 id="and-maybe-yesterday">And maybe yesterday</h3>
<p>Most of my deep dives into the journal will be from inside the Joplin app.  A quick glance at yesterday&rsquo;s notes could still be useful.</p>
<p>Of course a DateTime lets me ask for an <a href="https://docs.raku.org/type/DateTime#%28Dateish%29_method_earlier"><code>earlier</code></a> DateTime.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-yesterday</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$yesterday</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">earlier</span><span class="p">(</span><span class="s">days</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1"># or :1day for the terse</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="nv">$yesterday</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>For <code>MAIN</code> I <em>could</em> add and match against a subcommand.  I think instead I will adjust my top-level commands to reflect the most common cases.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">today</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read today&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-today</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">yesterday</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read yesterday&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-yesterday</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>And it works!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku journal.raku yesterday
</span></span><span class="line"><span class="cl"><span class="gp">#</span> 2021-05-21T09:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Alarm 07:00, stayed in bed as long as I could. Thanks to the dogs, that was 15
</span></span></span><span class="line"><span class="cl"><span class="go">minutes. Oh well.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">[Homebrew]: https://brew.sh
</span></span></span><span class="line"><span class="cl"><span class="go">[Nix]: https://nixos.org/
</span></span></span><span class="line"><span class="cl"><span class="go">[using Nix on Debian]: https://ariya.io/2020/05/nix-package-manager-on-ubuntu-or-debian
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Got the Raspberry Pi 4 set up with Raspbian, and the 500GB external drive
</span></span></span><span class="line"><span class="cl"><span class="go">attached. Thinking about package managers. I know [Homebrew][] but I could
</span></span></span><span class="line"><span class="cl"><span class="go">maybe try [Nix][]. There&#39;s a post about [using Nix on Debian][].
</span></span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">#</span> 2021-05-21T21:29:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Just about to post my Raku Joplin Journaling One-liners, but maybe a couple
</span></span></span><span class="line"><span class="cl"><span class="go">screenshots? People love screenshots.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Maybe they do. Maybe they don&#39;t. *I* love screenshots.
</span></span></span></code></pre></div><h3 id="what-about-formatting">What about formatting?</h3>
<p>Honestly?  I&rsquo;m not going to worry about it right now.  Piping to <a href="/card/rich/">card/Rich</a>
or <a href="/card/glow/">card/Glow</a> suffices when I want it pretty.</p>
<pre class="rich">╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-22T08:12:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

Millie let me sleep in until 7:54. How gracious.

Oh and last night's Joplin / Raku post got some legs. <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://twitter.com/liztormato">@liztormato</a></span> even shared it
on <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://www.reddit.com/r/rakulang/comments/nif2sf/cli_journaling_in_joplin_with_raku_brian_wisti/">Reddit</a></span>. That's cool. I always hope they like it when I post something about
#RakuLang.

╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-22T10:43:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

My note script needs an option for "read yesterday's notes."

╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-22T12:18:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

Making sure that my Raku Joplin journaling script lets me add an entry.

╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-22T12:55:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

Raku Joplin journaling script, now with <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://docs.raku.org/language/functions#Multi-dispatch">multi-dispatch</a></span>!

╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-22T14:05:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

Guess I'm about ready to post the second Raku Joplin journaling post. Ah, the
joys of hyperfocus.

Better stretch my legs and get back to the official task list after.
</pre>
<h2 id="the-complete-script">The complete script</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env raku</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$notebook</span>     <span class="o">=</span> <span class="p">&#34;</span><span class="s2">Journal</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$entry-window</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">minute</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">add-entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$timestamp</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">truncated-to</span><span class="p">(</span><span class="nv">$entry-window</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$command</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin edit </span><span class="nv">$timestamp</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">shell</span><span class="p">(</span> <span class="nv">$command</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">all-entries</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin ls</span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">filtered-entries</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">all-entries</span><span class="o">.</span><span class="nb">grep</span><span class="p">({</span> <span class="o">.</span><span class="nb">starts-with</span><span class="p">(</span><span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-today</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-yesterday</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$yesterday</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">earlier</span><span class="p">(</span><span class="s">days</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1"># or :1day for the terse</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="nv">$yesterday</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">add</span><span class="p">&#34;)</span> <span class="p">{</span>   <span class="k">#= </span><span class="sd">Add an entry
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="n">add-entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">today</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read today&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-today</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">yesterday</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read yesterday&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-yesterday</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">all</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read all entries (SLOW!)
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">all-entries</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
</item>
<item>
  <title>Post: CLI Journaling in Joplin with Raku</title>
  <link>https://randomgeekery.org/post/2021/05/cli-journaling-in-joplin-with-raku/</link>
  <pubDate>Fri, 21 May 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/05/cli-journaling-in-joplin-with-raku/</guid>
  <description>the formatted output of my journal-reading one-liner
Let’s write a couple one-liners so I can journal in card/Joplin from the command line!
But why? Journaling is great. Now I’m not talking about big name Bujo bullet journaling process. I mean getting a thought down quick before I lose it. Even better if I can get that thought down in a place where I can find it later.
I know there are loads of great journaling applications.</description>
   <category>post</category> 
   <category>post</category> 
   <category>shell</category>  <category>joplin</category>  <category>raku-lang</category>  <category>second-brain</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>I sure do use a lot of words to justify my one-liners</h2><p><img src="/post/2021/05/../../../attachments/img/2021/cover-2021-05-21.png" alt="attachments/img/2021/cover-2021-05-21.png"/>
the formatted output of my journal-reading one-liner</p>
<p>Let&rsquo;s write a couple one-liners so I can journal in <a href="/card/joplin/">card/Joplin</a> from the command line!</p>
<h2 id="but-why">But why?</h2>
<p>Journaling is great.  Now I&rsquo;m not talking about big name <a href="https://bulletjournal.com/">Bujo</a> bullet journaling process.  I mean getting a thought down quick before I lose it. Even better if I can get that thought down in a place where I can find it later.</p>
<p>I know there are loads of great journaling applications.  And lots of great applications that support journaling generally.  But I love my command line. Too many distractions in those apps.</p>
<p>Command line options exist.  I could use one of the bazillion command line journaling tools.  Okay.  Maybe not a bazillion.  A couple dozen, at least.</p>
<p>Those apps and tools are yet another interface, another set of rules.  I already have Joplin handy.  Besides desktop, mobile, and terminal applications, Joplin has a CLI.  And an API, but I suspect I&rsquo;ll get to that later.</p>
<p>With uncharacteristic restraint, today I choose to get better at the tools I have rather than installing a new one.</p>
<h2 id="adding-a-journal-entry">Adding a journal entry</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="o">&amp;&amp;</span> joplin edit <span class="k">$(</span>date --iso<span class="o">=</span>minute<span class="k">)</span>
</span></span></code></pre></div><p><a href="https://www.gnu.org/software/coreutils/manual/html_node/date-invocation.html#date-invocation">GNU Date</a> — from GNU Coreutils — gets us consistent timestamps, which simplify searching and filtering.  <code>--iso</code> produces an <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> timestamp.  Very handy.  By default it prints the <code>YYYY-MM-DD</code> version of today&rsquo;s date, but you can opt for more granularity.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> date --iso<span class="o">=</span>minute
</span></span><span class="line"><span class="cl"><span class="go">2021-05-20T08:26-07:00
</span></span></span></code></pre></div><p>I plan to make frequent small notes, so <code>minute</code> feels like a good choice.</p>
<blockquote>
<p>[!NOTE] <code>use Journal</code>?
Yes, this came up.  Had the Joplin terminal app open in one terminal while I added a journal entry in another terminal.  Terminal app did some sort of state maintenance thing.  Next thing I know I&rsquo;m adding journal entries to &ldquo;Nerd Notes.&rdquo;</p>
</blockquote>
<p>Since it doesn&rsquo;t exist, <code>joplin</code> will ask for confirmation before creating it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> joplin use Journal <span class="o">&amp;&amp;</span> joplin edit <span class="k">$(</span>date --iso<span class="o">=</span>minute<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="go">Note does not exist: &#34;2021-05-20T08:26-07:00&#34;. Create it? (Y/n)
</span></span></span></code></pre></div><p>I&rsquo;m okay with the confirmation request for now. That way I have fewer moments of accidentally creating entries.</p>
<p><img src="/post/2021/05/attachments/img/2021/editing-note.png" alt="Editing a journal entry"/></p>
<h3 id="what-about-more-of-a-diary">What about more of a diary?</h3>
<p>Leave <code>minute</code> off the <code>--iso</code> argument if you prefer a tidy collection of daily pages to my big stack of notes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin edit <span class="k">$(</span>date --iso<span class="k">)</span>
</span></span></code></pre></div><p>Now you&rsquo;ll be editing the single entry for today&rsquo;s date.</p>
<h2 id="reading-journal-entries">Reading journal entries</h2>
<p>The best review path will be via the Joplin app itself.  That way you can tag and edit.</p>
<p><em>But</em> – if you just want a quick view of recent thoughts?  That is something we can do from the command line.</p>
<p>This next bit gets a little fancy.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="o">&amp;&amp;</span> raku -e <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    for qx{ joplin ls }.lines.sort {
</span></span></span><span class="line"><span class="cl"><span class="s1">      qqx{ joplin cat $_ }.subst(
</span></span></span><span class="line"><span class="cl"><span class="s1">        /^(&lt;[\dT:\-]&gt;+)/, { &#34;# $0&#34; }
</span></span></span><span class="line"><span class="cl"><span class="s1">      ).say
</span></span></span><span class="line"><span class="cl"><span class="s1">    }&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> python -m rich.markdown -
</span></span></code></pre></div><p>Let me stall for a second.</p>
<h3 id="pretty-print-with-rich">Pretty print with Rich</h3>
<p>We already talked about <code>joplin use Journal</code>. <a href="https://rich.readthedocs.io/en/stable/markdown.html">Rich Markdown</a> formats Markdown — Joplin&rsquo;s default format — for rich display in a terminal.  It can even run as a standalone application.  I take advantage of that here to get a pretty view of my Joplin entries:</p>
<pre class="rich">╔══════════════════════════════════════════════════════════════════════════════╗
║                            <span style="font-weight: bold">2021-05-20T08:26-07:00</span>                            ║
╚══════════════════════════════════════════════════════════════════════════════╝


Getting an idea for a CLI journaling tool using Joplin as the backend

The logic would look something like this:

<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">┌──────────────────────────────────────────────────────────────────────────────┐</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│</span> <span style="color: #f8f8f2; text-decoration-color: #f8f8f2; background-color: #272822">joplin use Journal</span><span style="background-color: #272822">                                                          </span> <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│</span> <span style="color: #f8f8f2; text-decoration-color: #f8f8f2; background-color: #272822">joplin edit </span><span style="color: #66d9ef; text-decoration-color: #66d9ef; background-color: #272822">$(</span><span style="color: #f8f8f2; text-decoration-color: #f8f8f2; background-color: #272822">date --iso</span><span style="color: #66d9ef; text-decoration-color: #66d9ef; background-color: #272822">)</span><span style="background-color: #272822">                                                   </span> <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│</span> <span style="color: #75715e; text-decoration-color: #75715e; background-color: #272822"># append "## $(date --iso=minute)"</span><span style="background-color: #272822">                                          </span> <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">└──────────────────────────────────────────────────────────────────────────────┘</span>

That's it, basically. There could be more functionality, such as reviewing the
log.

╔══════════════════════════════════════════════════════════════════════════════╗
║                            <span style="font-weight: bold">2021-05-21T09:00-07:00</span>                            ║
╚══════════════════════════════════════════════════════════════════════════════╝

Alarm 07:00, stayed in bed as long as I could. Thanks to the dogs, that was 15
minutes. Oh well.

Got the Raspberry Pi 4 set up with Raspbian, and the 500GB external drive
attached. Thinking about package managers. I know <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://brew.sh">Homebrew</a></span> but I could maybe try
<span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://nixos.org/">Nix</a></span>. There's a post about <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://ariya.io/2020/05/nix-package-manager-on-ubuntu-or-debian">using Nix on Debian</a></span>.

╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-21T14:01:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

Resuming productivity, or something like it.

╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-21T20:20:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

I keep forgetting <span style="color: #ffffff; text-decoration-color: #ffffff; background-color: #000000">-sel clip</span> when using xclip. Without that it doesn't go into
the easy copy buffer.

<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">┌──────────────────────────────────────────────────────────────────────────────┐</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│</span> <span style="color: #f92672; text-decoration-color: #f92672; background-color: #272822; font-weight: bold">$ </span><span style="color: #f8f8f2; text-decoration-color: #f8f8f2; background-color: #272822">my-command | xclip -sel clip</span><span style="background-color: #272822">                                              </span> <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">└──────────────────────────────────────────────────────────────────────────────┘</span>
</pre>
<p>You can also use <a href="https://github.com/charmbracelet/glow">Glow</a> if you want a standalone Markdown pretty printer. It works.  Rich is already part of my toolkit, so I&rsquo;ll keep using it.</p>
<h3 id="am-i-ready-to-explain-myself">Am I ready to explain myself?</h3>
<p>Okay, I think I&rsquo;ve stalled enough.  That middle bit.  That&rsquo;s <a href="/card/raku/">card/Raku</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">for</span> <span class="k">q</span><span class="sa">x</span><span class="p">{</span><span class="s"> joplin ls </span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span><span class="o">.</span><span class="nb">say</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>I don&rsquo;t often do one-liners. We&rsquo;ll have to break it down into tiny pieces.</p>
<p>First, we need a sorted list of journal entries.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">q</span><span class="sa">x</span><span class="p">{</span><span class="s"> joplin ls </span><span class="p">}</span>  <span class="c1"># ask `joplin` to print note titles, saving the output</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="nb">lines</span>         <span class="c1"># Split that output into lines, one per note</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="nb">sort</span>          <span class="c1"># Sort those lines by note title</span>
</span></span></code></pre></div><p>Things get unpredictable if I don&rsquo;t sort notes myself.  Joplin tends to sort notes by last activity.  Thank goodness for ISO 8601, which is easily sorted:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">2021-05-20T08:26-07:00
</span></span><span class="line"><span class="cl">2021-05-21T09:00-07:00
</span></span><span class="line"><span class="cl">2021-05-21T14:01-07:00
</span></span><span class="line"><span class="cl">2021-05-21T20:20-07:00
</span></span></code></pre></div><p>Next, we need to do something with each of those note titles.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">for</span> <span class="k">q</span><span class="sa">x</span><span class="p">{</span><span class="s"> joplin ls </span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</span></span></code></pre></div><p>Well? The content of each note is important.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="s2"> </span><span class="p">}</span>
</span></span></code></pre></div><p><code>qqx</code> interpolates variables before asking the system to run your command. The variable being interpolated is our old friend <code>$_</code>, this time around standing in for whichever of those sorted lines we reached.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">2021-05-20T08:26-07:00
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Getting an idea for a CLI journaling tool using Joplin as the backend
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The logic would look something like this:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s">```bash
</span></span></span><span class="line"><span class="cl"><span class="s"></span>joplin use Journal
</span></span><span class="line"><span class="cl">joplin edit <span class="k">$(</span>date --iso<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># append &#34;## $(date --iso=minute)&#34;</span>
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">That&#39;s it, basically. There could be more functionality, such as reviewing
</span></span><span class="line"><span class="cl">the log.
</span></span></code></pre></div><p>I want to print this out in the terminal.  I need to massage it a little first. Even though the file is Markdown, the first line is the note&rsquo;s unformatted title.  It makes quick one-line notes easier.</p>
<p>But it also means if <em>I</em> want that first line to look significant, I need to do something with this:</p>
<pre tabindex="0"><code class="language-language" data-lang="language">2021-05-20T08:26-07:00
</code></pre><p>The most obvious fix to me? Turn it into a level one Markdown header.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="gh"># 2021-05-20T08:26-07:00
</span></span></span></code></pre></div><p>That&rsquo;s a single <a href="https://docs.raku.org/routine/subst"><code>.subst</code></a> transformation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>  <span class="c1"># in printed note</span>
</span></span><span class="line"><span class="cl">  <span class="p">/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span>          <span class="c1"># find the first line that looks like a timestamp</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span>                 <span class="c1"># and turn it into a Markdown header</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>Okay, I got a little lazy with the regular expression.  But my brain was in one-liner mode.  For a full script I&rsquo;d probably spell it out more clearly.</p>
<p>The last step is to display the transformed note contents.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span><span class="o">...</span><span class="p">)</span><span class="o">.</span><span class="nb">say</span>
</span></span></code></pre></div><p>Or ask them to display themselves.  However you want to think of it.</p>
<p>This whole thing would be rather clunky as a shell alias.  I could add it as a function to my <code>.bashrc</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">jread<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  joplin use Journal <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> raku -e <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">      qqx{joplin cat $_}.subst(/^(&lt;[\dT:\-]&gt;+)/, { &#34;# $0&#34; }).say for qx{ joplin ls }.lines.sort
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="p">|</span> python -m rich.markdown -
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Then again, maybe not.  This should probably be a script.  Check back in a few days.</p>
<blockquote>
<p>[!NOTE] Oooh a cliffhanger!
I have a working script already.  What I don&rsquo;t have much of is unallocated
time.  But hopefully yes!  Soon.  I did some cool stuff with <code>multi MAIN</code>
in Raku that I&rsquo;m desperate to show off.</p>
</blockquote>
]]></content:encoded>
</item>
<item>
  <title>Post: Joplin Terminal Basics</title>
  <link>https://randomgeekery.org/post/2021/04/joplin-terminal-basics/</link>
  <pubDate>Thu, 15 Apr 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/04/joplin-terminal-basics/</guid>
  <description>Joplin’s terminal view of my notebooks
Look. I don’t know if card/Joplin is going to be my note manager of choice. I don’t even know if I’ll still be using it next week. It’s cool. I’m just not that consistent.
But there’s these notes. Why not share them? Someone out there might make use of them.
Just give me a minute to turn the bullet points into sentences.
What? Try out Joplin’s terminal application for typing up and organizing quick notes.</description>
   <category>post</category> 
   <category>post</category> 
   <category>second-brain</category>  <category>joplin</category>  <category>shell</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>Managing notes with Joplin's terminal mode</h2><p><img src="/post/2021/04/../../../attachments/img/2021/cover-2021-04-15.png" alt="attachments/img/2021/cover-2021-04-15.png"/>
Joplin&rsquo;s terminal view of my notebooks</p>
<p>Look.  I don’t know if <a href="/card/joplin/">card/Joplin</a> is going to be my note manager of choice.  I don’t even know if I’ll still be using it next week.  It’s cool. I’m just not that consistent.</p>
<p>But there’s these notes.  Why not share them?  Someone out there might make use of them.</p>
<p>Just give me a minute to turn the bullet points into sentences.</p>
<h2 id="what">What?</h2>
<p>Try out Joplin’s <a href="https://joplinapp.org/terminal/">terminal application</a> for typing up and organizing quick notes.</p>
<h2 id="why">Why?</h2>
<p>I’m often taking notes.  It’s the only way I can remember the little things. You can find a note-taking app whatever your preferences are.  I spend a lot of time in the terminal.  I don’t want to <em>leave</em> the terminal when deep in concentration.</p>
<p>Joplin has a terminal application.  It also has lovely <a href="https://joplinapp.org/desktop/">desktop</a> and <a href="https://joplinapp.org/mobile/">mobile</a> applications.</p>
<p>But we’re just looking at the terminal application.</p>
<h3 id="why-not-">Why not …</h3>
<p>Like I said: there are a lot of options.  I regularly play with several of them.  But for the kind of &ldquo;quick get this down before I forget it?&rdquo;</p>
<ul>
<li><a href="https://vimwiki.github.io/">Vimwiki</a> is hard to remember</li>
<li><a href="/card/org/">card/Org</a> is hard to learn, or at least hard to master; and the temptation to fuss around is too strong</li>
<li><a href="/card/obsidian/">card/Obsidian</a> needs a desktop window</li>
<li>so does <a href="/card/zettlr/">card/Zettlr</a></li>
</ul>
<p>So for today it’s Joplin.</p>
<h2 id="setup">Setup</h2>
<p>Joplin runs on NodeJS, so install it with <a href="/card/volta/">card/Volta</a>, Yarn, NPM, or whatever you install Node stuff with.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ volta install joplin
</span></span><span class="line"><span class="cl">success: installed joplin@1.6.4 with executables: joplin
</span></span></code></pre></div><p>Now there’s a <code>joplin</code> command in your path!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">joplin
</span></span></code></pre></div><p>You get these four panes you can tab around in, and — look, Joplin’s <a href="https://joplinapp.org/terminal/#usage">usage</a> docs break it down better than I could.  Go look at those.</p>
<h2 id="basic-usage">Basic usage</h2>
<p>Joplin has a command line mode, which you get at with the colon character <code>:</code>.  Gonna focus on that command line mode.</p>
<p>The first and most important command?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">:help
</span></span></code></pre></div><p>That gives you a list of commands, including the second most important command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">:exit
</span></span></code></pre></div><p>Not <code>:quit</code>.  Not <code>:wq</code>.  No.  Joplin’s terminal application is kind of inspired by <a href="/card/vim/">card/Vim</a>, but it is not Vim.</p>
<h2 id="setting-up-note-synchronization">Setting up note synchronization</h2>
<p>I’ve already been using Joplin elsewhere, so <em>my</em> first task is to configure <a href="https://joplinapp.org/terminal/#synchronisation">synchronization</a>.</p>
<p>The <code>sync</code> needs no additional arguments when used with Dropbox, lucky for me.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">:sync
</span></span></code></pre></div><p>Joplin gives me:</p>
<ul>
<li>a URL to copy and paste into the browser</li>
<li>a prompt to enter Dropbox’s validation code</li>
</ul>
<p>From there?</p>
<ol>
<li>follow the link with a <code>[Control]</code> + click (in my terminal, at least)</li>
<li>allow the integration; Dropbox gives me a string of nonsense text</li>
<li>copy that nonsense and paste it into Joplin’s prompt</li>
</ol>
<p>If you’re me, the leftmost pane fills with folders from your previous Joplin sessions.  The screenshot you already saw, pretty much.</p>
<h3 id="creating-a-note">Creating a note</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">:mknote &#34;Terminal notes with Joplin&#34;
</span></span></code></pre></div><p>The quotes aren’t needed for single-word notes.  But for multi-word notes it’s either wrap it in quotes or use CamelCase.</p>
<p>I can see it’s up there in the middle tab, but now I’m obsessing over the command line mode.  Is there an <code>ls</code> equivalent?  There sure is!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">:ls
</span></span><span class="line"><span class="cl">Terminal notes with Joplin
</span></span></code></pre></div><h3 id="editing-a-note">Editing a note</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">:edit &#34;Terminal notes with Joplin&#34;
</span></span></code></pre></div><p>Joplin offers a chance to autocomplete once I type enough in.  I accept that autocompletion with <code>[TAB]</code>, then hit <code>[ENTER]</code> to complete the command.</p>
<p>This passes the note buffer off to your default text editor — in my case,
<a href="https://micro-editor.github.io/">micro</a>.</p>
<p>The notes themselves are in a straightforward Markdown.  See <a href="https://joplinapp.org/markdown/">Joplin&rsquo;s Markdown guide</a> for those details.</p>
<p>Keep in mind that this is just a Markdown file to your editor.  Any impressive integration with Joplin requires work in the editor config.  I have not done anything with that yet.  I use Joplin’s desktop app for anything fancier than jotting down quick notes.</p>
<p>Edit.  Save.  Quit the editor.  You’re back in Joplin, and your updated content is in Joplin’s content pane.</p>
<h3 id="deleting-a-note">Deleting a note</h3>
<p>I forgot about the quotes and made myself a &ldquo;Terminal&rdquo; note.  How do I delete it?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">:rmnote Terminal
</span></span></code></pre></div><p>Joplin asks for confirmation, defaulting to &ldquo;No&rdquo; because you can’t get the note back once deleted.</p>
<h3 id="organizing-notes-into-notebooks">Organizing notes into notebooks</h3>
<p>I can see this becoming a whole series of notes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">:mkbook MyJoplinNotes
</span></span></code></pre></div><p>Didn’t feel like using quotes this time.  Anyways, &ldquo;MyJoplinNotes&rdquo; gets created at the top level.  Joplin automatically sets it as the notebook I’m using.</p>
<p>&ldquo;Using&rdquo; a particular notebook means this is where your focus is.  Any new notes you create end up in the notebook you’re using.</p>
<p>I need to get <em>this</em> note over to the right location.  First I <code>use</code> the random notebook I started in.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">:use &#39;Nerd notes&#39;
</span></span></code></pre></div><p>My first round notebook names tend to be terrible. Sorry.</p>
<h3 id="moving-notes">Moving notes</h3>
<p>Now I can move it, letting Joplin help me with autocompletion.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">:mv &#39;Terminal notes with Joplin&#39; MyJoplinNotes
</span></span></code></pre></div><p>Switch over to the new notebook:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">:use MyJoplinNotes
</span></span></code></pre></div><p>And there it is.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">:ls
</span></span><span class="line"><span class="cl">Terminal notes with Joplin
</span></span></code></pre></div><h3 id="renaming-notes">Renaming notes</h3>
<p>Of course, now that it’s in a dedicated notebook the name seems redundant. Let’s rename this note.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">:ren &#39;Terminal notes with Joplin&#39; &#39;Adding and Organizing Notes&#39;
</span></span></code></pre></div><h2 id="parting-thought">Parting thought</h2>
<p>Even though Joplin keeps a narrow focus, there’s much more than I looked at here.  I just wanted to take some notes.  You can manage tasks with it, and even extend it with an API.</p>
<p>Keep your notes short, unless your editor supports folding.  If it does?  Go wild.  Have fun!</p>
]]></content:encoded>
</item>
</channel>
</rss>
