<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>javaonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/java/</link>
    <description>
      Recent contentinjava on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Mon, 26 Nov 2007 00:00:00 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/tags/java/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: xcb_xlib_unlock issues - Java on Fedora</title>
  <link>https://randomgeekery.org/post/2007/11/xcb-xlib-unlock-issues-java-on-fedora/</link>
  <pubDate>Mon, 26 Nov 2007 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2007/11/xcb-xlib-unlock-issues-java-on-fedora/</guid>
  <description>&lt;p&gt;I decided to install the Sun JDK on my new Fedora install today on &lt;em&gt;Linux&lt;/em&gt;. Tried downloading the JDK/NetBeans self-installing bundle. It didn’t work. I got an error in xcb_xlib:xcb_xlib_unlock - something about a failed assertion. While running the installer. Drat.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>linux</category>  <category>java</category>  <category>i-fixed-it</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>I decided to install the Sun JDK on my new Fedora install today on <em>Linux</em>. Tried downloading the JDK/NetBeans self-installing bundle. It didn&rsquo;t work. I got an error in xcb_xlib:xcb_xlib_unlock - something about a failed assertion. While running the installer. Drat.</p>
<p>Installation required skipping the Netbeans IDE and just using the self-extracting JDK archive. Then, in order to get Swing to work, I had to remove Xinerama references from any copy of libmawt.so that was in my Java install. There&rsquo;s a sed script floating out there, but that wasn&rsquo;t working for me. Before I spent effort figuring out sed, I edited the files from vim.</p>
<pre>[brian@localhost ~]$ sudo vim /opt/jdk1.6.0_03/jre/lib/i386/xawt/libmawt.so
[brian@localhost ~]$ sudo vim /opt/jdk1.6.0_03/jre/lib/i386/motif21/libmawt.so
[brian@localhost ~]$ sudo vim /opt/jdk1.6.0_03/jre/lib/i386/headless/libmawt.so
[brian@localhost ~]$</pre>
<p>In each case I executed a simple regex</p>
<pre>:%s/XINERAMA/FAKEEXT/g</pre>
<p>It&rsquo;s the same as the sed script. I was too lazy to fix a short script that I will probably only use once.</p>
<p>Java&rsquo;s happy now, so I&rsquo;m going to go do a little coding.</p>]]></content:encoded>
</item>
<item>
  <title>Post: JRuby</title>
  <link>https://randomgeekery.org/post/2007/10/jruby/</link>
  <pubDate>Mon, 29 Oct 2007 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2007/10/jruby/</guid>
  <description>There is more than one way to experiment with card/Ruby. JRuby is a mature version of Ruby written for the Java Virtual Machine. This gives you a great deal of platform independence, since JRuby will comfortably run anywhere that card/Java runs. It also provides you with access to Java’s huge standard library. I thought I would take a little time to examine the JRuby implementation, which is nearing a 1.0 release.</description>
   <category>post</category> 
   <category>post</category> 
   <category>ruby</category>  <category>java</category>  <category>coolnamehere</category> 
  <content:encoded><![CDATA[<p>There is more than one way to experiment with <a href="/card/ruby/">card/Ruby</a>. <a href="http://jruby.org/">JRuby</a> is a mature version of Ruby written for the Java Virtual Machine. This gives you a great deal of platform independence, since JRuby will comfortably run anywhere that <a href="/card/java/">card/Java</a> runs. It also provides you with access to Java’s <em>huge</em> <a href="http://www.java.com/en/download/index.jsp">standard library</a>. I thought I would take a little time to examine the JRuby implementation, which is nearing a 1.0 release.</p>
<p>We need Java before we can do anything with JRuby, though. I already have 1.6.0 installed on my machine. If you don’t have Java, now is the time to <a href="http://www.java.com/en/download/index.jsp">get it</a>.</p>
<p>With Java safely installed on our machine, it is time to download and install JRuby. The <a href="http://jruby.org/download">download</a> is a simple archive file — most Windows users will want to go for the zipped version, since that is best understood by their system. I grabbed the tarred and gzipped archive of the binaries for myself. An automatic installer would be nice, but it isn’t the sort of thing that’s going to stop me.</p>
<p>The archive contains a <code>bin</code> folder containing several interesting files. The ones which interest me most are <code>jruby</code>, <code>jirb</code>, and <code>gem</code>. Supporting <a href="http://rubygems.org">Ruby Gems</a> means that we can install from the standard Ruby repositories. I need to put this folder at a sensible location on my system, and then put that location on my path.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ sudo mv jruby-1.2.0RC1/ /opt/jruby
$ export PATH=/opt/jruby/bin:$PATH
$ which jirb
/opt/jruby/bin/jirb</code></pre>
</figure><p>I got that right, so I can safely add the <code>export PATH</code> line to my <code>$HOME/.bash_profile</code> when I feel like it.</p>
<p>There’s probably a quick way to do it in Windows as well, but here’s what I know how to do.</p>
<ol>
<li>Open the Control Panel</li>
<li>Select &ldquo;System&rdquo;</li>
<li>Select &ldquo;Advanced system settings&rdquo;</li>
<li>Select &ldquo;Environment Variables&rdquo; button.</li>
<li>Select &ldquo;Path&rdquo; from System Variables if you have admin privileges,
otherwise from User variables.</li>
<li>Click &ldquo;Edit&rdquo;.</li>
<li>At the beginning of the &ldquo;Variable value&rdquo; field, put the location of
your <code>jruby\bin</code> folder: <code>C:\jruby\bin;C:\Ruby\bin;%PATH%</code></li>
<li>Click &ldquo;Ok&rdquo; until all those lovely dialog boxes go away.</li>
</ol>
<p>Now you should be able to access the JRuby commands from any console. The Windows command prompt is accessible via the Start Menu, under Accessories.</p>
<p>I want to make sure the Java interface works, so I’ll fire up the <code>jirb</code> shell —</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ jirb</code></pre>
</figure><p>— and test with a quick Swing &ldquo;Hello World&rdquo; dialog borrowing from the
<a href="http://www.roesler-ac.de/wolfram/hello.htm#Java-Swing">Hello World Repository</a>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >irb(main):001:0&gt; include_class(&#39;javax.swing.JOptionPane&#39;)
=&gt; [&#34;javax.swing.JOptionPane&#34;]
irb(main):002:0&gt; JOptionPane.showMessageDialog(nil, &#34;Hello World!&#34;)
=&gt; nil</code></pre>
</figure><p><figure>
    <img src="/../../../attachments/img/2007/jruby-hello.png" alt="attachments/img/2007/jruby-hello.png"/></figure>
JRuby &ldquo;Hello World&rdquo;</p>
<p>That popped up a simple &ldquo;Ok&rdquo; style dialog box with the message &ldquo;Hello World!&rdquo;.</p>
]]></content:encoded>
</item>
</channel>
</rss>
