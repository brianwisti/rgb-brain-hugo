<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>nushellonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/nushell/</link>
    <description>
      Recent contentinnushell on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Mon, 22 Jan 2024 14:33:48 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/tags/nushell/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Config: My Nushell config file</title>
  <link>https://randomgeekery.org/config/shell/nushell/config.nu/</link>
  <pubDate>Mon, 22 Jan 2024 14:33:48 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/shell/nushell/config.nu/</guid>
  <description>Been taking a closer look at the default config, mainly so I can understand what I want to change.
// ==&gt; Define completions module. use completions * // ==&gt; Define my themes. // ==&gt; Declare my config. Completions The completions come directly from the default.
//- Define completions module module completions { # Custom completions for external commands (those outside of Nushell) # Each completions has two parts: the form of the external command, including its flags and parameters # and a helper command that knows how to complete values for those flags and parameters # # This is a simplified version of completions for git branches and git remotes def &#34;nu-complete git branches&#34; [] { ^git branch | lines | each { |line| $line | str replace &#39;[\*\&#43;] &#39; &#39;&#39; | str trim } } def &#34;nu-complete git remotes&#34; [] { ^git remote | lines | each { |line| $line | str trim } } export extern &#34;git checkout&#34; [ branch?</description>
   <category>config</category> 
  
   <category>config</category>  <category>nushell</category> 
  <content:encoded><![CDATA[<p>Been taking a closer look at the <a href="https://github.com/nushell/nushell/blob/main/crates/nu-utils/src/sample_config/default_config.nu">default config</a>,
mainly so I can understand what I want to change.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >// ==&gt; Define completions module.

use completions *

// ==&gt; Define my themes.
// ==&gt; Declare my config.</code></pre>
</figure><h2 id="completions">Completions</h2>
<p>The completions come directly from the default.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nu" data-lang="nu"
      >//- Define completions module
module completions {
  # Custom completions for external commands (those outside of Nushell)
  # Each completions has two parts: the form of the external command, including its flags and parameters
  # and a helper command that knows how to complete values for those flags and parameters
  #
  # This is a simplified version of completions for git branches and git remotes
  def &#34;nu-complete git branches&#34; [] {
    ^git branch | lines | each { |line| $line | str replace &#39;[\*\&#43;] &#39; &#39;&#39; | str trim }
  }

  def &#34;nu-complete git remotes&#34; [] {
    ^git remote | lines | each { |line| $line | str trim }
  }

  export extern &#34;git checkout&#34; [
    branch?: string@&#34;nu-complete git branches&#34; # name of the branch to checkout
    -b: string                                 # create and checkout a new branch
    -B: string                                 # create/reset and checkout a branch
    -l                                         # create reflog for new branch
    --guess                                    # second guess &#39;git checkout &lt;no-such-branch&gt;&#39; (default)
    --overlay                                  # use overlay mode (default)
    --quiet(-q)                                # suppress progress reporting
    --recurse-submodules: string               # control recursive updating of submodules
    --progress                                 # force progress reporting
    --merge(-m)                                # perform a 3-way merge with the new branch
    --conflict: string                         # conflict style (merge or diff3)
    --detach(-d)                               # detach HEAD at named commit
    --track(-t)                                # set upstream info for new branch
    --force(-f)                                # force checkout (throw away local modifications)
    --orphan: string                           # new unparented branch
    --overwrite-ignore                         # update ignored files (default)
    --ignore-other-worktrees                   # do not check if another worktree is holding the given ref
    --ours(-2)                                 # checkout our version for unmerged files
    --theirs(-3)                               # checkout their version for unmerged files
    --patch(-p)                                # select hunks interactively
    --ignore-skip-worktree-bits                # do not limit pathspecs to sparse entries only
    --pathspec-from-file: string               # read pathspec from file
  ]

  export extern &#34;git push&#34; [
    remote?: string@&#34;nu-complete git remotes&#34;, # the name of the remote
    refspec?: string@&#34;nu-complete git branches&#34;# the branch / refspec
    --verbose(-v)                              # be more verbose
    --quiet(-q)                                # be more quiet
    --repo: string                             # repository
    --all                                      # push all refs
    --mirror                                   # mirror all refs
    --delete(-d)                               # delete refs
    --tags                                     # push tags (can&#39;t be used with --all or --mirror)
    --dry-run(-n)                              # dry run
    --porcelain                                # machine-readable output
    --force(-f)                                # force updates
    --force-with-lease: string                 # require old value of ref to be at this value
    --recurse-submodules: string               # control recursive pushing of submodules
    --thin                                     # use thin pack
    --receive-pack: string                     # receive pack program
    --exec: string                             # receive pack program
    --set-upstream(-u)                         # set upstream for git pull/status
    --progress                                 # force progress reporting
    --prune                                    # prune locally removed refs
    --no-verify                                # bypass pre-push hook
    --follow-tags                              # push missing but relevant tags
    --signed: string                           # GPG sign the push
    --atomic                                   # request atomic transaction on remote side
    --push-option(-o): string                  # option to transmit
    --ipv4(-4)                                 # use IPv4 addresses only
    --ipv6(-6)                                 # use IPv6 addresses only
  ]
}</code></pre>
</figure><h2 id="theme">Theme</h2>
<p>Again, straight from the defaults.
For more on themes see the Nushell book section on <a href="https://www.nushell.sh/book/coloring_and_theming.html">coloring and theming</a>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nu" data-lang="nu"
      >//- Define my themes
let default_theme = {
    # color for nushell primitives
    separator: white
    leading_trailing_space_bg: { attr: n } # no fg, no bg, attr none effectively turns this off
    header: green_bold
    empty: blue
    bool: white
    int: white
    filesize: white
    duration: white
    date: white
    range: white
    float: white
    string: white
    nothing: white
    binary: white
    cellpath: white
    row_index: green_bold
    record: white
    list: white
    block: white
    hints: dark_gray

    # shapes are used to change the cli syntax highlighting
    shape_garbage: { fg: &#34;#FFFFFF&#34; bg: &#34;#FF0000&#34; attr: b}
    shape_binary: purple_bold
    shape_bool: light_cyan
    shape_int: purple_bold
    shape_float: purple_bold
    shape_range: yellow_bold
    shape_internalcall: cyan_bold
    shape_external: cyan
    shape_externalarg: green_bold
    shape_literal: blue
    shape_operator: yellow
    shape_signature: green_bold
    shape_string: green
    shape_string_interpolation: cyan_bold
    shape_datetime: cyan_bold
    shape_list: cyan_bold
    shape_table: blue_bold
    shape_record: cyan_bold
    shape_block: blue_bold
    shape_filepath: cyan
    shape_globpattern: cyan_bold
    shape_variable: purple
    shape_flag: blue_bold
    shape_custom: green
    shape_nothing: light_cyan
}</code></pre>
</figure><h3 id="the-config-record">The config record</h3>
<p>Here&rsquo;s the important part.
Got a few little variations from the default but there&rsquo;s a heck of a lot unchanged.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nu" data-lang="nu"
      >//- Declare my config

let-env config = {
  color_config: $default_theme
  edit_mode: emacs # emacs, vi
  float_precision: 2
  footer_mode: &#34;25&#34; # always, never, number_of_rows, auto
  use_ansi_coloring: true
  use_grid_icons: true

  filesize: {
    # true: KB, GB, etc
    # false: KiB, GiB, etc
    # On WSL, I get KiB if I don&#39;t explicitly set true
    metric: true
  }

  menus: [
      # Configuration for default nushell menus
      # Note the lack of souce parameter
      {
        name: completion_menu
        only_buffer_difference: false
        marker: &#34;| &#34;
        type: {
            layout: columnar
            columns: 4
            col_width: 20   # Optional value. If missing all the screen width is used to calculate column width
            col_padding: 2
        }
        style: {
            text: green
            selected_text: green_reverse
            description_text: yellow
        }
      }
      {
        name: history_menu
        only_buffer_difference: true
        marker: &#34;? &#34;
        type: {
            layout: list
            page_size: 10
        }
        style: {
            text: green
            selected_text: green_reverse
            description_text: yellow
        }
      }
      {
        name: help_menu
        only_buffer_difference: true
        marker: &#34;? &#34;
        type: {
            layout: description
            columns: 4
            col_width: 20   # Optional value. If missing all the screen width is used to calculate column width
            col_padding: 2
            selection_rows: 4
            description_rows: 10
        }
        style: {
            text: green
            selected_text: green_reverse
            description_text: yellow
        }
      }
      # Example of extra menus created using a nushell source
      # Use the source field to create a list of records that populates
      # the menu
      {
        name: commands_menu
        only_buffer_difference: false
        marker: &#34;# &#34;
        type: {
            layout: columnar
            columns: 4
            col_width: 20
            col_padding: 2
        }
        style: {
            text: green
            selected_text: green_reverse
            description_text: yellow
        }
        source: { |buffer, position|
            $nu.scope.commands
            | where command =~ $buffer
            | each { |it| {value: $it.command description: $it.usage} }
        }
      }
      {
        name: vars_menu
        only_buffer_difference: true
        marker: &#34;# &#34;
        type: {
            layout: list
            page_size: 10
        }
        style: {
            text: green
            selected_text: green_reverse
            description_text: yellow
        }
        source: { |buffer, position|
            $nu.scope.vars
            | where name =~ $buffer
            | sort-by name
            | each { |it| {value: $it.name description: $it.type} }
        }
      }
      {
        name: commands_with_description
        only_buffer_difference: true
        marker: &#34;# &#34;
        type: {
            layout: description
            columns: 4
            col_width: 20
            col_padding: 2
            selection_rows: 4
            description_rows: 10
        }
        style: {
            text: green
            selected_text: green_reverse
            description_text: yellow
        }
        source: { |buffer, position|
            $nu.scope.commands
            | where command =~ $buffer
            | each { |it| {value: $it.command description: $it.usage} }
        }
      }
  ]
  keybindings: [
    {
      name: completion_menu
      modifier: none
      keycode: tab
      mode: emacs # Options: emacs vi_normal vi_insert
      event: {
        until: [
          { send: menu name: completion_menu }
          { send: menunext }
        ]
      }
    }
    {
      name: completion_previous
      modifier: shift
      keycode: backtab
      mode: [emacs, vi_normal, vi_insert] # Note: You can add the same keybinding to all modes by using a list
      event: { send: menuprevious }
    }
    {
      name: history_menu
      modifier: control
      keycode: char_x
      mode: emacs
      event: {
        until: [
          { send: menu name: history_menu }
          { send: menupagenext }
        ]
      }
    }
    {
      name: history_previous
      modifier: control
      keycode: char_z
      mode: emacs
      event: {
        until: [
          { send: menupageprevious }
          { edit: undo }
        ]
      }
    }
    # Keybindings used to trigger the user defined menus
    {
      name: commands_menu
      modifier: control
      keycode: char_t
      mode: [emacs, vi_normal, vi_insert]
      event: { send: menu name: commands_menu }
    }
    {
      name: vars_menu
      modifier: control
      keycode: char_y
      mode: [emacs, vi_normal, vi_insert]
      event: { send: menu name: vars_menu }
    }
    {
      name: commands_with_description
      modifier: control
      keycode: char_u
      mode: [emacs, vi_normal, vi_insert]
      event: { send: menu name: commands_with_description }
    }
  ]
}</code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Config: My Nushell custom libraries</title>
  <link>https://randomgeekery.org/config/shell/nushell/lib/</link>
  <pubDate>Mon, 22 Jan 2024 14:33:48 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/shell/nushell/lib/</guid>
  <description>task.nu The idea here is to make a pretty Nu-style table from my Taskwarrior reports.
//- file:nushell/lib/task.nu # Prettify taskwarrior output with nushell # Ensure field has string value or explicit null def upsert-string [field] { $in | upsert $field { |it| let value = ($in | get -i $field) if ($value | empty?) { &#34;&#34; } else { $value | str collect &#34; &#34; } } } # Ensure field has datetime value or explicit null def upsert-date [field] { $in | upsert $field { |it| let value = ($in | get -i $field) if ($value | empty?</description>
   <category>config</category> 
  
   <category>config</category>  <category>nushell</category> 
  <content:encoded><![CDATA[<h2 id="tasknu"><code>task.nu</code></h2>
<p>The idea here is to make a pretty Nu-style table from my Taskwarrior reports.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >//- file:nushell/lib/task.nu
# Prettify taskwarrior output with nushell

# Ensure field has string value or explicit null
def upsert-string [field] {
  $in | upsert $field { |it|
    let value = ($in | get -i $field)

    if ($value | empty?) { &#34;&#34; } else { $value | str collect &#34; &#34; }
  }
}

# Ensure field has datetime value or explicit null
def upsert-date [field] {
  $in | upsert $field { |it|
    let value = ($in | get -i $field)

    if ($value | empty?) { $nothing } else { $value | into datetime }
  }
}

# Format a taskwarrior export into a table
def from-tw [] {
  (
    $in
    | from json
    | upsert-string project
    | upsert-date entry
    | upsert-date modified
    | upsert-date end
  )
}

# stock reports

# next (the default)
def tw-next [] {
  (
    task status:pending -WAITING limit:page -Work -pay -finances -personal export
    | from-tw
    | upsert-string tags
    | select id entry priority project tags description urgency
    | sort-by -r urgency
    | rename ID Age P Project Tag Description Urg
  )
}


# active
# all
# blocked
# blocking
# burndown.daily
# burndown.monthly
# burndown.weekly
# completed
# ghistory.annual
# ghistory.monthly
# history.annual
# history.monthly
# information
# list
# long
# ls
# minimal
# newest
# oldest
# overdue
# projects
# ready
# recurring
# summary
# tags
# unblocked
# waiting</code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Config: My Nushell environment file</title>
  <link>https://randomgeekery.org/config/shell/nushell/env.nu/</link>
  <pubDate>Mon, 22 Jan 2024 14:33:48 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/shell/nushell/env.nu/</guid>
  <description>Set up my prompt Adds a Starship prompt on the right and a timestamp on the left.
def create_left_prompt [] { starship prompt --cmd-duration $env.CMD_DURATION_MS $&#39;--status=($env.LAST_EXIT_CODE)&#39; } def create_right_prompt [] { let time_segment = ([ (date now | date format &#39;%m/%d/%Y %r&#39;) ] | str collect) $time_segment } let-env STARSHIP_SHELL = &#34;nu&#34; let-env PROMPT_COMMAND = { create_left_prompt } let-env PROMPT_COMMAND_RIGHT = { create_right_prompt } let-env PROMPT_INDICATOR = { &#34;&#34; } let-env PROMPT_INDICATOR_VI_INSERT = { &#34;: &#34; } let-env PROMPT_INDICATOR_VI_NORMAL = { &#34;〉&#34; } let-env PROMPT_MULTILINE_INDICATOR = { &#34;::: &#34; } Environment conversions Nushell isn’t my login shell yet.</description>
   <category>config</category> 
  
   <category>config</category>  <category>nushell</category> 
  <content:encoded><![CDATA[<h2 id="set-up-my-prompt">Set up my prompt</h2>
<p>Adds a Starship prompt on the right and a timestamp on the left.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nu" data-lang="nu"
      >def create_left_prompt [] {
  starship prompt --cmd-duration $env.CMD_DURATION_MS $&#39;--status=($env.LAST_EXIT_CODE)&#39;
}
def create_right_prompt [] {
    let time_segment = ([
        (date now | date format &#39;%m/%d/%Y %r&#39;)
    ] | str collect)

    $time_segment
}
let-env STARSHIP_SHELL = &#34;nu&#34;
let-env PROMPT_COMMAND = { create_left_prompt }
let-env PROMPT_COMMAND_RIGHT = { create_right_prompt }
let-env PROMPT_INDICATOR = { &#34;&#34; }
let-env PROMPT_INDICATOR_VI_INSERT = { &#34;: &#34; }
let-env PROMPT_INDICATOR_VI_NORMAL = { &#34;〉&#34; }
let-env PROMPT_MULTILINE_INDICATOR = { &#34;::: &#34; }</code></pre>
</figure><h2 id="environment-conversions">Environment conversions</h2>
<p>Nushell isn&rsquo;t my login shell yet.
This logic converts existing environment variables to Nu equivalents.
So far it works on Linux, Windows, and macOS.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nu" data-lang="nu"
      >let-env ENV_CONVERSIONS = {
  &#34;PATH&#34;: {
    from_string: { |s| $s | split row (char esep) }
    to_string: { |v| $v | str collect (char esep) }
  }
  &#34;Path&#34;: {
    from_string: { |s| $s | split row (char esep) }
    to_string: { |v| $v | str collect (char esep) }
  }
}</code></pre>
</figure><h2 id="nu-libraries-and-plugins">Nu libraries and plugins</h2>
<p>I don&rsquo;t have many yet, but here&rsquo;s where Nu should expect to find them.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nu" data-lang="nu"
      >let-env NU_LIB_DIRS = [
    ($nu.config-path | path dirname | path join &#39;scripts&#39;)
]
let-env NU_PLUGIN_DIRS = [
    ($nu.config-path | path dirname | path join &#39;plugins&#39;)
]</code></pre>
</figure><h2 id="path-management">Path management</h2>
<p>Environment variables in Nushell are a bit more strict than other shells.
You can&rsquo;t just re-export.
You have to redeclare.
So this function helps me with my most common case:
managing entries in the executable path.</p>
<p>If <code>new_path</code> isn&rsquo;t already in <code>$env.PATH</code>,
a new <code>$env.PATH</code> is declared by prepending the new path to the current list of paths.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nu" data-lang="nu"
      >def-env ensure-path [new_path: string] {
  let full_path = ($new_path | path expand)
  let updated_env_path = (
    if $new_path in $env.PATH { $env.PATH }
    else {
      $env.PATH | prepend $full_path
    }
  )
  let-env PATH = $updated_env_path
}</code></pre>
</figure><p>And then I use it for the paths I care about most.
Mostly useful when using Nushell as login,
since these entries are usually picked up from the parent shell.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nu" data-lang="nu"
      >(ensure-path &#34;~/.local/bin&#34;)
(ensure-path &#34;~/.volta/bin&#34;)
(ensure-path &#34;~/.cargo/bin&#34;)
(ensure-path &#34;~/.rakubrew/bin&#34;)</code></pre>
</figure><p>Kinda suggests maybe these invocations should go in <code>login.nu</code>.</p>
<h2 id="miscellaneous">Miscellaneous</h2>
<p>Load the script that nicely formats Taskwarrior output.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nu" data-lang="nu"
      >source /home/random/.config/nushell/lib/task.nu</code></pre>
</figure><p>Add a function to read from EDN sources such as output by <code>nbb-logseq</code>.
Requires the <code>jet</code> CLI tool.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nu" data-lang="nu"
      >def from-edn [] {
  $in | str collect | jet --to json | from json
}</code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Config: My Nushell login settings</title>
  <link>https://randomgeekery.org/config/shell/nushell/login.nu/</link>
  <pubDate>Mon, 22 Jan 2024 14:33:48 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/shell/nushell/login.nu/</guid>
  <description>For my occasional experiments using Nu as my login shell. Evaluated after env.nu and config.nu.
let-env BAT_THEME = &#39;Solarized (dark)&#39; let-env BF = &#39;$albumartist | $album | $track/$tracktotal | $title&#39; let-env CLICOLOR = &#39;1&#39; let-env EDITOR = &#39;nvim&#39; let-env LANG = &#39;en_US.UTF-8&#39; let-env NNN_FALLBACK_OPENER = &#39;xdg-open&#39; let-env PAGER = &#39;less -FRX&#39; let-env PLENV_HOME = &#39;/home/random/.plenv&#39; let-env PYENV_ROOT = &#39;/home/random/.pyenv&#39; let-env PYENV_SHELL = &#39;nu&#39; let-env PYENV_VIRTUALENV_INIT = &#39;1&#39; let-env RAKUBREW_HOME = &#39;~/.</description>
   <category>config</category> 
  
   <category>config</category>  <category>nushell</category> 
  <content:encoded><![CDATA[<p>For my occasional experiments using Nu as my login shell.
Evaluated <em>after</em> <code>env.nu</code> and <code>config.nu</code>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >let-env BAT_THEME = &#39;Solarized (dark)&#39;
let-env BF = &#39;$albumartist | $album | $track/$tracktotal | $title&#39;
let-env CLICOLOR = &#39;1&#39;
let-env EDITOR = &#39;nvim&#39;
let-env LANG = &#39;en_US.UTF-8&#39;
let-env NNN_FALLBACK_OPENER = &#39;xdg-open&#39;
let-env PAGER = &#39;less -FRX&#39;
let-env PLENV_HOME = &#39;/home/random/.plenv&#39;
let-env PYENV_ROOT = &#39;/home/random/.pyenv&#39;
let-env PYENV_SHELL = &#39;nu&#39;
let-env PYENV_VIRTUALENV_INIT = &#39;1&#39;
let-env RAKUBREW_HOME = &#39;~/.rakubrew&#39;
let-env STARSHIP_SHELL = &#39;nu&#39;
let-env TERM = &#39;xterm-256color&#39;</code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Post: [2022-07-18 Mon 09:16]</title>
  <link>https://randomgeekery.org/post/2022/07/2022-07-18-mon-0916/</link>
  <pubDate>Mon, 18 Jul 2022 09:16:25 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/07/2022-07-18-mon-0916/</guid>
  <description>&lt;p&gt;Cats haven’t checked in on me for a bit. It’s nice. A bit creepy, but nice.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;https://randomgeekery.org/../../../attachments/img/2022-07-18-cats.jpg&#34; alt=&#34;attachments/img/2022-07-18-cats.jpg&#34;/&gt;&lt;/figure&gt;
Okay human, now do something interesting.&lt;/p&gt;</description>
   <category>post</category> 
   <category>note</category> 
   <category>cats</category>  <category>nushell</category> 
  <content:encoded><![CDATA[<p>Cats haven&rsquo;t checked in on me for a bit. It&rsquo;s nice. A bit creepy, but nice.</p>
<p><figure>
    <img src="/../../../attachments/img/2022-07-18-cats.jpg" alt="attachments/img/2022-07-18-cats.jpg"/></figure>
Okay human, now do something interesting.</p>
<p>Oh and for a little bit of <a href="https://nushell.sh">Nushell</a> geekery, here&rsquo;s how I copied the newest photo from Dropbox sync to the folder for this post — since neither are named in a readily accessible pattern for quick typing:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >cp (ls ~/Dropbox/Camera | last | get name) $&#34;(ls content/posts/2022/07/ | last | get name)/cats.jpg&#34;</code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Post: My Three(ish) Favorite Nushell Features</title>
  <link>https://randomgeekery.org/post/2022/07/my-three-ish-favorite-nushell-features/</link>
  <pubDate>Mon, 04 Jul 2022 18:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/07/my-three-ish-favorite-nushell-features/</guid>
  <description>&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;https://randomgeekery.org/../../../attachments/img/2022/cover-2022-07-04.png&#34; alt=&#34;attachments/img/2022/cover-2022-07-04.png&#34;/&gt;&lt;/figure&gt;
histogram for post frequency by year using Nushell built-ins&lt;/p&gt;
&lt;p&gt;Been using the &lt;a href=&#34;https://www.nushell.sh&#34;&gt;Nushell&lt;/a&gt; cross-platform user shell more and more over the last couple years. Might as well start learning it.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>nushell</category>  <category>hugo</category> 
  <content:encoded><![CDATA[<h2>In which I once again spend all day decomposing one-liners, this time for Nushell</h2><p><figure>
    <img src="/../../../attachments/img/2022/cover-2022-07-04.png" alt="attachments/img/2022/cover-2022-07-04.png"/></figure>
histogram for post frequency by year using Nushell built-ins</p>
<p>Been using the <a href="https://www.nushell.sh">Nushell</a> cross-platform user shell more and more over the last couple years. Might as well start learning it.</p>
<p>Today I use Nushell for one of my favorite learning tasks: examining my site. I made a throwaway one-liner when setting up <a href="/post/2022/04/trying-nushell-on-windows/">Nushell on Windows</a>. I want to try again, and think through the process a little more this time.</p>
<p>This post, and any that may follow on the topic, won&rsquo;t be any kind of deep dive or contrast with other shells. Oh sure. I&rsquo;ll point out things that surprise me. But I use maybe 20% of a shell&rsquo;s features for 80% of my needs, and a Web search for the rest. Check the Nushell book&rsquo;s <a href="https://www.nushell.sh/book/coming_from_bash.html">Coming from Bash</a> page if you want a more explicit comparison.</p>
<p>Let&rsquo;s get started.</p>
<h2 id="nushell-feature-zero-showing-program-output">Nushell feature zero: showing program output</h2>
<p>If you can&rsquo;t easily run a program and see its output, you are in a REPL, not a shell. I have not come across a command shell that fails that test yet, but I use it as an immediate reassurance that I haven&rsquo;t confused myself by launching <code>ipython</code> again.</p>
<p>I&rsquo;m on <a href="https://gohugo.io">Hugo</a> again, which means I have the Hugo CLI. <code>hugo list all</code> prints out a <a href="/card/csv/">CSV</a> summary of your site, ready for processing by some other program.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >hugo list all</code></pre>
</figure><p><figure>
    <img src="/attachments/img/2022/hugo-list-all.png" title="Yep that&#39;s CSV all right." alt="output of command is a dense blast of CSV text"/><figcaption>Yep that&#39;s CSV all right.</figcaption></figure></p>
<h2 id="nushell-feature-zero-point-five-piping-output">Nushell feature zero point five: Piping output</h2>
<p>Most shells let you pipe between processes, using the output of one as the input of the next. Nushell provides that functionality. No problem.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >hugo list all | from csv</code></pre>
</figure><p>Of course, the result of that pipe is something a little different from other shells.</p>
<h2 id="nushell-feature-one-tables">Nushell feature one: tables</h2>
<p><figure>
    <img src="/attachments/img/2022/from-csv.png" title="It&#39;s pretty. Just needs a little tidying up." alt="screenshot of nushell table display of hugo articles"/><figcaption>It&#39;s pretty. Just needs a little tidying up.</figcaption></figure></p>
<p>There&rsquo;s the table output that I find so appealing. Course, a pretty table is not so unusual these days. You can pipe from <code>hugo</code> to any number of CSV processing tools and pretty printers available to install on your machine.</p>
<p>But Nushell tables aren&rsquo;t just pretty printing. They are core to working with the shell. The table you see is a visual representation of a table in memory, which can be further processed however you need.</p>
<p>Also? Nushell doesn&rsquo;t need me to install an extra CSV processing tool. It can turn that output into something useful without any extra help thanks to an abundance of built-in commands.</p>
<h2 id="nushell-feature-two-the-built-in-commands-and-interactive-help">Nushell feature two: the built-in commands and interactive help</h2>
<p>Nushell includes <em>many</em> commands. You can see for yourself skimming through the <a href="https://www.nushell.sh/book/command_reference.html">Command Reference</a>. Or see what&rsquo;s available to you in your current version with <code>help commands</code>.</p>
<p><figure>
    <img src="/attachments/img/2022/nushell-tab.png" title="or hit TAB on a blank line" alt="initial tab-completion display of functions available in Nushell"/><figcaption>or hit TAB on a blank line</figcaption></figure></p>
<p>How many? Let&rsquo;s ask the shell by piping <code>help commands</code> to the <code>length</code> command.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >help commands | length</code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >421</code></pre>
</figure><p>That&rsquo;s a little overwhelming. Let&rsquo;s see if we can narrow it down. That gives me a chance to show off some of the table processing I got so excited about.</p>
<h3 id="listing-command-categories-by-grouping">Listing command categories by grouping</h3>
<p>All these commands are organized into categories. To see what categories, we can <code>group</code> the help table.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >help commands | group-by category</code></pre>
</figure><p><figure>
    <img src="/attachments/img/2022/group-by-category.png" title="Not sorted or anything, but you get the idea" alt="all of the Nushell command categories"/><figcaption>Not sorted or anything, but you get the idea</figcaption></figure></p>
<h3 id="listing-only-commands-in-a-specific-category-with-where">Listing only commands in a specific category with <code>where</code></h3>
<p>I read ahead, so I know that <code>from csv</code> is under the &ldquo;formats&rdquo; category. We use <code>where</code> to narrow the command list down so it only contains the format commands.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >help commands | where category =~ formats</code></pre>
</figure><p><figure>
    <img src="/attachments/img/2022/format-commands.png" title="`to md`? Interesting!" alt="a table of commands in the &ldquo;formats&rdquo; category"/><figcaption>`to md`? Interesting!</figcaption></figure></p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>I bet the Perl devs perked up seeing that <code>=~</code>. Yes it&rsquo;s a regular expression! But it&rsquo;s almost definitely not a Perl regular expression. I haven&rsquo;t gone past literal substring matches yet, and the Nushell <a href="https://www.nushell.sh/book/regular_expressions.html#regular-expressions">regex documentation</a> page is basically a placeholder. I can only suggest you follow their suggestion to read the Rust <a href="https://docs.rs/regex/latest/regex/">regex crate</a> documentation and figure out the differences yourself.</p>
</blockquote>
<h3 id="viewing-only-select-columns-with-select">Viewing only select columns with <code>select</code></h3>
<p>That&rsquo;s still a little busy. How about we <code>select</code> the name and usage? And heck — tables make for great screenshots, but let&rsquo;s try see what <code>to md</code> gives us.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >help commands | where category =~ formats | select name usage | to md</code></pre>
</figure><table>
<thead>
<tr>
<th>name</th>
<th>usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>from</td>
<td>Parse a string or binary data into structured data</td>
</tr>
<tr>
<td>from csv</td>
<td>Parse text as .csv and create table.</td>
</tr>
<tr>
<td>from eml</td>
<td>Parse text as .eml and create table.</td>
</tr>
<tr>
<td>from ics</td>
<td>Parse text as .ics and create table.</td>
</tr>
<tr>
<td>from ini</td>
<td>Parse text as .ini and create table</td>
</tr>
<tr>
<td>from json</td>
<td>Convert from json to structured data</td>
</tr>
<tr>
<td>from ods</td>
<td>Parse OpenDocument Spreadsheet(.ods) data and create table.</td>
</tr>
<tr>
<td>from ssv</td>
<td>Parse text as space-separated values and create a table. The default minimum number of spaces counted as a separator is 2.</td>
</tr>
<tr>
<td>from toml</td>
<td>Parse text as .toml and create table.</td>
</tr>
<tr>
<td>from tsv</td>
<td>Parse text as .tsv and create table.</td>
</tr>
<tr>
<td>from url</td>
<td>Parse url-encoded string as a table.</td>
</tr>
<tr>
<td>from vcf</td>
<td>Parse text as .vcf and create table.</td>
</tr>
<tr>
<td>from xlsx</td>
<td>Parse binary Excel(.xlsx) data and create table.</td>
</tr>
<tr>
<td>from xml</td>
<td>Parse text as .xml and create table.</td>
</tr>
<tr>
<td>from yaml</td>
<td>Parse text as .yaml/.yml and create table.</td>
</tr>
<tr>
<td>from yml</td>
<td>Parse text as .yaml/.yml and create table.</td>
</tr>
<tr>
<td>to</td>
<td>Translate structured data to a format</td>
</tr>
<tr>
<td>to csv</td>
<td>Convert table into .csv text</td>
</tr>
<tr>
<td>to html</td>
<td>Convert table into simple HTML</td>
</tr>
<tr>
<td>to json</td>
<td>Converts table data into JSON text.</td>
</tr>
<tr>
<td>to md</td>
<td>Convert table into simple Markdown</td>
</tr>
<tr>
<td>to text</td>
<td>Converts data into simple text.</td>
</tr>
<tr>
<td>to toml</td>
<td>Convert table into .toml text</td>
</tr>
<tr>
<td>to tsv</td>
<td>Convert table into .tsv text</td>
</tr>
<tr>
<td>to url</td>
<td>Convert table into url-encoded text</td>
</tr>
<tr>
<td>to xml</td>
<td>Convert table into .xml text</td>
</tr>
<tr>
<td>to yaml</td>
<td>Convert table into .yaml/.yml text</td>
</tr>
</tbody>
</table>
<p>Awesome. All that and we&rsquo;re still in the realm of Nushell built-in commands.</p>
<p>Note the pattern of commands and subcommands. The &ldquo;formats&rdquo; category includes two primary commands, <code>from</code> and <code>to</code>. Then many subcommands for converting <em>from</em> assorted formats to a table, and their counterparts for converting from a table <em>to</em> assorted formats.</p>
<h3 id="getting-help-for-a-specific-command">Getting help for a specific command</h3>
<p>We can ask for help with a specific command. Most shells offer this in one form or another, though they don&rsquo;t generally provide the command discovery path we just walked down.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >help to md</code></pre>
</figure><p>One more screenshot, because Nushell help is just so <em>pretty</em>.</p>
<p><figure>
    <img src="/attachments/img/2022/help-to-md.png" title="syntax highlighted examples? yes please" alt="screenshot of Nushell builtin help, with usage, flags, and examples"/><figcaption>syntax highlighted examples? yes please</figcaption></figure></p>
<h3 id="applying-what-weve-got-to-the-hugo-list">Applying what we&rsquo;ve got to the Hugo list</h3>
<p>Let&rsquo;s see if we can apply some of what we just used with our Hugo article list.</p>
<p>Remember Hugo? This was supposed to be a post about Hugo.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >hugo list all | from csv | last 5 | select title publishDate | to md</code></pre>
</figure><table>
<thead>
<tr>
<th>title</th>
<th>publishDate</th>
</tr>
</thead>
<tbody>
<tr>
<td>Editors</td>
<td>2001-07-11T00:00:00-07:00</td>
</tr>
<tr>
<td>Geekery</td>
<td>2001-07-11T00:00:00-07:00</td>
</tr>
<tr>
<td>Python</td>
<td>2001-01-17T00:00:00-08:00</td>
</tr>
<tr>
<td>Python Babysteps Tutorial</td>
<td>2001-01-17T00:00:00-08:00</td>
</tr>
<tr>
<td>coolnamehere</td>
<td>2000-12-06T00:00:00-08:00</td>
</tr>
</tbody>
</table>
<p>That&rsquo;s better. Sort of. I expected the last few posts to be a bit more recent. I need to do some intentional filtering and sorting. In order to do that, I need a real date instead of Hugo&rsquo;s timestamp string. You can use a block for that.</p>
<h2 id="nushell-feature-two-blocks">Nushell feature two: blocks</h2>
<p>The really basic idea is that <a href="https://www.nushell.sh/book/types_of_data.html#blocks">blocks</a> run arbitrary commands on a parameter, and let us do what we like with the result.</p>
<p>I&rsquo;m going to do sort of a <a href="https://databricks.com/glossary/what-are-dataframes">dataframe</a> type of action here. That&rsquo;s not a normal state for my brain so I need to step through this slowly.</p>
<p><code>hugo list all</code> gave me some CSV text.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >hugo list all</code></pre>
</figure><p><code>from csv</code> turned that text into a table.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >hugo list all | from csv</code></pre>
</figure><p>The <code>publishDate</code> column describes a date and time, but it contains text strings — not dates. To simplify filtering posts by date range, I want to add a column for the published date described by <code>publishDate</code>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >hugo list all | from csv | insert published-at ...</code></pre>
</figure><p>That <code>published-at</code> column contains the result of running a block of commands. I hand my current table to the block as a parameter.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >hugo list all | from csv | insert published-at { |it| ... }</code></pre>
</figure><p>Nushell blocks look and work a bit like <a href="/card/ruby/">Ruby</a> blocks. That means they also work similar to lambdas in <a href="/card/python/">card/Python</a> and anonymous functions in other languages — cosmetic and shell-specific details aside.</p>
<p>The block returns a column with dates for every value in my table&rsquo;s <code>publishDate</code> column.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >(
  hugo list all |
  from csv |
  insert published-at { |it| $it.publishDate | into datetime }
)</code></pre>
</figure><p>Nushell uses the shell-like pattern of prefixing variable names with <code>$</code> when we reference them.</p>
<blockquote>
<p>[!NOTE] Where did the parentheses come from?
That&rsquo;s how Nushell does multi-line one-liners.</p>
<p>See, my one-liner&rsquo;s getting a little long. Over in other shells, I&rsquo;d be pulling out a backslash &lsquo;\&rsquo; to indicate line continuation. But Nushell is expression-oriented. Ending a line with a backslash is just an error. So we turn the whole thing into a subexpression by wrapping it in parentheses. Nushell treats the evaluated result as a single expression, however many lines it takes to get there.</p>
<p>Yes, fine. I <em>should</em> be thinking about scripts at this point. I may get to those eventually. Until then I use parentheses to create a multiline subexpression.</p>
</blockquote>
<p>Where were we? Oh right. I have a table with more columns than I care about.</p>
<p>I only want the post titles and the dates they were published.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >(
  hugo list all |
  from csv |
  insert published-at { |it| $it.publishDate | into datetime } |
  select title published-at
)</code></pre>
</figure><p>And I&rsquo;m writing a blog post, so let&rsquo;s keep a readable number of rows in markdown format.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >(
  hugo list all |
  from csv |
  insert published-at { |it| $it.publishDate | into datetime } |
  select title published-at |
  last 5 |
  to md
)</code></pre>
</figure><p>Okay I think that covers it.</p>
<table>
<thead>
<tr>
<th>title</th>
<th>published-at</th>
</tr>
</thead>
<tbody>
<tr>
<td>Editors</td>
<td>Wed, 11 Jul 2001 00:00:00 -0700 (20 years ago)</td>
</tr>
<tr>
<td>Geekery</td>
<td>Wed, 11 Jul 2001 00:00:00 -0700 (20 years ago)</td>
</tr>
<tr>
<td>Python</td>
<td>Wed, 17 Jan 2001 00:00:00 -0800 (21 years ago)</td>
</tr>
<tr>
<td>Python Babysteps Tutorial</td>
<td>Wed, 17 Jan 2001 00:00:00 -0800 (21 years ago)</td>
</tr>
<tr>
<td>coolnamehere</td>
<td>Wed, 06 Dec 2000 00:00:00 -0800 (21 years ago)</td>
</tr>
</tbody>
</table>
<p>Yeesh I have been writing this stuff down for a long time.</p>
<h2 id="nushell-feature-three-data-types">Nushell feature three: data types</h2>
<p>My experience with data types in shells is limited and mostly unpleasant: values are strings that can be interchangeably treated as strings or numbers. Sometimes you can treat them like lists. Oops you broke something.</p>
<p>Nushell <a href="https://www.nushell.sh/book/types_of_data.html">data type</a> support goes past that. For starters, values declared in the shell itself have the appropriate type.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >1.2 | describe</code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-result" data-lang="result"
      >float</code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >&#34;1.2&#34; | describe</code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-result" data-lang="result"
      >string</code></pre>
</figure><p>It also supports more complex structured types like records and of course tables. Nushell may not define as many types as <a href="https://github.com/red/docs/blob/master/en/datatypes.adoc">Red</a> — yet? — but it has far more than I&rsquo;m accustomed to seeing from a shell.</p>
<p>What about conversions? In my fiddling so far, Nushell treats output from external programs like a string until you tell it otherwise, like a moment ago piping Hugo&rsquo;s output <code>from csv</code> and then the <code>publishDate</code> column <code>into datetime</code>.</p>
<h3 id="date-math">Date math</h3>
<p>All right. Let&rsquo;s figure this out. What datetime is it right now?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >date now</code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-result" data-lang="result"
      >Mon, 04 Jul 2022 18:08:26 -0700 (now)</code></pre>
</figure><p>Happy Fourth of July to those who celebrate by the way. Unless you celebrate by letting off fireworks in your or especially my neighborhood after midnight.</p>
<p>I arbitrarily picked three months as my threshold. Nushell provides numerous shorthands for durations, but so far nothing at an appropriate scale for ancient blogs. I haven&rsquo;t found a lazy way to say &ldquo;three months ago,&rdquo; but I can say &ldquo;90 days ago.&rdquo; Close enough for today.</p>
<p>Need to make a subexpression out of <code>date now</code> so Nushell has a date it can use for the math.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >(date now) - 90day</code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-result" data-lang="result"
      >Tue, 05 Apr 2022 18:09:31 -0700 (3 months ago)</code></pre>
</figure><p>Since <code>((date now) - 90day)</code> is a date and <code>published-at</code> is a date, I can do a direct comparison.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >(
  hugo list all |
  from csv |
  insert published-at { |it| $it.publishDate | into datetime } |
  where published-at &gt; ((date now) - 90day) |
  select title published-at |
  to md
)</code></pre>
</figure><table>
<thead>
<tr>
<th>title</th>
<th>published-at</th>
</tr>
</thead>
<tbody>
<tr>
<td>My Three(ish) Favorite Nushell Features</td>
<td>Mon, 04 Jul 2022 18:00:00 -0700 (10 minutes ago)</td>
</tr>
<tr>
<td>I Talked About My Site on Test &amp; Code in Python</td>
<td>Fri, 01 Jul 2022 15:04:02 -0700 (3 days ago)</td>
</tr>
<tr>
<td>Now</td>
<td>Wed, 11 May 2022 08:33:00 -0700 (2 months ago)</td>
</tr>
<tr>
<td>How About a Tumblelog</td>
<td>Tue, 03 May 2022 19:58:29 -0700 (2 months ago)</td>
</tr>
<tr>
<td>Added a Neighborhood Blogroll Thing</td>
<td>Wed, 27 Apr 2022 19:47:55 -0700 (2 months ago)</td>
</tr>
<tr>
<td>Config Tweaks for Nushell</td>
<td>Sun, 24 Apr 2022 15:00:33 -0700 (2 months ago)</td>
</tr>
<tr>
<td>Trying Nushell on Windows</td>
<td>Fri, 22 Apr 2022 21:15:00 -0700 (2 months ago)</td>
</tr>
<tr>
<td>Didn&rsquo;t I do this last year too?</td>
<td>Sun, 17 Apr 2022 22:15:00 -0700 (2 months ago)</td>
</tr>
</tbody>
</table>
<p>Yeah I fibbed on the publish date for the post I&rsquo;m writing. Figured it would be quicker than adding and explaining another filter for draft posts.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>True confession time: my three or so favorite features in Nushell are also the only features I&rsquo;ve played with, and much of that was today.
Just realized it&rsquo;s been about a year since I started poking at Nushell as more than &ldquo;that thing with cool <code>ls</code> output.&rdquo;</p>
<p>It&rsquo;s not my login <code>$SHELL</code> or anything yet — still need to figure out things like <code>pyenv</code> and <code>nvm</code> — but yeah I like using Nushell.
Especially under Windows, where I know little enough about PowerShell that I can set up Nushell on Windows Terminal and pretend it&rsquo;s a login shell.</p>
<p>Now I just need something that would make a cool cover image screenshot.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >(
    hugo list all |
    from csv |
    insert year { |it| $it.publishDate | into datetime | date to-record | get year } |
    where year &gt; 1 |
    histogram year --percentage-type relative |
    sort-by year
)</code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Post: Trying Nushell on Windows</title>
  <link>https://randomgeekery.org/post/2022/04/trying-nushell-on-windows/</link>
  <pubDate>Fri, 22 Apr 2022 21:15:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/04/trying-nushell-on-windows/</guid>
  <description>Hugo’s article list piped through multiple Nushell built-ins
[!NOTE] The important bit Jack — one of the cats — has recovered from whatever was bothering him with a little help from vet drugs. Thank goodness for that! Now I can get back to puttering.
I have been puttering a little here and there with card/Nushell, a command line shell in the spirit of Bash, Zsh, and Fish. It’s different from any of the above, though.</description>
   <category>post</category> 
   <category>post</category> 
   <category>nushell</category>  <category>windows</category>  <category>shell</category> 
  <content:encoded><![CDATA[<h2>They say I can run Nushell on Windows. Let's try that.</h2><p><figure>
    <img src="/../../../attachments/img/2022/cover-2022-04-22.png" alt="attachments/img/2022/cover-2022-04-22.png"/></figure>
Hugo&rsquo;s article list piped through multiple Nushell built-ins</p>
<blockquote>
<p>[!NOTE] The important bit
Jack — one of the cats — has recovered from whatever was bothering him with a little help from vet drugs. Thank goodness for that! Now I can get back to puttering.</p>
</blockquote>
<p>I have been puttering a little here and there with <a href="/card/nushell/">card/Nushell</a>, a command line shell in the spirit of Bash, Zsh, and Fish. It&rsquo;s different from any of the above, though. It starts from the same &ldquo;let me run my commands&rdquo; starting point, but data handling, filtering, and transformation are core to Nu&rsquo;s functionality.</p>
<h2 id="you-said-something-about-windows">You said something about Windows</h2>
<p>Right. I have also been spending more time in Windows recently. No big deal. I bounce between emphasizing Windows and Linux on my hard drive routinely.</p>
<h3 id="installing-nushell-with-winget">Installing Nushell with Winget</h3>
<p>The quickstart on the Nushell suggests using <a href="https://www.nushell.sh/book/installation.html">winget</a>. Lucky me, I happen to have played with that recently enough to remember it&rsquo;s there.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ winget install nushell
Found nu [Nushell.Nushell] Version 0.61.0
This application is licensed to you by its owner.
Microsoft is not responsible for, nor does it grant any licenses to, third-party packages.
Downloading https://github.com/nushell/nushell/releases/download/0.61.0/nu_0_61_0_windows.msi
  ██████████████████████████████  10.8 MB / 10.8 MB
Successfully verified installer hash
Starting package install...
Successfully installed</code></pre>
</figure><p>That installed Nushell to my Program Files. <code>nu.exe</code> itself is under <code>C:/Program Files/nu/bin</code>. I run that and agree to everything — I don&rsquo;t know Nushell all that well yet, and I certainly don&rsquo;t know Nushell under Windows enough yet.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ C:\&#34;Program Files&#34;\nu\bin\nu
No environment config file found at C:\Users\brian\AppData\Roaming\nushell\env.nu
Would you like to create one with defaults (Y/n):
y
Config file created at: C:\Users\brian\AppData\Roaming\nushell\env.nu
No config file found at C:\Users\brian\AppData\Roaming\nushell\config.nu
Would you like to create one with defaults (Y/n):
y
Config file created at: C:\Users\brian\AppData\Roaming\nushell\config.nu
C:\Users\brian\AppData\Local〉 ls | sort-by modified | last 5</code></pre>
</figure><p>And it works!</p>
<p><figure>
    <img src="/attachments/img/2022/nu-win-initial-ls.png" alt="output of ls in Nushell on Windows"/></figure></p>
<h3 id="integrating-with-windows-terminal">Integrating with Windows Terminal</h3>
<p><a href="https://docs.microsoft.com/en-us/windows/terminal/">Windows Terminal</a> is my preferred terminal emulator over in the Windows world. Though I could absolutely point and click my way through adding a Nushell profile, I&rsquo;ll follow <a href="https://www.nushell.sh/book/installation.html#setting-the-default-shell-windows-terminal">Setting the default shell</a> and update <code>settings.json</code> myself.</p>
<p>Here are the relevant changes to my profile.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;defaultProfile&#34;</span><span class="p">:</span> <span class="s2">&#34;{2b372ca1-1ee2-403d-a839-6d63077ad871}&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;profiles&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;list&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;guid&#34;</span><span class="p">:</span> <span class="s2">&#34;{2b372ca1-1ee2-403d-a839-6d63077ad871}&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;hidden&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Nu Shell&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;commandline&#34;</span><span class="p">:</span> <span class="s2">&#34;C:/Program Files/nu/bin/nu.exe&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;colorScheme&#34;</span><span class="p">:</span> <span class="s2">&#34;Fairy Floss&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;font&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&#34;face&#34;</span><span class="p">:</span> <span class="s2">&#34;FantasqueSansMono NF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">14</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>I add an entry for Nu Shell to the profile list, and make that entry my default in Windows Terminal. I chopped out everything not immediately relevant, so this is <em>not</em> a complete <code>settings.json</code>.</p>
<p>You can ignore my choices for font and color scheme. But if you <em>do</em> want exactly the same look, install the <a href="https://www.nerdfonts.com">Nerd Fonts</a> version of <a href="https://github.com/belluzj/fantasque-sans">Fantasque Sans Mono</a> and add this entry for <a href="http://sailorhg.github.io/fairyfloss/">Fairy Floss</a> colors to the <code>schemes</code> section of your <code>settings.json</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-json" data-lang="json"><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;background&#34;</span><span class="p">:</span> <span class="s2">&#34;#5A5475&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;black&#34;</span><span class="p">:</span> <span class="s2">&#34;#464258&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;blue&#34;</span><span class="p">:</span> <span class="s2">&#34;#6C71C4&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;brightBlack&#34;</span><span class="p">:</span> <span class="s2">&#34;#C19FD8&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;brightBlue&#34;</span><span class="p">:</span> <span class="s2">&#34;#6796E6&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;brightCyan&#34;</span><span class="p">:</span> <span class="s2">&#34;#C2FFDF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;brightGreen&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFB8D1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;brightPurple&#34;</span><span class="p">:</span> <span class="s2">&#34;#AE81FF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;brightRed&#34;</span><span class="p">:</span> <span class="s2">&#34;#F44747&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;brightWhite&#34;</span><span class="p">:</span> <span class="s2">&#34;#F8F8F0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;brightYellow&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFF352&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;cursorColor&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;cyan&#34;</span><span class="p">:</span> <span class="s2">&#34;#AFECAD&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;foreground&#34;</span><span class="p">:</span> <span class="s2">&#34;#F8F8F0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;green&#34;</span><span class="p">:</span> <span class="s2">&#34;#AD5877&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Fairy Floss&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;purple&#34;</span><span class="p">:</span> <span class="s2">&#34;#B267E6&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;red&#34;</span><span class="p">:</span> <span class="s2">&#34;#FF857F&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;selectionBackground&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;white&#34;</span><span class="p">:</span> <span class="s2">&#34;#CCCCCC&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;yellow&#34;</span><span class="p">:</span> <span class="s2">&#34;#E6C000&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="err">,</span></span></span></code></pre>
</figure><h3 id="integration-with-starship">Integration with Starship</h3>
<p>Nushell provides all sorts of customization options, but I prefer <a href="https://starship.rs">Starship</a>&rsquo;s cross-shell prompt setup. Unfortunately Starship is not yet available through Winget on my system. It is available through <a href="https://chocolatey.org">Chocolatey</a>. It just so happens I have Chocolatey installed.</p>
<p>Open myself an administrator terminal by Control-clicking the PowerShell entry on my Windows Terminal menu, and away we go!</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ choco install starship
Chocolatey v1.1.0
Installing the following packages:
starship
By installing, you accept licenses for the packages.
Progress: Downloading starship 1.4.2... 100%

starship v1.4.2 [Approved]
starship package files install completed. Performing other installation steps.
The package starship wants to run &#39;chocolateyInstall.ps1&#39;.
Note: If you don&#39;t run this script, the installation will fail.
Note: To confirm automatically next time, use &#39;-y&#39; or consider:
choco feature enable -n allowGlobalConfirmation
Do you want to run the script?([Y]es/[A]ll - yes to all/[N]o/[P]rint): y

Downloading starship
  from &#39;https://github.com/starship/starship/releases/download/v1.4.2/starship-x86_64-pc-windows-msvc.zip&#39;
Progress: 100% - Completed download of C:\Users\brian\AppData\Local\Temp\chocolatey\starship\1.4.2\starship-x86_64-pc-windows-msvc.zip (2.31 MB).
Download of starship-x86_64-pc-windows-msvc.zip (2.31 MB) completed.
Hashes match.
Extracting C:\Users\brian\AppData\Local\Temp\chocolatey\starship\1.4.2\starship-x86_64-pc-windows-msvc.zip to C:\ProgramData\chocolatey\lib\starship\tools...
C:\ProgramData\chocolatey\lib\starship\tools
Add the following to the end of ~\Documents\PowerShell\Microsoft.PowerShell_profile.ps1 &#39;Invoke-Expression (&amp;starship init powershell)&#39;
 ShimGen has successfully created a shim for starship.exe
 The install of starship was successful.
  Software installed to &#39;C:\ProgramData\chocolatey\lib\starship\tools&#39;

Chocolatey installed 1/1 packages.
 See the log for details (C:\ProgramData\chocolatey\logs\chocolatey.log).</code></pre>
</figure><p>Nushell explicitly allows for multiple segments in your prompt, with <code>PROMPT_COMMAND</code> and <code>PROMPT_COMMAND_RIGHT</code>. I&rsquo;ll keep their right-hand prompt, but use Starship for the left-hand prompt in my <code>env.nu</code>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nu" data-lang="nu"
      >let-env STARSHIP_SHELL = &#34;nu&#34;

def create_left_prompt [] {
    starship prompt --cmd-duration $env.CMD_DURATION_MS $&#39;--status=($env.LAST_EXIT_CODE)&#39;
}

def create_right_prompt [] {
    let time_segment = ([
        (date now | date format &#39;%m/%d/%Y %r&#39;)
    ] | str collect)

    $time_segment
}

# Use nushell functions to define your right and left prompt
let-env PROMPT_COMMAND = { create_left_prompt }
let-env PROMPT_COMMAND_RIGHT = { create_right_prompt }

# The prompt indicators are environmental variables that represent
# the state of the prompt
let-env PROMPT_INDICATOR = { &#34;&#34; }
let-env PROMPT_INDICATOR_VI_INSERT = { &#34;: &#34; }
let-env PROMPT_INDICATOR_VI_NORMAL = { &#34;〉&#34; }
let-env PROMPT_MULTILINE_INDICATOR = { &#34;::: &#34; }

# ...</code></pre>
</figure><p><figure>
    <img src="/attachments/img/2022/nu-win-themed-starship.png" alt="Nushell with Fairy Floss theme and a Starship prompt"/></figure></p>
<p>I&rsquo;ll keep the Starship default config for now.</p>
<p>That&rsquo;s pretty much it! I&rsquo;m good to go explore the world of Nushell on Windows.</p>
<h2 id="sure-but-why">Sure but why</h2>
<p>Well, now that I have all this set up along with a local checkout of the site&rsquo;s current <a href="/card/hugo/">card/Hugo</a> iteration, I can play with Hugo&rsquo;s article listing.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >❯ hugo list all | from csv | select title publishDate draft | sort-by -r publishDate | first 5
╭───┬──────────────────────────────────────────────────┬───────────────────────────┬───────╮
│ # │                      title                       │        publishDate        │ draft │
├───┼──────────────────────────────────────────────────┼───────────────────────────┼───────┤
│ 0 │ Trying Nushell on Windows                        │ 2022-04-22T18:11:46-07:00 │ true  │
│ 1 │ Didn&#39;t I do this last year too?                  │ 2022-04-17T22:15:00-07:00 │ false │
│ 2 │ Logseq&#39;s Export Formats                          │ 2022-03-13T00:00:00Z      │ false │
│ 3 │ Added an Emacs config based off of nano-emacs    │ 2022-02-19T23:30:00-08:00 │ false │
│ 4 │ Thinking about Hugo again but maybe with Site.js │ 2022-01-26T23:50:00-08:00 │ false │
╰───┴──────────────────────────────────────────────────┴───────────────────────────┴───────╯</code></pre>
</figure><p>Okay sure you can do exactly the same thing with some combination of a POSIX shell, GNU CoreUtils, and maybe <a href="https://github.com/BurntSushi/xsv">xsv</a>. Or just <a href="/post/2020/05/querying-hugo-content-with-python/">write Python code</a>.</p>
<p>But I get all this in one tool! Hypothetically, a tool that works the same on Windows and Linux! And as I <a href="https://hackers.town/@randomgeek/108162569000821645">tooted</a> at a friend while gushing over Nushell:</p>
<blockquote>
<p>Now you no longer need two dozen separate tools installed on each of a million systems. Now you can do it all with one tool installed on a couple dozen systems wait hang on</p>
</blockquote>
<p>Anyways it&rsquo;s fun. That&rsquo;s all the reason I need.</p>
]]></content:encoded>
</item>
</channel>
</rss>
