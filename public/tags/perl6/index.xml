<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>perl6onRandom Geekery</title>
    <link>https://randomgeekery.org/tags/perl6/</link>
    <description>
      Recent contentinperl6 on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 03 Nov 2019 00:00:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/perl6/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Building Rakudo and Moarvm on Linux</title>
  <link>https://randomgeekery.org/post/2019/11/building-rakudo-and-moarvim-on-linux/</link>
  <pubDate>Sun, 03 Nov 2019 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/11/building-rakudo-and-moarvim-on-linux/</guid>
  <description>2021-08-21
Skip all this and use Rakubrew to manage card/Raku installations.
Not instructions, but a brain dump of compiling and checking a Rakudo installation.
Windows? No problem.
&gt; choco install rakudo macOS? No problem.
$ brew install rakudo Linux?
$ brew install rakudo Well…
==&gt; Installing dependencies for rakudo: moarvm and nqp ==&gt; Installing rakudo dependency: moarvm ==&gt; Downloading https://github.com/MoarVM/MoarVM/releases/download/2019.07.1/MoarVM-2019.07.1.tar.gz Already downloaded: /home/randomgeek/.cache/Homebrew/downloads/2c331d2b583c39890ed5fd765cea551c9e171136038a6a400217c7725ae60a9d--MoarVM-2019.07.1.tar.gz ==&gt; perl Configure.pl --has-libatomic_ops --has-libffi --has-libtommath --has-libuv --optimize --prefix=/home/linuxbrew/.</description>
   <category>post</category> 
   <category>post</category> 
   <category>raku-lang</category>  <category>perl6</category>  <category>linux</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>In which I rediscover `make && make test && make install`</h2><blockquote>
<p><strong>2021-08-21</strong></p>
<p>Skip all this and use <a href="/post/2020/05/setting-up-raku-with-rakubrew/">Rakubrew</a> to manage <a href="/card/raku/">card/Raku</a> installations.</p>
</blockquote>
<p>Not instructions, but a brain dump of compiling and checking a <a href="https://rakudo.org">Rakudo</a> installation.</p>
<p>Windows? No problem.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >&gt; choco install rakudo</code></pre>
</figure><p>macOS? No problem.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ brew install rakudo</code></pre>
</figure><p><em>Linux</em>?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ brew install rakudo</code></pre>
</figure><p>Well…</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >==&gt; Installing dependencies for rakudo: moarvm and nqp
==&gt; Installing rakudo dependency: moarvm
==&gt; Downloading https://github.com/MoarVM/MoarVM/releases/download/2019.07.1/MoarVM-2019.07.1.tar.gz
Already downloaded: /home/randomgeek/.cache/Homebrew/downloads/2c331d2b583c39890ed5fd765cea551c9e171136038a6a400217c7725ae60a9d--MoarVM-2019.07.1.tar.gz
==&gt; perl Configure.pl --has-libatomic_ops --has-libffi --has-libtommath --has-libuv --optimize --prefix=/home/linuxbrew/.linuxbrew/Cellar/moarvm/2019.07.1
==&gt; make realclean
==&gt; make
Last 15 lines from /home/randomgeek/.cache/Homebrew/Logs/moarvm/03.make:
compiling src/jit/x64/emit.o
linking libmoar.so
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_exptmod_fast.o): relocation R_X86_64_32S against symbol `mp_reduce_2k&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_prime_is_prime.o): relocation R_X86_64_32 against symbol `ltm_prime_tab&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_rand.o): relocation R_X86_64_32 against `.rodata.str1.1&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_read_radix.o): relocation R_X86_64_32S against symbol `mp_s_rmap_reverse&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_s_mp_exptmod.o): relocation R_X86_64_32 against symbol `mp_reduce&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_cnt_lsb.o): relocation R_X86_64_32S against `.rodata&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_is_square.o): relocation R_X86_64_32S against `.rodata&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_kronecker.o): relocation R_X86_64_32S against `.rodata&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_prime_is_divisible.o): relocation R_X86_64_32 against symbol `ltm_prime_tab&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_abs.o): relocation R_X86_64_PC32 against symbol `mp_copy&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: final link failed: bad value
collect2: error: ld returned 1 exit status</code></pre>
</figure><p>Awkward.</p>
<p>I don’t want the <code>apt</code> version, because it’s from last year. Maybe I want <a href="https://github.com/tadzik/rakudobrew">rakudobrew</a>?</p>
<p>Well — maybe later. At the moment I just want to see if Rakudo builds at all.</p>
<p>Let’s break down the big shell alias from Zoffix’s <a href="https://github.com/zoffixznet/r">Instructions to build rakudo from source</a> into discrete steps.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ git clone https://github.com/rakudo/rakudo/ ~/rakudo
$ echo &#39;export PATH=&#34;$HOME/rakudo/install/bin:$HOME/rakudo/install/share/perl6/site/bin:$PATH&#34;&#39; &gt;&gt; ~/.bashrc
$ cd ~/rakudo
$ git checkout master
$ git pull
$ git checkout $(git describe --abbrev=0 --tags)
$ perl Configure.pl --gen-moar --gen-nqp --backends=moar
$ make</code></pre>
</figure><p>And just to be on the safe side:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ make test
Test Summary Report
-------------------
t/09-moar/Line_Break__LineBreak.t                             (Wstat: 0 Tests: 2 Failed: 0)
  TODO passed:   1
t/09-moar/General_Category__extracted-DerivedGeneralCategory.t (Wstat: 0 Tests: 1 Failed: 0)
  TODO passed:   1
Files=98, Tests=1760, 36 wallclock secs ( 0.34 usr  0.08 sys &#43; 130.23 cusr  9.24 csys = 139.89 CPU)
Result: PASS</code></pre>
</figure><p>Great!</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ make install
$ source ~/.bashrc</code></pre>
</figure><p>Now, a little Raku one-liner test.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ perl6 -e &#39;say &#34;Yo, World! This is $*PERL - specifically: { ($*PERL, $*VM, $*DISTRO).map({ $_.gist })}&#34;&#39;
Yo, World! This is Perl 6 - specifically: Perl 6 (6.d) moar (2019.07.1) ubuntu (19.10)</code></pre>
</figure><p>Using <code>gist</code> instead of normal stringification because I wanted all the details. You can see with <code>$*PERL</code> inside the string that <code>Str</code> is not for the gory details.</p>
<p>It’s a bit like <code>str</code> versus <code>repr</code> in the <a href="/card/python/">card/Python</a> world.</p>
<p>Anyways yay, it worked! If I ever get enough free time, I might investigate the <code>brew</code> bug. But it took me three days to finish <em>this</em> post.</p>
<p><a href="https://raku.online/">Andrew Shitov</a> already prepared for the “Perl 6” → “Raku” name transition with a shell alias:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ alias raku=&#39;perl6&#39;</code></pre>
</figure><p>Not the worst way to keep the new name in mind.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: A good day for books</title>
  <link>https://randomgeekery.org/post/2019/10/a-good-day-for-books/</link>
  <pubDate>Sat, 12 Oct 2019 14:37:45 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/10/a-good-day-for-books/</guid>
  <description>Decided I wanted a copy of “Learning Perl 6” before it becomes “Learning Raku”. I give my bookshelf room for nostalgia, though the name shift to card/Raku is understandable.
And of course I needed a physical copy of the 20th Anniversary Pragmatic Programmer.</description>
   <category>post</category> 
   <category>note</category> 
   <category>toread</category>  <category>pragprog</category>  <category>raku-lang</category>  <category>perl6</category>  <category>i-need-to-read-faster</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2019/cover-2019-10-12.jpg" alt="attachments/img/2019/cover-2019-10-12.jpg"/></figure></p>
<p>Decided I wanted a copy of &ldquo;<a href="https://www.learningperl6.com/">Learning Perl 6</a>&rdquo; before it becomes &ldquo;Learning <a href="http://blogs.perl.org/users/ovid/2019/10/larry-has-approved-renaming-perl-6-to-raku.html">Raku</a>&rdquo;. I give my bookshelf room for nostalgia, though the name shift to <a href="/card/raku/">card/Raku</a> is understandable.</p>
<p>And of <em>course</em> I needed a physical copy of the 20th Anniversary <a href="https://pragprog.com/book/tpp20/the-pragmatic-programmer-20th-anniversary-edition">Pragmatic Programmer</a>.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Saving some links from Perl 6 Weekly</title>
  <link>https://randomgeekery.org/post/2019/07/saving-some-links-from-perl-6-weekly/</link>
  <pubDate>Tue, 23 Jul 2019 08:09:30 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/07/saving-some-links-from-perl-6-weekly/</guid>
  <description>Haven’t done anything interesting related to card/Raku for years, but I still subscribe to the Perl 6 Weekly blog. Several links caught my eye this week.
[!NOTE] Now the Rakudo Weekly
Jeff Goff started a fresh series on implementing Template Toolkit in Perl 6. Madeleine Goebel is making great progress on a GSOC project making perl6 produce executable binaries Andrew Shitov wrote a pleasant baby steps sort of intro on using NativeCall for accessing C libraries from Perl 6.</description>
   <category>post</category> 
   <category>note</category> 
   <category>perl6</category>  <category>yeah-i-know</category>  <category>just-when-i-thought-i-was-out</category>  <category>they-pull-me-back-in</category> 
  <content:encoded><![CDATA[<p>Haven&rsquo;t done anything interesting related to <a href="/card/raku/">card/Raku</a> for <em>years</em>, but I still subscribe to the <a href="https://p6weekly.wordpress.com/">Perl 6 Weekly</a> blog. Several links caught my eye this week.</p>
<blockquote>
<p>[!NOTE]
Now the <a href="https://rakudoweekly.blog">Rakudo Weekly</a></p>
</blockquote>
<ul>
<li><a href="https://twitter.com/DrForr">Jeff Goff</a> started a fresh series on <a href="http://theperlfisher.com/index.php/2019/07/18/templates-and-a-clean-start/">implementing Template Toolkit in Perl 6</a>.</li>
<li>Madeleine Goebel is making great progress on a GSOC project <a href="https://yakshavingcream.blogspot.com/2019/07/flags-and-syscalls-and-modules-oh-my.html">making <code>perl6</code> produce executable binaries</a></li>
<li>Andrew Shitov wrote a pleasant baby steps sort of intro on <a href="https://perl6.online/2019/07/17/108-basic-use-of-nativecall/">using NativeCall</a> for accessing C libraries from Perl 6.</li>
<li>Some sort of Chef/Ansible style task runner, called <a href="https://github.com/melezhik/Sparrow6">Sparrow6</a></li>
</ul>
<p>Anyways, back to work and Python, which is also fun!</p>
]]></content:encoded>
</item>
</channel>
</rss>
