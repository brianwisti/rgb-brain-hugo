<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>neovimonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/neovim/</link>
    <description>
      Recent contentinneovim on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Wed, 11 May 2022 07:30:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/neovim/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: [2022-05-11 Wed 07:19]</title>
  <link>https://randomgeekery.org/post/2022/05/2022-05-11-wed-0719/</link>
  <pubDate>Wed, 11 May 2022 07:30:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/05/2022-05-11-wed-0719/</guid>
  <description>Probably something to do with a quarter century of muscle memory and deep embedding of a particular tool’s quirks, but I’m having trouble sticking to Emacs over (neo)vim even for small stuff like this tumblelog.
Looking at nvim-orgmode and even Neorg — though Neorg’s spec limit of six levels of header really chafes at my heavily outliner-oriented style. If I accept arbitrary constraints like that, then I may as well use Markdown or Asciidoctor.</description>
   <category>post</category> 
   <category>note</category> 
   <category>org-mode</category>  <category>neovim</category> 
  <content:encoded><![CDATA[<p>Probably something to do with a quarter century of muscle memory and deep embedding of a particular tool&rsquo;s quirks, but I&rsquo;m having trouble sticking to Emacs over (neo)vim even for small stuff like this tumblelog.</p>
<p>Looking at <a href="https://nvim-orgmode.github.io">nvim-orgmode</a> and even <a href="https://github.com/nvim-neorg/neorg">Neorg</a> &mdash; though Neorg&rsquo;s <a href="https://github.com/nvim-neorg/neorg/blob/main/docs/NFF-0.1-spec.md#detached-modifiers-and-their-functions">spec</a> limit of six levels of header really chafes at my heavily outliner-oriented style. If I accept arbitrary constraints like that, then I may as well use Markdown or Asciidoctor. At least those have familiar syntax.</p>
<p>For today? Emacs may not be comfortable, but it&rsquo;s the native home for Org files and that&rsquo;ll do.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: trying a thing with neovim</title>
  <link>https://randomgeekery.org/post/2021/08/trying-a-thing-with-neovim/</link>
  <pubDate>Mon, 09 Aug 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/08/trying-a-thing-with-neovim/</guid>
  <description>But will it even work?
Oh right I need to :UpdateRemotePlugins first.
Test [PASSED] It worked!
What did I just do? I used a remote plugin in card/Neovim to transform my card/reStructuredText into an HTML source document, simplifying card/Hugo’s site-building duties.
I won’t make you wait around for a proper post. Hugo lets you use reStructuredText. But Hugo’s way is slow and hard to customize. Not their fault. reStructuredText is not their focus.</description>
   <category>post</category> 
   <category>post</category> 
   <category>neovim</category>  <category>python</category>  <category>hugo</category>  <category>rst</category>  <category>site</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>testing a python remote plugin for quicker reStructuredText in Hugo</h2><p>But will it even work?</p>
<p>Oh right I need to <code>:UpdateRemotePlugins</code> first.</p>
<h2 id="test-passed">Test [PASSED]</h2>
<p>It worked!</p>
<h3 id="what-did-i-just-do">What did I just do?</h3>
<p>I used a <a href="https://neovim.io/doc/user/remote_plugin.html">remote plugin</a> in <a href="/card/neovim/">card/Neovim</a> to transform my <a href="/card/restructuredtext/">card/reStructuredText</a> into an HTML source document, simplifying <a href="/card/hugo/">card/Hugo</a>&rsquo;s site-building duties.</p>
<p>I won&rsquo;t make you wait around for a proper post. Hugo lets you use reStructuredText.  But Hugo&rsquo;s way is slow and hard to customize. Not their fault. reStructuredText is not their focus.</p>
<p>Still — why not format it ahead of time?</p>
<blockquote>
<p><strong>Answer</strong></p>
<p>Because it took a lot of work to figure this out? And most folks are perfectly happy with Markdown? And bloggers who prefer reStructuredText are probably using <a href="/card/pelican/">card/Pelican</a> or <a href="/card/nikola/">card/Nikola</a>?</p>
</blockquote>
<p>Shush, me.</p>
<h3 id="the-implementation">The Implementation</h3>
<p>Start with <code>content/whatever/index.rst.txt</code>.</p>
<p>Make sure Hugo won&rsquo;t track <code>rst.txt</code> files by explicitly adding an item the <a href="https://gohugo.io/getting-started/configuration/#ignore-content-and-data-files-when-rendering"><code>ignoreFiles</code></a> config setting.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="c"># config.toml</span>
</span></span><span class="line"><span class="cl"><span class="nx">ignoreFiles</span> <span class="p">=</span> <span class="p">[</span><span class="s1">&#39;\.rst\.txt$&#39;</span><span class="p">]</span></span></span></code></pre>
</figure><p>This way <code>hugo server --navigateToChanged</code> behaves how we expect.</p>
<p>I tried setting <code>ignoreFiles = ['\.rst$']</code> but as far as I could tell, Hugo ignored my request to ignore the file. Looks like I&rsquo;m sticking with <code>.rst.txt</code> for now.</p>
<p>With the code down below in my Neovim python3 — that&rsquo;s <em>python3</em> not <em>python</em> — rplugin folder, and remote plugins updated, I write <code>index.rst.txt</code> to disk.</p>
<p>The remote plugin transforms it to HTML, copying my YAML frontmatter as is. So what Hugo sees is updated HTML with frontmatter, and builds that into the site templates nice and quick.</p>
<h4 id="the-code">The Code</h4>
<figure class="highlight">
  <figcaption><tt>~/.config/nvim/rplugin/python3/rstbuild_hugo.py</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;Give my reStructuredText posts in Hugo a little boost.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">locale</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">frontmatter</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pynvim</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">docutils.core</span> <span class="kn">import</span> <span class="n">publish_parts</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">locale</span><span class="o">.</span><span class="n">setlocale</span><span class="p">(</span><span class="n">locale</span><span class="o">.</span><span class="n">LC_ALL</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">determine_target</span><span class="p">(</span><span class="n">source</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Using an odd suffix so Hugo doesn&#39;t try to build the rst itself</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">source</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s2">&#34;.rst.txt&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Look at </span><span class="si">{</span><span class="n">source</span><span class="si">}</span><span class="s2"> more closely before transforming it.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">source</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;.rst.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;.html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@pynvim.plugin</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">RSTBuildHugo</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nvim</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">nvim</span> <span class="o">=</span> <span class="n">nvim</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@pynvim.autocmd</span><span class="p">(</span><span class="s2">&#34;BufWritePost&#34;</span><span class="p">,</span> <span class="n">pattern</span><span class="o">=</span><span class="s2">&#34;*.rst.txt&#34;</span><span class="p">,</span> <span class="nb">eval</span><span class="o">=</span><span class="s1">&#39;expand(&#34;&lt;afile&gt;&#34;)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">convert_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">source_filename</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">target_path</span> <span class="o">=</span> <span class="n">determine_target</span><span class="p">(</span><span class="n">source_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span> <span class="o">=</span> <span class="n">frontmatter</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">source_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">parts</span> <span class="o">=</span> <span class="n">publish_parts</span><span class="p">(</span><span class="n">source</span><span class="o">=</span><span class="n">post</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="n">writer_name</span><span class="o">=</span><span class="s2">&#34;html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="s2">&#34;body&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">metadata</span><span class="p">[</span><span class="s2">&#34;format&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;rst&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">target_path</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">out</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">out</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">frontmatter</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">post</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">nvim</span><span class="o">.</span><span class="n">out_write</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Wrote </span><span class="si">{</span><span class="n">target_path</span><span class="si">}</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><p>Lord knows this code ain&rsquo;t perfect. This post is its main test. Who knows what bugs and improvements will come later?</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p><em>You</em> will, if you skim the Updates at the end.</p>
</blockquote>
<p>If you grab a copy for your own nefarious plans — a similar template could get you fast Asciidoctor transforms as well — just remember a couple things:</p>
<ul>
<li>
<p>make sure the Python you&rsquo;re using has the libraries needed; I listed my  choices below</p>
</li>
<li>
<p>put it in the right folder; <code>rplugin/python</code> is for Python 2; <code>rplugin/python3</code> is for Python 3</p>
</li>
<li>
<p>run <code>:UpdateRemotePlugins</code> and restart Neovim when you make changes to the plugin file</p>
</li>
</ul>
<h3 id="libraries-used">Libraries Used</h3>
<ul>
<li><a href="https://docutils.sourceforge.io/">Docutils</a> of course, for transforming the reStructuredText</li>
<li>Docutils takes advantage of the fact that I have <a href="https://pygments.org/">Pygments</a> installed, for syntax highlighting</li>
<li><a href="https://python-frontmatter.readthedocs.io/en/latest/index.html">Python Frontmatter</a> gives me a consistent tool for handling post frontmatter and content</li>
<li><a href="https://pynvim.readthedocs.io/en/latest/">pynvim</a> is the bit that hooks it all into Neovim</li>
</ul>
]]></content:encoded>
</item>
</channel>
</rss>
