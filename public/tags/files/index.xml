<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>filesonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/files/</link>
    <description>
      Recent contentinfiles on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sat, 06 Feb 2021 00:00:00 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/tags/files/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Pretty File Summaries with Rich and ExifTool</title>
  <link>https://randomgeekery.org/post/2021/02/pretty-file-summaries-with-rich-and-exiftool/</link>
  <pubDate>Sat, 06 Feb 2021 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/02/pretty-file-summaries-with-rich-and-exiftool/</guid>
  <description>Hoku hopes for scraps
A while back I shared how I use ExifTool to get extensive metadata for any file. I want to make that info dump pretty with card/Rich, a text formatting library for card/Python.
“But Brian,”&#34; I hear you cry. “ExifTool is card/Perl. Why would I want to use both Perl and Python?”
Because it’s fun, obviously.
You want a “real” reason? Okay fine. I haven’t found anything that can get the depth of file information I get from ExifTool.</description>
   <category>post</category> 
   <category>post</category> 
   <category>files</category>  <category>python</category>  <category>perlish</category>  <category>rich</category>  <category>exiftool</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>Want to see something cool?</h2><p><figure>
    <img src="/../../../attachments/img/2021/cover-2021-02-06.jpg" alt="attachments/img/2021/cover-2021-02-06.jpg"/></figure>
Hoku hopes for scraps</p>
<p>A while back I <a href="/post/2020/04/getting-file-info-from-the-shell/">shared</a> how I use <a href="https://exiftool.org">ExifTool</a> to get extensive metadata for any file.  I want to make that info dump pretty with <a href="/card/rich/">card/Rich</a>, a text formatting library for <a href="/card/python/">card/Python</a>.</p>
<p>&ldquo;But Brian,&rdquo;&quot; I hear you cry.  &ldquo;ExifTool is <a href="/card/perl/">card/Perl</a>. Why would I want to use both Perl and Python?&rdquo;</p>
<p>Because it’s fun, obviously.</p>
<p>You want a &ldquo;real&rdquo; reason?  Okay fine.  I haven’t found anything that can get the depth of file information I get from ExifTool.  I haven’t found a formatting library that’s as pleasant to use as Rich — maybe <a href="https://ttytoolkit.org">TTY Toolkit</a>?</p>
<p>Besides — ExifTool is a standalone command line tool.  We don’t need to write any Perl to <em>use</em> it.  Heck, we don’t even need to figure out the system calls. <a href="https://github.com/smarnach">Sven Marnach</a> is way ahead of us with the extremely helpful <a href="https://smarnach.github.io/pyexiftool/">pyexiftool</a>.</p>
<p>Rich and pyexiftool make Python an easy choice for this task.</p>
<h2 id="setting-up">Setting up</h2>
<p>If you want to play along at home, make sure you have the dependencies.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> brew install exiftool
</span></span><span class="line"><span class="cl"><span class="gp">$</span> pip install pyexiftool rich typer
</span></span></code></pre>
</figure><p><a href="https://typer.tiangolo.com">Typer</a> simplifies turning this random idea into a useful command line tool.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>If you’re already a fan of Perl, consider <a href="https://metacpan.org/pod/App::cpanminus"><code>cpanm</code></a> instead of <a href="https://brew.sh">Homebrew</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> cpanm Image::ExifTool
</span></span></code></pre>
</figure><p>Now you can use <a href="https://metacpan.org/pod/distribution/Image-ExifTool/lib/Image/ExifTool.pod">Image::ExifTool</a> in your own Perl projects.</p>
</blockquote>
<h2 id="some-scaffolding">Some scaffolding</h2>
<p>Even though I’m the only user, I still need to figure out how I plan to use it. At minimum?  I hand my script a filename.  It hands me metadata.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">richexif FILENAME [OPTIONS]</span></span></code></pre>
</figure><p>I can hook some <a href="https://typer.tiangolo.com/tutorial/first-steps/#add-a-cli-argument">minimal</a> Typer argument handling around that flow.</p>
<figure class="highlight">
  <figcaption><tt>richexif.py</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.logging</span> <span class="kn">import</span> <span class="n">RichHandler</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">typer</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nb">format</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">%(message)s</span><span class="s2">&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">datefmt</span><span class="o">=</span><span class="s2">&#34;[</span><span class="si">%X</span><span class="s2">]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">handlers</span><span class="o">=</span><span class="p">[</span><span class="n">RichHandler</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">filename</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Display nicely-formatted file metadata.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">&#34;filename: </span><span class="si">%s</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span></span></span></code></pre>
</figure><p>Can I run it?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">chmod 755 richexif.py
</span></span><span class="line"><span class="cl">./richexif.py hoku-hopes-for-snacksjpg.jpg</span></span></code></pre>
</figure><p>I can!  What happens if I use it wrong?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ ./richexif.py
</span></span><span class="line"><span class="cl">Usage: richexif.py [OPTIONS] FILENAME
</span></span><span class="line"><span class="cl">Try &#39;richexif.py --help&#39; for help.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Error: Missing argument &#39;FILENAME&#39;.</span></span></code></pre>
</figure><p>I get an error message telling me what <code>richexif.py</code> needs to do its thing. Nice.</p>
<p>I confirmed that Typer handles the CLI bits, and Rich handles the formatting. Now for pyexiftool.</p>
<p>Oh and I’ll skip logging output from here on.  Rich’s <a href="https://rich.readthedocs.io/en/latest/logging.html">logging handler</a> output is a joy to look at, but really that stuff is for me.  For you it’ll just add noise.</p>
<h2 id="some-metadata">Some metadata</h2>
<p>I need exiftool, of course.  Plus a Rich <a href="https://rich.readthedocs.io/en/latest/console.html">Console</a> object, masterminding the display details for my terminal.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">exiftool</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.console</span> <span class="kn">import</span> <span class="n">Console</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">console</span> <span class="o">=</span> <span class="n">Console</span><span class="p">()</span></span></span></code></pre>
</figure><p>exiftool’s <a href="https://smarnach.github.io/pyexiftool/#exiftool.ExifTool.get_metadata"><code>get_metadata</code></a> grabs everything ExifTool sees about a file.  It also provides methods for ExifTool <a href="https://exiftool.org/TagNames/index.html">tags</a>, but I won’t mess with them today. Tags — the official name for our metadata keys — are most useful when you already know what you’re looking for.  We’re just checking stuff out.</p>
<p>For now, a little abstraction layer over pyexiftool’s <code>ExifTool</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_metadata</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return a dictionary of file metadata.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">exiftool</span><span class="o">.</span><span class="n">ExifTool</span><span class="p">()</span> <span class="k">as</span> <span class="n">et</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">et</span><span class="o">.</span><span class="n">get_metadata</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span></span></span></code></pre>
</figure><p><code>main</code> gets the metadata and asks <code>console</code> to print it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">filename</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Display nicely-formatted file metadata.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">metadata</span> <span class="o">=</span> <span class="n">get_metadata</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">console</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="n">metadata</span><span class="p">)</span></span></span></code></pre>
</figure><p>And here’s what that looks like.</p>
<pre class="rich"><span style="font-weight: bold">{</span>
    <span style="color: #008000">'SourceFile'</span>: <span style="color: #008000">'hoku-hopes-for-snacks.jpg'</span>,
    <span style="color: #008000">'ExifTool:ExifToolVersion'</span>: <span style="color: #000080; font-weight: bold">12.15</span>,
    <span style="color: #008000">'File:FileName'</span>: <span style="color: #008000">'hoku-hopes-for-snacks.jpg'</span>,
    <span style="color: #008000">'File:Directory'</span>: <span style="color: #008000">'.'</span>,
    <span style="color: #008000">'File:FileSize'</span>: <span style="color: #000080; font-weight: bold">918330</span>,
    <span style="color: #008000">'File:FileModifyDate'</span>: <span style="color: #008000">'2021:02:06 00:54:29-08:00'</span>,
    <span style="color: #008000">'File:FileAccessDate'</span>: <span style="color: #008000">'2021:02:06 11:30:33-08:00'</span>,
    <span style="color: #008000">'File:FileInodeChangeDate'</span>: <span style="color: #008000">'2021:02:06 11:30:33-08:00'</span>,
    <span style="color: #008000">'File:FilePermissions'</span>: <span style="color: #000080; font-weight: bold">775</span>,
    <span style="color: #008000">'File:FileType'</span>: <span style="color: #008000">'JPEG'</span>,
    <em>…skipping 62 lines…</em>
    <span style="color: #008000">'Composite:ScaleFactor35efl'</span>: <span style="color: #000080; font-weight: bold">6.04651162790698</span>,
    <span style="color: #008000">'Composite:ShutterSpeed'</span>: <span style="color: #000080; font-weight: bold">0.05</span>,
    <span style="color: #008000">'Composite:GPSLatitude'</span>: <span style="color: #000080; font-weight: bold">47.5750857997222</span>,
    <span style="color: #008000">'Composite:GPSLongitude'</span>: <span style="color: #000080; font-weight: bold">-122.386441</span>,
    <span style="color: #008000">'Composite:CircleOfConfusion'</span>: <span style="color: #008000">'0.00496918925785101'</span>,
    <span style="color: #008000">'Composite:FOV'</span>: <span style="color: #000080; font-weight: bold">69.3903656740024</span>,
    <span style="color: #008000">'Composite:FocalLength35efl'</span>: <span style="color: #000080; font-weight: bold">26</span>,
    <span style="color: #008000">'Composite:GPSPosition'</span>: <span style="color: #008000">'47.5750857997222 -122.386441'</span>,
    <span style="color: #008000">'Composite:HyperfocalDistance'</span>: <span style="color: #000080; font-weight: bold">2.48061927751922</span>,
    <span style="color: #008000">'Composite:LightValue'</span>: <span style="color: #000080; font-weight: bold">3.81378119121704</span>
<span style="font-weight: bold">}</span>
</pre>
<p>Holy crap that’s a lot.  Some of it could be considered sensitive information — unless you read my <a href="/now/">now</a> page.  But it’s all there!  Even in the snipped version you can learn a lot.  Hello from my Windows partition in West Seattle during February of 2021!</p>
<blockquote>
<p><strong>TIP</strong></p>
<p>Uncomfortable sharing that much with every photo you upload?  You can scrub
those tags right out.  <a href="https://www.linux-magazine.com/Online/Blogs/Productivity-Sauce/Remove-EXIF-Metadata-from-Photos-with-exiftool">With ExifTool</a>, of course.</p>
</blockquote>
<p>But back to the other gripe about all this metadata.  It’s way too much for me to take in all at once.  I need some kind of filter!</p>
<h3 id="filtering-the-firehose">Filtering the firehose</h3>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">filter_metadata</span><span class="p">(</span><span class="n">metadata</span><span class="p">,</span> <span class="nb">filter</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return a copy of the metadata where fields contain the substring `filter`.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">metadata</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="nb">filter</span> <span class="ow">in</span> <span class="n">k</span><span class="p">}</span></span></span></code></pre>
</figure><p>There’s no kind of transformation here.  If a field constrains the exact substring described in <code>filter</code>, use it.</p>
<p>Adding a Typer <a href="https://typer.tiangolo.com/tutorial/options/">Option</a> lets us ask for a filter from the command line.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">filename</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nb">filter</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="n">typer</span><span class="o">.</span><span class="n">Option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="kc">None</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Substring to restrict displayed fields&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Display nicely-formatted file metadata.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">metadata</span> <span class="o">=</span> <span class="n">get_metadata</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">filter</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">metadata</span> <span class="o">=</span> <span class="n">filter_metadata</span><span class="p">(</span><span class="n">metadata</span><span class="p">,</span> <span class="nb">filter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">console</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="n">metadata</span><span class="p">)</span></span></span></code></pre>
</figure><p>If use <code>--filter</code>, we should only get matching tags.  Leaving out the filter gets us everything.</p>
<p>Try it out!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> ./richexif.py hoku-hopes-for-snacks.jpg --filter<span class="o">=</span>Image
</span></span></code></pre>
</figure><p>Now that I’m not overwhelmed by the quantity of output, I’m a little underwhelmed by the quality.</p>
<pre class="rich"><span style="font-weight: bold">{</span>
    <span style="color: #008000">'File:ImageWidth'</span>: <span style="color: #000080; font-weight: bold">3672</span>,
    <span style="color: #008000">'File:ImageHeight'</span>: <span style="color: #000080; font-weight: bold">2066</span>,
    <span style="color: #008000">'EXIF:ImageWidth'</span>: <span style="color: #000080; font-weight: bold">4032</span>,
    <span style="color: #008000">'EXIF:ImageHeight'</span>: <span style="color: #000080; font-weight: bold">2268</span>,
    <span style="color: #008000">'EXIF:ExifImageWidth'</span>: <span style="color: #000080; font-weight: bold">4032</span>,
    <span style="color: #008000">'EXIF:ExifImageHeight'</span>: <span style="color: #000080; font-weight: bold">2268</span>,
    <span style="color: #008000">'EXIF:ImageUniqueID'</span>: <span style="color: #008000">'J12LLKL00SM'</span>,
    <span style="color: #008000">'EXIF:ThumbnailImage'</span>: <span style="color: #008000">'(Binary data 6788 bytes, use -b option to extract)'</span>,
    <span style="color: #008000">'Composite:ImageSize'</span>: <span style="color: #008000">'3672 2066'</span>
<span style="font-weight: bold">}</span></pre>
<p>It’s nice.  Don’t get me wrong.  But all we’ve added to default <code>exiftool</code> behavior is some color.</p>
<p>I’ve played with Rich a bit.  I know we can do better.</p>
<h2 id="a-metadata-table">A metadata table!</h2>
<p>Rich lets us create and display <a href="https://rich.readthedocs.io/en/stable/tables.html">tables</a> in the terminal.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.table</span> <span class="kn">import</span> <span class="n">Table</span></span></span></code></pre>
</figure><p>We need to <em>build</em> the table, defining columns and adding values row by row.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">file_table</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">metadata</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return a Rich Table showing the metadata for a file.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">table</span> <span class="o">=</span> <span class="n">Table</span><span class="p">(</span><span class="s2">&#34;Field&#34;</span><span class="p">,</span> <span class="s2">&#34;Value&#34;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">metadata</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">table</span><span class="o">.</span><span class="n">add_row</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">table</span></span></span></code></pre>
</figure><blockquote>
<p><strong>WARNING</strong></p>
<p>Hey, don’t miss that <code>str(value)</code>!  Rich tables need strings, and take nothing for granted with the values you give it.  Numeric values won’t necessarily convert straight to strings without a little help.</p>
</blockquote>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="o">...</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Display nicely-formatted file metadata.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">filter</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">metadata</span> <span class="o">=</span> <span class="n">filter_metadata</span><span class="p">(</span><span class="n">metadata</span><span class="p">,</span> <span class="nb">filter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">table</span> <span class="o">=</span> <span class="n">file_table</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">metadata</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">console</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="n">table</span><span class="p">)</span></span></span></code></pre>
</figure><p>What does our filtered view look like as a table?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> ./richexif.py hoku-hopes-for-snacksjpg.jpg --filter<span class="o">=</span>Image
</span></span></code></pre>
</figure><pre class="rich"><span style="font-style: italic">                        hoku-hopes-for-snacksjpg.jpg                         </span>
┏━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃<span style="font-weight: bold"> Field                </span>┃<span style="font-weight: bold"> Value                                              </span>┃
┡━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
│ File:ImageWidth      │ 3672                                               │
│ File:ImageHeight     │ 2066                                               │
│ EXIF:ImageWidth      │ 4032                                               │
│ EXIF:ImageHeight     │ 2268                                               │
│ EXIF:ExifImageWidth  │ 4032                                               │
│ EXIF:ExifImageHeight │ 2268                                               │
│ EXIF:ImageUniqueID   │ J12LLKL00SM                                        │
│ EXIF:ThumbnailImage  │ (Binary data 6788 bytes, use -b option to extract) │
│ Composite:ImageSize  │ 3672 2066                                          │
└──────────────────────┴────────────────────────────────────────────────────┘
</pre>
<p>Pretty nifty.</p>
<h2 id="a-metadata-tree">A metadata tree!</h2>
<p>We can do more than tables though.  with that <code>type:tag</code> split, there&rsquo;s kind of a heirarchy.  We <em>could</em> add a column for the tag type, but why not use a <a href="https://rich.readthedocs.io/en/stable/tree.html">Tree</a>?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.tree</span> <span class="kn">import</span> <span class="n">Tree</span></span></span></code></pre>
</figure><p>Hang on a second while we build our little tree with its branches.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">file_tree</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">metadata</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">tree</span> <span class="o">=</span> <span class="n">Tree</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[bold]</span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">branches</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="n">tagged_values</span> <span class="o">=</span> <span class="p">[(</span><span class="n">k</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;:&#34;</span><span class="p">),</span> <span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">metadata</span><span class="o">.</span><span class="n">items</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">tags</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">tagged_values</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">root_tag</span> <span class="o">=</span> <span class="n">tags</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">root_tag</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">branches</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">branches</span><span class="p">[</span><span class="n">root_tag</span><span class="p">]</span> <span class="o">=</span> <span class="n">tree</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[bold]</span><span class="si">{</span><span class="n">root_tag</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">tags</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">branches</span><span class="p">[</span><span class="n">root_tag</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[italic]</span><span class="si">{</span><span class="n">tags</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s2">:[/italic] </span><span class="si">{</span><span class="n">value</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">branches</span><span class="p">[</span><span class="n">tags</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">tree</span></span></span></code></pre>
</figure><p>Except now we have two ways to display metadata.  Three, if you count the dictionary we started with.  How are we going to show this tree without discarding our table code?</p>
<p>For now, a callback table that says what to call for each of the options.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.tree</span> <span class="kn">import</span> <span class="n">Tree</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">DISPLAYS</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;table&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">f</span><span class="p">,</span> <span class="n">m</span><span class="p">:</span> <span class="n">file_table</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">m</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;tree&#34;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">f</span><span class="p">,</span> <span class="n">m</span><span class="p">:</span> <span class="n">file_tree</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">m</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>We don’t <em>need</em> to use lambdas here.  Functions can be passed around same as any other value.  But if I wrap them in a lambda I can build my constant table before Python knows the functions exist.</p>
<p>Typer uses <a href="https://typer.tiangolo.com/tutorial/options/callback-and-context/">callback</a> functions to validate options.  They do any processing or checks they need to, then return the supplied value if everything goes well.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">validate_display</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return value if valid, or panic if it isn&#39;t.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">value</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">DISPLAYS</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="n">typer</span><span class="o">.</span><span class="n">BadParameter</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Format must be one of: </span><span class="si">{</span><span class="n">DISPLAYS</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">value</span></span></span></code></pre>
</figure><p>Add the <code>--display</code> Option, making sure to point Typer at the callback. <code>main</code> itself knows the value is safe, or the script never would have reached it.  So I can grab the displayer and call it without fear of consequence.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="n">display</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">typer</span><span class="o">.</span><span class="n">Option</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;table&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">help</span><span class="o">=</span><span class="s2">&#34;How to display the metadata&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">callback</span><span class="o">=</span><span class="n">validate_display</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Display nicely-formatted file metadata.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">displayer</span> <span class="o">=</span> <span class="n">FORMATS</span><span class="p">[</span><span class="n">display</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">output</span> <span class="o">=</span> <span class="n">displayer</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">metadata</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">console</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span></span></span></code></pre>
</figure><p>Okay!  What do we have now?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> ./richexif.py hoku-hopes-for-snacks.jpg --filter<span class="o">=</span>Image --display<span class="o">=</span>tree
</span></span></code></pre>
</figure><pre class="rich"><span style="font-weight: bold">hoku-hopes-for-snacks.jpg</span>
├── <span style="font-weight: bold">File</span>
│   ├── <span style="font-style: italic">ImageWidth:</span> 3672
│   └── <span style="font-style: italic">ImageHeight:</span> 2066
├── <span style="font-weight: bold">EXIF</span>
│   ├── <span style="font-style: italic">ImageWidth:</span> 4032
│   ├── <span style="font-style: italic">ImageHeight:</span> 2268
│   ├── <span style="font-style: italic">ExifImageWidth:</span> 4032
│   ├── <span style="font-style: italic">ExifImageHeight:</span> 2268
│   ├── <span style="font-style: italic">ImageUniqueID:</span> J12LLKL00SM
│   └── <span style="font-style: italic">ThumbnailImage:</span> (Binary data 6788 bytes, use -b option to extract)
└── <span style="font-weight: bold">Composite</span>
    └── <span style="font-style: italic">ImageSize:</span> 3672 2066
</pre>
<p>Oooooh.</p>
<p>Anyways, that’s what I wanted to show you.  Got plenty more ideas for mashing ExifTool and Rich together, as I’m sure you can imagine.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Tangling code from Hugo content with Raku</title>
  <link>https://randomgeekery.org/post/2020/07/tangling-code-from-hugo-content-with-raku/</link>
  <pubDate>Wed, 08 Jul 2020 21:45:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/07/tangling-code-from-hugo-content-with-raku/</guid>
  <description>&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;https://randomgeekery.org/../../../attachments/img/2020/cover-2020-07-08.jpg&#34; alt=&#34;attachments/img/2020/cover-2020-07-08.jpg&#34;/&gt;&lt;/figure&gt;
You know what else I can tangle? Yarn!&lt;/p&gt;
&lt;p&gt;I spend a while using &lt;a href=&#34;https://randomgeekery.org/card/raku/&#34;&gt;card/Raku&lt;/a&gt; to extract code from a &lt;a href=&#34;https://randomgeekery.org/card/hugo/&#34;&gt;card/Hugo&lt;/a&gt; post.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>raku-lang</category>  <category>literateprogramming</category>  <category>files</category>  <category>hugo</category>  <category>sortof</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>I could just use Org mode, but noo that's too easy</h2><p><figure>
    <img src="/../../../attachments/img/2020/cover-2020-07-08.jpg" alt="attachments/img/2020/cover-2020-07-08.jpg"/></figure>
You know what else I can tangle? Yarn!</p>
<p>I spend a while using <a href="/card/raku/">card/Raku</a> to extract code from a <a href="/card/hugo/">card/Hugo</a> post.</p>
<blockquote>
<p><strong>2020-09-03</strong></p>
<p><a href="https://fosstodon.org/@codesections">@codesections@fosstodon.org</a> found a typo! I forgot to <em>show</em> the target file name once command line arguments are in place. It should go <code>raku tangle-fragments.raku index.md</code>.</p>
</blockquote>
<p>Let&rsquo;s say I have a file.  The one you&rsquo;re reading, perhaps.  Well, its original Markdown content.</p>
<p>It has a <a href="/card/hugo/">card/Hugo</a> shortcode in it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">code</span> <span class="na">file</span><span class="o">=</span><span class="s">&#34;hello.py&#34;</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">print(&#34;Hello&#34;)
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">code</span> <span class="p">&gt;</span>}}</span></span></code></pre>
</figure><p>I based <code>{{&lt; code &gt;}}</code> here on a shortcode from the <a href="https://github.com/gohugoio/hugoDocs/blob/master/layouts/shortcodes/code.html">Hugo docs</a>. It presents highlighted code with additional context.</p>
<figure class="highlight">
  <figcaption><tt>hello.py</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"> <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><p>Really handy when you&rsquo;re writing about code.  Thing is, now I have two copies. There&rsquo;s one here in the shortcode, and another in a <code>hello.py</code> file that I&rsquo;m writing about.  I&rsquo;d prefer there was only a single copy.  That way they don&rsquo;t get out of sync.</p>
<p>I <em>could</em> use Hugo&rsquo;s <a href="https://gohugo.io/functions/readfile/">readFile</a> function in a new shortcode, including the contents of <code>hello.py</code> in this Markdown file.  Something like this:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">include</span> <span class="na">file</span><span class="o">=</span><span class="s">&#34;hello.py&#34;</span> <span class="p">&gt;</span>}}</span></span></code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>Actual shortcode logic left as an exercise for the reader.</p>
</blockquote>
<p>But that still breaks up the writing flow a little bit.  I&rsquo;m writing the code over here, and writing <em>about</em> it over there.  It&rsquo;s a tiny complaint, but working with <a href="/card/org/">card/Org</a> has spoiled me.  I get to write the code in the same document that I&rsquo;m writing about it in.  Everything stays in sync, more or less.</p>
<p>What I want is to write about <code>hello.py</code> here, and with a command have <code>hello.py</code> appear on my filesystem, containing the Python code I&rsquo;ve been describing.</p>
<p>And I want to do it without disturbing Hugo. Let it turn Markdown into HTML.</p>
<h2 id="tangling">Tangling</h2>
<p>This process is called &ldquo;tangling,&rdquo; and it&rsquo;s popular in the admittedly small
world of <a href="http://literateprogramming.com/">Literate Programming</a>.  The code is interleaved
throughout some kind of document.  A tool like <a href="https://www.cs.tufts.edu/~nr/noweb/">noweb</a> or <a href="https://orgmode.org/worg/org-contrib/babel/intro.html">Babel</a>
parses the document to create code files.  Could be any kind of file, really.
The process can get fancy.</p>
<p>But the start is not fancy: given a text file containing a <code>{{&lt; code file=&quot;(something)&quot; &gt;}}</code>, write the contents of that shortcode to the named file.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">index.md</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{&lt; </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> &gt;}}</span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="k">regex</span> <span class="nf">shortcode</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="nv">$opener</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      code </span><span class="se">\s</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      </span><span class="p">&#39;</span><span class="s1">file=&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;filename&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">  </span><span class="c1"># Remember the filename
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">      </span><span class="ni">.</span><span class="o">*?</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="nv">$&lt;content&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr">  </span><span class="c1"># Remember everything else in the block
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="nv">$opener</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">/code</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$markdown</span> <span class="o">=</span> <span class="nb">slurp</span> <span class="nv">$filename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nv">$markdown</span><span class="o">.</span><span class="nb">match</span><span class="p">(/</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">shortcode</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">/)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="nv">$tangle-file</span> <span class="o">=</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">filename</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="nv">$tangle-content</span> <span class="o">=</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">content</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">spurt</span> <span class="nv">$tangle-file</span><span class="o">,</span> <span class="nv">$tangle-content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Tangled to </span><span class="nv">$tangle-file</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>I love Raku&rsquo;s approach to <a href="https://docs.raku.org/language/regexes">regular expressions</a>.  For starters, the syntax looks a bit more like describing a grammar.  I can break the funny regex characters up with spaces, and clarify them with comments.  In fact, I could someday build this up to a real <a href="https://docs.raku.org/language/grammars">grammar</a>.</p>
<p>Secondly, it addresses the fact that most text we look at these days contains multiple lines.  I didn&rsquo;t have to worry about any special multiline flags to get this working.</p>
<p>Finally, getting at the named captures was — I wouldn&rsquo;t say &ldquo;obvious,&rdquo; but at least &ldquo;coherent.&rdquo; I can treat the match variable <code>$/</code> as a nested <a href="https://docs.raku.org/language/hashmap">Hash</a>. The important bits look something like this::</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">shortcode =&gt;
</span></span><span class="line"><span class="cl">  filename =&gt; ｢hello.py｣
</span></span><span class="line"><span class="cl">  content =&gt; ｢print(&#34;Hello&#34;)｣</span></span></code></pre>
</figure><p>I can grab the named capture <code>filename</code> of my matched <code>shortcode</code> regex with <code>$/&lt;shortcode&gt;&lt;filename&gt;</code> — or <code>~$&lt;shortcode&gt;&lt;filename&gt;</code>, depending on your preferred syntax.</p>
<p>This is all possible in languages like Perl with assorted flags, but I haven&rsquo;t seen parsing treated so well by default since maybe <a href="/card/rebol/">card/REBOL</a>.</p>
<p>Anyways, let&rsquo;s run this thing.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku tangle.raku
</span></span><span class="line"><span class="cl"><span class="go">Tangled to hello.py
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> bat hello.py
</span></span><span class="line"><span class="cl"><span class="go">───────┬──────────────────────────────────────────────────────────────────────
</span></span></span><span class="line"><span class="cl"><span class="go">       │ File: hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">───────┼──────────────────────────────────────────────────────────────────────
</span></span></span><span class="line"><span class="cl"><span class="go">   1   │ print(&#34;Hello&#34;)
</span></span></span><span class="line"><span class="cl"><span class="go">───────┴──────────────────────────────────────────────────────────────────────
</span></span></span></code></pre>
</figure><p>Sweet.</p>
<p>Except — this Markdown file I&rsquo;m writing.  It has <em>two</em> file code blocks now.  I want to tangle both of them.</p>
<h2 id="multiple-output-files">Multiple output files</h2>
<p>This requires a couple changes, since I&rsquo;m writing code about Hugo shortcodes in a Hugo post.</p>
<p>To show shortcode directives without Hugo evaluating them, they need to look like shortcode comments.  Their contents will get passed straight through as part of your post.  To show <code>{{&lt; shortcode &gt;}}</code> in a post, your Hugo content needs <code>{{&lt;/* shortcode */&gt;}}</code>.</p>
<p>So that&rsquo;s lovely and all, but can be a headache of its own for this specific situation of extracting code from a blog post.</p>
<p>I need to remember this commented shortcode syntax.</p>
<figure class="highlight">
  <figcaption><tt>define-commented-shortcodes</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"> <span class="k">my</span> <span class="nv">$commented-opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{</span><span class="p">&#39;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">&lt;/* </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl"> <span class="k">my</span> <span class="nv">$commented-closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> */&gt;</span><span class="p">&#39;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">}}</span><span class="p">&#39;;</span></span></span></code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>Goodness, that looks silly.  Well, I&rsquo;m writing this blog post as a test case
for the code.  I couldn&rsquo;t figure out how to cleanly present the  commented shortcode delimiters without Hugo and my code getting into a fierce argument.</p>
<p>If I wasn&rsquo;t writing the code <em>in</em> this post, I could use something simpler, like this:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$commented-opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{​&lt;/* </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$commented-closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> */&gt;}}</span><span class="p">&#39;;</span></span></span></code></pre>
</figure><p>But that&rsquo;s not the path I chose.  It&rsquo;s not easy to write programs that write themselves.  Sometimes you must help them along.</p>
</blockquote>
<p>That way I can replace those commented shortcode delimiters with their normal counterparts when I tangle later.</p>
<figure class="highlight">
  <figcaption><tt>define-commented-shortcodes</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$tangle-content</span> <span class="o">=</span> <span class="nv">$block</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">content</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="nb">subst</span><span class="p">(:</span><span class="s">global</span><span class="o">,</span> <span class="p">/</span><span class="sr"> </span><span class="nv">$commented-opener</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="nv">$opener</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="nb">subst</span><span class="p">(:</span><span class="s">global</span><span class="o">,</span> <span class="p">/</span><span class="sr"> </span><span class="nv">$commented-closer</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="nv">$closer</span><span class="p">);</span></span></span></code></pre>
</figure><p>Now that I have that particular detail out of the way, tangle every block? Sure!  Make a regular expression match <code>:global</code> and it returns a list containing every match.</p>
<figure class="highlight">
  <figcaption><tt>tangle-every-block</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$markdown</span>  <span class="o">=</span> <span class="nb">slurp</span> <span class="nv">$filename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@fragments</span> <span class="o">=</span> <span class="nv">$markdown</span><span class="o">.</span><span class="nb">match</span><span class="p">(/&lt;</span><span class="nf">shortcode</span><span class="p">&gt;/</span><span class="o">,</span> <span class="p">:</span><span class="s">global</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nv">@fragments</span> <span class="k">-&gt;</span> <span class="nv">$block</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$tangle-file</span> <span class="o">=</span> <span class="nv">$block</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">filename</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">replace-commented-shortcodes</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">  <span class="nb">spurt</span> <span class="nv">$tangle-file</span><span class="o">,</span> <span class="nv">$tangle-content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Tangled to </span><span class="nv">$tangle-file</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>I think that about covers it.  The shortcode recognition logic can stay the same.</p>
<figure class="highlight">
  <figcaption><tt>tangle-multi.raku</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">index.md</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{&lt; </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> &gt;}}</span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="k">regex</span> <span class="nf">shortcode</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="nv">$opener</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      code </span><span class="se">\h</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      </span><span class="p">&#39;</span><span class="s1">file=&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;filename&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">  </span><span class="c1"># Remember the filename
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">      </span><span class="ni">.</span><span class="o">*?</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="nv">$&lt;content&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr">  </span><span class="c1"># Remember everything else in the block
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore trailing newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="nv">$opener</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">/code</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="o">«</span><span class="n">define-commented-shortcodes</span><span class="o">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">tangle-every-block</span><span class="p">»</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>And it works!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku tangle-multi.raku
</span></span><span class="line"><span class="cl"><span class="go">Tangled to hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to tangle.raku
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> bat tangle.raku
</span></span><span class="line"><span class="cl"><span class="go">───────┬──────────────────────────────────────────────────────────────────────
</span></span></span><span class="line"><span class="cl"><span class="go">       │ File: tangle.raku
</span></span></span><span class="line"><span class="cl"><span class="go">───────┼──────────────────────────────────────────────────────────────────────
</span></span></span><span class="line"><span class="cl"><span class="go">   1   │ sub MAIN() {
</span></span></span><span class="line"><span class="cl"><span class="go">   2   │   my $filename = &#34;index.md&#34;;
</span></span></span><span class="line"><span class="cl"><span class="go">   3   │   my $opener = &#39;{{&lt; &#39;;
</span></span></span><span class="line"><span class="cl"><span class="go">   4   │   my $closer = &#39; &gt;}}&#39;;
</span></span></span><span class="line"><span class="cl"><span class="go">   5   │   my regex shortcode {
</span></span></span><span class="line"><span class="cl"><span class="go">   6   │     $opener
</span></span></span><span class="line"><span class="cl"><span class="go">   7   │       code \s
</span></span></span><span class="line"><span class="cl"><span class="go">   8   │       &#39;file=&#34;&#39; $&lt;filename&gt; = .+? &#39;&#34;&#39;  # Remember the filename
</span></span></span><span class="line"><span class="cl"><span class="go">   9   │       .*?
</span></span></span><span class="line"><span class="cl"><span class="go">  10   │     $closer
</span></span></span><span class="line"><span class="cl"><span class="go">  11   │     \n                # Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="go">  12   │     $&lt;content&gt; = .+?  # Remember everything else in the block
</span></span></span><span class="line"><span class="cl"><span class="go">  13   │     \n                # Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="go">  14   │     $opener &#39;/code&#39; $closer
</span></span></span><span class="line"><span class="cl"><span class="go">  15   │   }
</span></span></span><span class="line"><span class="cl"><span class="go">  16   │
</span></span></span><span class="line"><span class="cl"><span class="go">  17   │   my $markdown = slurp $filename;
</span></span></span><span class="line"><span class="cl"><span class="go">  18   │
</span></span></span><span class="line"><span class="cl"><span class="go">  19   │   if $markdown.match(/ &lt;shortcode&gt; /) {
</span></span></span><span class="line"><span class="cl"><span class="go">  20   │     my $tangle-file = $/&lt;shortcode&gt;&lt;filename&gt;;
</span></span></span><span class="line"><span class="cl"><span class="go">  21   │     my $tangle-content = $/&lt;shortcode&gt;&lt;content&gt;;
</span></span></span><span class="line"><span class="cl"><span class="go">  22   │     spurt $tangle-file, $tangle-content;
</span></span></span><span class="line"><span class="cl"><span class="go">  23   │     say &#34;Tangled to $tangle-file&#34;;
</span></span></span><span class="line"><span class="cl"><span class="go">  24   │   }
</span></span></span><span class="line"><span class="cl"><span class="go">  25   │ }
</span></span></span><span class="line"><span class="cl"><span class="go">  ───────┴──────────────────────────────────────────────────────────────────────
</span></span></span></code></pre>
</figure><p>Unfortunately, I&rsquo;m not quite done yet.</p>
<h2 id="multiple-fragments">Multiple fragments</h2>
<p>I&rsquo;m not done yet because I don&rsquo;t like to describe my code a full file at a time.  I&rsquo;d rather talk about this bit here, explain that bit over there, then mash it all up in the end.</p>
<p>Consistency counts, so I need to pick a syntax.  Well — you&rsquo;ve been reading along.  You can see that I already made my choice.  I got used to <code>&lt;&lt;fragment-name&gt;&gt;</code> in Babel, where the attribute is called <code>name</code>. Might as well keep doing that over here.  Oh but hang on. I want it to stand out a bit.  I&rsquo;ll use angle quotes <code>«‥»</code>.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>On a US keyboard using <a href="/card/vim/">card/Vim</a> or <a href="/card/neovim/">card/Neovim</a>, <code>«</code> is a <a href="https://vimhelp.org/digraph.txt.html#digraph.txt">digraph</a> which can be entered via <kbd>Control-k</kbd> followed by <kbd>&lt;&lt;</kbd>.  Or if you&rsquo;ve set up a <a href="https://en.wikipedia.org/wiki/Compose_key">Compose</a> key, it&rsquo;s <kbd>Compose</kbd> followed by <kbd>&lt;&lt;</kbd> in any editor.</p>
<p><code>»</code> is the same, but <kbd>&gt;&gt;</kbd> instead.</p>
<p><em>Or</em> you can use <code>&lt;&lt;…&gt;&gt;</code> in your code and ignore my recent obsession with fancy characters.</p>
<p>Yes, I know I could practically write it <em>all</em> with fancy characters in Raku. One step at a time.</p>
</blockquote>
<p>Let&rsquo;s go back to the Python code because it&rsquo;s still so small.</p>
<p>Say I want to demonstrate the delightful <a href="/card/rich/">card/Rich</a> terminal library for Python.</p>
<figure class="highlight">
  <figcaption><tt>import-libraries</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"> <span class="kn">from</span> <span class="nn">rich</span> <span class="kn">import</span> <span class="nb">print</span>
</span></span><span class="line"><span class="cl"> <span class="kn">from</span> <span class="nn">rich.panel</span> <span class="kn">import</span> <span class="n">Panel</span>
</span></span><span class="line"><span class="cl"> <span class="kn">from</span> <span class="nn">rich.markdown</span> <span class="kn">import</span> <span class="n">Markdown</span></span></span></code></pre>
</figure><p>But before I really use it in my code, I spend 1,500 words singing its praises.</p>
<p>It&rsquo;s nice.  I like it.</p>
<p>Okay, done singing.  Time to write the rest of the program.</p>
<figure class="highlight">
  <figcaption><tt>rich-hello.py</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="err">«</span><span class="n">import</span><span class="o">-</span><span class="n">libraries</span><span class="err">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">md</span> <span class="o">=</span> <span class="n">Markdown</span><span class="p">(</span><span class="s2">&#34;**Hello**, *World*.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">Panel</span><span class="p">(</span><span class="n">md</span><span class="p">))</span></span></span></code></pre>
</figure><p>I identify the fragment with a <code>name</code> attribute:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">code</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;import-libraries&#34;</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;python&#34;</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">from rich import print
</span></span><span class="line"><span class="cl">from rich.panel import Panel
</span></span><span class="line"><span class="cl">from rich.markdown import Markdown
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">code</span> <span class="p">&gt;</span>}}</span></span></code></pre>
</figure><p>My <code>code</code> block references the <code>import-libraries</code> fragment by name when I&rsquo;m ready for it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">code</span> <span class="na">file</span><span class="o">=</span><span class="s">&#34;rich-hello.py&#34;</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">«import-libraries»
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">md = Markdown(&#34;**Hello**, *World*.&#34;)
</span></span><span class="line"><span class="cl">print(Panel(md))
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">code</span> <span class="p">&gt;</span>}}</span></span></code></pre>
</figure><p>I <em>might</em> spend some time talking about the <code>code</code> shortcode in another post, but I dislike Go&rsquo;s templating enough that this does not sound like fun.</p>
<h3 id="rounding-up-fragments-to-tangle">Rounding up fragments to tangle</h3>
<p>Recognizing an additional parameter doesn&rsquo;t make my regular expression <em>that</em> much more complicated, but I can see things getting  ore complex.  I could even find a better pattern later.  Let&rsquo;s give the params their own named regex for some encapsulation.</p>
<figure class="highlight">
  <figcaption><tt>shortcode-params-regex</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">params</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">   </span><span class="p">&#39;</span><span class="s1">file=&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;filename&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">   </span><span class="o">||</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">   </span><span class="p">&#39;</span><span class="s1">name=&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;fragment&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span></span></span></code></pre>
</figure><p>That way I can drop it in <code>shortcode</code> to say &ldquo;oh and look for <code>params</code> while you&rsquo;re at it please.&rdquo;</p>
<figure class="highlight">
  <figcaption><tt>nested-shortcode-regex</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="p">«</span><span class="s2">shortcode-params-regex</span><span class="p">»</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{&lt; </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> &gt;}}</span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">shortcode</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="nv">$opener</span><span class="sr"> code </span><span class="se">\s</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">params</span><span class="p">&gt;</span><span class="sr"> </span><span class="ni">.</span><span class="o">*?</span><span class="sr"> </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">  </span><span class="nv">$&lt;content&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr">  </span><span class="c1"># Remember everything else in the block
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">  </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore trailing newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">  </span><span class="nv">$opener</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">/code</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span></span></span></code></pre>
</figure><p>Okay, we recognize <code>file</code> and <code>name</code> parameters.  What do we do with them? We gather them!</p>
<figure class="highlight">
  <figcaption><tt>gather-fragments-and-files</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">%fragment-for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@filenames</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$markdown</span> <span class="o">=</span> <span class="nb">slurp</span> <span class="nv">$filename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nv">$markdown</span><span class="o">.</span><span class="nb">match</span><span class="p">(/&lt;</span><span class="nf">shortcode</span><span class="p">&gt;/</span><span class="o">,</span> <span class="p">:</span><span class="s">global</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nv">$block</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$tangle-content</span> <span class="o">=</span> <span class="nv">$block</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">content</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$params</span> <span class="o">=</span> <span class="nv">$block</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">params</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$fragment</span> <span class="o">=</span> <span class="nv">$params</span><span class="p">&lt;</span><span class="s">fragment</span><span class="p">&gt;</span> <span class="o">||</span> <span class="nv">$params</span><span class="p">&lt;</span><span class="s">filename</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nv">$fragment</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">fragment: </span><span class="nv">$fragment</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%fragment-for</span><span class="p">{</span> <span class="nv">$fragment</span><span class="o">.</span><span class="kt">Str</span> <span class="p">}</span> <span class="o">=</span> <span class="nv">$tangle-content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$params</span><span class="p">&lt;</span><span class="s">filename</span><span class="p">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">@filenames</span><span class="o">.</span><span class="nb">push</span><span class="p">(</span><span class="nv">$filename</span><span class="o">.</span><span class="kt">Str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h3 id="tangling-my-fragments">Tangling my fragments</h3>
<p>Let&rsquo;s see here.  I know before I can write any files, I need to make sure everything&rsquo;s tangled Trying to keep fragments easy to identify.  They sit on a line by themselves, possibly with some leading whitespace.</p>
<figure class="highlight">
  <figcaption><tt>tangle-fragments</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">fragment</span> <span class="p">{</span><span class="sr"> </span><span class="ni">^^</span><span class="sr"> </span><span class="se">\h</span><span class="o">*?</span><span class="sr"> </span><span class="p">&#34;</span><span class="s2">«</span><span class="p">&#34;</span><span class="sr"> </span><span class="nv">$&lt;name&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#34;</span><span class="s2">»</span><span class="p">&#34;</span><span class="sr"> </span><span class="ni">$$</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">%tangle-for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">«</span><span class="s2">tangle-function</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nv">%fragment-for</span><span class="o">.</span><span class="nb">keys</span> <span class="k">-&gt;</span> <span class="nv">$name</span> <span class="p">{</span> <span class="nf">tangle</span><span class="p">(</span><span class="nv">$name</span><span class="p">);</span> <span class="p">}</span></span></span></code></pre>
</figure><p>Raku functions are lexically scoped, which means it&rsquo;s perfectly okay to declare a function inside another function.  Though next time I revisit  his, I may want to think about a <a href="https://docs.raku.org/language/classtut">class</a> or something to hold the  complexity.</p>
<p>But what does that function need to look like?  I&rsquo;m still not sure I got it quite right.  I mean I know the <em>basic</em> shape of it.</p>
<figure class="highlight">
  <figcaption><tt>tangle-function</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">tangle</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">tangle-error-checking</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">tangle-text</span><span class="p">»</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>It needs some error checking.  I know that much.  Oh, and if it&rsquo;s already been tangled I should avoid going through it again.</p>
<figure class="highlight">
  <figcaption><tt>tangle-error-checking</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl">   <span class="k">return</span> <span class="p">&#34;&#34;</span> <span class="k">unless</span> <span class="nv">$name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nv">%tangle-for</span><span class="p">{</span> <span class="nv">$name</span> <span class="p">}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="nv">%tangle-for</span><span class="p">{</span> <span class="nv">$name</span> <span class="p">}</span><span class="o">.</span><span class="kt">Str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">my</span> <span class="nv">$content</span> <span class="o">=</span> <span class="nv">%fragment-for</span><span class="p">{</span> <span class="nv">$name</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">   <span class="k">unless</span> <span class="nv">$content</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nb">die</span> <span class="p">&#34;</span><span class="s2">«</span><span class="nv">$name</span><span class="s2">» is not a valid fragment</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span></span></span></code></pre>
</figure><p>The idea of the thing is clear enough.  Find and recursively <code>tangle</code> each fragment found in this text, replacing the fragment references with their tangled text.  Once that&rsquo;s all done, cache and return the tangled text.</p>
<figure class="highlight">
  <figcaption><tt>tangle-text</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl">   <span class="k">for</span> <span class="nv">$content</span><span class="o">.</span><span class="nb">match</span><span class="p">(/</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">fragment</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="p">:</span><span class="s">global</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nv">$match</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">my</span> <span class="nv">$fragment-ref</span> <span class="o">=</span> <span class="nv">$match</span><span class="o">.</span><span class="kt">Str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="k">my</span> <span class="nv">$fragment-name</span> <span class="o">=</span> <span class="nv">$match</span><span class="p">&lt;</span><span class="s">fragment</span><span class="p">&gt;&lt;</span><span class="s">name</span><span class="p">&gt;</span><span class="o">.</span><span class="kt">Str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$name</span><span class="s2"> ← «</span><span class="nv">$fragment-name</span><span class="s2">»</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">     <span class="nv">$content</span><span class="o">.</span><span class="nb">subst-mutate</span><span class="p">(/</span><span class="nv">$fragment-ref</span><span class="p">/</span><span class="o">,</span> <span class="nf">tangle</span><span class="p">(</span> <span class="nv">$fragment-name</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nv">%tangle-for</span><span class="p">{</span> <span class="nv">$name</span> <span class="p">}</span> <span class="o">=</span> <span class="nv">$content</span><span class="p">;</span></span></span></code></pre>
</figure><p>I flailed while tangling fragments.  Lots of complaints from Raku about the difference between a <code>Match</code> and a <code>String</code>.  There <em>must</em> be better ways. But the most important thing?  I got it to work eventually.</p>
<h3 id="writing-tangled-files">Writing tangled files</h3>
<p>After all that, writing the tangled files felt easy.</p>
<figure class="highlight">
  <figcaption><tt>write-tangled-fragments</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl">   <span class="p">«</span><span class="s2">define-commented-shortcodes</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="nv">@filenames</span> <span class="k">-&gt;</span> <span class="nv">$tangle-file</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">my</span> <span class="nv">$tangle-content</span> <span class="o">=</span> <span class="nv">%tangle-for</span><span class="p">{</span> <span class="nv">$tangle-file</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="o">.</span><span class="nb">subst</span><span class="p">(:</span><span class="s">global</span><span class="o">,</span> <span class="p">/</span><span class="sr"> </span><span class="nv">$commented-opener</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="nv">$opener</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="o">.</span><span class="nb">subst</span><span class="p">(:</span><span class="s">global</span><span class="o">,</span> <span class="p">/</span><span class="sr"> </span><span class="nv">$commented-closer</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="nv">$closer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="nb">spurt</span> <span class="nv">$tangle-file</span><span class="o">,</span> <span class="nv">$tangle-content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Tangled to </span><span class="nv">$tangle-file</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span></span></span></code></pre>
</figure><p>Then — theoretically — all these fragments I wrote will make a useful code tangler!</p>
<p>Might as well make it so this script can look at more than just the file I&rsquo;m editing right now.</p>
<figure class="highlight">
  <figcaption><tt>tangle-fragments.raku</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$filename</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">nested-shortcode-regex</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">gather-fragments-and-files</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">tangle-fragments</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">write-tangled-files</span><span class="p">»</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>Easiest <a href="https://docs.raku.org/language/create-cli">CLI</a> I ever wrote, by the way.  See?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku tangle-fragments.raku
</span></span><span class="line"><span class="cl"><span class="go">Usage:
</span></span></span><span class="line"><span class="cl"><span class="go">  tangle-fragments.raku &lt;filename&gt;
</span></span></span></code></pre>
</figure><p>Time for the real thing.  I&rsquo;m nervous.  I shouldn&rsquo;t be nervous.  I know how this story ends.  Then again I keep rewriting the middle.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku tangle-fragments.raku index.md
</span></span><span class="line"><span class="cl"><span class="go">fragment: hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle.raku
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: define-commented-shortcodes
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: replace-commented-shortcodes
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-every-block
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-multi.raku
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: import-libraries
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: rich-hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: shortcode-params-regex
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: nested-shortcode-regex
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: gather-fragments-and-files
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-fragments
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-function
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-error-checking
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-text
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: write-tangled-files
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-fragments.raku
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-function &lt;-- (tangle-error-checking)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-function &lt;-- (tangle-text)
</span></span></span><span class="line"><span class="cl"><span class="go">nested-shortcode-regex &lt;-- (shortcode-params-regex)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-every-block &lt;-- (replace-commented-shortcodes)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments &lt;-- (tangle-function)
</span></span></span><span class="line"><span class="cl"><span class="go">write-tangled-files &lt;-- (define-commented-shortcodes)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments.raku &lt;-- (nested-shortcode-regex)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments.raku &lt;-- (gather-fragments-and-files)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments.raku &lt;-- (tangle-fragments)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments.raku &lt;-- (write-tangled-files)
</span></span></span><span class="line"><span class="cl"><span class="go">rich-hello.py &lt;-- (import-libraries)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-multi.raku &lt;-- (define-commented-shortcodes)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-multi.raku &lt;-- (tangle-every-block)
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to tangle.raku
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to tangle-multi.raku
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to rich-hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to tangle-fragments.raku
</span></span></span></code></pre>
</figure><p>That overwrote my test version of <code>tangle-fragments.raku</code>.  Scary.  Ran the new version to keep myself honest.  It produced the same output, and appears to have correctly tangled my fragments!</p>
<figure class="highlight">
  <figcaption><span>Generated rich-hello.py</span></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich</span> <span class="kn">import</span> <span class="nb">print</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.panel</span> <span class="kn">import</span> <span class="n">Panel</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.markdown</span> <span class="kn">import</span> <span class="n">Markdown</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">md</span> <span class="o">=</span> <span class="n">Markdown</span><span class="p">(</span><span class="s2">&#34;**Hello**, *World*.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">Panel</span><span class="p">(</span><span class="n">md</span><span class="p">))</span></span></span></code></pre>
</figure><p>Running <code>rich-hello.py</code> looks more interesting with a screenshot than a text block:</p>
<p><figure>
    <img src="/attachments/img/2020/rich-panel.png" alt="Formatted output using Rich"/></figure></p>
<p>Okay.  Now I&rsquo;m done.</p>
<p>I <em>could</em> have done this in Python.  There are decent parsing libraries out there.  But Raku did this on its own, without pulling in any extra — without pulling in <em>any</em> libraries.</p>
<h2 id="done-you-barely-started">Done? You barely started!</h2>
<p>My tangle script is no competition for Org mode&rsquo;s Babel.</p>
<ul>
<li>it needs more error checking
<ul>
<li>circular fragment references</li>
<li>unreachable files (path, permissions)</li>
</ul>
</li>
<li>smart handling of whitespace and indentation to keep Python from becoming a chore</li>
<li>rendering fragment names in such a way that syntax highlighters can do something pretty with them
<ul>
<li>especially when writing code in a language that <a href="https://github.com/alecthomas/chroma">Chroma</a> has heard of</li>
</ul>
</li>
<li>hidden blocks</li>
<li>code evaluation and display of results</li>
</ul>
<p>But it&rsquo;ll do for now.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Getting File Info From The Shell</title>
  <link>https://randomgeekery.org/post/2020/04/getting-file-info-from-the-shell/</link>
  <pubDate>Tue, 21 Apr 2020 15:11:17 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/04/getting-file-info-from-the-shell/</guid>
  <description>also, it is time to vacuum my desk again
Use file for everyday summaries. Use ExifTool when you need to know everything.
The problem I am once again puttering around with my site.
I have an image here.
I lived in this basement a few years ago
Do I need to resize it? Should find out how big it is first.
$ exa basement-original.jpg Permissions Size User Date Modified Git Name .</description>
   <category>post</category> 
   <category>post</category> 
   <category>files</category>  <category>shell</category>  <category>exiftool</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>I could right click for properties but the mouse is way over there</h2><p><figure>
    <img src="/../../../attachments/img/2020/cover-2020-04-21.jpg" alt="attachments/img/2020/cover-2020-04-21.jpg"/></figure>
also, it is time to vacuum my desk again</p>
<p>Use <a href="https://en.wikipedia.org/wiki/File_%28command%29"><code>file</code></a> for everyday summaries. Use <a href="https://exiftool.org/">ExifTool</a> when you need to know <strong>everything</strong>.</p>
<h2 id="the-problem">The problem</h2>
<p>I am once again puttering around with my site.</p>
<p>I have an image here.</p>
<p><figure>
    <img src="/../../../attachments/img/2020/basement-original.jpg" alt="attachments/img/2020/basement-original.jpg"/></figure>
I lived in this basement <a href="/post/2017/03/geekish-update/">a few years ago</a></p>
<p>Do I need to resize it? Should find out how big it is first.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ exa basement-original.jpg
Permissions Size User   Date Modified Git Name
.rw-rw-r--  131k random 20 Apr  9:04   -- basement-original.jpg</code></pre>
</figure><p>No I don’t mean file size. I mean geometry. How many pixels wide, and how many high? <a href="https://the.exa.website/">exa</a> <em>is</em> nifty though. You should try it out.</p>
<p>I don’t want to leave my shell session to do it either. Sure that’s just stubbornness on my part. I <em>could</em> get the necessary information from my desktop’s file browser, but I type quicker than I click.</p>
<h2 id="file-is-everywhere"><code>file</code> is everywhere</h2>
<p><code>file</code> is a standard utility, which means it’s available on pretty much any Unix or Unix-like system you use. It works by matching a file’s internal details to entries in a <a href="https://linux.die.net/man/5/magic"><code>magic</code></a> database and reporting its findings. <code>magic</code> can be extended, though the details are beyond me for now.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ file basement-original.jpg
basement-original.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 72x72, segment length 16, progressive, precision 8, 800x487, frames 3</code></pre>
</figure><p><code>basement-original.jpg</code> is a jpeg image. Yep, that checks out. Let’s see — 800x487. That looks like a geometry value. 800 pixels wide and 487 pixels high, if I remember the order right.</p>
<p>I want more detail, but this is all I can get from <code>file</code>. That’s what ExifTool is for.</p>
<h2 id="exiftool-knows-everything">ExifTool knows everything</h2>
<p>ExifTool lets me read and edit metadata for images, music, PDF, Word files, videos — a dizzying assortment of files are <a href="https://exiftool.org/#supported">supported</a>.</p>
<p>You can install ExifTool with the downloads listed on <a href="https://exiftool.org/">its site</a> or using your favorite package manager.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ brew install exiftool</code></pre>
</figure><p>Default usage returns every bit of information ExifTool thinks is relevant for the file type.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ exiftool basement-original.jpg
ExifTool Version Number         : 11.85
File Name                       : basement-original.jpg
Directory                       : .
File Size                       : 129 kB
File Modification Date/Time     : 2020:04:20 09:04:28-07:00
File Access Date/Time           : 2020:04:21 10:08:57-07:00
File Inode Change Date/Time     : 2020:04:20 09:04:28-07:00
File Permissions                : rw-rw-r--
File Type                       : JPEG
File Type Extension             : jpg
MIME Type                       : image/jpeg
JFIF Version                    : 1.01
Resolution Unit                 : inches
X Resolution                    : 72
Y Resolution                    : 72
Image Width                     : 800
Image Height                    : 487
Encoding Process                : Progressive DCT, Huffman coding
Bits Per Sample                 : 8
Color Components                : 3
Y Cb Cr Sub Sampling            : YCbCr4:4:4 (1 1)
Image Size                      : 800x487
Megapixels                      : 0.390</code></pre>
</figure><p>800 pixels wide, 487 pixels high. I remembered correctly! While I’m here, let’s look at ways to fine-tune the output.</p>
<p>We could cut down on the noise by specifying the fields or tags we want to see.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ exiftool -ImageWidth -ImageHeight basement-original.jpg
Image Width                     : 800
Image Height                    : 487</code></pre>
</figure><p>We could use <code>-S</code> for more compact output focused less on tabular layout.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ exiftool -S -ImageWidth -ImageHeight basement-original.jpg
ImageWidth: 800
ImageHeight: 487</code></pre>
</figure><p>We could tell ExifTool to format its report for processing by <a href="/card/csv/">CSV</a> or <a href="https://github.com/burningtree/awesome-json">JSON</a> tools.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ exiftool -j basement-original.jpg
[{
  &#34;SourceFile&#34;: &#34;basement-original.jpg&#34;,
  &#34;ExifToolVersion&#34;: 11.85,
  &#34;FileName&#34;: &#34;basement-original.jpg&#34;,
  &#34;Directory&#34;: &#34;.&#34;,
  &#34;FileSize&#34;: &#34;129 kB&#34;,
  &#34;FileModifyDate&#34;: &#34;2020:04:20 09:04:28-07:00&#34;,
  &#34;FileAccessDate&#34;: &#34;2020:04:21 10:08:57-07:00&#34;,
  &#34;FileInodeChangeDate&#34;: &#34;2020:04:20 09:04:28-07:00&#34;,
  &#34;FilePermissions&#34;: &#34;rw-rw-r--&#34;,
  &#34;FileType&#34;: &#34;JPEG&#34;,
  &#34;FileTypeExtension&#34;: &#34;jpg&#34;,
  &#34;MIMEType&#34;: &#34;image/jpeg&#34;,
  &#34;JFIFVersion&#34;: 1.01,
  &#34;ResolutionUnit&#34;: &#34;inches&#34;,
  &#34;XResolution&#34;: 72,
  &#34;YResolution&#34;: 72,
  &#34;ImageWidth&#34;: 800,
  &#34;ImageHeight&#34;: 487,
  &#34;EncodingProcess&#34;: &#34;Progressive DCT, Huffman coding&#34;,
  &#34;BitsPerSample&#34;: 8,
  &#34;ColorComponents&#34;: 3,
  &#34;YCbCrSubSampling&#34;: &#34;YCbCr4:4:4 (1 1)&#34;,
  &#34;ImageSize&#34;: &#34;800x487&#34;,
  &#34;Megapixels&#34;: 0.390
}]</code></pre>
</figure><p>Hang on. I feel compelled to be a bit fancy.</p>
<p><strong>Piping to <a href="https://github.com/BurntSushi/xsv">xsv</a> for aggregate information about site images.</strong></p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ exiftool -csv -r content \
  | xsv search -s MIMEType &#39;image/.&#43;&#39; \
  | xsv select ImageWidth,ImageHeight \
  | xsv stats \
  | xsv select field,min,max,mean \
  | xsv table
  682 directories scanned
  419 image files read
field        min  max   mean
ImageWidth   27   5120  1337.1172248803825
ImageHeight  27   4032  1009.7368421052624</code></pre>
</figure><p>Hm. I must have some icon files in there somewhere.</p>
<p>For more fun, point it at some music files. Heck, it will try to give useful information for text!</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ exiftool index.adoc
ExifTool Version Number         : 11.85
File Name                       : index.adoc
Directory                       : .
File Size                       : 4.8 kB
File Modification Date/Time     : 2020:04:21 12:58:13-07:00
File Access Date/Time           : 2020:04:21 12:58:14-07:00
File Inode Change Date/Time     : 2020:04:21 12:58:13-07:00
File Permissions                : rw-rw-r--
File Type                       : TXT
File Type Extension             : txt
MIME Type                       : text/plain
MIME Encoding                   : us-ascii
Newlines                        : Unix LF
Line Count                      : 189
Word Count                      : 619</code></pre>
</figure><p>Here’s the <code>file</code> output in comparison.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ file index.adoc
index.adoc: ASCII text</code></pre>
</figure><p>I could probably write some <code>magic</code> configuration to get more information. But installing ExifTool was easier.</p>
<h2 id="good-enough">Good enough?</h2>
<p><code>file</code> is universally available and gave me the details I needed today. ExifTool gives me everything I needed and then some. I’ll most likely keep it available on my systems.</p>
<p>And no, I’m not going to worry about resizing that image for now.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Directory Listings With Crystal</title>
  <link>https://randomgeekery.org/post/2019/11/directory-listings-with-crystal/</link>
  <pubDate>Fri, 29 Nov 2019 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/11/directory-listings-with-crystal/</guid>
  <description>&lt;p&gt;Okay, I know how to &lt;a href=&#34;https://randomgeekery.org/post/2019/11/summarizing-a-file-with-crystal/&#34;&gt;summarize one file&lt;/a&gt; with &lt;a href=&#34;https://randomgeekery.org/card/crystal/&#34;&gt;card/Crystal&lt;/a&gt;. What about directories?&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>crystal</category>  <category>files</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>I swear I'm not reinventing `ls`.</h2><p>Okay, I know how to <a href="/post/2019/11/summarizing-a-file-with-crystal/">summarize one file</a> with <a href="/card/crystal/">card/Crystal</a>. What about directories?</p>
<h2 id="list-files-in-a-directory">List files in a directory</h2>
<p>Let’s start with a list of the directory’s contents. We can worry about summarizing them later.</p>
<p><a href="https://crystal-lang.org/api/Dir.html">Dir</a> knows all about directories and their contents. Open a directory with a string containing a path, and ask for its children.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="n">dirname</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;HOME&#34;</span><span class="o">]</span><span class="si">}</span><span class="s2">/Sync/Books/computer&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="nb">Dir</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">dirname</span><span class="p">)</span><span class="o">.</span><span class="n">children</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >[&#34;programmingvoiceinterfaces.pdf&#34;, &#34;Databases&#34;, &#34;task-2.5.1.ref.pdf&#34;, &#34;Perl&#34;, &#34;Tools&#34;,
&#34;devopsish&#34;, &#34;diy&#34;, &#34;Hacking_ The Art of Exploitation, 2nd Edition.pdf&#34;,
&#34;The Linux Programming Interface.pdf&#34;, &#34;Web Layout&#34;, &#34;Java&#34;, &#34;JavaScript&#34;, &#34;Generative_Art.pdf&#34;,
&#34;Mac OS X Lion_ The Missing Manual.PDF&#34;, &#34;highperformanceimages.pdf&#34;, &#34;jsonatwork.pdf&#34;,
&#34;Microsoftish&#34;, &#34;Python&#34;, &#34;Ruby&#34;, &#34;PHP&#34;, &#34;Misc-lang&#34;, &#34;tools&#34;, &#34;Data Science&#34;, &#34;Principles&#34;, &#34;cs&#34;,
&#34;vistaguidesv2&#34;]</code></pre>
</figure><p><a href="https://crystal-lang.org/api/Dir.html#children:Array%28String%29-instance-method">Dir#children</a> gets you all the files in a directory except the special <code>.</code> and <code>..</code> items. If you need those, use <a href="https://crystal-lang.org/api/Dir.html#entries:Array%28String%29-instance-method">Dir#entries</a>.</p>
<p>I need to look at each child if I want a readable summary of the directory. I could mess with the <a href="https://crystal-lang.org/api/Array.html">Array</a> returned by <code>Dir#children</code>. There’s a better way, though. Crystal provides a handy <a href="https://en.wikipedia.org/wiki/Iterator">iterator</a> with
<a href="https://crystal-lang.org/api/Dir.html#each_child%28dirname,&amp;block%29-class-method">Dir#each_child</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="nb">Dir</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">dirname</span><span class="p">)</span><span class="o">.</span><span class="n">each_child</span> <span class="p">{</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">child</span> <span class="p">}</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >programmingvoiceinterfaces.pdf
Databases
task-2.5.1.ref.pdf
Perl
Tools
devopsish
diy
Hacking_ The Art of Exploitation, 2nd Edition.pdf
The Linux Programming Interface.pdf
Web Layout
Java
JavaScript
Generative_Art.pdf
Mac OS X Lion_ The Missing Manual.PDF
highperformanceimages.pdf
jsonatwork.pdf
Microsoftish
Python
Ruby
PHP
Misc-lang
tools
Data Science
Principles
cs
vistaguidesv2</code></pre>
</figure><p>That’s <em>much</em> easier to read. Yes. I can work with <code>Dir#each_child</code> to create a summary.</p>
<h2 id="summarize-the-directory-contents">Summarize the directory contents</h2>
<p>I want file names, sizes, and modification times. I already have the names. <a href="https://crystal-lang.org/api/File/Info.html">File.info</a> provides size and time details. Formatting can be handled with a mix of <a href="https://crystal-lang.org/api/toplevel.html#sprintf%28format_string,args:Array%7CTuple%29:String-class-method">sprintf</a> and <a href="https://crystal-lang.org/api/Number.html#format%28separator=%27.%27,delimiter=%27,%27,decimal_places:Int?=nil,*,group:Int=3,only_significant:Bool=false%29:String-instance-method">Number#format</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="nb">Dir</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">dirname</span><span class="p">)</span><span class="o">.</span><span class="n">each_child</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">info</span> <span class="o">=</span> <span class="nb">File</span><span class="o">.</span><span class="n">info</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">dirname</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">child</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">puts</span> <span class="s2">&#34;%-50s %10d %24s&#34;</span> <span class="o">%</span> <span class="p">{</span> <span class="n">child</span><span class="p">,</span> <span class="n">info</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">format</span><span class="p">,</span> <span class="n">info</span><span class="o">.</span><span class="n">modification_time</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>I worked these column widths out manually. There are more robust approaches. In fact, I’ll get to one of them in a few paragraphs.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >programmingvoiceinterfaces.pdf                     18,597,798  2019-02-17 15:32:27 UTC
Databases                                               4,096  2019-10-26 04:31:25 UTC
task-2.5.1.ref.pdf                                    130,899  2019-02-17 15:32:27 UTC
Perl                                                    4,096  2019-10-26 04:31:25 UTC
Tools                                                   4,096  2019-10-25 14:44:36 UTC
devopsish                                               4,096  2019-10-26 04:31:25 UTC
diy                                                     4,096  2019-10-19 07:27:54 UTC
Hacking_ The Art of Exploitation, 2nd Edition.pdf   4,218,534  2019-02-17 15:32:26 UTC
The Linux Programming Interface.pdf                19,628,791  2019-02-17 15:32:26 UTC
Web Layout                                              4,096  2019-10-19 07:27:57 UTC
Java                                                    4,096  2019-10-26 04:31:25 UTC
JavaScript                                              4,096  2019-10-26 04:31:25 UTC
Generative_Art.pdf                                 22,777,770  2019-02-17 15:32:26 UTC
Mac OS X Lion_ The Missing Manual.PDF              43,051,912  2019-02-17 15:32:26 UTC
highperformanceimages.pdf                          51,412,248  2019-02-17 15:32:26 UTC
jsonatwork.pdf                                     10,193,473  2019-02-17 15:32:26 UTC
Microsoftish                                            4,096  2019-10-19 07:28:00 UTC
Python                                                  4,096  2019-10-26 04:31:25 UTC
Ruby                                                    4,096  2019-10-26 04:31:25 UTC
PHP                                                     4,096  2019-10-26 04:31:25 UTC
Misc-lang                                               4,096  2019-10-26 04:31:25 UTC
tools                                                   4,096  2019-10-25 14:41:26 UTC
Data Science                                            4,096  2019-10-26 04:31:25 UTC
Principles                                              4,096  2019-10-20 01:23:43 UTC
cs                                                      4,096  2019-10-19 01:37:08 UTC
vistaguidesv2                                           4,096  2019-10-19 06:56:45 UTC</code></pre>
</figure><p>This is nice and tidy! Of course, now I have more thoughts. The items need to be sorted — by name is good enough. I also want a more obvious indicator which ones are directories.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="nb">Dir</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">dirname</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">dir</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span> <span class="o">=</span> <span class="nb">File</span><span class="o">.</span><span class="n">info</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">dirname</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">child</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">child</span> <span class="o">+=</span> <span class="s2">&#34;/&#34;</span> <span class="k">if</span> <span class="n">info</span><span class="o">.</span><span class="n">directory?</span>
</span></span><span class="line"><span class="cl">    <span class="nb">puts</span> <span class="s2">&#34;%-50s %10s %24s&#34;</span> <span class="o">%</span> <span class="p">{</span> <span class="n">child</span><span class="p">,</span> <span class="n">info</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">format</span><span class="p">,</span> <span class="n">info</span><span class="o">.</span><span class="n">modification_time</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>If a trailing <code>/</code> for directories is good enough for <code>ls -F</code>, it’s good enough for me.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >Data Science/                                           4,096  2019-10-26 04:31:25 UTC
Databases/                                              4,096  2019-10-26 04:31:25 UTC
Generative_Art.pdf                                 22,777,770  2019-02-17 15:32:26 UTC
Hacking_ The Art of Exploitation, 2nd Edition.pdf   4,218,534  2019-02-17 15:32:26 UTC
Java/                                                   4,096  2019-10-26 04:31:25 UTC
JavaScript/                                             4,096  2019-10-26 04:31:25 UTC
Mac OS X Lion_ The Missing Manual.PDF              43,051,912  2019-02-17 15:32:26 UTC
Microsoftish/                                           4,096  2019-10-19 07:28:00 UTC
Misc-lang/                                              4,096  2019-10-26 04:31:25 UTC
PHP/                                                    4,096  2019-10-26 04:31:25 UTC
Perl/                                                   4,096  2019-10-26 04:31:25 UTC
Principles/                                             4,096  2019-10-20 01:23:43 UTC
Python/                                                 4,096  2019-10-26 04:31:25 UTC
Ruby/                                                   4,096  2019-10-26 04:31:25 UTC
The Linux Programming Interface.pdf                19,628,791  2019-02-17 15:32:26 UTC
Tools/                                                  4,096  2019-10-25 14:44:36 UTC
Web Layout/                                             4,096  2019-10-19 07:27:57 UTC
cs/                                                     4,096  2019-10-19 01:37:08 UTC
devopsish/                                              4,096  2019-10-26 04:31:25 UTC
diy/                                                    4,096  2019-10-19 07:27:54 UTC
highperformanceimages.pdf                          51,412,248  2019-02-17 15:32:26 UTC
jsonatwork.pdf                                     10,193,473  2019-02-17 15:32:26 UTC
programmingvoiceinterfaces.pdf                     18,597,798  2019-02-17 15:32:27 UTC
task-2.5.1.ref.pdf                                    130,899  2019-02-17 15:32:27 UTC
tools/                                                  4,096  2019-10-25 14:41:26 UTC
vistaguidesv2/                                          4,096  2019-10-19 06:56:45 UTC</code></pre>
</figure><p>This is better! I can use this information. Time to look at arbitrary directories.</p>
<h2 id="specifying-a-directory-via-argv">Specifying a directory via <code>ARGV</code></h2>
<p><a href="https://crystal-lang.org/api/toplevel.html#ARGV">ARGV</a> is a top level array holding arguments intended for your program. If we called a compiled Crystal program like this:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ./list ~/Sync/Books/computer</code></pre>
</figure><p><code>~/Sync/Books/computer</code> would be the first and only item in <code>ARGV</code>.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Some languages include the program name in their list of arguments. Crystal keeps the program name in <code>PROGRAM_NAME</code>, and the arguments in <code>ARGV</code>.</p>
</blockquote>
<p>If I needed anything more than &ldquo;grab the first item in <code>ARGV</code>,&rdquo; I’d probably use <a href="https://crystal-lang.org/api/OptionParser.html">OptionParser</a>. But all I need is &ldquo;grab the first item in <code>ARGV</code>.&rdquo;</p>
<p><strong><code>list.cr</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># list information about a directory&#39;s contents</span>
</span></span><span class="line"><span class="cl"><span class="n">dirname</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Dir</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">dirname</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">dir</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span> <span class="o">=</span> <span class="nb">File</span><span class="o">.</span><span class="n">info</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">dirname</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">child</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">child</span> <span class="o">+=</span> <span class="s2">&#34;/&#34;</span> <span class="k">if</span> <span class="n">info</span><span class="o">.</span><span class="n">directory?</span>
</span></span><span class="line"><span class="cl">    <span class="nb">puts</span> <span class="s2">&#34;%-50s %10s %24s&#34;</span> <span class="o">%</span> <span class="p">{</span> <span class="n">child</span><span class="p">,</span> <span class="n">info</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">format</span><span class="p">,</span> <span class="n">info</span><span class="o">.</span><span class="n">modification_time</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ crystal run list.cr -- ~/Sync/pictures/
1/                                                      4,096  2019-10-18 15:28:30 UTC
1999/                                                   4,096  2019-10-18 15:28:30 UTC
2001/                                                   4,096  2019-10-18 15:28:30 UTC
2007/                                                   4,096  2019-10-18 15:28:30 UTC
2009/                                                   4,096  2019-10-18 15:28:30 UTC
2010/                                                   4,096  2019-10-18 15:28:30 UTC
2011/                                                   4,096  2019-10-18 15:28:30 UTC
2012/                                                   4,096  2019-10-18 15:28:30 UTC
2013/                                                   4,096  2019-10-18 15:28:30 UTC
2014/                                                   4,096  2019-10-18 15:28:30 UTC
2015/                                                   4,096  2019-10-18 15:28:30 UTC
2016/                                                   4,096  2019-10-18 15:28:30 UTC
2017/                                                   4,096  2019-10-18 15:28:30 UTC
2018/                                                   4,096  2019-10-18 15:28:30 UTC
digikam4.db                                         4,386,816  2019-02-17 15:58:19 UTC
recognition.db                                      4,755,456  2019-02-17 15:58:19 UTC
thumbnails-digikam.db                              197,328,896  2019-02-17 15:58:21 UTC</code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>When using <code>crystal run</code> to execute a script, use <code>--</code> to split arguments for <code>crystal</code> and those for your script. <code>list.cr</code> is for Crystal. <code>~/Sync/pictures/</code> is for the script.</p>
</blockquote>
<p>This works, if you use it exactly right. Right now is where I’m tempted to say &ldquo;Error handling is left as an exercise for the reader.&rdquo; But no. Not this time.</p>
<p>Let’s build this up so it handles common errors and concerns.</p>
<h2 id="writing-listcr">Writing <code>list.cr</code></h2>
<p>There are a few things I want this program to do.</p>
<ul>
<li>Tell me if I forgot the argument.</li>
<li>Tell me if the argument isn’t a real path.</li>
<li>If the argument is a directory, summarize the contents of that directory.</li>
<li>If the argument is a file, not a directory? Um — make a listing with one entry for the file.</li>
<li>I really want to be a little more precise with the column sizes.</li>
</ul>
<p>That covers the likeliest possibilities running this program on my own computer. Besides, Crystal will let me know I forgot something.</p>
<p>I assembled this <a href="https://en.wikipedia.org/wiki/Top-down_and_bottom-up_design">top-down</a>, describing what I want to do and then describing how to do it. And even though Crystal doesn’t require a main method, that seems like a good place to start. If nothing else, it keeps the core logic in one place.</p>
<p>What does <code>main</code> do? It displays a <code>summary_table</code> of whatever I hand to it. If anything goes wrong, it quits with a <code>fatal_error</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="nb">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Print a brief file or directory summary specified via command line argument</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">fatal_error</span><span class="p">(</span><span class="s2">&#34;Missing FILENAME&#34;</span><span class="p">)</span> <span class="k">if</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">begin</span>
</span></span><span class="line"><span class="cl">    <span class="nb">puts</span> <span class="n">summary_table</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">  <span class="k">rescue</span> <span class="n">ex</span>
</span></span><span class="line"><span class="cl">    <span class="n">fatal_error</span> <span class="n">ex</span><span class="o">.</span><span class="n">message</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>I don’t need to consider every possible error. But I should make sure we’re polite about the errors we do encounter. Rescue any <a href="https://crystal-lang.org/reference/syntax_and_semantics/exception_handling.html">exceptions</a> that occur and hand them to <code>fatal_error</code>.</p>
<p><code>fatal_error</code> prints its <code>error</code> message and usage info to <a href="https://crystal-lang.org/api/toplevel.html#STDERR">STDERR</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># Quit with an error and usage info</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">fatal_error</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="no">STDERR</span><span class="o">.</span><span class="n">puts</span> <span class="n">error</span>
</span></span><span class="line"><span class="cl">  <span class="no">STDERR</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&#34;USAGE: </span><span class="si">#{</span><span class="no">PROGRAM_NAME</span><span class="si">}</span><span class="s2"> FILENAME&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">exit</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>That non-zero <a href="https://crystal-lang.org/api/toplevel.html#exit%28status=0%29:NoReturn-class-method">exit</a> tells the shell something went wrong. Handy for piped commands and customized shell prompts that incorporate execution status.</p>
<p>The summary table glues together a collection of summary rows — even if it’s just a collection of one — composed from file summaries and formatted according to some basic guidelines about column size.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># Return a string description of a file or directory</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">summary_table</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">summaries</span> <span class="o">=</span> <span class="n">dir_summaries</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span> <span class="o">||</span> <span class="p">{</span> <span class="n">file_summary</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">columns</span> <span class="o">=</span> <span class="n">column_sizes</span><span class="p">(</span><span class="n">summaries</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">summaries</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">summary_row</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">columns</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p><a href="https://dev.to/walpolesj/short-circuit-assignment-25ik">Short-circuit assignment</a> uses the <a href="https://crystal-lang.org/reference/syntax_and_semantics/or.html">or</a> operator <code>||</code> to succinctly set our summaries. We got a directory summary? Use it. No? Okay, try treating it as a single file. Whichever one returns a useful value first gets assigned to <code>summaries</code>.</p>
<p>Since we’re going top-down, we can say that a directory summary is a sorted collection of files summaries and move on.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># Return a multiline description of a directory</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">dir_summaries</span><span class="p">(</span><span class="n">dirname</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">unless</span> <span class="nb">File</span><span class="o">.</span><span class="n">directory?</span> <span class="n">dirname</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nb">Dir</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">dirname</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="n">dir</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span> <span class="n">file_summary</span> <span class="nb">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dirname</span><span class="p">,</span> <span class="n">child</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>Returning early for non-directories simplifies short-circuit assignment. This method knows it may be handed a regular file. Stopping right away prevents that from being treated the same as an error.</p>
<p>Oh <em>here’s</em> the work of summarizing. Build a name. Describe the size. Turn the file’s modification time into something we can read.</p>
<p>Okay that’s not much work after all. Especially considering that I already figured out how to describe size.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># Return a one-line description of a file</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">file_summary</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">basename</span> <span class="o">=</span> <span class="nb">File</span><span class="o">.</span><span class="n">basename</span> <span class="n">filename</span>
</span></span><span class="line"><span class="cl"><span class="n">size</span> <span class="o">=</span> <span class="n">describe_size</span> <span class="nb">File</span><span class="o">.</span><span class="n">size</span> <span class="n">filename</span>
</span></span><span class="line"><span class="cl"><span class="n">mod_time</span> <span class="o">=</span> <span class="nb">File</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">modification_time</span><span class="o">.</span><span class="n">to_local</span><span class="o">.</span><span class="n">to_s</span> <span class="s2">&#34;%F %T&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">basename</span> <span class="o">+=</span> <span class="s2">&#34;/&#34;</span> <span class="k">if</span> <span class="nb">File</span><span class="o">.</span><span class="n">directory?</span> <span class="n">filename</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">basename</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">mod_time</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>That’s a lot of <a href="https://en.wikipedia.org/wiki/Method_chaining">methodchaining</a>. Method chains are useful, but brittle. Temped to at least hide it in a new describe_time method. Oh well. Next time.</p>
<p>Yep. Turned that Proc from the other day into a method.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># Return string description of byte size as bytes/KB/MB/GB</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">describe_size</span><span class="p">(</span><span class="n">bytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">scales</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span><span class="mi">1024</span><span class="o">**</span><span class="mi">3</span><span class="p">,</span> <span class="s2">&#34;GB&#34;</span><span class="p">},</span> <span class="p">{</span><span class="mi">1024</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;MB&#34;</span><span class="p">},</span> <span class="p">{</span><span class="mi">1024</span><span class="p">,</span> <span class="s2">&#34;KB&#34;</span><span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">scale</span> <span class="o">=</span> <span class="n">scales</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">bytes</span> <span class="o">&gt;</span> <span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">scale</span><span class="p">,</span> <span class="n">term</span> <span class="o">=</span> <span class="k">if</span> <span class="n">scale</span>
</span></span><span class="line"><span class="cl">                  <span class="p">{</span> <span class="n">bytes</span> <span class="o">/</span> <span class="n">scale</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">scale</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span>
</span></span><span class="line"><span class="cl">                  <span class="p">{</span> <span class="n">bytes</span><span class="p">,</span> <span class="s2">&#34;bytes&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">scale</span><span class="o">.</span><span class="n">humanize</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">term</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p><a href="https://crystal-lang.org/api/Number.html#humanize%28io:IO,precision=3,separator=%27.%27,delimiter=%27,%27,*,base=10**3,significant=true,prefixes:Indexable=SI_PREFIXES%29:Nil-instance-method">Number#humanize</a> is a delightful convenience method for readable numbers. It adds commas where expected. It trims floating point numbers to more digestible precision. No word yet on whether it slices or dices.</p>
<p><code>column_sizes</code> is dangerously close to clever — the bad kind of smart where I’m likely to miss a mistake. The intent is reasonable enough. Find how long each field is in each summary. Figure out which is the longest value for each column. But there’s probably a more legible way to do it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># Return a list containing the size needed to fit each field.</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">column_sizes</span><span class="p">(</span><span class="n">summaries</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">sizes</span> <span class="o">=</span> <span class="n">summaries</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">field</span><span class="o">|</span> <span class="n">field</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">field</span><span class="o">|</span> <span class="n">field</span><span class="o">.</span><span class="n">size</span> <span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">sizes</span><span class="o">.</span><span class="n">max_of</span> <span class="p">{</span> <span class="o">|</span><span class="n">column</span><span class="o">|</span> <span class="n">column</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>Oh thank goodness. Back to fairly legible code with <code>summary_row</code>. Although. Honestly? I’m being so specific with how each item in the summary is treated. That calls out for a class, or at least a <a href="https://crystal-lang.org/reference/syntax_and_semantics/structs.html">struct</a>.</p>
<p>Not enough time to rewrite the whole program, though. Sometimes it’s more important to get to the next task than to get this one perfect.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># Return a one-line description of a file</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">summary_row</span><span class="p">(</span><span class="n">summary</span><span class="p">,</span> <span class="n">columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">path_column</span><span class="p">,</span> <span class="n">size_column</span><span class="p">,</span> <span class="n">mod_column</span> <span class="o">=</span> <span class="n">columns</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nb">String</span><span class="o">.</span><span class="n">build</span> <span class="k">do</span> <span class="o">|</span><span class="n">str</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">summary</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">ljust</span><span class="p">(</span><span class="n">path_column</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s2">&#34; &#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">summary</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">rjust</span><span class="p">(</span><span class="n">size_column</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s2">&#34; &#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">summary</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">ljust</span><span class="p">(</span><span class="n">mod_column</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>Like most languages, Crystal’s <a href="https://crystal-lang.org/api/String.html">String</a> class has <em>many</em> methods to make life easier. <a href="https://crystal-lang.org/api/String.html#ljust%28len,char:Char=%27%27%29-instance-method">String#ljust</a> pads the end of a string. <a href="https://crystal-lang.org/api/String.html#rjust%28len,char:Char=%27%27%29-instance-method">String#rjust</a> pads at the start, which is nice for number columns. Though my humanized numbers do reduce the effectiveness of a numeric column.</p>
<p>That’s it? I’m done? Excellent!</p>
<p>Let’s build it and look at a random folder in my Sync archive.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ crystal build list.cr
$ ./list ~/Sync/music-stuff/
examine-iTunes.py 564 bytes 2019-02-17 07:58:19
itunes.xml          29.8 MB 2019-02-17 07:58:19
ratings.rb          1.02 KB 2019-02-17 07:58:19
rhythmdb.xml        14.8 MB 2019-02-17 07:58:19</code></pre>
</figure><p>Oh hey. Stuff from a couple old music management posts. Getting back to those is on the task list. I’ll get there.</p>
<p>Anyways. My <code>list</code> program works!</p>
<p>I learned a fair bit about managing collections in Crystal. Also, the &ldquo;small methods&rdquo; approach that served me well in Ruby seems just as handy here.</p>
<h2 id="yeah-i-know">Yeah, I know</h2>
<p>If file information was all I needed, I could get the same details and more with
<a href="https://www.gnu.org/software/coreutils/manual/html_node/ls-invocation.html#ls-invocation">ls</a>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ls -gGhp ~/Sync/pictures/
total 197M
drwxr-xr-x  3 4.0K Oct 18 08:28 1/
drwxr-xr-x  7 4.0K Oct 18 08:28 1999/
drwxr-xr-x  3 4.0K Oct 18 08:28 2001/
drwxr-xr-x  8 4.0K Oct 18 08:28 2007/
drwxr-xr-x  8 4.0K Oct 18 08:28 2009/
drwxr-xr-x  5 4.0K Oct 18 08:28 2010/
drwxr-xr-x  5 4.0K Oct 18 08:28 2011/
drwxr-xr-x  8 4.0K Oct 18 08:28 2012/
drwxr-xr-x 14 4.0K Oct 18 08:28 2013/
drwxr-xr-x 14 4.0K Oct 18 08:28 2014/
drwxr-xr-x 14 4.0K Oct 18 08:28 2015/
drwxr-xr-x 13 4.0K Oct 18 08:28 2016/
drwxr-xr-x 12 4.0K Oct 18 08:28 2017/
drwxr-xr-x 11 4.0K Oct 18 08:28 2018/
-rw-r--r--  1 4.2M Feb 17  2019 digikam4.db
-rw-r--r--  1 4.6M Feb 17  2019 recognition.db
-rw-r--r--  1 189M Feb 17  2019 thumbnails-digikam.db</code></pre>
</figure><p>But I wouldn’t have learned anything about Crystal. I wouldn’t have had nearly as much fun, either. And — not counting other concerns like &ldquo;paying rent&rdquo; or &ldquo;eating&rdquo; — fun is the most important part!</p>]]></content:encoded>
</item>
<item>
  <title>Post: Summarizing A File With Crystal</title>
  <link>https://randomgeekery.org/post/2019/11/summarizing-a-file-with-crystal/</link>
  <pubDate>Sun, 17 Nov 2019 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/11/summarizing-a-file-with-crystal/</guid>
  <description>Okay, I don’t have a lot of time here. We’re on a tight schedule. But hey tests are running so I’ll write a tiny bit of card/Crystal.
How would I print a quick summary of a file? Besides ls, of course. I mean how would I print a quick summary of a file using Crystal?
filename = &#34;#{ENV[&#34;HOME&#34;]}/Dropbox/Camera Uploads/2019-11-13 08.11.12.png&#34; puts `ls -l #{filename}` -rw-r--r-- 1 randomgeek randomgeek 3346960 Nov 13 08:11 /home/randomgeek/Dropbox/Camera Uploads/2019-11-13 08.</description>
   <category>post</category> 
   <category>post</category> 
   <category>crystal</category>  <category>files</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Been busy, but let's take a minute to summarize a file's details with [Crystal](https://crystal-lang.org/)</h2><p><figure>
    <img src="/../../../attachments/img/2019/cover-2019-11-17.png" alt="attachments/img/2019/cover-2019-11-17.png"/></figure></p>
<p>Okay, I don’t have a lot of time here. We’re on a tight schedule. But hey tests are running so I’ll write a tiny bit of <a href="/card/crystal/">card/Crystal</a>.</p>
<p>How would I print a quick summary of a file? Besides <a href="http://www.man7.org/linux/man-pages/man1/ls.1.html"><code>ls</code></a>, of course. I mean how would I print a quick summary of a file using Crystal?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="n">filename</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;HOME&#34;</span><span class="o">]</span><span class="si">}</span><span class="s2">/Dropbox/Camera Uploads/2019-11-13 08.11.12.png&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="sb">`ls -l </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="sb">`</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >-rw-r--r-- 1 randomgeek randomgeek 3346960 Nov 13 08:11 /home/randomgeek/Dropbox/Camera Uploads/2019-11-13 08.11.12.png</code></pre>
</figure><p>We already looked at <a href="/post/2019/08/trying-the-crystal-language/">Crystal as a glue language</a>. No, I’m wondering more about how I would get this information using Crystal’s <a href="https://crystal-lang.org/api/">standard library</a>.</p>
<p>Turns out I can get the same information with <a href="https://crystal-lang.org/api/File/Info.html"><code>File::Info</code></a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="nb">puts</span> <span class="nb">File</span><span class="o">.</span><span class="n">info</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;HOME&#34;</span><span class="o">]</span><span class="si">}</span><span class="s2">/Dropbox/Camera Uploads/2019-11-13 08.11.12.png&#34;</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >Crystal::System::FileInfo(@stat=LibC::Stat(@st_dev=2051, @st_ino=6983901, \
  @st_nlink=1, @st_mode=33188, @st_uid=1000, @st_gid=1000, @__pad0=0,     \
  @st_rdev=0, @st_size=3346960, @st_blksize=4096, @st_blocks=6552,        \
  @st_atim=LibC::Timespec(@tv_sec=1573661608, @tv_nsec=641856438),        \
  @st_mtim=LibC::Timespec(@tv_sec=1573661472, @tv_nsec=0),                \
  @st_ctim=LibC::Timespec(@tv_sec=1573661609, @tv_nsec=941857986),        \
  @__glibc_reserved=StaticArray[0, 0, 0]))</code></pre>
</figure><p>This is both more and less information than I was hoping for. Clearly whoever wrote <code>to_s</code> for <code>File::Info</code> figured the main time you would need to directly print the object is when you were debugging. That makes sense, and they provide methods to get at the information I care about most.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="c1"># Returns a multiline string summary of a single file</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">describe_file</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span> <span class="o">=</span> <span class="nb">File</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">size</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">bytes</span> <span class="p">:</span> <span class="nb">UInt64</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">scales</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span><span class="mi">1024</span><span class="o">**</span><span class="mi">3</span><span class="p">,</span> <span class="s2">&#34;GB&#34;</span><span class="p">},</span> <span class="p">{</span><span class="mi">1024</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;MB&#34;</span><span class="p">},</span> <span class="p">{</span><span class="mi">1024</span><span class="p">,</span> <span class="s2">&#34;KB&#34;</span><span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">scale</span> <span class="o">=</span> <span class="n">scales</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">bytes</span> <span class="o">&gt;</span> <span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="n">scale</span><span class="o">.</span><span class="n">nil?</span> <span class="p">?</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">bytes</span><span class="si">}</span><span class="s2"> bytes&#34;</span> <span class="p">:</span> <span class="s2">&#34;%.2f %s&#34;</span> <span class="o">%</span> <span class="o">[</span><span class="n">bytes</span> <span class="o">/</span> <span class="n">scale</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">scale</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">info</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">String</span><span class="o">.</span><span class="n">build</span> <span class="k">do</span> <span class="o">|</span><span class="n">str</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">      <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="s2">&#34;Filename: </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="se">\n</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="s2">&#34;Size:     </span><span class="si">#{</span><span class="n">size</span><span class="si">}</span><span class="se">\n</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="s2">&#34;Modified: </span><span class="si">#{</span><span class="n">info</span><span class="o">.</span><span class="n">modification_time</span><span class="si">}</span><span class="se">\n</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">filename</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;HOME&#34;</span><span class="o">]</span><span class="si">}</span><span class="s2">/Dropbox/Camera Uploads/2019-11-13 08.11.12.png&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="n">describe_file</span> <span class="n">filename</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >Filename: /home/randomgeek/Dropbox/Camera Uploads/2019-11-13 08.11.12.png
Size:     3.19 MB
Modified: 2019-11-13 16:11:12 UTC</code></pre>
</figure><p>I grabbed the logic from <a href="/post/2019/06/weighing-files-with-python/">post/2019/06/weighing-files-with-python</a> to get a description of the size in kilobytes, megabytes, or gigabytes. That is easier for my brain to understand than the <a href="https://crystal-lang.org/api/UInt64.html"><code>UInt64</code></a> integer byte count provided by <a href="https://crystal-lang.org/api/File/Info.html#size:UInt64-instance-method"><code>File::Info.size</code></a>.</p>
<p>Yes, the whole thing is more clever than the situation requires, but I <em>am</em> trying to  learn the language here. Using a <a href="https://crystal-lang.org/api/Proc.html"><code>Proc</code></a> was one way to basically copy and paste the logic from my earlier post and reformat for Crystal. Sure, I could have — and probably should have — defined a new, separate method. At the same time, Procs are great to show that there’s this bit of behavior you want to encapsulate, but you don’t plan to use anywhere else.</p>
<p>But really it was just a bit of late night silliness so I could see Crystal Procs in action. Silliness for the sake of learning is okay.</p>
<p>And what did I learn?</p>
<ul>
<li><a href="https://crystal-lang.org/api/File/Info.html"><code>File::Info</code></a> gives me what I want for file summaries.</li>
<li>Crystal supports <a href="https://crystal-lang.org/api/Tuple.html">Tuples</a>: special immutable lists that can be more efficient than a full <a href="https://crystal-lang.org/api/Array.html"><code>Array</code></a></li>
<li><a href="https://crystal-lang.org/api/String.html#build%28capacity=64,&amp;block%29:self-class-method"><code>String.build</code></a> is a nice-looking way to make multiline strings without heredocs or <code>+=</code>. Apparently there are <a href="https://crystal-lang.org/reference/guides/performance.html">performance reasons</a> to use it too, but I’ll never see them in this short program. Same with Tuples really, but the type you specify can tell people what your intentions are.</li>
<li><a href="https://crystal-lang.org/api/Proc.html"><code>Proc</code></a> argument types must be specified. That must mean the compiler treats them differently than normal methods.</li>
</ul>
<p>Hang on. I’m curious to explore that last one. Procs are treated differently. Are they faster?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="k">require</span> <span class="s2">&#34;benchmark&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">filename</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;HOME&#34;</span><span class="o">]</span><span class="si">}</span><span class="s2">/Dropbox/Camera Uploads/2019-11-13 08.11.12.png&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">bytes</span> <span class="o">=</span> <span class="nb">File</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">size</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">describe_size</span><span class="p">(</span><span class="n">bytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">scales</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span><span class="mi">1024</span><span class="o">**</span><span class="mi">3</span><span class="p">,</span> <span class="s2">&#34;GB&#34;</span><span class="p">},</span> <span class="p">{</span><span class="mi">1024</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;MB&#34;</span><span class="p">},</span> <span class="p">{</span><span class="mi">1024</span><span class="p">,</span> <span class="s2">&#34;KB&#34;</span><span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">scale</span> <span class="o">=</span> <span class="n">scales</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">bytes</span> <span class="o">&gt;</span> <span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">scale</span><span class="o">.</span><span class="n">nil?</span> <span class="p">?</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">bytes</span><span class="si">}</span><span class="s2"> bytes&#34;</span> <span class="p">:</span> <span class="s2">&#34;%.2f %s&#34;</span> <span class="o">%</span> <span class="o">[</span><span class="n">bytes</span> <span class="o">/</span> <span class="n">scale</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">scale</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">size_proc</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">bytes</span> <span class="p">:</span> <span class="nb">UInt64</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">scales</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span><span class="mi">1024</span><span class="o">**</span><span class="mi">3</span><span class="p">,</span> <span class="s2">&#34;GB&#34;</span><span class="p">},</span> <span class="p">{</span><span class="mi">1024</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;MB&#34;</span><span class="p">},</span> <span class="p">{</span><span class="mi">1024</span><span class="p">,</span> <span class="s2">&#34;KB&#34;</span><span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">scale</span> <span class="o">=</span> <span class="n">scales</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">bytes</span> <span class="o">&gt;</span> <span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">scale</span><span class="o">.</span><span class="n">nil?</span> <span class="p">?</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">bytes</span><span class="si">}</span><span class="s2"> bytes&#34;</span> <span class="p">:</span> <span class="s2">&#34;%.2f %s&#34;</span> <span class="o">%</span> <span class="o">[</span><span class="n">bytes</span> <span class="o">/</span> <span class="n">scale</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">scale</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Benchmark</span><span class="o">.</span><span class="n">ips</span> <span class="k">do</span> <span class="o">|</span><span class="n">benchmark</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">benchmark</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&#34;using method&#34;</span><span class="p">)</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="n">size</span> <span class="o">=</span> <span class="n">describe_size</span><span class="p">(</span><span class="n">bytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">benchmark</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&#34;using proc&#34;</span><span class="p">)</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="n">size</span> <span class="o">=</span> <span class="n">size_proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">bytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ crystal run --release proc_vs_def.cr
using method   2.20M (455.45ns) (± 6.08%)  352B/op        fastest
  using proc   2.18M (458.85ns) (± 5.46%)  352B/op   1.01× slower</code></pre>
</figure><p>The method is almost three whole nanoseconds faster than the Proc. I wonder…</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> crystal run --release proc_vs_def.cr
</span></span><span class="line"><span class="cl"><span class="go">using method   2.15M (465.37ns) (± 5.93%)  352B/op   1.01× slower
</span></span></span><span class="line"><span class="cl"><span class="go">  using proc   2.16M (462.10ns) (± 6.04%)  352B/op        fastest
</span></span></span></code></pre>
</figure><p>Yeah, that’s what I thought. For this case at least, local environment variations — did Spotify just hit a new track? — will have a bigger impact than whether I choose a Proc or a method.</p>
<p>Okay, tests are done. Everything passed, yay! Back to it. Maybe back to the drawing, actually.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Weighing Files With Python</title>
  <link>https://randomgeekery.org/post/2019/06/weighing-files-with-python/</link>
  <pubDate>Sat, 01 Jun 2019 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/06/weighing-files-with-python/</guid>
  <description>The idea I got an idea in my head a while ago to reduce image sizes for the site. Some of my drawings and photos are a little big. On a slower connection, a visitor could spend a while waiting. And if their bandwidth is metered? Oh I’d hate to think one of my sketches was what put their account over the cap, or got their account throttled to Edge speeds for the rest of the month.</description>
   <category>post</category> 
   <category>post</category> 
   <category>python</category>  <category>site</category>  <category>files</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>I want to optimize this site's file sizes, but first I should see if I need to.</h2><p><figure>
    <img src="/../../../attachments/img/2019/cover-2019-06-01.png" alt="attachments/img/2019/cover-2019-06-01.png"/></figure></p>
<h2 id="the-idea">The idea</h2>
<p>I got an idea in my head a while ago to reduce image sizes for the site. Some of my drawings and photos are a little big. On a slower connection, a visitor could spend a while waiting. And if their bandwidth is metered? Oh I’d hate to think one of my sketches was what put their account over the cap, or got their account throttled to Edge speeds for the rest of the month.</p>
<p>I know I can make it better.</p>
<h2 id="the-problem-with-my-idea">The problem with my idea</h2>
<p>Well, I don’t <em>really</em> know. I suspect a handful of files are big, but how many files? How big? Big for who? And what about after I do the work? What is less than big? How will I know what work to do, and how will I know the effectiveness of what work when I’m done?</p>
<p><a href="https://anonymoushash.vmbrasseur.com/">VM Brasseur</a> gives excellent advice on many topics. One tip sticks in my head: I need numbers for my accomplishments. Heck, right now I need numbers to see if this accomplishment is necessary.</p>
<h2 id="what-numbers-should-i-care-about">What numbers <em>should</em> I care about?</h2>
<p>Of course the problem with data is that there is so much of it. What should I care about, if the goal is making a visit easier for visitors on limited connections?</p>
<h3 id="file-size">File size</h3>
<p>This is the more obvious and easily measured. This site (and most others) consists of files, right? Text files, image files, the occasional video file. All else being equal, a file that takes up more storage will also take more time to download.</p>
<p>&ldquo;All else being equal&rdquo; gets a little tricky though.</p>
<h3 id="latency">Latency</h3>
<p>How long does it take for the user to see something useful when interacting with your site? (loading a page, clicking a link, doing things with web apps). It’s affected by – well, everything really. Network speed, server resources, sunspots.</p>
<p>If latency is high enough, one big file may reach a visitor quicker than a dozen small requests. If they spend too long waiting for too many pieces, they’ll go elsewhere in a heartbeat.</p>
<p>This <a href="https://twitter.com/tacertain/status/1132391299733000193">Twitter thread</a> by Andrew Certain provides an interesting look at how a large organization like Amazon takes latency seriously. It’s far deeper than I plan to measure, but it might help build more context.</p>
<p>Unfortunately latency can be hard to predict for one person with a blog. I do not yet know what tools work best for evaluating the effect of latency on site performance.</p>
<p>There are some easily found tools. <a href="https://developers.google.com/web/tools/chrome-devtools/network/#throttle">Chrome</a> and <a href="https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling">Firefox</a> both include tools to &ldquo;throttle&rdquo; – simulating different network conditions.</p>
<p><figure>
    <img src="/attachments/img/2019/firefox-throttled-3g-kitty.png" alt="Firefox Developer Tools network tab with throttling at 3G"/></figure></p>
<p>This is helpful on a page-by-page basis, and probably <em>very</em> helpful for evaluating a single page application. It doesn’t translate easily to checking an entire site. I suppose I could use <a href="https://github.com/tylertreat/Comcast">Comcast</a>, a command line tool for &ldquo;simulating shitty network conditions&rdquo; and maybe <a href="https://httpie.org/">HTTPie</a> to crawl the site under those conditions.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Brian, stop. This is taking you into the world of resilience testing and <a href="https://en.wikipedia.org/wiki/Chaos_engineering">chaos engineering</a>, which sounds <em>awesome</em> and has a wealth of tools already written. It also sounds completely unnecessary for this humble little blog.</p>
<p>&ldquo;Pick your battles&rdquo; is another truism that applies here.</p>
</blockquote>
<p>We’ll ignore latency for now. Besides, I’ve already managed many major elements of latency. <a href="https://gohugo.io">Hugo</a> creates a static site. Every page already exists by the time you visit. No extra time needed for database lookups or constructing views. I use AWS <a href="https://aws.amazon.com/s3/">S3</a> to host, and <a href="https://aws.amazon.com/cloudfront/">Cloudfront</a> as a <a href="https://www.cloudflare.com/learning/cdn/what-is-a-cdn/">CDN</a>. This is probably the fastest and most reliable approach possible with my resources.</p>
<p>I <em>do</em> have an issue with the CDN not promptly updating some files when I upload the site, but I’m working on that.</p>
<h2 id="measuring-file-sizes">Measuring file sizes</h2>
<p>I could just pick an arbitrary threshold and find every file bigger than that with a <a href="/card/perl/">card/Perl</a> one-liner using <a href="https://metacpan.org/pod/File::Find::Rule">File::Find::Rule</a>&rsquo;s <a href="https://metacpan.org/pod/distribution/File-Find-Rule/lib/File/Find/Rule/Procedural.pod">procedural</a> flavor.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ perl -MFile::Find::Rule -E &#39;say for find(file =&gt; size =&gt; &#34;&gt; 6M&#34; =&gt; in =&gt; &#34;public&#34;);&#39;
public/2015/08/01/zentangle-doodle/cover.png
public/2017/04/22/kalaidoscope-symmetry/cover.jpg
public/2017/11/07/something-colorful/cover.jpg
public/2019/04/14/psychedelic-playing-card/cover.png
public/2018/09/30/cougar-mountain/fantastic-erratic.jpg
public/2018/09/30/cougar-mountain/old-stump.jpg
public/2018/09/30/cougar-mountain/mossy.jpg
public/2018/09/30/cougar-mountain/tall-stump.jpg
public/2018/09/30/cougar-mountain/cover.jpg</code></pre>
</figure><p>Or maybe find the median between my biggest and smallest files, flagging everything bigger than the median. I promised <a href="/card/python/">card/Python</a> in the tags, so let’s move away from Perl.</p>
<p><strong><code>median.py</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">attr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@attr.s</span><span class="p">(</span><span class="n">auto_attribs</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">FileWeight</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Knows how much a file weighs&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span><span class="p">:</span> <span class="nb">str</span>
</span></span><span class="line"><span class="cl">    <span class="n">size</span><span class="p">:</span> <span class="nb">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">files_seen</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="s2">&#34;public&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">filepath</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">filesize</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">getsize</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">files_seen</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">FileWeight</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="n">filesize</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">smallest</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">files_seen</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">fw</span><span class="p">:</span> <span class="n">fw</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">largest</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">files_seen</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">fw</span><span class="p">:</span> <span class="n">fw</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">median</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="p">(</span><span class="n">smallest</span><span class="o">.</span><span class="n">size</span> <span class="o">+</span> <span class="n">largest</span><span class="o">.</span><span class="n">size</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="n">biggest_half</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files_seen</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="n">median</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">fw</span> <span class="ow">in</span> <span class="n">biggest_half</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">fw</span><span class="p">)</span></span></span></code></pre>
</figure><p>I know Python 3.7 has <a href="https://docs.python.org/3/library/dataclasses.html">data classes</a>. I like <a href="https://www.attrs.org">attrs</a>, which supports type hinting while still working on older versions of the language.</p>
<p>Running this gives me the same files as my one-liner. Good choice for an arbitrary number, right?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python median.py
FileWeight(path=&#39;public/2015/08/01/zentangle-doodle/cover.png&#39;, size=8964751)
FileWeight(path=&#39;public/2017/04/22/kalaidoscope-symmetry/cover.jpg&#39;, size=7729604)
FileWeight(path=&#39;public/2017/11/07/something-colorful/cover.jpg&#39;, size=9594815)
FileWeight(path=&#39;public/2019/04/14/psychedelic-playing-card/cover.png&#39;, size=13088396)
FileWeight(path=&#39;public/2018/09/30/cougar-mountain/fantastic-erratic.jpg&#39;, size=7114429)
FileWeight(path=&#39;public/2018/09/30/cougar-mountain/old-stump.jpg&#39;, size=7672471)
FileWeight(path=&#39;public/2018/09/30/cougar-mountain/mossy.jpg&#39;, size=6639527)
FileWeight(path=&#39;public/2018/09/30/cougar-mountain/tall-stump.jpg&#39;, size=7052340)
FileWeight(path=&#39;public/2018/09/30/cougar-mountain/cover.jpg&#39;, size=8412560)</code></pre>
</figure><p>I learned that this technique of grabbing everything on one side of the median is called a &ldquo;median split.&rdquo; I also learned that however convenient it might be, a median split doesn’t <em>mean</em> anything. It’s the value halfway between two numbers. Is it a big download size? Maybe. What if I have a bunch of 5.9MB files? Those would be kind of big too, right? If I keep optimizing the biggest half and the median steadily moves down, how will I know when I’m done? What’s a small download?</p>
<p>Okay. I’m okay. I need to breathe for a minute. Once you start asking questions, it can be hard to stop.</p>
<p>So I need to know what the numbers mean, and what a good threshold is. Come to think of it, there might be a few thresholds.</p>
<h2 id="estimating-download-time">Estimating download time</h2>
<p>I care about how long it takes to download a file, assuming latency is as good as it’s going to get. The file size is one part of the download question. The visitor’s connection is the other part. I usually have a nice high speed connection, but not always.</p>
<p>Often I’m on LTE with one bar. Sometimes I’m on 3G. Very occasionally I find a dark corner that only gets me an Edge connection.</p>
<p>Sometimes I have no connection at all, but site optimization can’t help with that.</p>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling">Firefox</a> throttling tool documentation includes a chart specifying what its selections represent. I know from site analytics that a third of my visitors use mobile devices. I don’t know what their connection speed is, but I find myself on 3G often enough that I think &ldquo;Regular 3G&rdquo; is an acceptable choice.</p>
<p>That 750 Kbps number represents 750,000 bits. There are eight bits in a byte. Divide 750,000 by eight and that’s only 93,750 bytes per second. The site’s median size of roughly six megabytes suddenly feels a lot bigger.</p>
<p>Let’s teach the FileWeight class to estimate downloads. I’ll clarify its printed details while I’m at it.</p>
<p><strong><code>download-time.py</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">attr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">DOWNLOAD_SPEED</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">750_000</span> <span class="c1"># bits per second</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">describe_size</span><span class="p">(</span><span class="n">byte_count</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Use common notation to describe a byte count&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">scales</span> <span class="o">=</span> <span class="p">((</span><span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">,</span> <span class="s2">&#34;GB&#34;</span><span class="p">),</span> <span class="p">(</span><span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">,</span> <span class="s2">&#34;MB&#34;</span><span class="p">),</span> <span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="s2">&#34;KB&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">multiple</span><span class="p">,</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">scales</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">byte_count</span> <span class="o">&gt;</span> <span class="n">multiple</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">converted</span> <span class="o">=</span> <span class="n">byte_count</span> <span class="o">/</span> <span class="n">multiple</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">converted</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">byte_count</span><span class="si">}</span><span class="s2"> bytes&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@attr.s</span><span class="p">(</span><span class="n">auto_attribs</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">FileWeight</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Knows how much a file weighs&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span><span class="p">:</span> <span class="nb">str</span>
</span></span><span class="line"><span class="cl">    <span class="n">size</span><span class="p">:</span> <span class="nb">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">download_time</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bps</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;How many seconds to download this file at a given rate&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">bytes_per_second</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="n">bps</span> <span class="o">/</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">/</span> <span class="n">bytes_per_second</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">size</span> <span class="o">=</span> <span class="n">describe_size</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">time_3g</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">download_time</span><span class="p">(</span><span class="n">DOWNLOAD_SPEED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;&lt;</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="si">}</span><span class="s2">&gt; (</span><span class="si">{</span><span class="n">size</span><span class="si">}</span><span class="s2">) 3g=</span><span class="si">{</span><span class="n">time_3g</span><span class="si">:</span><span class="s2">.3f</span><span class="si">}</span><span class="s2">s&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span></span></span></code></pre>
</figure><p>The script is still focusing on the median, but the extra information should give us a little context.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python download-time.py
&lt;public/2015/08/01/zentangle-doodle/cover.png&gt; (8.55 MB) 3g=95.624s
&lt;public/2017/04/22/kalaidoscope-symmetry/cover.jpg&gt; (7.37 MB) 3g=82.449s
&lt;public/2017/11/07/something-colorful/cover.jpg&gt; (9.15 MB) 3g=102.345s
&lt;public/2019/04/14/psychedelic-playing-card/cover.png&gt; (12.48 MB) 3g=139.610s
&lt;public/2018/09/30/cougar-mountain/fantastic-erratic.jpg&gt; (6.78 MB) 3g=75.887s
&lt;public/2018/09/30/cougar-mountain/old-stump.jpg&gt; (7.32 MB) 3g=81.840s
&lt;public/2018/09/30/cougar-mountain/mossy.jpg&gt; (6.33 MB) 3g=70.822s
&lt;public/2018/09/30/cougar-mountain/tall-stump.jpg&gt; (6.73 MB) 3g=75.225s
&lt;public/2018/09/30/cougar-mountain/cover.jpg&gt; (8.02 MB) 3g=89.734s</code></pre>
</figure><p>Oh that’s not good. The biggest file would take almost two and a half minutes to download, while the smallest above the median would still take over a minute. That’s on top of whatever else is on the page.</p>
<p>My threshold should be far less than the median. How much less?</p>
<h3 id="picking-my-thresholds">Picking my thresholds</h3>
<p>Jakob Nielsen <a href="https://www.nngroup.com/articles/response-times-3-important-limits/">summarized</a> how different response times feel to a user when interacting with an application – and yes, loading a post from your blog in a browser is interacting with an application, affected by the browser <em>and</em> your site (and the network, and so on).</p>
<ul>
<li>less than <em>0.1 seconds</em> is fast enough that it feels like they’re doing it themselves</li>
<li>less than <em>1 second</em> is slow enough that it feels like they’re telling the computer to do something</li>
<li>less than <em>10 seconds</em> is so slow that you’re starting to lose their attention</li>
</ul>
<p>Beyond ten seconds and you’re wrestling with the limits of a normal human brain that already has plenty of stuff to think about.</p>
<p>I can and do make excuses –</p>
<ul>
<li>&ldquo;They probably came here on purpose, so they’ll wait!&rdquo;</li>
<li>&ldquo;This is so cool that they won’t mind waiting!&rdquo;</li>
<li>&ldquo;So many factors are beyond my control that there’s no point worrying about it.&rdquo;</li>
<li>&ldquo;Everybody else’s site is even worse!&rdquo;</li>
</ul>
<p>– but no. The first two are lies from my ego, the last two are <em>terrible</em> arguments from my apathy.</p>
<p>I know my thresholds. Let’s teach FileWeight about them so it can report the news.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">DOWNLOAD_EXPRESSIONS</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;excessive&#34;</span><span class="p">:</span> <span class="s2">&#34;🙁&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;slow&#34;</span><span class="p">:</span> <span class="s2">&#34;😐&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;ok&#34;</span><span class="p">:</span> <span class="s2">&#34;😊&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;instant&#34;</span><span class="p">:</span> <span class="s2">&#34;😁&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@attr.s</span><span class="p">(</span><span class="n">auto_attribs</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">FileWeight</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">size</span> <span class="o">=</span> <span class="n">describe_size</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">time_3g</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">download_time</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">describe_3g</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">time_3g</span><span class="si">:</span><span class="s2">.3f</span><span class="si">}</span><span class="s2">s&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_excessive</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="n">describe_3g</span> <span class="o">+=</span> <span class="n">DOWNLOAD_EXPRESSIONS</span><span class="p">[</span><span class="s2">&#34;excessive&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_slow</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="n">describe_3g</span> <span class="o">+=</span> <span class="n">DOWNLOAD_EXPRESSIONS</span><span class="p">[</span><span class="s2">&#34;slow&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_ok</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="n">describe_3g</span> <span class="o">+=</span> <span class="n">DOWNLOAD_EXPRESSIONS</span><span class="p">[</span><span class="s2">&#34;ok&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_instant</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="n">describe_3g</span> <span class="o">+=</span> <span class="n">DOWNLOAD_EXPRESSIONS</span><span class="p">[</span><span class="s2">&#34;instant&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;&lt;</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="si">}</span><span class="s2">&gt; (</span><span class="si">{</span><span class="n">size</span><span class="si">}</span><span class="s2">) 3g=</span><span class="si">{</span><span class="n">describe_3g</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">is_excessive</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">download_time</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">10.0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">is_slow</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mf">1.0</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">download_time</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="mf">10.0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">is_ok</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mf">0.1</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">download_time</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="mf">1.0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">is_instant</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">download_time</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="mf">0.1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">files_seen</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="s2">&#34;public&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">filepath</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">filesize</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">getsize</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">files_seen</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">FileWeight</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="n">filesize</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># I got bored of looking at the same files</span>
</span></span><span class="line"><span class="cl">    <span class="kn">import</span> <span class="nn">random</span>
</span></span><span class="line"><span class="cl">    <span class="n">selection</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">files_seen</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">fw</span> <span class="ow">in</span> <span class="n">selection</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">fw</span><span class="p">)</span></span></span></code></pre>
</figure><p>I also added a little emoji quick reference so I can tell at a glance the expected user reaction at the file’s download rate.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python download-time.py
&lt;public/2018/12/31/hopepunk-for-2019/cover_hu302a359ad2f64a42481affbc4fbbb8c4_4191368_1000x0_resize_q75_linear.jpg&gt; (156.96 KB) 3g=1.714s😐
&lt;public/2018/10/27/winter-hat-and-gloves/cover_hu42513aeed6d773f768448596f8f497f6_2320770_1000x0_resize_q75_linear.jpg&gt; (182.43 KB) 3g=1.993s😐
&lt;public/tags/pagetemplate/index.xml&gt; (128.25 KB) 3g=1.401s😐
&lt;public/2018/05/26/crafts-are-now-posts/index.html&gt; (17.27 KB) 3g=0.189s😊
&lt;public/2001/01/17/python/index.html&gt; (6.44 KB) 3g=0.070s😁
&lt;public/post/2013/fickle/index.html&gt; (328 bytes) 3g=0.003s😁
&lt;public/2018/08/11/satellite/satellite-lines-black.jpg&gt; (476.27 KB) 3g=5.202s😐
&lt;public/coolnamehere/2007/04/19_01-handling-a-single-round.html&gt; (469 bytes) 3g=0.005s😁
&lt;public/2018/08/19/island-center-forest/mossy-trees.jpg&gt; (3.56 MB) 3g=39.789s🙁
&lt;public/2008/10/01/natalies-hat/cover.jpg&gt; (84.94 KB) 3g=0.928s😊</code></pre>
</figure><p>Plenty of build process artifacts in there. The long image names come from using Hugo <a href="https://gohugo.io/content-management/image-processing/">image processing</a> functions for thumbnails and inline images. I also have many tiny redirect files, letting Hugo’s
<a href="https://gohugo.io/content-management/urls/#aliases/">aliasing</a> behavior make up for the site’s inconsistent organization over time.</p>
<p>A FileWeight object can now describe the details I care about for a single file, including where it fits in the attention span thresholds. How many of my files are too big?</p>
<h2 id="putting-it-all-together">Putting it all together</h2>
<p>Ideally I would measure all the files associated with each post – HTML, CSS, fonts, JavaScript if any, and images – then add those together for a total page weight. Someday I may even do that! Not today, though. Today I focus on information about downloading each file individually. This post is long enough already.</p>
<h3 id="all-the-files">All the files</h3>
<p><strong><code>report-weight.py</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">describe_speed</span><span class="p">(</span><span class="n">bit_count</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Use common notation to describe a baud rate&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">scales</span> <span class="o">=</span> <span class="p">((</span><span class="mi">1000</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span> <span class="s2">&#34;Gbps&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">              <span class="p">(</span><span class="mi">1000</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span> <span class="s2">&#34;Mbps&#34;</span><span class="p">),</span> <span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="s2">&#34;Kbps&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">multiple</span><span class="p">,</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">scales</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">bit_count</span> <span class="o">&gt;</span> <span class="n">multiple</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">converted</span> <span class="o">=</span> <span class="n">bit_count</span> <span class="o">/</span> <span class="n">multiple</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">converted</span><span class="si">:</span><span class="s2">.2f</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">bit_count</span><span class="si">}</span><span class="s2"> bps&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@attr.s</span><span class="p">(</span><span class="n">auto_attribs</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SiteWeight</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Reports download information for all files in the site&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">public_dir</span><span class="p">:</span> <span class="nb">str</span>
</span></span><span class="line"><span class="cl">    <span class="n">files</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">FileWeight</span><span class="p">]</span> <span class="o">=</span> <span class="n">attr</span><span class="o">.</span><span class="n">ib</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">init</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">attr</span><span class="o">.</span><span class="n">Factory</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="k">lambda</span> <span class="bp">self</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">_load_files</span><span class="p">(),</span> <span class="n">takes_self</span><span class="o">=</span><span class="kc">True</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_load_files</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">FileWeight</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Gather FileWeight info for every visible file on the site&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">files_seen</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">public_dir</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">filepath</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">filesize</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">getsize</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">files_seen</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">FileWeight</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="n">filesize</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">files_seen</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_build_download_table</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Build cells of a download estimate table&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">excessive_count</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="nb">len</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">files</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">is_excessive</span><span class="p">()])</span>
</span></span><span class="line"><span class="cl">        <span class="n">slow_max</span> <span class="o">=</span> <span class="n">describe_size</span><span class="p">(</span><span class="mi">10</span> <span class="o">*</span> <span class="n">DOWNLOAD_SPEED</span> <span class="o">/</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ok_max</span> <span class="o">=</span> <span class="n">describe_size</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="n">DOWNLOAD_SPEED</span> <span class="o">/</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">instant_max</span> <span class="o">=</span> <span class="n">describe_size</span><span class="p">(</span><span class="mf">0.1</span> <span class="o">*</span> <span class="n">DOWNLOAD_SPEED</span> <span class="o">/</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">slow_count</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="nb">len</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">files</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">is_slow</span><span class="p">()])</span>
</span></span><span class="line"><span class="cl">        <span class="n">ok_count</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="nb">len</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">files</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">is_ok</span><span class="p">()])</span>
</span></span><span class="line"><span class="cl">        <span class="n">instant_count</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="nb">len</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">files</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">is_instant</span><span class="p">()])</span>
</span></span><span class="line"><span class="cl">        <span class="n">download_table</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="s2">&#34;excessive&#34;</span><span class="p">,</span> <span class="s2">&#34;&gt; 10s&#34;</span><span class="p">,</span> <span class="sa">f</span><span class="s2">&#34;&gt; </span><span class="si">{</span><span class="n">slow_max</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">excessive_count</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="s2">&#34;slow&#34;</span><span class="p">,</span> <span class="s2">&#34;1s - 10s&#34;</span><span class="p">,</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">ok_max</span><span class="si">}</span><span class="s2"> - </span><span class="si">{</span><span class="n">slow_max</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">slow_count</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="s2">&#34;ok&#34;</span><span class="p">,</span> <span class="s2">&#34;0.1s - 1s&#34;</span><span class="p">,</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">instant_max</span><span class="si">}</span><span class="s2"> - </span><span class="si">{</span><span class="n">ok_max</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">ok_count</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="s2">&#34;instant&#34;</span><span class="p">,</span> <span class="s2">&#34;≤ 0.1s&#34;</span><span class="p">,</span> <span class="sa">f</span><span class="s2">&#34;≤ </span><span class="si">{</span><span class="n">instant_max</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">instant_count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">download_table</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">print_summary</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Format and display a summary of download estimates&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;All files in </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">public_dir</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">file_count</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">files</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">total_bytes</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span><span class="n">f</span><span class="o">.</span><span class="n">size</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">files</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">total_size</span> <span class="o">=</span> <span class="n">describe_size</span><span class="p">(</span><span class="n">total_bytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">file_count</span><span class="si">:</span><span class="s2">,</span><span class="si">}</span><span class="s2"> files (</span><span class="si">{</span><span class="n">total_size</span><span class="si">}</span><span class="s2">)&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">speed</span> <span class="o">=</span> <span class="n">describe_speed</span><span class="p">(</span><span class="n">DOWNLOAD_SPEED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Download guesses for </span><span class="si">{</span><span class="n">speed</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">download_table</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_build_download_table</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">description</span><span class="p">,</span> <span class="n">size_range</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">download_table</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">expression</span> <span class="o">=</span> <span class="n">DOWNLOAD_EXPRESSIONS</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34; </span><span class="si">{</span><span class="n">expression</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">description</span><span class="si">:</span><span class="s2"> &lt;10</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">size_range</span><span class="si">:</span><span class="s2"> &lt;26</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">count</span><span class="si">:</span><span class="s2"> &gt;6,</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">site</span> <span class="o">=</span> <span class="n">SiteWeight</span><span class="p">(</span><span class="s2">&#34;public&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">site</span><span class="o">.</span><span class="n">print_summary</span><span class="p">()</span></span></span></code></pre>
</figure><p>I spent too much time on that download table. I could have spent even more, sizing each column to the longest field and <em>anyways</em> that wasn’t the point. Let’s look at my download estimates.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python report-weight.py
All files in public
1,886 files (418.71 MB)
Download guesses for 750.00 Kbps
 🙁 &gt; 10s      &gt; 915.53 KB                   111
 😐 1s - 10s   91.55 KB - 915.53 KB          269
 😊 0.1s - 1s  9.16 KB - 91.55 KB            611
 😁 ≤ 0.1s     ≤ 9.16 KB                     895</code></pre>
</figure><p>Way too many files take more than ten seconds to load. I know better than to be pleased about the large number of files that load instantly. As I mentioned, quite a few of them are redirects. On the latency side of things those are <em>worse</em> because the visitor then has to load the real post.</p>
<p>I also said I’m not worrying about latency today.</p>
<p>The median list was helpful in showing me that my biggest offenders are image files, so what about adding a report on those?</p>
<h3 id="just-the-media-files">Just the media files</h3>
<p>The easiest way would be to base it off file extension. But that ends up looking a bit untidy, because extensions have accumulated over the years. JPEG files are the worst offender, being stored as <code>.jpeg</code>, <code>.jpg</code>, and even <code>.JPG</code>.</p>
<p>I’ll use the standard <a href="https://docs.python.org/3/library/mimetypes.html#mimetypes.guess_type">mimetypes</a> library instead. FileWeight can use that to guess what kind of file it’s looking at, and SiteWeight will make another download table for media files. It still uses file extensions, but with a smarter list than what I could build.</p>
<p><strong><code>weight-with-media.py</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">mimetypes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Tell mimetypes about nonstandard files it may find.</span>
</span></span><span class="line"><span class="cl"><span class="n">mimetypes</span><span class="o">.</span><span class="n">add_type</span><span class="p">(</span><span class="s2">&#34;text/plain&#34;</span><span class="p">,</span> <span class="s1">&#39;.map&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@attr.s</span><span class="p">(</span><span class="n">auto_attribs</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">FileWeight</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">filetype</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">attr</span><span class="o">.</span><span class="n">ib</span><span class="p">(</span><span class="n">init</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">attr</span><span class="o">.</span><span class="n">Factory</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="k">lambda</span> <span class="bp">self</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">_guess_filetype</span><span class="p">(),</span> <span class="n">takes_self</span><span class="o">=</span><span class="kc">True</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_guess_filetype</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">mimetype</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">mimetypes</span><span class="o">.</span><span class="n">guess_type</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="n">strict</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">mimetype</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">is_media</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;is this an image or video?&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">filetype</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="s2">&#34;image&#34;</span><span class="p">,</span> <span class="s2">&#34;video&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@attr.s</span><span class="p">(</span><span class="n">auto_attribs</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SiteWeight</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_build_download_table</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">files</span><span class="p">:</span> <span class="n">List</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Build cells of a download estimate table&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">excessive_count</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="nb">len</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">is_excessive</span><span class="p">()])</span>
</span></span><span class="line"><span class="cl">        <span class="n">slow_max</span> <span class="o">=</span> <span class="n">describe_size</span><span class="p">(</span><span class="mi">10</span> <span class="o">*</span> <span class="n">DOWNLOAD_SPEED</span> <span class="o">/</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ok_max</span> <span class="o">=</span> <span class="n">describe_size</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="n">DOWNLOAD_SPEED</span> <span class="o">/</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">instant_max</span> <span class="o">=</span> <span class="n">describe_size</span><span class="p">(</span><span class="mf">0.1</span> <span class="o">*</span> <span class="n">DOWNLOAD_SPEED</span> <span class="o">/</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">slow_count</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="nb">len</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">is_slow</span><span class="p">()])</span>
</span></span><span class="line"><span class="cl">        <span class="n">ok_count</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="nb">len</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">is_ok</span><span class="p">()])</span>
</span></span><span class="line"><span class="cl">        <span class="n">instant_count</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="nb">len</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">is_instant</span><span class="p">()])</span>
</span></span><span class="line"><span class="cl">        <span class="n">download_table</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="s2">&#34;excessive&#34;</span><span class="p">,</span> <span class="s2">&#34;&gt; 10s&#34;</span><span class="p">,</span> <span class="sa">f</span><span class="s2">&#34;&gt; </span><span class="si">{</span><span class="n">slow_max</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">excessive_count</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="s2">&#34;slow&#34;</span><span class="p">,</span> <span class="s2">&#34;1s - 10s&#34;</span><span class="p">,</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">ok_max</span><span class="si">}</span><span class="s2"> - </span><span class="si">{</span><span class="n">slow_max</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">slow_count</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="s2">&#34;ok&#34;</span><span class="p">,</span> <span class="s2">&#34;0.1s - 1s&#34;</span><span class="p">,</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">instant_max</span><span class="si">}</span><span class="s2"> - </span><span class="si">{</span><span class="n">ok_max</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">ok_count</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="s2">&#34;instant&#34;</span><span class="p">,</span> <span class="s2">&#34;≤ 0.1s&#34;</span><span class="p">,</span> <span class="sa">f</span><span class="s2">&#34;≤ </span><span class="si">{</span><span class="n">instant_max</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">instant_count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">download_table</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">summarize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">files</span><span class="p">:</span> <span class="n">List</span><span class="p">,</span> <span class="n">description</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">lines</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="n">description</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">file_count</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">files</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">total_bytes</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span><span class="n">f</span><span class="o">.</span><span class="n">size</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">total_size</span> <span class="o">=</span> <span class="n">describe_size</span><span class="p">(</span><span class="n">total_bytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">lines</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">file_count</span><span class="si">:</span><span class="s2">,</span><span class="si">}</span><span class="s2"> files (</span><span class="si">{</span><span class="n">total_size</span><span class="si">}</span><span class="s2">)&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">speed</span> <span class="o">=</span> <span class="n">describe_speed</span><span class="p">(</span><span class="n">DOWNLOAD_SPEED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">lines</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Download guesses for </span><span class="si">{</span><span class="n">speed</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">download_table</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_build_download_table</span><span class="p">(</span><span class="n">files</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">description</span><span class="p">,</span> <span class="n">size_range</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">download_table</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">expression</span> <span class="o">=</span> <span class="n">DOWNLOAD_EXPRESSIONS</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">lines</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="sa">f</span><span class="s2">&#34; </span><span class="si">{</span><span class="n">expression</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">description</span><span class="si">:</span><span class="s2"> &lt;10</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">size_range</span><span class="si">:</span><span class="s2"> &lt;26</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">count</span><span class="si">:</span><span class="s2"> &gt;6,</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">print_summary</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Format and display a summary of download estimates&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;---&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">full_summary</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">summarize</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">files</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                      <span class="sa">f</span><span class="s2">&#34;All files in </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">public_dir</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">full_summary</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;---&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">media_files</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">files</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">is_media</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">        <span class="n">media_summary</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">summarize</span><span class="p">(</span><span class="n">media_files</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                       <span class="sa">f</span><span class="s2">&#34;Media files in </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">public_dir</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">media_summary</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span></span></span></code></pre>
</figure><p>The script makes two download reports now, with only a little more work!</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python weight-with-media.py
---
All files in public
1,886 files (418.71 MB)
Download guesses for 750.00 Kbps
 🙁 &gt; 10s      &gt; 915.53 KB                   111
 😐 1s - 10s   91.55 KB - 915.53 KB          269
 😊 0.1s - 1s  9.16 KB - 91.55 KB            611
 😁 ≤ 0.1s     ≤ 9.16 KB                     895
---
Media files in public
802 files (392.19 MB)
Download guesses for 750.00 Kbps
 🙁 &gt; 10s      &gt; 915.53 KB                   107
 😐 1s - 10s   91.55 KB - 915.53 KB          236
 😊 0.1s - 1s  9.16 KB - 91.55 KB            339
 😁 ≤ 0.1s     ≤ 9.16 KB                     120</code></pre>
</figure><p>Yeah, that’s what I thought. The majority of those small files are text, and the vast majority of the large files are image or video. Yes, I noticed that a few of my excessively large files are text. Probably archive pages of one sort or another. I’ll gather the information on those later.</p>
<p>But it looks like I have an answer to my question.</p>
<h2 id="my-question">My question?</h2>
<p>Whether it’s worth my time to try optimizing image file sizes.</p>
<h2 id="oh-right-right-the-answer">Oh right right. The answer?</h2>
<p>The answer is &ldquo;yes.&rdquo;</p>
<p>Nearly half of my media files would be noticeably slow to download on a 3G connection. Over a hundred are large enough to stretch the patience of any visitor not blessed with a constant high speed pipe. That’s not very nice on my part.</p>
<p><em>Now</em> I know I can make it better. Even better: with this script, I can ask the question again whenever I want!</p>
<p>Optimizing images is another post, though.</p>
<h2 id="could-i-improve-my-weighing-script">Could I improve my weighing script?</h2>
<p>Of course! Here are some ideas I got while writing this, including a couple I included but removed to maintain focus.</p>
<ul>
<li>additional thresholds beyond &ldquo;excessive&rdquo; so I can determine how many files contribute to painfully long download times</li>
<li>verbose mode to list file details on request</li>
<li>options to estimate for different download rates</li>
<li>more detail on media files, perhaps to see if compression has been applied and how much</li>
<li>report base on page weight rather than individual fileweight, to get a more realistic idea of visitor experience.</li>
<li>format the list in JSON to simplify handing off to other reporting tools</li>
<li>include median and mean file sizes for more number crunching goodness</li>
<li>list the ten largest files, so I know where to focus my optimization efforts</li>
</ul>
<h3 id="should-i-optimize-my-weighing-script">Should I optimize my weighing script?</h3>
<p>Good question! Let’s look at the numbers.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ time make weight
python weight-with-media.py
...
real    0m0.131s
user    0m0.083s
sys     0m0.044s</code></pre>
</figure><p>No.</p>
<p>Seriously though. I assembled this in a few hours. Half of it’s too clever and the other half’s too stupid. But it gets the answers I need in a timely fashion. That&rsquo;s plenty good enough.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Finding and Removing Duplicate Files</title>
  <link>https://randomgeekery.org/post/2014/12/finding-and-removing-duplicate-files/</link>
  <pubDate>Sat, 13 Dec 2014 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2014/12/finding-and-removing-duplicate-files/</guid>
  <description>&lt;p&gt;&lt;a href=&#34;https://randomgeekery.org/card/perl/&#34;&gt;Perl&lt;/a&gt; CPAN modules to simplify file cleanup&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>files</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Perl CPAN modules to simplify file cleanup</h2><p><a href="/card/perl/">Perl</a> CPAN modules to simplify file cleanup</p>
<p>I had a clever idea a couple months ago: to write a blog post detailing how to find recursively find duplicate files in a folder. My technique was good enough: track file sizes, find files that had the same file
size and <a href="http://en.wikipedia.org/wiki/MD5#MD5_hashes">MD5 hash</a>, and display the resulting list. It wasn’t foolproof, but it showed some thought. After spending a little too much time on the post, I realized I had never checked <a href="http://www.cpan.org/">CPAN</a>. Of course there is already a module to handle that exact task.</p>
<h2 id="the-problem">The Problem</h2>
<p>So here is my problem. I have — let’s see —</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ find ~/Sync -type f | wc -l
    44388</code></pre>
</figure><p>I have 44,388 files in my Sync folder.</p>
<p>I organized my home machines recently. When I say &ldquo;organized&rdquo; I mean that everything got swept into my <code>~/Sync</code> folder to deal with later. The refuse of several years squirreling files into random locations is now sitting in that single folder.</p>
<p>Well, now it is time to clean that single folder up. I want to find and delete duplicate files. I planned to focus on image files, but File::Find::Duplicates makes it easier to find <em>all</em> duplicates.</p>
<h2 id="the-solution">The Solution</h2>
<p><a href="https://metacpan.org/pod/File::Find::Duplicates">File::Find::Duplicates</a> exports a <code>find_duplicate_files</code> subroutine, which finds the duplicate files in a list of folders.</p>
<p>First tell me how many sets of duplicates I have.</p>
<p><strong><code>count-dupes.pl</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">use</span> <span class="mf">5.20.0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">warnings</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Find::Duplicates</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$root</span>       <span class="o">=</span> <span class="s">&#34;$ENV{HOME}/Sync&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@dupes</span>      <span class="o">=</span> <span class="n">find_duplicate_files</span><span class="p">(</span> <span class="nv">$root</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$dupe_count</span> <span class="o">=</span> <span class="nv">@dupes</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">say</span> <span class="s">&#34;Found $dupe_count sets of duplicates in $root&#34;</span><span class="p">;</span></span></span></code></pre>
</figure><p>This will tell me how much work is ahead of me.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ perl count-dupes.pl
Found 3465 sets of duplicates in /Users/brian/Sync</code></pre>
</figure><p>Removing the files was easy, but it rattled my nerves.</p>
<p><strong><code>remove-dupes.pl</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">use</span> <span class="mf">5.20.0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">warnings</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Carp</span> <span class="sx">qw(croak)</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Basename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Find::Duplicates</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$root</span>  <span class="o">=</span> <span class="s">&#34;$ENV{HOME}/Sync&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@dupes</span> <span class="o">=</span> <span class="n">find_duplicate_files</span><span class="p">(</span> <span class="nv">$root</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$deleted</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="k">my</span> <span class="nv">$dupeset</span> <span class="p">(</span> <span class="nv">@dupes</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Pick a file to serve as primary.</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Using string-based sorting as arbitrary rule to establish what&#39;s first.</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="p">(</span> <span class="nv">$prime</span><span class="p">,</span> <span class="nv">@secondary</span> <span class="p">)</span> <span class="o">=</span> <span class="nb">sort</span> <span class="nv">@</span><span class="p">{</span> <span class="nv">$dupeset</span><span class="o">-&gt;</span><span class="n">files</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Delete the duplicates</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="k">my</span> <span class="nv">$file</span> <span class="p">(</span> <span class="nv">@secondary</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">unlink</span> <span class="nv">$file</span>
</span></span><span class="line"><span class="cl">      <span class="ow">or</span> <span class="n">croak</span> <span class="s">&#34;Unable to unlink $file: $!&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$deleted</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">say</span> <span class="s">&#34;Deleted $deleted files.&#34;</span><span class="p">;</span></span></span></code></pre>
</figure><p>I fought the temptation to add progress bars or anything like that. Focus on getting the job done. I can add work if I end up revisiting this task later.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ perl remove-dupes.pl
Deleted 3509 files.</code></pre>
</figure><p>I removed a lot of files. Are there still any duplicates?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ perl count-dupes.pl
Found 0 sets of duplicates in /Users/brian/Sync</code></pre>
</figure><p>Thing is, I suspect that my <code>Sync</code> directory contains many empty subdirectories.</p>
<h2 id="about-those-directories">About Those Directories</h2>
<p><a href="https://metacpan.org/pod/File::Find::Rule::DirectoryEmpty">File::Find::Rule::DirectoryEmpty</a> helps with exactly that problem. It extends the useful <a href="https://metacpan.org/pod/File::Find::Rule">File::Find::Rule</a> module to simplify finding files with characteristics you define.</p>
<p><strong><code>find-leaves.pl</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">use</span> <span class="mf">5.20.0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">warnings</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Find::Rule::DirectoryEmpty</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$root</span> <span class="o">=</span> <span class="s">&#34;$ENV{HOME}/Sync&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@empties</span> <span class="o">=</span> <span class="nn">File::Find::Rule</span>
</span></span><span class="line"><span class="cl">  <span class="o">-&gt;</span><span class="n">directoryempty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="o">-&gt;</span><span class="n">in</span><span class="p">(</span> <span class="nv">$root</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$empty_count</span> <span class="o">=</span> <span class="nv">@empties</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">say</span> <span class="s">&#34;$empty_count empty directories&#34;</span><span class="p">;</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ perl find-leaves.pl
2904 empty directories</code></pre>
</figure><p>Yow. I can delete those directories, but then there could be parent directories that are now empty, and then grandparent directories, and then —</p>
<p>You know what? Just keep looking and deleting until there no more empty directories.</p>
<p><strong><code>remove-leaves.pl</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">use</span> <span class="mf">5.20.0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">warnings</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Carp</span> <span class="sx">qw(croak)</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Find::Rule::DirectoryEmpty</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$deleted</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$root</span>    <span class="o">=</span> <span class="s">&#34;$ENV{HOME}/Sync&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$found</span>   <span class="o">=</span> <span class="nn">File::Find::Rule</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">directoryempty</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span> <span class="k">my</span> <span class="nv">@empties</span> <span class="o">=</span> <span class="nv">$found</span><span class="o">-&gt;</span><span class="n">in</span><span class="p">(</span> <span class="nv">$root</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$empty_count</span> <span class="o">=</span> <span class="nv">@empties</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">say</span> <span class="s">&#34;Found $empty_count empty directories&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="k">my</span> <span class="nv">$empty</span> <span class="p">(</span> <span class="nv">@empties</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">rmdir</span> <span class="nv">$empty</span>
</span></span><span class="line"><span class="cl">      <span class="ow">or</span> <span class="n">croak</span> <span class="s">&#34;Unable to rmdir $empty: $!&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$deleted</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">say</span> <span class="s">&#34;$deleted empty folders deleted&#34;</span><span class="p">;</span></span></span></code></pre>
</figure><p>I like a little logging on each pass so that I know what my program is seeing.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ perl remove-leaves.pl
Found 2904 empty directories
Found 529 empty directories
Found 29 empty directories
Found 5 empty directories
3467 empty folders deleted</code></pre>
</figure><p>I might dig in later to <em>actually</em> organize the remaining files. I may even automate it with some Perl. This is good enough for today, though.</p>
<h2 id="done">Done</h2>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ find ~/Sync/ -type f | wc -l
   40880</code></pre>
</figure><p>Now I have 40,880 files in my <code>~/Sync</code> folder. Maybe I should have counted directories too.</p>]]></content:encoded>
</item>
<item>
  <title>Post: My Own Ruby Fibers Babystep</title>
  <link>https://randomgeekery.org/post/2013/11/my-own-ruby-fibers-babystep/</link>
  <pubDate>Mon, 25 Nov 2013 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2013/11/my-own-ruby-fibers-babystep/</guid>
  <description>My adventures rereading the Pickaxe Book have reached the chapter on Ruby Fibers. Interesting stuff. Thought I would extrapolate from their initial example. My old static pages started from a MANIFEST file that looked something like this:
index.html /babblings/index.html /babblings/2013-05-30-javascript.html /babblings/2013-04-05-perl-and-opensuse.html /babblings/2013-03-big-updates.html /babblings/seattle.html /babblings/stalkingswfans.html /babblings/bra.html /brian/index.html And so on. The path components create a topic hierarchy. There are only 89 files. This is not a lot to track, but it is enough that I can still be hazy about some high level details.</description>
   <category>post</category> 
   <category>post</category> 
   <category>ruby</category>  <category>files</category>  <category>site</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p>My adventures <a href="/post/2013/11/rereading-the-pickaxe/">rereading</a> the Pickaxe Book have reached the chapter on <a href="/card/ruby/">Ruby</a> Fibers. Interesting stuff. Thought I would extrapolate from their initial example. My old static pages started from a MANIFEST file that looked something like this:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >index.html
/babblings/index.html
/babblings/2013-05-30-javascript.html
/babblings/2013-04-05-perl-and-opensuse.html
/babblings/2013-03-big-updates.html
/babblings/seattle.html
/babblings/stalkingswfans.html
/babblings/bra.html
/brian/index.html</code></pre>
</figure><p>And so on. The path components create a topic hierarchy. There are only 89 files. This is not a lot to track, but it is enough that I can still be hazy about some high level details. For example, I have no idea how many pages are in each section.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="n">sections</span> <span class="o">=</span> <span class="no">Fiber</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="no">File</span><span class="o">.</span><span class="n">foreach</span> <span class="s2">&#34;MANIFEST&#34;</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="n">line</span><span class="o">.</span><span class="n">match</span> <span class="sr">%r{^/(?&lt;path&gt;\w+)/}</span> <span class="k">do</span> <span class="o">|</span><span class="n">section</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">      <span class="no">Fiber</span><span class="o">.</span><span class="n">yield</span> <span class="n">section</span><span class="o">[</span><span class="ss">:path</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kp">nil</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">counts</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">section</span> <span class="o">=</span> <span class="n">sections</span><span class="o">.</span><span class="n">resume</span>
</span></span><span class="line"><span class="cl">  <span class="n">counts</span><span class="o">[</span><span class="n">section</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">counts</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">section</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">section</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">counts</span><span class="o">[</span><span class="n">section</span><span class="o">]</span><span class="si">}</span><span class="s2">&#34;</span> <span class="p">}</span></span></span></code></pre>
</figure><p>Yes, this is just the example from the Pickaxe book with <code>line.scan</code> changed to <code>line.match</code> with a slightly altered regular expression.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ruby nom-manifest.rb
babblings: 7
brian: 2
geekery: 78</code></pre>
</figure><p>This isn’t that helpful though. I already knew that the majority of my pages were in <code>/geekery/</code>. Let’s adjust the regular expression so that the first two pieces of the entry count as a section.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="n">sections</span> <span class="o">=</span> <span class="no">Fiber</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="no">File</span><span class="o">.</span><span class="n">foreach</span> <span class="s2">&#34;MANIFEST&#34;</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="n">line</span><span class="o">.</span><span class="n">match</span> <span class="sr">%r{
</span></span></span><span class="line"><span class="cl"><span class="sr">      ^/(?&lt;path&gt;\w+ # main section: /geekery
</span></span></span><span class="line"><span class="cl"><span class="sr">      (?:/\w+)?)    # subsection:   /ruby
</span></span></span><span class="line"><span class="cl"><span class="sr">      /             # stop at path separator
</span></span></span><span class="line"><span class="cl"><span class="sr">    }x</span> <span class="k">do</span> <span class="o">|</span><span class="n">section</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">        <span class="no">Fiber</span><span class="o">.</span><span class="n">yield</span> <span class="n">section</span><span class="o">[</span><span class="ss">:path</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl">  <span class="kp">nil</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre>
</figure><p>Now I’m looking for possible subsections and lumping them with the top level section. Does this change get me more useful information (for varying definitions of useful)?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ruby nom-manifest.rb
babblings: 7
brian: 2
geekery: 2
geekery/editors: 3
geekery/js: 1
geekery/lisp: 1
geekery/osx: 1
geekery/parrot: 17
geekery/perl: 13
geekery/php: 2
geekery/python: 9
geekery/rakudo: 3
geekery/rebol: 10
geekery/ruby: 10
geekery/tools: 2
geekery/unix: 2
geekery/xml: 2</code></pre>
</figure><p>Yeah. It does. I can now see that the most of my static pages are about Parrot or Perl.</p>
<p>I recognize that all I’m doing in this example is shuffling complexity around. There’s nothing in the task that screams &ldquo;OMG YOU NEED FIBERS TO DO THIS!&rdquo; Still - I need to figure this stuff out somehow.</p>
<p>Anyways, back to work.</p>
]]></content:encoded>
</item>
</channel>
</rss>
