<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>musiconRandom Geekery</title>
    <link>https://randomgeekery.org/tags/music/</link>
    <description>
      Recent contentinmusic on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sat, 22 Oct 2022 07:26:03 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/music/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: [2022-10-22 Sat 07:26]</title>
  <link>https://randomgeekery.org/post/2022/10/2022-10-22-sat-0726/</link>
  <pubDate>Sat, 22 Oct 2022 07:26:03 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/10/2022-10-22-sat-0726/</guid>
  <description>Supposed to be a quick ‚Äúhey here‚Äôs what I‚Äôm listening to.‚Äù Naturally I spent half an hour being annoyed with trivial display issues.
Stay tuned while I decide on a better way to display album details from the local data. Maybe something with beets.
Meanwhile, here‚Äôs the general idea:
Ministry ‚Äî Land of Rape and Honey (1988) Tracks Ministry - Stigmata (Update Mix) Ministry - The Missing Ministry - Deity Ministry - Golden Dawn Ministry - Destruction Ministry - Hizbollah Ministry - The Land of Rape and Honey Ministry - You Know What You Are Ministry - I Prefer Ministry - Flashback [Explicit] Ministry - Abortive Playback and purchase options via Odesli</description>
   <category>post</category> 
   <category>note</category> 
   <category>now-playing</category>  <category>music</category> 
  <content:encoded><![CDATA[<p>Supposed to be a quick &ldquo;hey here&rsquo;s what I&rsquo;m listening to.&rdquo; Naturally I spent half an hour being annoyed with trivial display issues.</p>
<p>Stay tuned while I decide on a better way to display album details from the local data. Maybe something with <a href="https://beets.io">beets</a>.</p>
<p>Meanwhile, here&rsquo;s the general idea:</p>
<h2 id="ministry--land-of-rape-and-honey-1988">Ministry ‚Äî Land of Rape and Honey (1988)</h2>
<h3 id="tracks">Tracks</h3>
<ul>
<li>Ministry - Stigmata (Update Mix)</li>
<li>Ministry - The Missing</li>
<li>Ministry - Deity</li>
<li>Ministry - Golden Dawn</li>
<li>Ministry - Destruction</li>
<li>Ministry - Hizbollah</li>
<li>Ministry - The Land of Rape and Honey</li>
<li>Ministry - You Know What You Are</li>
<li>Ministry - I Prefer</li>
<li>Ministry - Flashback [Explicit]</li>
<li>Ministry - Abortive</li>
</ul>
<h3 id="playback-and-purchase-options">Playback and purchase options</h3>
<iframe width="100%" height="52" src="https://odesli.co/embed/?url=https%3A%2F%2Falbum.link%2Fi%2F59390461&theme=light" frameborder="0" allowfullscreen sandbox="allow-same-origin allow-scripts allow-presentation allow-popups allow-popups-to-escape-sandbox" allow="clipboard-read; clipboard-write"></iframe>
<p>via <a href="https://odesli.co">Odesli</a></p>
]]></content:encoded>
</item>
<item>
  <title>Post: Today is September 21st ‚Äî you know the rules</title>
  <link>https://randomgeekery.org/post/2021/09/today-is-september-21st-you-know-the-rules/</link>
  <pubDate>Tue, 21 Sep 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/09/today-is-september-21st-you-know-the-rules/</guid>
  <description>üé∂ never was a cloudy day
Whoa thanks KEXP for the reminder that it‚Äôs September 21st!
Let‚Äôs listen to that again. Haven‚Äôt found a 10 hour loop, so this‚Äôll have to do instead.
Was just going to tweet this but I know it‚Äôll do me good to find at random site-tidying moments.</description>
   <category>post</category> 
   <category>note</category> 
   <category>listen</category>  <category>music</category>  <category>kexp</category>  <category>celebrate-the-holidays</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/attachments/img/2021/cover-2021-09-21.jpg" title="üé∂ never was a cloudy day" alt="trees against a blue sky"/><figcaption>üé∂ never was a cloudy day</figcaption></figure></p>
<p>Whoa thanks <a href="/card/kexp/">KEXP</a> for the reminder that it&rsquo;s September 21st!</p>
<p>Let&rsquo;s listen to that again. Haven&rsquo;t found a 10 hour loop, so this&rsquo;ll have to do instead.</p>
<p><div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe src="https://www.youtube.com/embed/mp6gaes9TL8"
              style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;"
              allowfullscreen title="YouTube Video"></iframe>
    </div>
  </p>
<p>Was just going to tweet this but I know it&rsquo;ll do me good to find at random site-tidying moments.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Wanted a uses page, made a config section</title>
  <link>https://randomgeekery.org/post/2020/06/wanted-a-uses-page-made-a-config-section/</link>
  <pubDate>Wed, 03 Jun 2020 12:32:47 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/06/wanted-a-uses-page-made-a-config-section/</guid>
  <description>All jealous of john sj anderson‚Äôs uses page. Started making my own. Decided it would be easier just to share my Config. Might as well, since card/Hugo directly supports card/Org content via go-org.
I‚Äôll add /uses later. Anyways, time for music.</description>
   <category>post</category> 
   <category>note</category> 
   <category>orgconfig</category>  <category>site</category>  <category>overshare</category>  <category>music</category> 
  <content:encoded><![CDATA[<p>All jealous of <a href="https://genehack.org">john sj anderson</a>&rsquo;s <a href="https://genehack.org/uses/">uses</a> page. Started making my own. Decided it would be easier just to share my <a href="/config/">Config</a>. Might as well, since <a href="/card/hugo/">card/Hugo</a> directly supports <a href="/card/org/">card/Org</a> content via <a href="https://github.com/niklasfasching/go-org">go-org</a>.</p>
<p>I&rsquo;ll add <code>/uses</code> later. Anyways, time for music.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/peqpQ_XpNrk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
]]></content:encoded>
</item>
<item>
  <title>Post: Bookmarking the KEXP livestream links</title>
  <link>https://randomgeekery.org/post/2019/10/bookmarking-the-kexp-livestream-links/</link>
  <pubDate>Thu, 24 Oct 2019 07:53:13 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/10/bookmarking-the-kexp-livestream-links/</guid>
  <description>card/KEXP used to show their live streaming links on the site. Not the browser stream, podcast library, video archive, or Windows, iOS, or Android apps. An actual URI I can load in Audacious or whatever music player I‚Äôm using that week.
I love all the other stuff. Heck, as an amplifier I‚Äôm happy to see to see all the work my money goes towards. Just ‚Äì sometimes all I want is the music.</description>
   <category>post</category> 
   <category>note</category> 
   <category>music</category>  <category>old-school-tech</category>  <category>from-a-more-civilized-age</category>  <category>kexp</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2019/cover-2019-10-24.jpg" alt="attachments/img/2019/cover-2019-10-24.jpg"/></figure></p>
<p><a href="/card/kexp/">card/KEXP</a> used to show their live streaming links on the site. Not the <a href="https://kexp.org/listen">browser stream</a>, <a href="https://kexp.org/podcasts/">podcast library</a>, <a href="https://kexp.org/watch/">video archive</a>, or <a href="https://www.microsoft.com/en-us/p/kexp/9wzdncrcslz0?activetab=pivot:overviewtab">Windows</a>, <a href="https://apps.apple.com/us/app/kexp-radio/id342254135">iOS</a>, or <a href="https://play.google.com/store/apps/details?id=org.kexp.android">Android</a> apps. An actual <a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier">URI</a> I can load in <a href="https://audacious-media-player.org/">Audacious</a> or whatever music player I&rsquo;m using that week.</p>
<p>I love all the other stuff. Heck, as an <a href="https://kexp.org/donate/">amplifier</a> I&rsquo;m happy to see to see all the work my money goes towards. Just &ndash; sometimes all I want is the music.</p>
<p>Dug around and found a <a href="https://www.reddit.com/r/KEXP/comments/c9dgwg/livestream_url/">Reddit post</a> with current links.</p>
<dl>
<dt>128K MP3 Stream</dt>
<dd><a href="https://kexp-mp3-128.streamguys1.com/kexp128.mp3">https://kexp-mp3-128.streamguys1.com/kexp128.mp3</a></dd>
<dt>AAC+ Stream</dt>
<dd><a href="http://live-aacplus-64.kexp.org/kexp64.aac">http://live-aacplus-64.kexp.org/kexp64.aac</a></dd>
</dl>
<p>Now I can listen to the livestream again without having a browser tab open.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Do not shop on first coffee</title>
  <link>https://randomgeekery.org/post/2019/09/do-not-shop-on-first-coffee/</link>
  <pubDate>Sat, 28 Sep 2019 10:02:01 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/09/do-not-shop-on-first-coffee/</guid>
  <description>three brands of bottled coffee
Got sidetracked while picking up breakfast stuff from Uwajimaya. Should probably have finished my first cup of coffee before I left. Could have been worse. There was an entire boy band worth of that Babinski Cold Brew. I only took one.
Meanwhile, someone put a flyer on the apartment bulletin board for the Earshot Jazz Festival. Checked to see if any of the names were familiar.</description>
   <category>post</category> 
   <category>note</category> 
   <category>coffee</category>  <category>watch</category>  <category>music</category>  <category>now</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2019/cover-2019-09-28.jpg" alt="attachments/img/2019/cover-2019-09-28.jpg"/></figure>
three brands of bottled coffee</p>
<p>Got sidetracked while picking up breakfast stuff from <a href="https://www.uwajimaya.com/">Uwajimaya</a>. Should probably have finished my first cup of coffee before I left. Could have been worse. There was an entire boy band worth of that Babinski Cold Brew. I only took one.</p>
<p>Meanwhile, someone put a flyer on the apartment bulletin board for the <a href="https://www.earshot.org/2019-earshot-jazz-festival/">Earshot Jazz Festival</a>. Checked to see if any of the names were familiar. Most were new to me, but I recognized  ‚Äî and enjoy ‚Äî <a href="https://knifeknights.bandcamp.com/">Knife Knights</a>.</p>
<p>A jazz context makes more sense for Knife Knights than rap/hip-hop, which is where I usually see them filed. Heck, genres are meaningless anyways. My favorite music stores just arrange albums alphabetically.</p>
<p>Anyways, time to drink some coffee!</p>
<p><div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe src="https://www.youtube.com/embed/"
              style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;"
              allowfullscreen title="YouTube Video"></iframe>
    </div>
  </p>
]]></content:encoded>
</item>
<item>
  <title>Post: Pearl Jam Tag</title>
  <link>https://randomgeekery.org/post/2018/08/pearl-jam-tag/</link>
  <pubDate>Tue, 07 Aug 2018 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2018/08/pearl-jam-tag/</guid>
  <description>&lt;p&gt;Dog and I saw a &lt;a href=&#34;https://pearljam.com&#34;&gt;Pearl Jam&lt;/a&gt; logo tag while walking near &lt;a href=&#34;https://easystreetonline.com&#34;&gt;Easy Street Records&lt;/a&gt; this morning.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;https://randomgeekery.org/../../../attachments/img/2018/cover-2018-08-07.jpg&#34; alt=&#34;attachments/img/2018/cover-2018-08-07.jpg&#34;/&gt;&lt;/figure&gt;&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>music</category>  <category>seen</category>  <category>marginalia</category> 
  <content:encoded><![CDATA[<p>Dog and I saw a <a href="https://pearljam.com">Pearl Jam</a> logo tag while walking near <a href="https://easystreetonline.com">Easy Street Records</a> this morning.</p>
<p><figure>
    <img src="/../../../attachments/img/2018/cover-2018-08-07.jpg" alt="attachments/img/2018/cover-2018-08-07.jpg"/></figure></p>
<p>Probably something to do with this sign right next to the tag.</p>
<p><figure>
    <img src="/attachments/img/2018/announce.jpg" title="Easy Street announcement for &#39;Pearl Jam Home Shows Aug 8 & 10&#39;" alt="Easy Street reader board"/><figcaption>Easy Street announcement for &#39;Pearl Jam Home Shows Aug 8 &amp; 10&#39;</figcaption></figure></p>
<p>All right, so what does the sign mean by &ldquo;Home Shows?&rdquo; At first I thought it described some special in-store event, since Easy Street has associated with Pearl Jam for a while. Last year the business marked the band‚Äôs induction into the Rock and Roll Hall of Fame by putting up a <a href="https://www.easystreetonline.com/NewsItem/6863">pop-up store</a> ‚Äì a corner dedicated to the band‚Äôs music and so on.</p>
<p>Oh good. I found <a href="https://pearljam.com/thehomeshows/seattle-wa">an explanation</a> on the band‚Äôs site:</p>
<blockquote>
<p>Most of us grew up here. Over the past 28 years, the City of Seattle‚Äôs population has grown by 40%. The region‚Äôs homelessness population is now the third largest in the country, with over 12,000 people living without shelter on any one night. This is not a number to be proud of.</p>
<p>As part of The Home Shows Initiative, more than 140 businesses, individuals, government agencies, and foundations are banding together to fight homelessness in King County. Join us. Take action and learn more about this crisis.</p>
</blockquote>
<p>Nice. I knew Pearl Jam involved themselves in local homelessness issues ‚Äî they <a href="http://www.marysplaceseattle.org/blog/thank-you-pearl-jam/">gave a donation</a> to <a href="http://www.marysplaceseattle.org">Mary‚Äôs Place</a> a few years back ‚Äî but I forgot the name of their project.</p>
<p>The &ldquo;Home Shows&rdquo; that Easy Street Records is promoting are at Safeco Field, and unfortunately the venue sold out. I guess not &ldquo;unfortunately&rdquo; since some of that money goes to support homeless people.</p>
<p>If you want to contribute to the Home Fund, you can always <a href="https://www.uwkc.org/home-show/">donate</a>, or make a special day of it by going out for food or beverages at a partner restaurant on Wednesday August 8, <a href="https://pearljam.com/acts/news/the-home-shows-restaurant-partners">Home Shows Restaurant Night</a>. As of the moment I write these words, that is tomorrow.</p>
<p>Anyways, yeah. I liked the tag. Dog had no opinion on the matter.</p>
<p><figure>
    <img src="/attachments/img/2018/tag.jpg" alt="close up of Pearl Jam logo tag"/></figure></p>]]></content:encoded>
</item>
<item>
  <title>Post: Beets and iTunes</title>
  <link>https://randomgeekery.org/post/2017/10/beets-and-itunes/</link>
  <pubDate>Sun, 01 Oct 2017 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/10/beets-and-itunes/</guid>
  <description>&lt;p&gt;My macOS iTunes music library includes over 21,000 songs. Some of those tracks contain the wrong information. Wrong title, wrong album, wrong artist, wrong year.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>music</category>  <category>macos</category>  <category>beets</category>  <category>python</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>beets and AppleScript helped me fix my incorrect track information</h2><p>My macOS iTunes music library includes over 21,000 songs. Some of those tracks contain the wrong information. Wrong title, wrong album, wrong artist, wrong year.</p>
<h2 id="beets">Beets</h2>
<p>The open source <a href="http://beets.io/">Beets</a> command line tool helps manage your music library.</p>
<blockquote>
<p>The purpose of beets is to get your music collection right once and for all. It catalogs your collection, automatically improving its metadata as it goes using the <a href="https://musicbrainz.org/">MusicBrainz</a> database. Then it provides a bouquet of tools for manipulating and accessing your music.</p>
</blockquote>
<p><a href="http://beets.readthedocs.io/en/v1.4.5/plugins/index.html">Plugins</a> allow beets to perform more than media management. I won‚Äôt talk about most of them today. I don‚Äôt want to overwhelm myself. I will keep my focus on using beets from the command line to help me fix my iTunes library.</p>
<h3 id="alternatives">Alternatives</h3>
<p>I prefer command line open source tools. It‚Äôs a comfortable habit. You have other options, though.</p>
<p>If you prefer using a mouse, try out <a href="https://picard.musicbrainz.org">Picard</a> from MusicBrainz. Its manual
includes an <a href="https://musicbrainz.org/doc/iTunes_Guide">iTunes guide</a>, so you won‚Äôt have to guess your way through the
process.</p>
<p><a href="http://www.tuneupmedia.com/">TuneUp</a> is a commercial application that integrates with iTunes. I haven‚Äôt used it, but TuneUp was the first thing that came up in most of my initial research into fixing my tracks.</p>
<h2 id="installation-and-configuration">Installation and Configuration</h2>
<p>beets is written in <a href="/card/python/">card/Python</a>. It works with both Python 2 and 3, but I had better results with my hooks when using Python 2.</p>
<p>I already installed <a href="https://github.com/pyenv/pyenv">pyenv</a> and <a href="https://github.com/pyenv/pyenv-virtualenv">pyenv-virtualenv</a> via <a href="https://brew.sh/">Homebrew</a>. They aren‚Äôt strictly needed, but having distinct environments simplifies things when you have several Python-related projects.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ pyenv virtualenv 2.7.14 beets
$ pyenv shell beets</code></pre>
</figure><p>beets uses <a href="https://pypi.python.org/pypi/pyacoustid">pyacoustid</a> for acoustic fingerprinting, which helps identify tracks by their audio data. pyacoustid needs the <a href="https://acoustid.org/chromaprint">Chromaprint</a> library, so I install that also.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ brew install chromaprint
$ pip install beets pyacoustid</code></pre>
</figure><p>This <a href="https://groups.google.com/forum/#!topic/beets-users/yijEk858yiw">Google Groups thread</a> got me started on configuration. My settings focus on safely cataloging music rather than organizing it.</p>
<p><strong><code>~/.config/beets/config.yaml</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># using default library ~/.beets/config/library.db</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># using default directory ~/Music, but see &#39;copy&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">plugins</span><span class="p">:</span><span class="w"> </span><span class="l">chroma edit ftintitle fromfilename importadded hook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">import</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">copy</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">         </span><span class="c"># Copy the file to our directory when importing?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">incremental</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w"> </span><span class="c"># Skip directories we already imported?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">write</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">        </span><span class="c"># Automatically write the file on library import / update?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">resume</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">      </span><span class="c"># Resume interrupted imports?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">log</span><span class="p">:</span><span class="w"> </span><span class="l">beets.log  </span><span class="w"> </span><span class="c"># Where should we write what we do?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">match</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">strong_rec_thresh</span><span class="p">:</span><span class="w"> </span><span class="m">0.1</span><span class="w">            </span><span class="c"># Any difference less than this is a strong recommendation</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">preferred</span><span class="p">:</span><span class="w">                        </span><span class="c"># Put these at the top of recommendations</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">countries</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">US, GB|UK]         </span><span class="w"> </span><span class="c"># My favorite music publishing countries</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">media</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">CD, Digital Media|File]</span><span class="w"> </span><span class="c"># My favorite music sources</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">original_year</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">              </span><span class="c"># entry year is close to entry original_year</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Tell iTunes to add and/or update the track in its library after we write a file.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">hook</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hooks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">event</span><span class="p">:</span><span class="w"> </span><span class="l">after_write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">osascript /Users/brianwisti/bin/iTunesRefresh.scpt &#34;{item.path}&#34;</span></span></span></code></pre>
</figure><p>The plugins add important functionality.</p>
<dl>
<dt><a href="http://beets.readthedocs.io/en/v1.4.5/plugins/chroma.html">chroma</a></dt>
<dd>Use acoustic fingerprinting to identify songs by their sound. Slower, but helps with tracks that have bad metadata.</dd>
<dt><a href="http://beets.readthedocs.io/en/v1.4.5/plugins/edit.html">edit</a></dt>
<dd>Edit details of your songs after importing</dd>
<dt><a href="http://beets.readthedocs.io/en/v1.4.5/plugins/ftintitle.html">ftintitle</a></dt>
<dd>Puts featured artist information in song title instead of artist.</dd>
<dt><a href="http://beets.readthedocs.io/en/v1.4.5/plugins/fromfilename.html">fromfilename</a></dt>
<dd>Try to guess missing metadata from the filename of a song.</dd>
<dt><a href="http://beets.readthedocs.io/en/v1.4.5/plugins/importadded.html">importadded</a></dt>
<dd>Use the file‚Äôs modification time to determine when you added it to your library. Useful for importing an existing library.</dd>
<dt><a href="http://beets.readthedocs.io/en/v1.4.5/plugins/hook.html">hook</a></dt>
<dd>Run commands for specific beet events.</dd>
</dl>
<blockquote>
<p><strong>TIP</strong></p>
<p>Oh in iTunes uncheck Preferences &gt; Advanced &gt; &ldquo;Keep iTunes Media folder organized&rdquo;. Otherwise you‚Äôll end up deleting and reimporting songs that iTunes moved.</p>
</blockquote>
<p>Configuration is out of the way. Let‚Äôs import music.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ beet import ~/Music/iTunes/iTunes¬†Media/Music</code></pre>
</figure><p>Importing a large music library takes time, especially with acoustic fingerprinting. My music took a full weekend, even with <code>match</code> settings giving it more leeway to automatically use the likeliest matches. But at the end of it all, here‚Äôs what I had.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ beet stats
Tracks: 22112
Total time: 8.7 weeks
Approximate total size: 107.8 GiB
Artists: 2498
Albums: 2405
Album artists: 1117</code></pre>
</figure><p>I won‚Äôt tell you about all the amazing <a href="http://beets.readthedocs.io/en/v1.4.5/reference/query.html">query support</a> or <a href="http://beets.readthedocs.io/en/v1.4.5/reference/pathformat.html">format strings</a>
in beets. Instead let‚Äôs just list matches for a random word.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ beet ls pigeon
Bert - Songs From the Street: 35 Years of Music - Doin&#39; the Pigeon
Cyndi Lauper - Hat Full of Stars - Sally&#39;s Pigeons
Cyndi Lauper - Twelve Deadly Cyns... and Then Some - Sally&#39;s Pigeons
Tom Lehrer - An Evening Wasted With Tom Lehrer - Poisoning Pigeons in the Park
Lo Fidelity Allstars - How to Operate With a Blown Mind - Battle Flag feat. Pigeonhed
RJD2 - Have Mercy - Have Mercy (Remix feat Lyrics Born and Pigeon John)
RJD2 - Have Mercy - Have Mercy (Remix feat Lyrics Born and Pigeon John)</code></pre>
</figure><p>Looks like I have some duplicates. I can worry about that another day.</p>
<h3 id="tell-beets-to-tell-itunes-to-refresh">Tell Beets to Tell iTunes to Refresh</h3>
<p>Now that beets has imported everything, it‚Äôs time to write it all back out and update the iTunes library.</p>
<h3 id="write-some-applescript">Write Some AppleScript</h3>
<blockquote>
<p><strong>NOTE</strong></p>
<p>I spent a full day trying to make JXA work for this. It didn‚Äôt. I kept crashing Script Editor with whimsical directives like <code>console.log(iTunes)</code>. If you want to try JXA, look at this <a href="https://www.macstories.net/tutorials/getting-started-with-javascript-for-automation-on-yosemite/">blog post on JavaScript and iTunes</a>, or the <a href="https://github.com/JXA-Cookbook/JXA-Cookbook/wiki/iTunes">JXA Cookbook page for iTunes</a>.</p>
</blockquote>
<p>I rarely use <a href="https://developer.apple.com/library/content/documentation/AppleScript/Conceptual/AppleScriptX/AppleScriptX.html">AppleScript</a>, so it took a combination of Web searching and guesswork to come up with this. <a href="https://dougscripts.com/itunes/2010/12/get-a-track-reference-from-a-file-path/">This post</a> from <a href="https://dougscripts.com/itunes/index.php#whatsnew">Doug&rsquo;s AppleScripts for iTunes</a> blog and this <a href="https://apple.stackexchange.com/questions/202504/searching-itunes-library-for-file-location#222834">Ask Different answer</a> got me most of the way there. The guesswork finished it off.</p>
<p><strong><code>~/bin/iTunesRefresh.scpt</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-applescript" data-lang="applescript"><span class="line"><span class="cl"><span class="k">on</span> <span class="nb">run</span> <span class="p">(</span><span class="nv">argv</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">tell</span> <span class="nb">application</span> <span class="s2">&#34;iTunes&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">set</span> <span class="nv">filename</span> <span class="k">to</span> <span class="nv">POSIX</span> <span class="nv">file</span> <span class="p">(</span><span class="nv">argv</span>&#39;s <span class="nb">item</span> <span class="mi">1</span> <span class="k">as </span><span class="nc">string</span><span class="p">)</span> <span class="k">as</span> <span class="nv">alias</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span>
</span></span><span class="line"><span class="cl">      <span class="k">set</span> <span class="nv">trackRef</span> <span class="k">to</span> <span class="p">(</span><span class="nv">add</span> <span class="nv">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nv">refresh</span> <span class="nv">trackRef</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span> <span class="k">try</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span> <span class="k">tell</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span> <span class="nb">run</span></span></span></code></pre>
</figure><h4 id="the-beets-hook">The Beets Hook</h4>
<p><code>osascript</code> lets you run AppleScript commands and files from the command line. This <code>after_write</code> hook is only called when song metadata is updated in the file itself.</p>
<p>Writing every track with the hook after that big import took about four hours ‚Äî but I could leave it in the background while I did other stuff.</p>
<h3 id="after-the-big-import">After the big import</h3>
<p>Sometimes beets identifies tracks incorrectly. It happens. For example, Bob Dylan did not sing <a href="https://youtu.be/DohRa9lsx0Q">Stuck in the Middle With You</a>.</p>
<p>I could <a href="http://beets.readthedocs.io/en/v1.4.5/reference/cli.html#modify">modify</a> that song with <code>beets modify</code>, but I can also do it with the
<a href="http://beets.readthedocs.io/en/v1.4.5/plugins/edit.html">edit plugin</a>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ beet edit `stuck in the middle`</code></pre>
</figure><p>This pulls up <code>$EDITOR</code>, which in my case is Vim.</p>
<p><figure>
    <img src="/attachments/img/2017/beet-edit-screen.png" alt="Editing a Beets entry in Vim"/></figure></p>
<p>After the import and update, I saw something else in iTunes that bugged me. iTunes can sort by <code>year</code>, but not by <code>original_year</code> ‚Äî the year an album was originally released, rather than the year that particular file or CD was available.</p>
<p>I don‚Äôt know how to edit that with beets commands, but I can work directly with its underlying SQLite database. Maybe I‚Äôm being a little bold here, but I can always spend another weekend reimporting my music.</p>
<p><strong><code>sqlite3 ~/.config/beets/library.db</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">sqlite</span><span class="o">&gt;</span><span class="w"> </span><span class="k">update</span><span class="w"> </span><span class="n">items</span><span class="w"> </span><span class="k">set</span><span class="w"> </span><span class="k">year</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">original_year</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="k">year</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">original_year</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">original_year</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">sqlite</span><span class="o">&gt;</span><span class="w"> </span><span class="k">update</span><span class="w"> </span><span class="n">albums</span><span class="w"> </span><span class="k">set</span><span class="w"> </span><span class="k">year</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">original_year</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="k">year</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">original_year</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">original_year</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span></span></span></code></pre>
</figure><p><code>beet write</code> finalizes those changes, and updates iTunes again thanks to the <code>after_write</code> hook.</p>
<p>Everything worked out for me this time. But remember, if you change values in the database, they happen <a href="https://xkcd.com/180/">in real life</a> too!</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Then somebody mentioned that I could skip this particular mess by setting the <a href="http://beets.readthedocs.io/en/v1.4.5/reference/config.html#original-date">original date</a> option to <code>yes</code> in my beets configuration. beets will update a song‚Äôs <code>year</code>, <code>month</code>, and <code>day</code> fields to reflect the values in <code>original_date</code>. Use that setting if you would rather not poke around in the database.</p>
</blockquote>
<h3 id="what-next">What Next?</h3>
<p>That‚Äôs good enough for today. I‚Äôll correct entries as I see them, but things are definitely better than when I started.</p>
<p>To see what you can do with beets, check out the plugins.</p>
<p>Play with the query support and format strings. Have fun!</p>]]></content:encoded>
</item>
<item>
  <title>Post: Converting OGG To MP3</title>
  <link>https://randomgeekery.org/post/2017/02/converting-ogg-to-mp3/</link>
  <pubDate>Sat, 25 Feb 2017 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/02/converting-ogg-to-mp3/</guid>
  <description>I have ignored my MacBook Pro for a few months. Now my iTunes and Rhythmbox music libraries are out of sync. The Rhythmbox library includes a handful of Ogg Vorbis files. Because iTunes does not support Ogg by default, I will use FFmpeg to convert those files to MP3. For the sake of novelty, card/Raku is the glue language for the task.
I know. I could go digging in the box at the bottom of the back of the closet and re-rip those CDs.</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>raku-lang</category>  <category>perl-6</category>  <category>music</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p>I have ignored my MacBook Pro for a few months. Now my iTunes and   Rhythmbox music libraries are out of sync. The Rhythmbox library includes a handful of <a href="http://vorbis.com/">Ogg Vorbis</a> files. Because iTunes does not support Ogg by default, I will use <a href="http://ffmpeg.org/">FFmpeg</a> to convert those files to MP3. For the sake of novelty, <a href="/card/raku/">card/Raku</a> is the glue language for the task.</p>
<p>I know. I could go digging in the box at the bottom of the back of the closet
and re-rip those CDs. But the closet is all the way over there. I‚Äôm right here. I
don‚Äôt feel like getting up, and I do feel like using Perl 6 for something.</p>
<p>Don‚Äôt you judge me.</p>
<p>This is a quick journey into Raku for my own amusement, and not a tutorial. I linger on the stuff that caught my attention rather than explain all the details. Still &ndash; hopefully it‚Äôs useful to you!</p>
<h2 id="perl-6-star-notes">Perl 6 Star Notes</h2>
<p>I installed <a href="http://rakudo.org/downloads/star/">Rakudo Star</a> 2017.01 from source. Some of this information may be useful to others poking at a new <a href="http://rakudo.org/">Rakudo</a> installation.</p>
<h3 id="did-i-set-up-my-path-correctly">Did I Set Up My Path Correctly?</h3>
<p>I misread the path setup instructions after <code>make</code> finished, and ended up flailing in confusion for several minutes before I double-checked the Makefile. You can skip the flailing by reading correctly or by rerunning the &ldquo;welcome message.&rdquo;</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ make welcome-message

Rakudo Star has been built and installed successfully.
Please make sure that the following directories are in PATH:
  /home/random/src/rakudo-star-2017.01/install/bin
  /home/random/src/rakudo-star-2017.01/install/share/perl6/site/bin</code></pre>
</figure><h3 id="what-version-of-perl-6-do-i-have">What Version Of Perl 6 Do I Have?</h3>
<p>Just throwing it in so you can see what I‚Äôm working with.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ perl6 --version
This is Rakudo version 2017.01 built on MoarVM version 2017.01
implementing Perl 6.c.</code></pre>
</figure><h3 id="what-modules-do-i-have">What Modules Do I Have?</h3>
<p>As of version 2017.01, Rakudo includes <a href="https://github.com/ugexe/zef">zef</a> as its default package manager. See its <a href="https://github.com/ugexe/zef#usage">usage summary</a> for details of finding and installing modules. For the moment I want to know what came with my Rakudo Star installation.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ zef list --installed
===&gt; Found via /home/random/src/rakudo-star-2017.01/install/share/perl6
CORE:ver(&#39;6.c&#39;):auth(&#39;perl&#39;)
===&gt; Found via /home/random/src/rakudo-star-2017.01/install/share/perl6/site
Test::Mock:ver(&#39;1.3&#39;)
LWP::Simple:ver(&#39;0.090&#39;):auth(&#39;Cosimo Streppone&#39;)
Pod::To::HTML:ver(&#39;0.3.7&#39;)
panda:ver(&#39;2016.02&#39;)
NativeHelpers::Blob:ver(&#39;0.1.10&#39;):auth(&#39;github:salortiz&#39;)
SVG
JSON::Tiny
Grammar::Debugger
zef:auth(&#39;github:ugexe&#39;)
HTTP::Easy:ver(&#39;1.1.0&#39;)
XML::Writer
Template::Mojo:ver(&#39;0.1&#39;)
File::Which
File::Temp
File::Directory::Tree:auth(&#39;labster&#39;)
TAP::Harness::Prove6:ver(&#39;0.0.1&#39;):auth(&#39;Leon Timmermans&#39;)
Terminal::ANSIColor:ver(&#39;0.2&#39;)
DBIish:ver(&#39;0.5.9&#39;)
SVG::Plot
Template::Mustache:auth(&#39;github:softmoth&#39;)
File::Find:ver(&#39;0.1&#39;)
Debugger::UI::CommandLine
Grammar::Profiler::Simple:ver(&#39;0.01&#39;):auth(&#39;Jonathan Scott Duff&#39;)
Pod::To::BigPage:ver(&#39;0.2.1&#39;):auth(&#39;Wenzel P. P. Peppmeyer&#39;)
PSGI:ver(&#39;1.2.0&#39;)
p6doc
HTTP::Status
Linenoise:ver(&#39;0.1.1&#39;):auth(&#39;Rob Hoelz&#39;)
JSON::Fast:ver(&#39;0.7&#39;)
Native::Resources:ver(&#39;0.1.0&#39;):auth(&#39;Rob Hoelz&#39;)
Shell::Command
LibraryMake:ver(&#39;1.0.0&#39;):auth(&#39;github:retupmoca&#39;)
MIME::Base64:ver(&#39;1.2&#39;):auth(&#39;github:retupmoca&#39;)
Digest::MD5:ver(&#39;0.05&#39;):auth(&#39;Cosimo Streppone&#39;)
URI:ver(&#39;0.1.2&#39;)
JSON::RPC:ver(&#39;0.17.1&#39;):auth(&#39;Pawel Pabian&#39;)</code></pre>
</figure><p>It would be nice if the output had a sort option. I can sort myself, though I‚Äôd lose information about where the modules were found.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ zef list --installed | sort</code></pre>
</figure><p>I‚Äôm sure pull requests are welcome.</p>
<h3 id="how-do-i-get-at-the-documentation">How Do I Get At The Documentation?</h3>
<p>Once you stop flailing with your setup and know what modules are installed, use <a href="https://github.com/perl6/doc">p6doc</a> to read module documentation.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ p6doc File::Find</code></pre>
</figure><p>Okay I have my Rakudo Star installation sorted out. Time for the task at hand.</p>
<h2 id="quick-question-how-many">Quick question: How many?</h2>
<p>How many Ogg files do I have, anyways?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ find ~/Music/ -name &#39;*.ogg&#39; | wc -l
212</code></pre>
</figure><p>More than a handful, but still - that‚Äôs not too bad. Let‚Äôs take a minute to look at the Perl 6 I used.</p>
<h3 id="count-the-files-from-perl-6">Count The Files From Perl 6</h3>
<p>In order to get a feel for what I‚Äôm doing in Perl 6, I‚Äôm going to use Perl 6 to count the Ogg files. This task relies on <a href="https://github.com/tadzik/File-Find">File::Find</a>, which comes with Rakudo Star. Perl 6 File::Find works like Perl 5‚Äôs <a href="https://metacpan.org/pod/File::Find::Rule">File::Find::Rule</a>. You describe characteristics of the files you‚Äôre looking for, and it hands you back a <a href="https://docs.perl6.org/language/list.html#Lazy_Lists">lazy list</a> of files that match.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="k">v</span><span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Find</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$music_dir</span> <span class="o">=</span> <span class="vg">%*ENV</span><span class="p">&lt;</span><span class="s">HOME</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#34;</span><span class="s2">/Music</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@ogg_files</span> <span class="o">=</span> <span class="nb">find</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">dir</span>  <span class="o">=&gt;</span> <span class="nv">$music_dir</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">name</span> <span class="o">=&gt;</span> <span class="p">/</span><span class="se">\</span><span class="sr">.ogg</span><span class="ni">$</span><span class="p">/</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$count</span> <span class="o">=</span> <span class="nv">@ogg_files</span><span class="o">.</span><span class="nb">elems</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nb">say</span> <span class="p">&#34;</span><span class="s2">I see </span><span class="nv">$count</span><span class="s2"> Ogg files</span><span class="p">&#34;;</span></span></span></code></pre>
</figure><p>This does the same as the one-liner: look in <code>$HOME/Music</code> for and files suffixed with <code>.ogg</code>, and tell me how many matches it found.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ perl6 ogg-to-mp3.p6
I see 212 Ogg files</code></pre>
</figure><p>Yay I get exactly the same number of files that <code>find</code> found! Okay now I‚Äôm going to convert them to MP3. I‚Äôll put them in a working directory so that I don‚Äôt confuse Rhythmbox.</p>
<p>FFmpeg can handle conversion, but my string starts looking a bit funky thanks to funky Perl quoting rules. Anyways.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="k">v</span><span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Find</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Audio::Taglib::Simple</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$music_dir</span> <span class="o">=</span> <span class="vg">%*ENV</span><span class="p">&lt;</span><span class="s">HOME</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#34;</span><span class="s2">/Music</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@ogg_files</span> <span class="o">=</span> <span class="nb">find</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="s">dir</span>  <span class="o">=&gt;</span> <span class="nv">$music_dir</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">  <span class="s">name</span> <span class="o">=&gt;</span> <span class="p">/</span><span class="se">\</span><span class="sr">.ogg</span><span class="ni">$</span><span class="p">/</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nv">@ogg_files</span> <span class="k">-&gt;</span> <span class="nv">$ogg_file</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$path</span> <span class="o">=</span> <span class="kt">IO::Path</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span><span class="nv">$ogg_file</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Where will the converted file go?</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$working_dir</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">converted</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$new_dir</span> <span class="o">=</span> <span class="nv">$path</span><span class="o">.</span><span class="nb">dirname</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span><span class="nv">$music_dir</span><span class="o">,</span> <span class="nv">$working_dir</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$new_file</span> <span class="o">=</span> <span class="nv">$path</span><span class="o">.</span><span class="nb">basename</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span><span class="nv">$path</span><span class="o">.</span><span class="nb">extension</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">mp3</span><span class="p">&#34;);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$mp3_file</span> <span class="o">=</span> <span class="p">&#34;</span><span class="nv">$new_dir</span><span class="s2">/</span><span class="nv">$new_file</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Create the directory path if needed</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># (still returns True if $new_dir already exists)</span>
</span></span><span class="line"><span class="cl">  <span class="nb">mkdir</span> <span class="nv">$new_dir</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Ask ffmpeg to convert.</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   -y                    &lt;- overwrite if $mp3_file exists</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   -v warning            &lt;- report warnings &amp; errors but not general info</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   -i &#34;$ogg_file&#34;        &lt;- Read from here (quoted for spaces)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   -map_metadata &#34;0:s:0&#34; &lt;- include title, artist, etc (quoted for P6 interpolation oddness)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   &#34;$mp3_file&#34;           &lt;- write to here (quoted for spaces)</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$captured</span> <span class="o">=</span> <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2">ffmpeg -y -v warning -i &#34;</span><span class="nv">$ogg_file</span><span class="s2">&#34; -map_metadata &#34;0:s:0&#34; &#34;</span><span class="nv">$mp3_file</span><span class="s2">&#34;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span> <span class="nv">$captured</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span> <span class="p">&#34;</span><span class="s2">.</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">say</span> <span class="p">&#34;</span><span class="s2">DONE</span><span class="p">&#34;;</span></span></span></code></pre>
</figure><p><a href="https://docs.perl6.org/type/IO::Path">IO::Path</a> objects understand how file and directory paths work. Constructing the <code>$mp3_file</code> filename was easy enough thanks to a little string substitution on the Path components.</p>
<p><a href="https://docs.perl6.org/language/quoting#Shell_quoting_with_interpolation:_qqx"><code>qqx</code></a> shell quoting allows variable interpolation, though Perl 6 saw <code>0:s:0</code> as a thing it needed to interpolate until I wrapped it in quotes. It took me a while to figure out the correct FFmpeg invocation, so breaking it down in the comments made sense. Oh and if there‚Äôs any output from the conversion I print it.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>I need to remind myself that I‚Äôm putting down notes here and not writing a  tutorial, but I suggest newcomers to Perl 6 explore the <a href="https://docs.perl6.org/type.html">types</a> and <a href="https://docs.perl6.org/routine.html">routines</a>.</p>
<p>Yes, Perl 6 syntax can be strange and intimidating. You don‚Äôt need to learn all the syntax to get stuff done. The types and routines hold most of what you need for daily work. Can‚Äôt find it there? Look at the <a href="https://modules.perl6.org/">modules</a>. Easy stuff should still be easy. This is Perl, after all.</p>
</blockquote>
<h3 id="quality-control">Quality Control</h3>
<p>I used <a href="https://github.com/zoffixznet/perl6-audio-taglib-simple">Audio::Taglib::Simple</a> to double-check my work while figuring out the correct <code>ffmpeg</code> incantaion.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ sudo apt-get install libtagc0
$ zef install Audio::Taglib::Simple</code></pre>
</figure><figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="k">v</span><span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Audio::Taglib::Simple</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="vg">@*ARGS</span> <span class="k">-&gt;</span> <span class="nv">$mp3_file</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$mp3_tags</span> <span class="o">=</span> <span class="n">Audio::Taglib::Simple</span><span class="o">.</span><span class="nb">new</span><span class="p">(&#34;</span><span class="nv">$mp3_file</span><span class="p">&#34;);</span>
</span></span><span class="line"><span class="cl">  <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$mp3_file:</span><span class="s2"> </span><span class="p">{</span><span class="nv">$mp3_tags</span><span class="o">.</span><span class="nf">title</span><span class="p">}</span><span class="s2"> - </span><span class="p">{</span><span class="nv">$mp3_tags</span><span class="o">.</span><span class="nf">album</span><span class="p">}</span><span class="s2"> - </span><span class="p">{</span><span class="nv">$mp3_tags</span><span class="o">.</span><span class="nf">artist</span><span class="p">}&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$mp3_tags</span><span class="o">.</span><span class="nf">free</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>This takes any command line arguments and presents a summary of track information for each argument. It will choke if I hand it anything that‚Äôs not an MP3 file, but for an idle weekend thing on my own machine it‚Äôs fine.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ perl6 check-mp3.p6 converted/Melvins/Houdini/*
converted/Melvins/Houdini/01 - Hooch.mp3
Hooch - Houdini - Melvins
converted/Melvins/Houdini/02 - Night Goat.mp3
Night Goat - Houdini - Melvins
converted/Melvins/Houdini/03 - Lizzy.mp3
Lizzy - Houdini - Melvins
converted/Melvins/Houdini/04 - Going Blind.mp3
Going Blind - Houdini - Melvins
converted/Melvins/Houdini/05 - Honey Bucket.mp3
Honey Bucket - Houdini - Melvins
converted/Melvins/Houdini/06 - Hag Me.mp3
Hag Me - Houdini - Melvins
converted/Melvins/Houdini/07 - Set Me Straight.mp3
Set Me Straight - Houdini - Melvins
converted/Melvins/Houdini/08 - Sky Pup.mp3
Sky Pup - Houdini - Melvins
converted/Melvins/Houdini/09 - Joan of Arc.mp3
Joan of Arc - Houdini - Melvins
converted/Melvins/Houdini/10 - Teet.mp3
Teet - Houdini - Melvins
converted/Melvins/Houdini/11 - Copache.mp3
Copache - Houdini - Melvins
converted/Melvins/Houdini/12 - Pearl Bomb.mp3
Pearl Bomb - Houdini - Melvins
converted/Melvins/Houdini/13 - Spread Eagle Beagle.mp3
Spread Eagle Beagle - Houdini - Melvins</code></pre>
</figure><p>Cool. It worked.</p>
<h3 id="what-now">What Now?</h3>
<p>I move the converted files to my <code>~/Sync</code> folder and let <a href="https://syncthing.net/">Syncthing</a> handle copying them to the Mac. They import into iTunes and I‚Äôm all done!</p>
<p>Wait. I still have to sync the files that were imported to Rhythmbox as MP3 but aren‚Äôt on iTunes yet.</p>
<p>Not today, though.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: iTunes to Rhythmbox</title>
  <link>https://randomgeekery.org/post/2015/07/itunes-to-rhythmbox/</link>
  <pubDate>Mon, 27 Jul 2015 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2015/07/itunes-to-rhythmbox/</guid>
  <description>I nearly wrote a script that transfers my 2015-03-16-ruby-itunes-ratings-fun|iTunes ratings to Rhythmbox. Instead I used Edgar Salgado‚Äôs version of iTunesToRhythm.
See, I have been spending most of my time lately in GNOME 3 on openSUSE Linux. All of my music is copied over and loaded into Rhythmbox, but I wanted to continue my quest to rate all of my music. I spent roughly an hour starting my own solution before realizing that this was probably a solved problem.</description>
   <category>post</category> 
   <category>post</category> 
   <category>itunes</category>  <category>ruby</category>  <category>music</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>I nearly wrote a script that transfers my iTunes ratings to Rhythmbox. Instead I used Edgar Salgado's version of iTunesToRhythm.
</h2><p>I nearly wrote a script that transfers my <a href="/post/2015/03/ruby-itunes-ratings-fun/">2015-03-16-ruby-itunes-ratings-fun|iTunes ratings</a> to <a href="https://wiki.gnome.org/Apps/Rhythmbox">Rhythmbox</a>. Instead I used Edgar Salgado‚Äôs version of <a href="https://github.com/esalgado/iTunesToRhythm">iTunesToRhythm</a>.</p>
<p>See, I have been spending most of my time lately in <a href="https://www.gnome.org/gnome-3/">GNOME 3</a> on <a href="https://www.opensuse.org">openSUSE</a> Linux. All of my music is copied over and loaded into <a href="https://wiki.gnome.org/Apps/Rhythmbox">Rhythmbox</a>, but I wanted to continue my quest to rate all of my music. I spent roughly an hour starting my own solution before realizing that this was probably a solved problem.</p>
<p>Salgado‚Äôs code is a fork of <a href="https://github.com/esanbock/ITunesToRhythm">another project</a>, but he won my heart because he wrote how to use his version.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ git clone git@github.com:esalgado/iTunesToRhythm.git
$ cd iTunesToRhythm
$ python iTunesToRhythm.py -w ~/Sync/iTunes\ Music\ Library.xml \
  ~/.local/share/rhythmbox/rhythmdb.xml</code></pre>
</figure><p>Some things about the process annoyed me. For some strange reason, not every iTunes entry included a file location. I manually fixed those. More annoying: the iTunes XML showed roughly 7,000 tracks as rated even though the iTunes application showed over 10,000 as rated. I chose to live with that. It‚Äôs only 3,000 tracks that I need to rate again.</p>
<p><em>sigh</em></p>
<p>Hey, let‚Äôs make a pretty picture.</p>
<p><strong><code>graph-ratings.rb</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;gruff&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">SOURCE</span> <span class="o">=</span> <span class="s2">&#34;/home/brian/.local/share/rhythmbox/rhythmdb.xml&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">rhythmdb</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">XML</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span> <span class="no">SOURCE</span>
</span></span><span class="line"><span class="cl"><span class="n">songs</span> <span class="o">=</span> <span class="n">rhythmdb</span><span class="o">.</span><span class="n">xpath</span> <span class="s2">&#34;/rhythmdb/entry[@type=&#39;song&#39;]&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">ratings</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Group the songs by rating.</span>
</span></span><span class="line"><span class="cl"><span class="n">songs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">rating</span> <span class="o">=</span> <span class="n">song</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s2">&#34;rating&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">to_i</span> <span class="o">||</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="n">total_time</span> <span class="o">=</span> <span class="n">song</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s2">&#34;duration&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">to_i</span> <span class="o">||</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{</span> <span class="ss">songs</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">time</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:songs</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:time</span><span class="o">]</span> <span class="o">+=</span> <span class="n">total_time</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Print it.</span>
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="s1">&#39;Rating Songs Percent Duration&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ratings</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">rating</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">song_count</span> <span class="o">=</span> <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:songs</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">  <span class="n">total_seconds</span> <span class="o">=</span> <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:time</span><span class="o">]</span> <span class="c1">#Rhythmbox uses seconds</span>
</span></span><span class="line"><span class="cl">  <span class="n">seconds</span> <span class="o">=</span> <span class="n">total_seconds</span> <span class="o">%</span> <span class="mi">60</span>
</span></span><span class="line"><span class="cl">  <span class="n">minutes</span> <span class="o">=</span> <span class="p">(</span><span class="n">total_seconds</span> <span class="o">/</span> <span class="mi">60</span><span class="p">)</span> <span class="o">%</span> <span class="mi">60</span>
</span></span><span class="line"><span class="cl">  <span class="n">hours</span> <span class="o">=</span> <span class="p">(</span><span class="n">total_seconds</span> <span class="o">/</span> <span class="p">(</span><span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">))</span> <span class="o">%</span> <span class="mi">24</span>
</span></span><span class="line"><span class="cl">  <span class="n">days</span> <span class="o">=</span> <span class="n">total_seconds</span> <span class="o">/</span> <span class="p">(</span><span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">24</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">percentage</span> <span class="o">=</span> <span class="n">song_count</span><span class="o">.</span><span class="n">to_f</span><span class="p">()</span> <span class="o">/</span> <span class="n">songs</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">to_f</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span><span class="o">.</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="n">duration</span> <span class="o">=</span> <span class="nb">format</span> <span class="s1">&#39;%02d:%02d:%02d:%02d&#39;</span><span class="p">,</span> <span class="n">days</span><span class="p">,</span> <span class="n">hours</span><span class="p">,</span> <span class="n">minutes</span><span class="p">,</span> <span class="n">seconds</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="nb">format</span> <span class="s1">&#39;%6d %5d %6.1f%% %s&#39;</span><span class="p">,</span> <span class="n">rating</span><span class="p">,</span> <span class="n">song_count</span><span class="p">,</span> <span class="n">percentage</span><span class="p">,</span> <span class="n">duration</span>
</span></span><span class="line"><span class="cl">  <span class="nb">puts</span> <span class="n">description</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Graph it.</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">ratings</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">rating</span><span class="p">,</span> <span class="n">info</span><span class="o">|</span> <span class="o">[</span> <span class="n">rating</span><span class="p">,</span> <span class="o">[</span> <span class="n">info</span><span class="o">[</span><span class="ss">:songs</span><span class="o">]]]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">graph</span> <span class="o">=</span> <span class="no">Gruff</span><span class="o">::</span><span class="no">Pie</span><span class="o">.</span><span class="n">new</span>
</span></span><span class="line"><span class="cl"><span class="n">graph</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Songs Grouped By Rating&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ratings</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">rating</span><span class="o">|</span> <span class="n">graph</span><span class="o">.</span><span class="n">data</span> <span class="n">rating</span><span class="p">,</span> <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:songs</span><span class="o">]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">graph</span><span class="o">.</span><span class="n">write</span> <span class="s2">&#34;song-pie.png&#34;</span></span></span></code></pre>
</figure><p>This calls for Nokogiri instead of <a href="https://github.com/bleything/plist">plist</a>, which gives me the opportunity to flex my amazing <a href="http://www.nokogiri.org/tutorials/searching_a_xml_html_document.html">XPath</a> skills. Nothing too complex. Thank goodness.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ruby graph-ratings.rb
Rating Songs Percent Duration
     0  8926   55.2% 24:13:00:24
     1   254    1.6% 00:19:49:30
     2   984    6.1% 02:21:42:54
     3  3932   24.3% 10:08:49:09
     4  1716   10.6% 04:10:50:01
     5   370    2.3% 00:23:16:01</code></pre>
</figure><p>How about that pretty picture?</p>
<p><figure>
    <img src="/attachments/img/2015/july-rhythmbox-song-pie.png" alt="The song pie for July"/></figure></p>
<p>I‚Äôve made progress since March. It looks less like Pac Man now.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Ruby iTunes Ratings Fun</title>
  <link>https://randomgeekery.org/post/2015/03/ruby-itunes-ratings-fun/</link>
  <pubDate>Mon, 16 Mar 2015 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2015/03/ruby-itunes-ratings-fun/</guid>
  <description>I use the plist and gruff gems to summarize my iTunes music ratings with Ruby
Introduction Earlier this year I did a fresh operating system install on my laptop. Part of that install involved moving all my music from an older machine. I moved the music, but not the iTunes details. My tastes changed over the years. Why not start with a fresh listen and fresh ratings for all?
A few months passed.</description>
   <category>post</category> 
   <category>post</category> 
   <category>ruby</category>  <category>itunes</category>  <category>graphing</category>  <category>music</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Using Ruby to summarize my iTunes music ratings</h2><p>I use the <a href="https://github.com/bleything/plist">plist</a> and <a href="https://github.com/topfunky/gruff">gruff</a> gems to summarize my iTunes music ratings with <a href="/card/ruby/">Ruby</a></p>
<h2 id="introduction">Introduction</h2>
<p>Earlier this year I did a fresh operating system install on my laptop. Part of that install involved moving all my music from an older machine. I moved the music, but not the iTunes details. My tastes changed over the years. Why not start with a fresh listen and fresh ratings for all?</p>
<p>A few months passed. How much progress have I made?</p>
<p>First off let me roll 1d100 and check the Random Language Chart. I rolled a 73, and that means I write this in Ruby.</p>
<p>I decided to look at the XML file that gets exported by iTunes whenever a library detail changes. <a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man5/plist.5.html">Property List XML</a> frustrates quickly if you attack it with naive XML parsing. Fortunately, Ben Bleything wrote a <a href="https://github.com/bleything/plist">plist</a> gem that simplifies the task in Ruby.</p>
<p>Since I like pretty pictures, I may as well use Geoffrey Grosenbach‚Äôs <a href="https://github.com/topfunky/gruff">gruff</a> to make a pretty pie chart.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ ruby --version
ruby 2.2.0p0 (2014-12-25 revision 49005) [x86_64-darwin14]
$ gem install plist
$ gem install gruff</code></pre>
</figure><h2 id="here-it-is">Here It Is</h2>
<p>No big code explanation this time around. My last few attempts at that have gone stale in my drafts folder. Plus, I‚Äôm worn out. I <em>tried</em> the naive XML parsing thing, and it frustrated me quickly. Thank goodness for <a href="https://github.com/bleything/plist">plist</a>.</p>
<p><strong><code>graph-ratings.rb</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;plist&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;gruff&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">SOURCE</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;HOME&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/Music/iTunes/iTunes Music Library.xml&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plist</span> <span class="o">=</span> <span class="no">Plist</span><span class="o">.</span><span class="n">parse_xml</span> <span class="no">SOURCE</span>
</span></span><span class="line"><span class="cl"><span class="n">tracks</span> <span class="o">=</span> <span class="n">plist</span><span class="o">[</span><span class="s1">&#39;Tracks&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">songs</span> <span class="o">=</span> <span class="n">tracks</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">reject</span> <span class="k">do</span> <span class="o">|</span><span class="n">track</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">track</span><span class="o">[</span><span class="s1">&#39;Kind&#39;</span><span class="o">]</span> <span class="o">!~</span> <span class="sr">/audio file$/</span> <span class="o">||</span> <span class="n">track</span><span class="o">[</span><span class="s1">&#39;Genre&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;Podcast&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ratings</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Group the songs by rating.</span>
</span></span><span class="line"><span class="cl"><span class="n">songs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">rating</span> <span class="o">=</span> <span class="n">song</span><span class="o">[</span><span class="s1">&#39;Rating&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="n">total_time</span> <span class="o">=</span> <span class="n">song</span><span class="o">[</span><span class="s1">&#39;Total Time&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{</span> <span class="ss">songs</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">time</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:songs</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:time</span><span class="o">]</span> <span class="o">+=</span> <span class="n">total_time</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Print it.</span>
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="s1">&#39;Rating Songs Percent Duration&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ratings</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">rating</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">song_count</span> <span class="o">=</span> <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:songs</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">  <span class="n">total_seconds</span> <span class="o">=</span> <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:time</span><span class="o">]</span> <span class="o">/</span> <span class="mi">1000</span><span class="o">.</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="n">seconds</span> <span class="o">=</span> <span class="n">total_seconds</span> <span class="o">%</span> <span class="mi">60</span>
</span></span><span class="line"><span class="cl">  <span class="n">minutes</span> <span class="o">=</span> <span class="p">(</span><span class="n">total_seconds</span> <span class="o">/</span> <span class="mi">60</span><span class="p">)</span> <span class="o">%</span> <span class="mi">60</span>
</span></span><span class="line"><span class="cl">  <span class="n">hours</span> <span class="o">=</span> <span class="p">(</span><span class="n">total_seconds</span> <span class="o">/</span> <span class="p">(</span><span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">))</span> <span class="o">%</span> <span class="mi">24</span>
</span></span><span class="line"><span class="cl">  <span class="n">days</span> <span class="o">=</span> <span class="n">total_seconds</span> <span class="o">/</span> <span class="p">(</span><span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">24</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">percentage</span> <span class="o">=</span> <span class="n">song_count</span><span class="o">.</span><span class="n">to_f</span><span class="p">()</span> <span class="o">/</span> <span class="n">songs</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">to_f</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span><span class="o">.</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="n">duration</span> <span class="o">=</span> <span class="nb">format</span> <span class="s1">&#39;%02d:%02d:%02d:%02d&#39;</span><span class="p">,</span> <span class="n">days</span><span class="p">,</span> <span class="n">hours</span><span class="p">,</span> <span class="n">minutes</span><span class="p">,</span> <span class="n">seconds</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="nb">format</span> <span class="s1">&#39;%6d %5d %6.1f%% %s&#39;</span><span class="p">,</span> <span class="n">rating</span><span class="p">,</span> <span class="n">song_count</span><span class="p">,</span> <span class="n">percentage</span><span class="p">,</span> <span class="n">duration</span>
</span></span><span class="line"><span class="cl">  <span class="nb">puts</span> <span class="n">description</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Graph it.</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">ratings</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">rating</span><span class="p">,</span> <span class="n">info</span><span class="o">|</span> <span class="o">[</span> <span class="n">rating</span><span class="p">,</span> <span class="o">[</span> <span class="n">info</span><span class="o">[</span><span class="ss">:songs</span><span class="o">]]]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">graph</span> <span class="o">=</span> <span class="no">Gruff</span><span class="o">::</span><span class="no">Pie</span><span class="o">.</span><span class="n">new</span>
</span></span><span class="line"><span class="cl"><span class="n">graph</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Songs Grouped By Rating&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ratings</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">rating</span><span class="o">|</span> <span class="n">graph</span><span class="o">.</span><span class="n">data</span> <span class="n">rating</span><span class="p">,</span> <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:songs</span><span class="o">]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">graph</span><span class="o">.</span><span class="n">write</span> <span class="s2">&#34;song-pie.png&#34;</span></span></span></code></pre>
</figure><p>Running it shows me that I have more than a month of music to rate, and only if I can rate music in my sleep.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >Rating Songs Percent Duration
     0 13907   83.0% 38:05:56:14
    20    60    0.4% 00:03:41:48
    40   179    1.1% 00:12:28:46
    60  1351    8.1% 03:16:21:32
    80   984    5.9% 02:14:57:47
   100   273    1.6% 00:17:44:35</code></pre>
</figure><p>It seems I still like most of the music I own at least a little bit. Many former favorites have drifted to the 60 rating (3 stars), though. Time does change tastes a little bit.</p>
<p>The graph. Let‚Äôs look at that pretty picture.</p>
<p><figure>
    <img src="/attachments/img/2015/song-pie.png" alt="Ratings pie chart"/></figure></p>
<p>Yes. I have much music listening ahead of me.</p>
]]></content:encoded>
</item>
</channel>
</rss>
