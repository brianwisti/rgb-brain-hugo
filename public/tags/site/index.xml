<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>siteonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/site/</link>
    <description>
      Recent contentinsite on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Wed, 25 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://randomgeekery.org/tags/site/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Revisiting an old layout</title>
  <link>https://randomgeekery.org/post/2023/10/revisiting-an-old-layout/</link>
  <pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2023/10/revisiting-an-old-layout/</guid>
  <description>I’m not saying it’s good. I’m not saying I’ll stick with it. I just wanted to pull solidly away from the utility-class CSS I was using for a while there. Got real hard to tweak.
So for the moment, a slightly tweaked layout I used regularly a couple years ago.</description>
   <category>post</category> 
   <category>note</category> 
   <category>site</category> 
  <content:encoded><![CDATA[<p>I&rsquo;m not saying it&rsquo;s good. I&rsquo;m not saying I&rsquo;ll stick with it. I just wanted to pull solidly away from the utility-class CSS I was using for a while there. Got real hard to tweak.</p>
<p>So for the moment, a slightly tweaked layout I used regularly a couple years ago.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: pulled in the tumblelog</title>
  <link>https://randomgeekery.org/post/2023/09/pulled-in-the-tumblelog/</link>
  <pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2023/09/pulled-in-the-tumblelog/</guid>
  <description>All my tumblelog pages are notes on this blog now. Any time my personal site count goes past 1, the friction ramps up quick. They all end up going a little stale.
So that’s one less site to worry about.</description>
   <category>post</category> 
   <category>note</category> 
   <category>site</category> 
  <content:encoded><![CDATA[<p>All my <a href="/post/2022/05/how-about-a-tumblelog/">tumblelog</a> pages are notes on <em>this</em> blog now. Any time my personal site count goes past 1, the friction ramps up quick. They all end up going a little stale.</p>
<p>So that’s one less site to worry about.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Added site search via Pagefind</title>
  <link>https://randomgeekery.org/post/2023/06/added-site-search-via-pagefind/</link>
  <pubDate>Tue, 20 Jun 2023 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2023/06/added-site-search-via-pagefind/</guid>
  <description>Internet search exists so you can find cats
Okay it’s JavaScript-powered. If you don’t have JS you won’t even see the search bar. Besides that Pagefind is pretty darn good! I can put off organizing the site a little longer.</description>
   <category>post</category> 
   <category>note</category> 
   <category>site</category> 
  <content:encoded><![CDATA[<p><img src="/post/2023/06/../../../attachments/img/2023/cover-2023-06-20.png" alt="attachments/img/2023/cover-2023-06-20.png"/>
Internet search exists so you can find cats</p>
<p>Okay it’s JavaScript-powered. If you don’t have JS you won’t even see the search bar. Besides that <a href="https://pagefind.app">Pagefind</a> is pretty darn good! I can put off organizing the site a little longer.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Testing Justfile Recipe Arguments</title>
  <link>https://randomgeekery.org/post/2022/12/testing-justfile-recipe-arguments/</link>
  <pubDate>Mon, 05 Dec 2022 20:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/12/testing-justfile-recipe-arguments/</guid>
  <description>card/tldr:
add TITLE: bundle exec ruby _scripts/add-post --title &#39;{{ TITLE }}&#39; Time to fiddle with my site setup some more.
My site posts are organized by file slug: simplified file paths based on a title. Hugo itself directly supports creating new content by path.
hugo new content/post/2022/testing-justfile-recipe-arguments/index.adoc.txt It takes thinking to map from a title to a slug. Sometimes I’m not in the mood for that kind of thinking. And I’m not always great about consistency in my slug choices.</description>
   <category>post</category> 
   <category>post</category> 
   <category>site</category>  <category>just</category> 
  <content:encoded><![CDATA[<h2>In which I make my justfile just a little fancier</h2><p><a href="/card/tldr/">card/tldr</a>:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-justfile" data-lang="justfile"><span class="line"><span class="cl"><span class="nf">add TITLE</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  bundle <span class="nb">exec</span> ruby _scripts/add-post --title <span class="s1">&#39;{{ TITLE }}&#39;</span>
</span></span></code></pre>
</figure><p>Time to fiddle with my site setup some more.</p>
<p>My site posts are organized by file slug: simplified file paths based on a title. <a href="https://gohugo.io">Hugo</a> itself directly supports creating new content by path.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">hugo new content/post/2022/testing-justfile-recipe-arguments/index.adoc.txt</span></span></code></pre>
</figure><p>It takes thinking to map from a title to a slug. Sometimes I&rsquo;m not in the mood for that kind of thinking. And I&rsquo;m not always great about consistency in my slug choices.</p>
<p>So I use a <a href="https://ruby-lang.org">Ruby</a> script to streamline adding new posts. I won&rsquo;t talk about that today. Maybe another day. All it does is use <a href="https://ttytoolkit.org">TTY::Toolkit</a> to save me a couple seconds of thought compared to <code>hugo new</code>, then fires up <code>$EDITOR</code> for me so I don&rsquo;t have to think about that either. Sometimes two seconds is the difference between writing an impulse post and writing a tweet.</p>
<p>Right now the script needs a <code>--title</code> string it can use for frontmatter and file slug.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">bundle <span class="nb">exec</span> ruby _scripts/add-post --title <span class="s1">&#39;Testing Justfile Recipe Arguments&#39;</span></span></span></code></pre>
</figure><p>I don&rsquo;t have to figure out the slug, but it&rsquo;s still rather tedious. I use <a href="https://just.systems">just</a> to simplify those tedious site tasks. Putting the repeated bits of this invocation in a recipe — that&rsquo;s what <code>just</code> calls tasks — would cut down on the tedium. What about the title? Started thinking about TTY::Toolkit interactive prompts. Maybe some other time, because <code>just</code> lets you specify arguments for a recipe.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-justfile" data-lang="justfile"><span class="line"><span class="cl"><span class="nf">add TITLE</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  bundle <span class="nb">exec</span> ruby _scripts/add-post --title <span class="s1">&#39;{{ TITLE }}&#39;</span>
</span></span></code></pre>
</figure><p>Now I can <code>just add</code> a post.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">just add <span class="s1">&#39;Testing Justfile Recipe Arguments&#39;</span></span></span></code></pre>
</figure><p>And here we are!</p>
<p>I use a couple other Ruby scripts. Might as well refactor that <code>bundle exec ruby</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-justfile" data-lang="justfile"><span class="line"><span class="cl"><span class="nv">ruby</span> <span class="o">:=</span> <span class="s1">&#39;bundle exec ruby&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">add TITLE</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="o">{{</span> ruby <span class="o">}}</span> _scripts/add-post --title <span class="s1">&#39;{{ TITLE }}&#39;</span>
</span></span></code></pre>
</figure><p>All right. This is better than what I had before. Sure I&rsquo;ve got multiple helpful layers to track now. That&rsquo;ll bite me if I get carried away. On the other hand, I actually wrote something for the site today.</p>
<p>Sometimes two seconds makes the difference.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Social network stuff</title>
  <link>https://randomgeekery.org/post/2022/11/social-network-stuff/</link>
  <pubDate>Sun, 20 Nov 2022 21:38:39 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/11/social-network-stuff/</guid>
  <description>Jack wonders when dinner is
The toilet fire that is Twitter’s new management strategy continues apace. Felt compelled to take my normally wide-open account and lock it. I don’t want to deactivate and delete. Somebody else can come along, grab the name, and spam the hell out of people with it.
But hey, where else can you find me? I’ll update my h-card once the dust settles, but here’s where I’m at roughly in order of how much attention I’ve given it:</description>
   <category>post</category> 
   <category>note</category> 
   <category>site</category> 
  <content:encoded><![CDATA[<p><img src="/post/2022/11/../../../attachments/img/2022/cover-2022-11-20.jpeg" alt="attachments/img/2022/cover-2022-11-20.jpeg"/>
Jack wonders when dinner is</p>
<p>The toilet fire that is Twitter&rsquo;s new management strategy continues apace. Felt compelled to take my normally wide-open account and lock it. I don&rsquo;t want to deactivate and delete. Somebody else can come along, grab the name, and spam the hell out of people with it.</p>
<p>But hey, where else can you find me? I&rsquo;ll update my h-card once the dust settles, but here&rsquo;s where I&rsquo;m at roughly in order of how much attention I&rsquo;ve given it:</p>
<ul>
<li><a href="https://hackers.town/@randomgeek">Mastodon</a></li>
<li><a href="https://cohost.org/randomgeek">Cohost</a></li>
<li><a href="https://www.tumblr.com/blog/randomgeekery">Tumblr</a></li>
<li><a href="https://www.pillowfort.social/randomgeek">Pillowfort</a></li>
</ul>
<p>Meanwhile I&rsquo;m pondering the plausibility of a single-user <a href="https://fediverse.party">Fediverse</a> instance as a way to enable comments. Or I could just set up a WordPress site. Until I decide on that, you can find me at one or more of the listed sites.</p>
<p>And all this is kinda depressing after 15 years on Twitter. Okay yes I hated it half the time but that uh that came from a place of love. But anyways enough gloominess. How about a picture of one of the cats?</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Pulling Twitter From POSSE Links</title>
  <link>https://randomgeekery.org/post/2022/11/pulling-twitter-from-posse-links/</link>
  <pubDate>Thu, 10 Nov 2022 18:40:58 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/11/pulling-twitter-from-posse-links/</guid>
  <description>Lots of Elon Musk madness going on at Twitter. From a Platformer summary of the last day or two.
…as Platformer was first to report, its chief privacy officer, Damien Kieran; its chief information security officer; Lea Kissner; and its chief compliance officer, Marianne Fogarty, had all resigned…So did John Debay, director of software engineering…much of the security governance risks and compliance team has left…
This is on top of all the folks Musk fired or who have resigned in the week since he took over.</description>
   <category>post</category> 
   <category>note</category> 
   <category>indieweb</category>  <category>posse</category>  <category>site</category> 
  <content:encoded><![CDATA[<p>Lots of Elon Musk madness going on at Twitter. From a <a href="https://www.platformer.news/p/inside-the-twitter-meltdown">Platformer summary</a> of the last day or two.</p>
<blockquote>
<p>…as Platformer was first to report, its chief privacy officer, Damien Kieran;
its chief information security officer; Lea Kissner; and its chief compliance
officer, Marianne Fogarty, had all resigned…So did John Debay, director of
software engineering…much of the security governance risks and compliance
team has left…</p>
</blockquote>
<p>This is on top of all the folks Musk fired or who have resigned in the week since he took over. Encouraging folks to use Twitter seems unwise at this point.</p>
<p>Nothing profound here. Just means I&rsquo;m not explicitly syndicating to or tracking WebMentions from there.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Added a Neighborhood Blogroll Thing</title>
  <link>https://randomgeekery.org/post/2022/04/neighborhood-blogroll-thing/</link>
  <pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/04/neighborhood-blogroll-thing/</guid>
  <description>Been wanting to list at least some of the sites I follow. Blog discovery is almost as hard as finding a six month old tweet. Recent events add some urgency to the thought.
So neighborhood is me doing my part to help. Right now it’s just a slightly tweaked export of my Fraidycat feed, fed into a Hugo data template.</description>
   <category>post</category> 
   <category>note</category> 
   <category>site</category>  <category>rss</category> 
  <content:encoded><![CDATA[<p>Been wanting to list at least some of the sites I follow. Blog discovery is almost as hard as finding a six month old tweet. <a href="https://www.techdirt.com/2022/04/26/twitters-legal-team-has-been-an-aggressive-defender-of-free-speech-will-that-continue-under-musk/">Recent events</a> add some urgency to the thought.</p>
<p>So <a href="/neighborhood/">neighborhood</a> is me doing my part to help. Right now it’s just a slightly tweaked export of my <a href="https://fraidyc.at">Fraidycat</a> feed, fed into a Hugo <a href="https://gohugo.io/templates/data-templates/#data-driven-content">data template</a>.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Didn&#39;t I do this last year too?</title>
  <link>https://randomgeekery.org/post/2022/04/didnt-i-do-this-last-year-too/</link>
  <pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/04/didnt-i-do-this-last-year-too/</guid>
  <description>So anyways yeah. Site’s built with card/Hugo again. This iteration is relatively minimal: let Hugo be Hugo with Markdown, render hooks, and shortcodes. A justfile. Some Python for preprocessing and tests. Right, and markdownlint-cli. I’d love to do posts about some or all of the pieces.
Notes and bookmarks got merged into the main post stream. Internal links are clean, but no promises yet about links from the outside world. That’s a pretty big shuffle I just did.</description>
   <category>post</category> 
   <category>post</category> 
   <category>site</category>  <category>hugo</category> 
  <content:encoded><![CDATA[<h2>A day of Hugo and cat-sitting</h2><p>So anyways yeah. Site&rsquo;s built with <a href="/card/hugo/">card/Hugo</a> again. This iteration is relatively minimal: let Hugo be Hugo with Markdown, render hooks, and shortcodes. A <code>justfile</code>. Some Python for preprocessing and tests. Right, and <code>markdownlint-cli</code>. I&rsquo;d love to do posts about some or all of the pieces.</p>
<p>Notes and bookmarks got merged into the main post stream. Internal links are clean, but no promises yet about links from the outside world. That&rsquo;s a pretty big shuffle I just did.</p>
<p>I won&rsquo;t pretend this is the site&rsquo;s final form or anything.</p>
<p>Why? Needed something very fast and reasonably flexible for some other site experiments in mind. More on those later hopefully.</p>
<h2 id="cat-sitting">Cat-sitting?</h2>
<p>Yeah. One of our kitties — Jack — has been having trouble keeping his food down for a few days. We had better luck with soft food today, but he still threw up a little. Let him sleep it off wherever he likes, and check periodically to make sure he&rsquo;s breathing. He&rsquo;s eating less than usual, but at least he&rsquo;s still eating.</p>
<p>Got a vet appointment for Friday, and a 24-hour emergency vet that said to bring him down if he gets traumatically worse.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Slowly pulling in tools for site flow</title>
  <link>https://randomgeekery.org/post/2022/01/slowly-pulling-in-tools-for-site-flow/</link>
  <pubDate>Sun, 16 Jan 2022 20:30:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/01/slowly-pulling-in-tools-for-site-flow/</guid>
  <description>Made a toot with Masto. Kinda need that for content syndication.
The Mastodon Twitter Crossposter works great, but waiting for the announcement toot to show up as a tweet was a tedious manual step that I hope to discard. So I figured out how to make a tweet with twitter-api-v2.
Those are the pieces I need to get POSSE syndication working in this card/Eleventy iteration of the site.
Now I just need to staple those pieces together, grab a sharpie, and label it “workflow.</description>
   <category>post</category> 
   <category>note</category> 
   <category>node-js</category>  <category>indieweb</category>  <category>posse</category>  <category>site</category> 
  <content:encoded><![CDATA[<p>Made a <a href="https://hackers.town/@randomgeek/107630284879354154">toot</a> with <a href="https://www.npmjs.com/package/masto">Masto</a>. Kinda need that for content syndication.</p>
<p><img src="/post/2022/01/attachments/img/2022/toot.png" title="Here&#39;s my toot" alt="Here&rsquo;s my toot"/></p>
<p>The <a href="https://crossposter.masto.donte.com.br/">Mastodon Twitter Crossposter</a> works great, but waiting for the announcement toot to show up as a tweet was a tedious manual step that I hope to discard. So I figured out how to make a tweet with <a href="https://www.npmjs.com/package/twitter-api-v2">twitter-api-v2</a>.</p>
<p>Those are the pieces I need to get <a href="https://indieweb.org/POSSE">POSSE</a> syndication working in this <a href="/card/eleventy/">card/Eleventy</a> iteration of the site.</p>
<p>Now I just need to staple those pieces together, grab a sharpie, and label it &ldquo;workflow.&rdquo;</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Processing Sass in Eleventy</title>
  <link>https://randomgeekery.org/post/2022/01/processing-sass-in-eleventy/</link>
  <pubDate>Mon, 10 Jan 2022 01:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/01/processing-sass-in-eleventy/</guid>
  <description>relevant pictures are overrated; this dog and cat are cute together
card/Eleventy’s 1.0 release includes the ability to add your own custom processing based on file extension. Unsurprisingly, I love this feature.
Lots of big ideas, but let’s start small with the officially documented process for processing Sass.
First things first, let’s update devDependencies in my package.json:
{ &#34;devDependencies&#34;: { &#34;@11ty/eleventy&#34;: &#34;^1.0.0&#34; } } I keep my Sass files under src/assets/style:</description>
   <category>post</category> 
   <category>post</category> 
   <category>eleventy</category>  <category>scss</category>  <category>css</category>  <category>site</category> 
  <content:encoded><![CDATA[<h2>Specifically, building `main.scss` when `_base.scss` changes</h2><p><img src="/post/2022/01/../../../attachments/img/2022/cover-2022-01-10.jpg" alt="attachments/img/2022/cover-2022-01-10.jpg"/>
relevant pictures are overrated; this dog and cat are cute together</p>
<p><a href="/card/eleventy/">card/Eleventy</a>’s 1.0 release includes the ability to add your own custom processing based on file extension. Unsurprisingly, I love this feature.</p>
<p>Lots of big ideas, but let’s start small with the officially documented process for processing Sass.</p>
<p>First things first, let&rsquo;s update <code>devDependencies</code> in my <code>package.json</code>:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;devDependencies&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;@11ty/eleventy&#34;</span><span class="p">:</span> <span class="s2">&#34;^1.0.0&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>I keep my Sass files under <code>src/assets/style</code>:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> tree src/assets/style/
</span></span><span class="line"><span class="cl"><span class="go">src/assets/style/
</span></span></span><span class="line"><span class="cl"><span class="go">├── _base.scss
</span></span></span><span class="line"><span class="cl"><span class="go">├── _layout.scss
</span></span></span><span class="line"><span class="cl"><span class="go">├── main.scss
</span></span></span><span class="line"><span class="cl"><span class="go">└── modules
</span></span></span><span class="line"><span class="cl"><span class="go">    └── _shiki.scss
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">1 directory, 4 files
</span></span></span></code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>Generally, I have been following the site organization guidelines described in <a href="https://www.webstoemp.com/blog/eleventy-projects-structure/">Structuring Eleventy Projects</a>. If I have some non-content file I need transformed — Sass, images, whatever — I put it under <code>src/assets</code>.</p>
</blockquote>
<p>Eleventy provides instructions on how to set up <a href="https://www.11ty.dev/docs/languages/custom/">custom templates</a> for dealing with Sass, and even <a href="https://www.11ty.dev/docs/languages/custom/#skipping-a-template-from-inside-of-the-compile-function">skipping a template</a> so it doesn&rsquo;t build <code>_base.scss</code> and so on.</p>
<p>And that&rsquo;s great. It works. <code>src/assets/style/main.scss</code> becomes <code>dist/assets/style/main.css</code>. Course, it&rsquo;s not quite perfect. I still need <code>main.css</code> rebuild if I write to <code>_base.scss</code>.</p>
<p>But I also don&rsquo;t want it randomly rebuilding the stylesheet 20 times because it found 20 support files.</p>
<p>I need to think my way through this one.</p>
<h2 id="add-a-sasshandler">Add a SassHandler</h2>
<p>Keeping with Jérôme Coupé&rsquo;s structural suggestions, I keep my more complex JavaScript logic under <code>src/_11ty/</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> tree src/_11ty/
</span></span><span class="line"><span class="cl"><span class="go">src/_11ty/
</span></span></span><span class="line"><span class="cl"><span class="go">├── collections
</span></span></span><span class="line"><span class="cl"><span class="go">├── filters
</span></span></span><span class="line"><span class="cl"><span class="go">├── handlers
</span></span></span><span class="line"><span class="cl"><span class="go">│   ├── MarkdownHandler.js
</span></span></span><span class="line"><span class="cl"><span class="go">│   └── SassHandler.js
</span></span></span><span class="line"><span class="cl"><span class="go">└── shortcodes
</span></span></span></code></pre>
</figure><p><code>handlers</code> is my own variation — that&rsquo;s where I put code for particular file and content types.</p>
<p>So what needs to go into <code>SassHandler.js</code>? Let&rsquo;s see.</p>
<ul>
<li>ensure only <code>main.scss</code> gets handed off to Sass</li>
<li>ensure the main stylesheet is rebuilt when any of the imports change</li>
<li>avoid unnecessary recompilation — without getting too clever</li>
</ul>
<p>Time to open up the old text editor.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- file:src/_11ty/handlers/SassHandler.js
</span></span></span><span class="line"><span class="cl"><span class="c1">// Handler for my Sass stylesheets
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// ==&gt; Import libraries.
</span></span></span><span class="line"><span class="cl"><span class="c1">// ==&gt; Define input and output paths for sass.
</span></span></span><span class="line"><span class="cl"><span class="c1">// ==&gt; Set build time guard variables.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">outputFileExtension</span><span class="o">:</span> <span class="s2">&#34;css&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">compileOptions</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">permalink</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">compile</span><span class="o">:</span> <span class="kr">async</span> <span class="kd">function</span><span class="p">(</span><span class="nx">inputContent</span><span class="p">,</span> <span class="nx">inputPath</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ==&gt; Ensure we need to build the CSS.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// ==&gt; Remember and log this build.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// ==&gt; Compile the Sass and write the CSS.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre>
</figure><p>With what I&rsquo;ve figured out so far, even though Eleventy can watch and act on the files for me, keeping the paths under tight control will be my job. A
change in <code>_base.scss</code> means a change in <code>main.scss</code> which means a write to <code>main.css</code>. I have not yet learned how to do that in any Eleventy-specific way. So I&rsquo;ll disable the <code>permalink</code> compile option and handle it myself with the appropriate libraries.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Import libraries
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;fs-plus&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;path&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sass</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;sass&#34;</span><span class="p">);</span></span></span></code></pre>
</figure><ul>
<li><a href="http://atom.github.io/fs-plus/"><code>fs-plus</code></a> is a little easier to work with than Node&rsquo;s standard <code>fs</code>   library for file handling</li>
<li><a href="https://nodejs.org/dist/latest-v16.x/docs/api/path.html"><code>path</code></a> is no <a href="https://docs.python.org/3/library/pathlib.html"><code>pathlib</code></a> — heck it&rsquo;s barely even <a href="https://docs.python.org/3/library/os.path.html"><code>os.path</code></a> — but it&rsquo;s better than trusting my own string-splitting and reassembly</li>
<li><a href="https://sass-lang.com"><code>sass</code></a> of course; these <em>are</em> Sass files</li>
</ul>
<p>I know exactly which files I want to read and write. Let&rsquo;s define those as constant.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Define input and output paths for sass
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">curDir</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sassInputPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">cirDir</span><span class="p">,</span> <span class="s2">&#34;src/assets/style/main.scss&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">cssOutputPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">curDir</span><span class="p">,</span> <span class="s2">&#34;dist/assets/style/main.css&#34;</span><span class="p">);</span></span></span></code></pre>
</figure><p>Yes this does look a lot like what Eleventy would do on its own. Since I turned off permalinks for <code>scss</code> files, I need to be careful. I start this with being extremely specific and figuring out what I can relax later — assuming I decide that relaxing is what I want to do.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Common sense sugests these should be defined in a config file somewhere. I&rsquo;m still getting the hang of Eleventy, though. Common sense won&rsquo;t be an option for some time.</p>
</blockquote>
<p>I figure the easiest way to avoid extra recompilation is by watching the clock. If it hasn&rsquo;t been long enough since the last build, skip it. Five seconds is a completely arbitrary value for &ldquo;long enough&rdquo; but it seems to be working.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Set build time guard variables
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">lastSassBuild</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>     <span class="c1">// valueOf last sass build
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">minimumWait</span> <span class="o">=</span> <span class="mi">5_000</span><span class="p">;</span> <span class="c1">// wait this many milliseconds before rebuilding
</span></span></span></code></pre>
</figure><p>And what does a build time check look like? We use <a href="https://developer.mozilla.org/en-US/docs/web/javascript/reference/global_objects/date/valueof"><code>Date.valueOf</code></a> to get the number of milliseconds since 1970-01-01, which is a handy numeric value for simple comparison. If the difference between that and <code>lastSassBuild</code> is less than <code>minimumWait</code> milliseconds, we don&rsquo;t need to build.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Ensure we need to build the CSS
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">valueOf</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">now</span> <span class="o">-</span> <span class="nx">lastSassBuild</span> <span class="o">&lt;=</span> <span class="nx">minimumWait</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>What if we <em>do</em> need to build? Update <code>lastSassBuild</code> and log what&rsquo;s going on, since I enjoy a little feedback.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Remember and log this build
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">lastSassBuild</span> <span class="o">=</span> <span class="nx">now</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">parsed</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">inputPath</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`[</span><span class="si">${</span><span class="nx">now</span><span class="si">}</span><span class="sb">] SassHandler: </span><span class="si">${</span><span class="nx">inputPath</span><span class="si">}</span><span class="sb"> changed`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Building </span><span class="si">${</span><span class="nx">sassFilePath</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span></span></span></code></pre>
</figure><p>I still haven&rsquo;t learned enough JavaScript to know why, but when I use <code>sass.compile</code> instead of the supposedly deprecated <code>renderSync</code> I get an exception. Eventually I&rsquo;ll be forced to revisit that, but today is not that day.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Compile the Sass and write the CSS
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">file</span><span class="o">:</span> <span class="nx">sassFilePath</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">cssText</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s2">&#34;utf8&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">fs</span><span class="p">.</span><span class="nx">makeTreeSync</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">dirname</span><span class="p">(</span><span class="nx">cssOutputPath</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="nx">cssOutputPath</span><span class="p">,</span> <span class="nx">cssText</span><span class="p">);</span></span></span></code></pre>
</figure><p>Again, I&rsquo;ve disabled <code>permalink</code> so it&rsquo;s on me to ensure the output directory exists and to write the generated CSS.</p>
<p>So there it is! Probably not optimal but hey we&rsquo;re all learning something every day.</p>
<h2 id="load-that-sasshandler">Load that SassHandler</h2>
<p>Then the relevant bits of my <code>.eleventy.js</code>:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">SassHandler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;./src/_11ty/handlers/SassHandler.js&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">eleventyConfig</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">eleventyConfig</span><span class="p">.</span><span class="nx">addTemplateFormats</span><span class="p">(</span><span class="s2">&#34;scss&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">eleventyConfig</span><span class="p">.</span><span class="nx">addExtension</span><span class="p">(</span><span class="s2">&#34;scss&#34;</span><span class="p">,</span> <span class="nx">SassHandler</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre>
</figure><p>This site still builds and the styles update as expected, so: yay!</p>
<h2 id="whats-next">What&rsquo;s next?</h2>
<p>I dunno. Knowing me? Probably <a href="https://asciidoctor.org">Asciidoctor</a>.</p>
]]></content:encoded>
</item>
</channel>
</rss>
