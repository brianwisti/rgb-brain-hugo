<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>blogspotonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/blogspot/</link>
    <description>
      Recent contentinblogspot on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Mon, 20 Aug 2012 00:00:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/blogspot/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Oh yeah, Ryan Davis is awesome</title>
  <link>https://randomgeekery.org/post/2012/08/oh-yeah-ryan-davis-is-awesome/</link>
  <pubDate>Mon, 20 Aug 2012 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2012/08/oh-yeah-ryan-davis-is-awesome/</guid>
  <description>&lt;p&gt;Found out about a talk from Ryan Davis at Cascadia RubyConf because of an &lt;a href=&#34;http://gilesbowkett.blogspot.com/2012/08/ryan-davis-you-are-idiot-liar-or-fool.html&#34;&gt;incensed reaction&lt;/a&gt; to it from Giles Bowkett on &lt;em&gt;his&lt;/em&gt; blog. Thing is, I like the talk. I even like the bits that Bowkett doesn’t. Of course, I wasn’t one of the folks specifically mentioned, and he was. So there’s going to be a different perspective there.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>blogspot</category> 
  <content:encoded><![CDATA[<p>Found out about a talk from Ryan Davis at Cascadia RubyConf because of an <a href="http://gilesbowkett.blogspot.com/2012/08/ryan-davis-you-are-idiot-liar-or-fool.html">incensed reaction</a> to it from Giles Bowkett on <em>his</em> blog. Thing is, I like the talk. I even like the bits that Bowkett doesn&rsquo;t. Of course, I wasn&rsquo;t one of the folks specifically mentioned, and he was. So there&rsquo;s going to be a different perspective there.</p>
<p>But I could have been. Heck, I tried my hand at cute ranty posts a few years back, and one of them threw what I thought was a light hearted jab at Ryan.  But it really bugged him. He told me so the next time I logged into IRC, much later. I could see why it would when I looked back at the post and imagined it without context. The joke wasn&rsquo;t even that funny <em>with</em> context. Our posts on big or little blogs - or social networks, for that matter - have a reach far beyond what we might think when we&rsquo;re sitting at the keyboard. They can span the globe in a split second, and still be out there for years.</p>
<p>On revisiting the forgotten joke, I saw that it could be considered offensive if you weren&rsquo;t in the unique garden of my brain. I was really shaken by the fact that somebody I had such respect for (the guy is basically a genius in Ruby and other domains) had taken a lasting offense to something that I&rsquo;d long forgotten about. So I cleared the post and got into the habit of checking myself before wrecking myself.</p>
<p>I don&rsquo;t mind if someone somewhere thinks I&rsquo;m a jerk. I want it to be for a better reason than me pretending to be an insult comic, though.</p>
<p>So, yeah. The guidelines mentioned by Ryan Davis for tending to the community are great, but it wouldn&rsquo;t do any harm to use them as guidelines for tending yourself. You know: &ldquo;Don&rsquo;t be a dick!&rdquo;</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/3fG4dDJAifo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content:encoded>
</item>
<item>
  <title>Post: The Spreadsheet Story 1</title>
  <link>https://randomgeekery.org/post/2011/04/the-spreadsheet-story-1/</link>
  <pubDate>Tue, 19 Apr 2011 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2011/04/the-spreadsheet-story-1/</guid>
  <description>[!NOTE] We never used the Google Spreadsheet idea, but working on it helped flesh out the thoughts that went into the Web-based marysplace-rails project.
There is this spreadsheet project I have been working on. My wife works at a day shelter for homeless and formerly homeless women, as well as their children. At this shelter, they make use of an incentive point system. The ladies do some chore or favor, and they get points.</description>
   <category>post</category> 
   <category>post</category> 
   <category>google-apps-script</category>  <category>javascript</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<h2>A design experiment figuring out what a local homeless shelter needs to track chores.</h2><blockquote>
<p>[!NOTE]
We never used the Google Spreadsheet idea, but working on it helped flesh out the thoughts that went into the Web-based <a href="https://github.com/brianwisti/marysplace-rails">marysplace-rails</a> project.</p>
</blockquote>
<p>There is this spreadsheet project I have been working on. My wife works
at a day shelter for homeless and formerly homeless women, as well as
their children. At this shelter, they make use of an incentive point
system. The ladies do some chore or favor, and they get points. There
are preset ways to get points, with default values. Helping with the
recycling gets this number of points, while putting chairs up gets that
number of points. The points are just defaults, though. A client can get
more or fewer than the default points depending on the situation. The
staff can also create new chores or reasons for awarding points pretty
much at their whim. A couple of times a week clients get the opportunity
to spend those points in exchange for items.</p>
<p>It’s a very popular program. Clients are constantly looking for ways to
get more points, and asking what their point total is. Over the years,
some clients have accumulated tens of thousands of points.</p>
<p>Tracking incentive points was a very tedious process involving punch
cards, calculators, and the occasional mild profanity. I volunteered my
geekiness to help come up with a better tracking system. I am mostly a
Web programmer, so naturally my first impulse was a full-scale
<a href="http://rubyonrails.org">Rails</a>, <a href="http://www.djangoproject.com">Django</a>,
or maybe even <a href="http://www.catalystframework.org">Catalyst</a> Web
application. Why not, right? It does sound like the perfect job for a
<a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>
framework:</p>
<ul>
<li>Add and edit clients</li>
<li>Add and edit ways to get points</li>
<li>Log point changes for clients</li>
<li>Get the point total for any given client</li>
</ul>
<p>There was just one tiny flaw in my proposal, which my wife was kind
enough to point out: nobody would use it. The staff would prefer to keep
things in a familiar framework, such as a spreadsheet. Spreadsheets are
nice. They may not be the perfect choice for a database, but they do
have a lot of built-in functionality that would take me forever to
implement on my own.</p>
<p>Okay, I’m flexible. I made an
<a href="http://office.microsoft.com/en-us/excel/">Excel</a> spreadsheet. I learned
enough Excel to add some formulas and data validation rules. I even
learned enough
<a href="http://en.wikipedia.org/wiki/Visual_Basic_for_Applications">VBA</a> to add
some interactivity, reducing the tediousness a bit more. Well - reducing
the tediousness for them. Not so much for me. Visual Basic is an
interesting language, but I don’t care for it.</p>
<p>What if I could use JavaScript? <a href="http://code.google.com/googleapps/appsscript/">Google Apps
Script</a> uses JavaScript
to add programming logic to spreadsheets and other documents. I don’t
know if it would be any easier than using VBA in Excel, but I know it
would be more pleasant for me personally.</p>
<p>I have decided to go ahead and try it, now that the dust has settled on
the Excel version. Hey — if it works well enough, they might actually
use it. Regardless of whether it actually gets used, it’ll provide a
reasonable example of adding niftiness to a Google Spreadsheet.
Somebody’s bound to find that useful. Right?</p>
<p>The important thing is that I’ll have some fun.</p>
<h2 id="the-spreadsheet-itself">The Spreadsheet Itself</h2>
<p>I can almost pretend this is an
<a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC</a>
application. The spreadsheet itself is the model layer, with each sheet
representing a specific model. My knowledge of spreadsheets is
incomplete at best, but the available formulas don’t seem to provide the
validation constraints that I’m looking for. It looks this will be what
those in the know call a &ldquo;fat controller&rdquo; approach, with a
disproportionate amount of the logic going into the scripting layer.
That scripting layer, driven by Google Apps Script, will handle lookup
and validation details. At least, it will until I figure out more about
how Google Spreadsheets works. The scripting layer will also provide a
view, insulating users from the worksheets by presenting dialogs for the
most common tasks.</p>
<p>Yeah, I know. It’s not really MVC. I have made a terrible analogy. But
at least my terrible analogy has helped me divide the thing into logical
components, rather than just looking at it as a spreadsheet with some
scripts.</p>
<p>So. Let’s look at the worksheets. I also made mock ups of the common
task views, just for the fun of it.</p>
<h3 id="people">People</h3>
<p>Presents information about the clients that take part in the incentive
program.</p>
<dl>
<dt>Name Used</dt>
<dd>The most common name used by this person. Must be unique. That’s
generally handled by including the initial of the last name or a
nickname.</dd>
<dt>Full Name</dt>
<dd>The full name of the client, if available.</dd>
<dt>Other Names</dt>
<dd>Nicknames and aliases are common. Use this field to list any other
known names for the client.</dd>
<dt>Starting Points</dt>
<dd>How many points the client had when the spreadsheet started being
used. Nobody wants to lose their accumulated points, and this
provides one way to differentiate it from points gained after. Could
also be handy for importing, such as setting up different workbooks
for different time periods.</dd>
<dt>Total Points</dt>
<dd>How many points this person has, after gaining and spending is taken
into account.</dd>
</dl>
<p><img src="/post/2011/04/attachments/img/2011/NewPersonDialog.png" alt="Add Person Dialog"/></p>
<h3 id="categories">Categories</h3>
<p>The different ways to gain and lose points. Pretty much a list of
predefined chores and a couple of catchall buckets.</p>
<dl>
<dt>Name</dt>
<dd>A unique name for this point category, like &ldquo;Wash breakfast dishes&rdquo;.</dd>
<dt>Default Points</dt>
<dd>Unless the user specifies otherwise, this represents the gain or
loss in points for the client.</dd>
</dl>
<p><img src="/post/2011/04/attachments/img/2011/NewCategoryDialog.png" alt="Add Category Dialog"/></p>
<h3 id="points-log">Points Log</h3>
<p>This sheet contains records of the actual transactions which affect a
client’s point total. It depends on the other worksheets for some of its
information.</p>
<dl>
<dt>Person</dt>
<dd>Who gets the points? <em>&lsquo;People&rsquo;!&lsquo;Name Used&rsquo;</em></dd>
<dt>Points Category</dt>
<dd>What are they getting the points for? <em>&lsquo;Categories&rsquo;:&lsquo;Name&rsquo;</em></dd>
<dt>Points</dt>
<dd>How many points are they getting? Based on <em>&lsquo;Categories&rsquo;:&lsquo;Default
Points&rsquo;</em></dd>
<dt>Date</dt>
<dd>When did they do whatever it was that got (or cost) them points?</dd>
</dl>
<p><img src="/post/2011/04/attachments/img/2011/PointsLoggerDialog.png" alt="Points Logger Dialog"/></p>
<h3 id="whats-missing">What’s Missing</h3>
<p>There is no sheet to track inventory for items available in the
incentive store. The items and their value vary too much for this to be
a practical feature right now.</p>
<h3 id="what-do-i-have-now">What Do I Have Now?</h3>
<p>I have an incredibly dull spreadsheet.</p>
<p><img src="/post/2011/04/attachments/img/2011/spreadsheet-01.png" alt="spreadsheet"/></p>
<h2 id="whats-next">What’s Next?</h2>
<p>I plan to spend the next few days — or weeks, depending on how much
bloggy spreadsheet time I have — exploring Google Apps Script,
particularly the
<a href="http://code.google.com/googleapps/appsscript/service_spreadsheet.html">Spreadsheet</a>
and <a href="http://code.google.com/googleapps/appsscript/service_ui.html">UI</a>
Services, in order to implement the dialog boxes I have so lovingly
created mockups of. I will be taking it in small steps, depending on
what I can manage in my copious free time. My next post will cover the
simplest dialog: creating new Categories.</p>
<aside class="admonition note">
<p class="admonition-title">Note</p>
<p>I did spent a few days exploring Google Apps Script, but decided that
the Excel spreadsheet was working well enough that I should focus my
effort on the
<a href="https://github.com/brianwisti/marysplace-rails">marysplace-rails</a>
project.</p>
</aside>
]]></content:encoded>
</item>
<item>
  <title>Post: Elaborate Answers To Simple Questions</title>
  <link>https://randomgeekery.org/post/2011/04/elaborate-answers-to-simple-questions/</link>
  <pubDate>Thu, 14 Apr 2011 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2011/04/elaborate-answers-to-simple-questions/</guid>
  <description>Use string methods instead of importing string. Build email messages with the standard email library.
I saw an email last night from somebody with a simple Python question.
Hi,
… I have some issues in my python program. I have installed python27 in C:Python27. I started learning python with small programs. I’m saving all python programs in C:ROUGH When I am executing these scripts through command prompt facing some problem with “import”.</description>
   <category>post</category> 
   <category>post</category> 
   <category>python</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>Use <code>string</code> methods instead of importing <code>string</code>. Build email messages
with the standard <a href="http://docs.python.org.library.email.html">email</a>
library.</p>
<p>I saw an email last night from somebody with a simple
<a href="/card/python/">Python</a> question.</p>
<blockquote>
<p>Hi,</p>
<p>… I have some issues in my python program. I have installed python27
in C:Python27. I started learning python with small programs. I’m
saving all python programs in C:ROUGH When I am executing these
scripts through command prompt facing some problem with &ldquo;import&rdquo;.
Please help me out</p>
<p>My program:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!python</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="c1">#import C:\Python27\Lib\string</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Subject</span> <span class="o">=</span> <span class="s2">&#34;Testmail&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">To</span> <span class="o">=</span> <span class="s2">&#34;yeahright@nonotreallyawebsiteihope.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">From</span> <span class="o">=</span> <span class="s2">&#34;yeahright@nonotreallyawebsiteihope.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;Test&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">body</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="n">join</span><span class="p">((</span><span class="s2">&#34;From: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">From</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;To: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">To</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;Subject: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span><span class="n">Subject</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">text</span>
</span></span><span class="line"><span class="cl">                    <span class="p">),</span><span class="s2">&#34;</span><span class="se">\r\n</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">body</span>
</span></span></code></pre></div><p>ERROR IS:</p>
<pre tabindex="0"><code>C:\Python27&gt;python.exe c:\ROUGH\addingsubtofrm.py
Traceback (most recent call last):
  File &#34;c:\ROUGH\addingsubtofrm.py&#34;, line 12, in &lt;module&gt;
    body = string.join((&#34;From: %s&#34; % From,
AttributeError: &#39;module&#39; object has no attribute &#39;join&#39;
</code></pre><p>…​</p>
</blockquote>
<p>For some reason, I do not get any error when I try to run her code with
Python 2.7.1 on Windows XP. That’s okay, though. I can still help a
little bit on the style.</p>
<p>Although <code>join</code> is part of the
<a href="http://docs.python.org/library/string.html">string</a> module, it is also
directly attached to strings. So instead of using <code>string.join(items, separator)</code>, you could use <code>separator.join(items)</code>. That’s considered
the standard way to join a list of items into a single string these
days.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">Subject</span> <span class="o">=</span> <span class="s2">&#34;Testmail&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">To</span> <span class="o">=</span> <span class="s2">&#34;yeahright@nonotreallyawebsiteihope.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">From</span> <span class="o">=</span> <span class="s2">&#34;yeahright@nonotreallyawebsiteihope.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;Test&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">body</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\r\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">((</span><span class="s2">&#34;From: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">From</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;To: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">To</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;Subject: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span><span class="n">Subject</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">text</span>
</span></span><span class="line"><span class="cl">                    <span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">body</span>
</span></span></code></pre></div><p>This probably answers her question, but I am apparently in the mood to
spend a lot of time writing about Python basics. Sounds like blog gold
to me.</p>
<p>There’s a problem with <code>body</code> if you want to use it for an actual email
message. There needs to be a blank line between the headers and the
body. One way to do that is to use <code>join</code> twice: once to build the
header block and again to create a properly laid-out email message.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">Subject</span> <span class="o">=</span> <span class="s2">&#34;Testmail&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">To</span> <span class="o">=</span> <span class="s2">&#34;yeahright@nonotreallyawebsiteihope.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">From</span> <span class="o">=</span> <span class="s2">&#34;yeahright@nonotreallyawebsiteihope.com&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;Test&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">header_block</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\r\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">((</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;From: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">From</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;To: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">To</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Subject: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">Subject</span>
</span></span><span class="line"><span class="cl">    <span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># A full email has a blank line between the header block and the message body</span>
</span></span><span class="line"><span class="cl"><span class="n">body</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\r\n\r\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">((</span><span class="n">header_block</span><span class="p">,</span> <span class="n">text</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">body</span>
</span></span></code></pre></div><p>The header block still looks a little clumsy. I am sure there is a
prettier way to generate it. When I look at how the header block is
printed, I realize that it looks a lot like a Python dictionary. Does
the code look any clearer if I use a dictionary?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Subject&#34;</span><span class="p">:</span> <span class="s2">&#34;Testmail&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;To&#34;</span><span class="p">:</span> <span class="s2">&#34;yeahright@nonotreallyawebsiteihope.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;From&#34;</span><span class="p">:</span> <span class="s2">&#34;yeahright@nonotreallyawebsiteihope.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;Test&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Each line of a header block contains a single email header,</span>
</span></span><span class="line"><span class="cl"><span class="c1"># which looks like &#34;Header-Field: Header-Value&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">header_block</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\r\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">((</span><span class="s2">&#34;From: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">headers</span><span class="p">[</span><span class="s1">&#39;From&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                            <span class="s2">&#34;To: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">headers</span><span class="p">[</span><span class="s1">&#39;To&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                            <span class="s2">&#34;Subject: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">headers</span><span class="p">[</span><span class="s1">&#39;Subject&#39;</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># A full email has a blank line between the header block and the message body</span>
</span></span><span class="line"><span class="cl"><span class="n">body</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\r\n\r\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">((</span><span class="n">header_block</span><span class="p">,</span> <span class="n">text</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">body</span>
</span></span></code></pre></div><p>Well, no. Not really. I think I’m actually typing <em>more</em> than I was
before, and it’s not really any easier to read. It’s all that <code>&quot;From: %s&quot; % headers['From']&quot;</code> nonsense.</p>
<p><code>join</code> takes a sequence. I do not have to hand it a literal like we have
been doing so far. Let’s build a list of header lines, and <em>then</em> join
them.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Subject&#34;</span><span class="p">:</span> <span class="s2">&#34;Testmail&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;To&#34;</span><span class="p">:</span> <span class="s2">&#34;yeahright@nonotreallyawebsiteihope.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;From&#34;</span><span class="p">:</span> <span class="s2">&#34;yeahright@nonotreallyawebsiteihope.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;Test&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Each line of a header block contains a single email header,</span>
</span></span><span class="line"><span class="cl"><span class="c1"># which looks like &#34;Header-Field: Header-Value&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">header_lines</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">field</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">headers</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">header_line</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">%s</span><span class="s2">: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">field</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">header_lines</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">header_line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">header_block</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\r\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">header_lines</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># A full email has a blank line between the header block and the message body</span>
</span></span><span class="line"><span class="cl"><span class="n">body</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\r\n\r\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">((</span><span class="n">header_block</span><span class="p">,</span> <span class="n">text</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">body</span>
</span></span></code></pre></div><p>It is easier to read, even if it is a little longer. We are building a
list of header lines by stepping through each of the key/value pairs
that make up the <code>headers</code> dictionary. Oh, and don’t worry about what
order the items are printed in. That order doesn’t matter in email
messages.</p>
<p>One thing — and this is a little thing — is that it takes us four lines
of code to build the list. Like I said, it’s a little thing. But
building lists like this is so common that Python provides powerful
tools called <a href="http://docs.python.org/tutorial/datastructures.html#list-comprehensions">list
comprehensions</a>,
which can reduce those four lines into one.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Subject&#34;</span><span class="p">:</span> <span class="s2">&#34;Testmail&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;To&#34;</span><span class="p">:</span> <span class="s2">&#34;yeahright@nonotreallyawebsiteihope.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;From&#34;</span><span class="p">:</span> <span class="s2">&#34;yeahright@nonotreallyawebsiteihope.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;Test&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Each line of a header block contains a single email header,</span>
</span></span><span class="line"><span class="cl"><span class="c1"># which looks like &#34;Header-Field: Header-Value&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">header_lines</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;</span><span class="si">%s</span><span class="s2">: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">field</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="n">field</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="ow">in</span> <span class="n">headers</span><span class="o">.</span><span class="n">items</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl"><span class="n">header_block</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\r\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">header_lines</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># A full email has a blank line between the header block and the message body</span>
</span></span><span class="line"><span class="cl"><span class="n">body</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\r\n\r\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">((</span><span class="n">header_block</span><span class="p">,</span> <span class="n">text</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">body</span>
</span></span></code></pre></div><p>All right. Now if this were an <em>actual</em> email, there are some missing
headers. There are probably also some details missing that are related
to email handling. Rather than try to figure out what’s missing, I’m
going to suggest that you use the
<a href="http://docs.python.org.library.email.html">email</a> library that comes
standard with Python.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">email.mime.text</span> <span class="kn">import</span> <span class="n">MIMEText</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Subject&#34;</span><span class="p">:</span> <span class="s2">&#34;Testmail&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;To&#34;</span><span class="p">:</span> <span class="s2">&#34;yeahright@nonotreallyawebsiteihope.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;From&#34;</span><span class="p">:</span> <span class="s2">&#34;yeahright@nonotreallyawebsiteihope.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;Test&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">msg</span> <span class="o">=</span> <span class="n">MIMEText</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">field</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">headers</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">msg</span><span class="p">[</span><span class="n">field</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">msg</span><span class="o">.</span><span class="n">as_string</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="err">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">And</span> <span class="n">what</span> <span class="n">does</span> <span class="n">the</span> <span class="n">end</span> <span class="n">result</span> <span class="n">look</span> <span class="n">like</span><span class="err">?</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">```</span> <span class="n">http</span>
</span></span><span class="line"><span class="cl"><span class="n">Content</span><span class="o">-</span><span class="n">Type</span><span class="p">:</span> <span class="n">text</span><span class="o">/</span><span class="n">plain</span><span class="p">;</span> <span class="n">charset</span><span class="o">=</span><span class="s2">&#34;us-ascii&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">MIME</span><span class="o">-</span><span class="n">Version</span><span class="p">:</span> <span class="mf">1.0</span>
</span></span><span class="line"><span class="cl"><span class="n">Content</span><span class="o">-</span><span class="n">Transfer</span><span class="o">-</span><span class="n">Encoding</span><span class="p">:</span> <span class="mi">7</span><span class="n">bit</span>
</span></span><span class="line"><span class="cl"><span class="n">To</span><span class="p">:</span> <span class="n">yeahright</span><span class="nd">@nonotreallyawebsiteihope.com</span>
</span></span><span class="line"><span class="cl"><span class="n">From</span><span class="p">:</span> <span class="n">yeahright</span><span class="nd">@nonotreallyawebsiteihope.com</span>
</span></span><span class="line"><span class="cl"><span class="n">Subject</span><span class="p">:</span> <span class="n">Testmail</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Test</span>
</span></span></code></pre></div><p>There you go. If your end goal is generating emails, use the Python
email library.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: A Glance at Client-Side Frameworks</title>
  <link>https://randomgeekery.org/post/2011/03/a-glance-at-client-side-frameworks/</link>
  <pubDate>Wed, 16 Mar 2011 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2011/03/a-glance-at-client-side-frameworks/</guid>
  <description>&lt;p&gt;I was one of those lucky suckers who got a &lt;a href=&#34;http://www.google.com/chromeos/pilot-program-cr48.html&#34;&gt;Google CR-48 netbook&lt;/a&gt; a few months back.
Although I’ve failed miserably in making it my primary machine, it has gotten me thinking a lot more about browser applications and JavaScript frameworks.
That’s good.
It got me out of my twelve year server-side rut.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>javascript</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>I was one of those lucky suckers who got a <a href="http://www.google.com/chromeos/pilot-program-cr48.html">Google CR-48 netbook</a> a few months back.
Although I&rsquo;ve failed miserably in making it my primary machine, it has gotten me thinking a lot more about browser applications and JavaScript frameworks.
That&rsquo;s good.
It got me out of my twelve year server-side rut.</p>
<p>A lot has happened to JavaScript since I started hating it in 1998.
It&rsquo;s a real programming language, with multiple solid implementations.
Smart people have been making it work from the command line, while other smart people have been establishing a solid base to build browser applications on.
I&rsquo;ve been looking at a few different frameworks, thinking that I&rsquo;ll find the One True Framework.
No such luck.
There are three biggies that I&rsquo;m going to end up bouncing back and forth between.</p>
<h2 id="jquery">jQuery</h2>
<p><a href="https://jquery.com">jQuery</a> gives me what I need to add awesome interactive features to a site <em>right now</em>.
I would like to compare its virtue of immediate gratification to that of PHP.
There&rsquo;s a lot of hate out there for PHP, so I won&rsquo;t.
Except I just did.
Oh, the inconsistency.</p>
<h2 id="google-closure">Google Closure</h2>
<p><a href="https://code.google.com/closure">Google Closure</a> is this massive collection that seemingly provides everything that core JavaScript is missing:
type annotations, templating, compilation, and probably a lot of other stuff.
Oh, and the basic framework stuff you get in toolkits like jQuery.
It could be amazing.
It could be terrible.
It will take me a while to find out.
One thing&rsquo;s for sure.
Closure rewards the patient more than those of us who like instant gratification.</p>
<h2 id="sproutcore">Sproutcore</h2>
<p><a href="https://www.sproutcore.com">SproutCore</a> is somewhere in between the two.
There&rsquo;s some instant gratification, assuming you&rsquo;re already familiar with basic MVC as seen on the Web.
It&rsquo;s designed for building full-scale client applications, though.
Stuff like the <a href="https://www.npr.org/webapp">NPR webapp</a>.
Closure is as well, but it&rsquo;s not as locked into the single point of entry that SproutCore seems to be.
It could be.
I don&rsquo;t know.
I&rsquo;m still learning about <a href="http://code.google.com/p/jsdoc-toolkit/">JSDoc</a> tags.</p>
<p>SproutCore is the most interesting to me right now, probably because it&rsquo;s the newest.
Its main disadvantage to me is that it targets HTML 5.
My job forces me to maintain compatibility with Internet Explorer 6, which is most definitely <em>not</em> compatible with HTML 5 features.
So I can learn SproutCore, but should not expect to use it on the clock.</p>
<h1 id="conclusion">Conclusion</h1>
<p>There you have it.
Three frameworks that charm me in different ways.
I plan to more or less learn each of them.
All because Google sent me a netbook.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Where&#39;d He Go?</title>
  <link>https://randomgeekery.org/post/2010/07/whered-he-go/</link>
  <pubDate>Tue, 27 Jul 2010 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2010/07/whered-he-go/</guid>
  <description>&lt;p&gt;I haven’t updated this blog in a while, and to be honest I don’t really plan to. I tend to dump my thoughts of the moment on
&lt;a href=&#34;http://www.google.com/profiles/brian.wisti#buzz&#34;&gt;Google Buzz&lt;/a&gt;, while the content I intend to improve and maintain
is still at &lt;a href=&#34;https://randomgeekery.org/&#34;&gt;my site&lt;/a&gt;.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>blogspot</category> 
  <content:encoded><![CDATA[<p>I haven&rsquo;t updated this blog in a while, and to be honest I don&rsquo;t really plan to. I tend to dump my thoughts of the moment on
<a href="http://www.google.com/profiles/brian.wisti#buzz">Google Buzz</a>, while the content I intend to improve and maintain
is still at <a href="/">my site</a>.</p>
<h2 id="a-few-years-pass-">A few years pass &hellip;</h2>
<p>Heh. Google Buzz. Well I do spend time on <a href="https://plus.google.com/&#43;BrianWisti">Google+</a>, but I am elsewhere too.
Check the links in the footer for your preferred social network.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Reading the Modern Perl Book</title>
  <link>https://randomgeekery.org/post/2010/04/reading-the-modern-perl-book/</link>
  <pubDate>Tue, 06 Apr 2010 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2010/04/reading-the-modern-perl-book/</guid>
  <description>&lt;p&gt;I’m in the Perl phase of my language obsession rotation. I’ve created a handy
language obsession table you can use to simulate the behavior for your favorite
&lt;a href=&#34;https://sjgames.com/gurps/&#34;&gt;GURPS&lt;/a&gt; Geek campaign.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>I&rsquo;m in the Perl phase of my language obsession rotation. I&rsquo;ve created a handy
language obsession table you can use to simulate the behavior for your favorite
<a href="https://sjgames.com/gurps/">GURPS</a> Geek campaign.</p>
<p>Roll 3d6 for the subject.</p>
<table>
<thead>
  <tr>
    <th>Roll</th>
    <th>Result</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>3-6</td>
    <td><a href="http://perl.org">Perl</a></td>
  </tr>
  <tr>
    <td>7-9</td>
    <td><a href="http://python.org">Python</a></td>
  </tr>
  <tr>
    <td>10-11</td>
    <td><a href="http://www.ruby-lang.org/en/">Ruby</a></td>
  </tr>
  <tr>
    <td>12-13</td>
    <td><a href="http://www.parrot.org/">Parrot</a></td>
  </tr>
  <tr>
    <td>14</td>
    <td><a href="http://php.net">PHP</a></td>
  </tr>
  <tr>
    <td>15-18</td>
    <td>Something shiny I found on the Web. You can get plausible results by selecting a random entry from the <a href="http://en.wikipedia.org/wiki/List_of_programming_languages">Wikipedia list of programming languages</a>.
    </td>
  </tr>
</tbody>
</table>
<p>Every week after the first, roll 1d6.</p>
<table>
<thead>
  <tr>
    <th>Roll</th>
    <th>Result</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>1-3</td><td>Continue last week's  language</td>
  </tr>
  <tr>
    <td>4-6</td><td>Roll on Table 1 for a new language</td>
  </tr>
</tbody>
</table>
<p>Alternately, you can set a duration of 1d6 weeks. That&rsquo;s handy for an ADHD NPC
geek, where you don&rsquo;t want to check every week. Note that this is free time
obsession. The language at <code>$work</code> is whatever <code>$work</code> requires.</p>
<p>I don&rsquo;t know why I felt the need to share this. I&rsquo;ve already spent more time on
that silly table than the actual subject I wanted to write about.</p>
<p>So anyways - I&rsquo;m messing about with Perl. I have been reading chromatic&rsquo;s
<a href="https://modernperlbooks.com/mt/">Modern Perl blog</a> for a while - even when I&rsquo;m not in a Perl cycle. It&rsquo;s
good, you should try it out. He presents a needed perspective on Perl as
something more than a musty system administration language.</p>
<p>chromatic is also writing a book and maintaining the <a href="https://github.com/chromatic/modern_perl_book">draft</a> on github. I
finally decided I wanted to read that draft. The README and a tiny bit of Git
knowledge provide all I need.</p></p>
<pre tabindex="0"><code>$ git clone git://github.com/chromatic/modern_perl_book.git
$ cd modern_perl_book
$ perl build/tools/build_chapters.pl
</code></pre><p>Now there is a handful of POD files in build/chapters which I could read with
perldoc.</p>
<pre tabindex="0"><code>$ ls build/chapters
chapter_01.pod  chapter_03.pod  chapter_05.pod  chapter_07.pod  chapter_09.pod  chapter_11.pod  chapter_13.pod  chapter_15.pod
chapter_02.pod  chapter_04.pod  chapter_06.pod  chapter_08.pod  chapter_10.pod  chapter_12.pod  chapter_14.pod  chapter_16.pod
$ perldoc build/chapters/chapter_01.pod
</code></pre><p>I can also generate HTML for those days when perldoc just isn&rsquo;t making me
happy.</p>
<pre tabindex="0"><code>$ perl build/tools/build_html.pl
Can&#39;t locate Pod/PseudoPod/HTML.pm in @INC (@INC contains: /usr/local/lib/perl5/5.10.1/darwin-2level /usr/local/lib/perl5/5.10.1 /usr/local/lib/perl5/site_perl/5.10.1/darwin-2level /usr/local/lib/perl5/site_perl/5.10.1 /usr/local/lib/perl5/site_perl .) at build/tools/build_html.pl line 6.
BEGIN failed--compilation aborted at build/tools/build_html.pl line 6.
</code></pre><p>Oops. It looks like there&rsquo;s a dependency. No problem.</p>
<pre tabindex="0"><code>$ sudo cpan Pod::PseudoPod::HTML
$ perl build/tools/build_html.pl
$ ls build/html
chapter_01.html chapter_04.html chapter_07.html chapter_10.html chapter_13.html chapter_16.html
chapter_02.html chapter_05.html chapter_08.html chapter_11.html chapter_14.html style.css
chapter_03.html chapter_06.html chapter_09.html chapter_12.html chapter_15.html
</code></pre><p>Now I can open the chapters in my favorite Web browser.</p>
<pre tabindex="0"><code>$ elinks build/html/chapter_01.html
</code></pre><p>From here, I can pay attention to chromatic&rsquo;s <a href="https://twitter.com/chromatic_x">tweets</a> — or his <a href="https://identi.ca/chromatic">dents</a>,
since he seems more active on Identi.ca - or watch the <code>modern_perl_book</code>
repository on github. Whenever he mentions new content, I will refresh and
rebuild.</p>
<pre tabindex="0"><code>$ git pull
$ perl build/tools/build_chapters.pl
$ perl build/tools/build_html.pl
</code></pre><p>I don&rsquo;t want to remember three whole commands. Am I taking <a href="https://c2.com/cgi/wiki?LazinessImpatienceHubris">Laziness</a> too
far? Perhaps. Nevertheless, here&rsquo;s a Perl script to handle the task. It should
only rebuild the chapters and HTML if there was an update in the repository.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env perl</span>
</span></span><span class="line"><span class="cl"><span class="c1"># refresh.pl</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Modern::Perl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$git_pull</span> <span class="o">=</span> <span class="sb">`git pull`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span> <span class="nv">$git_pull</span> <span class="o">=~</span> <span class="sr">m{\AAlready up-to-date.}</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">say</span> <span class="s">&#34;No changes to book.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">print</span> <span class="nv">$git_pull</span><span class="p">;</span> <span class="c1"># Show what updates were made.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">say</span> <span class="s">&#34;Building chapters.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">system</span> <span class="sx">qw(perl build/tools/build_chapters.pl)</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">say</span> <span class="s">&#34;Building HTML.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">system</span> <span class="sx">qw(perl build/tools/build_html.pl)</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">say</span> <span class="s">&#34;All done. Enjoy the update!&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
</item>
<item>
  <title>Post: Tying Bits Together</title>
  <link>https://randomgeekery.org/post/2010/03/tying-bits-together/</link>
  <pubDate>Thu, 04 Mar 2010 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2010/03/tying-bits-together/</guid>
  <description>&lt;p&gt;I’m working on tying together the blog and my site. A little &lt;a href=&#34;http://jquery.com&#34;&gt;JQuery&lt;/a&gt; magic expands the &lt;a href=&#34;https://randomgeekery.org/card/rss/&#34;&gt;card/RSS&lt;/a&gt; feed of the &lt;a href=&#34;https://randomgeekery.org/card/blogger/&#34;&gt;Blogger&lt;/a&gt; blog for visitors to &lt;a href=&#34;https://randomgeekery.org/card/coolnamehere/&#34;&gt;coolnamehere&lt;/a&gt;. I’ll improve the integration over time, probably by adjusting the template used for the blog. Meanwhile, I have more incentive to use Blogger.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>coolnamehere</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>I&rsquo;m working on tying together the blog and my site. A little <a href="http://jquery.com">JQuery</a> magic expands the <a href="/card/rss/">card/RSS</a> feed of the <a href="/card/blogger/">Blogger</a> blog for visitors to <a href="/card/coolnamehere/">coolnamehere</a>. I&rsquo;ll improve the integration over time, probably by adjusting the template used for the blog. Meanwhile, I have more incentive to use Blogger.</p>
<p>I&rsquo;ll probably add feeds from other services to the site, such as <em>Buzz</em> or Twitter. I use those frequently, and they are great for the short thoughts that don&rsquo;t belong in either a blog post or a static page.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Perl 5.10.1 is available</title>
  <link>https://randomgeekery.org/post/2009/08/perl-5101-is-available/</link>
  <pubDate>Sun, 23 Aug 2009 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2009/08/perl-5101-is-available/</guid>
  <description>Find it at https://perl.org. I can stop whining - for a little bit, at least. About Perl, anyways.</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<p>Find it at <a href="https://perl.org">https://perl.org</a>. I can stop whining - for a little bit, at least. About <a href="/card/perl/">Perl</a>, anyways.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Python Blogger Refresh Part 2 - Settings</title>
  <link>https://randomgeekery.org/post/2009/06/python-blogger-refresh-part-2-settings/</link>
  <pubDate>Fri, 12 Jun 2009 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2009/06/python-blogger-refresh-part-2-settings/</guid>
  <description></description>
   <category>post</category> 
   <category>post</category> 
   <category>blogger</category>  <category>gdata</category>  <category>python</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<h2 id="the-idea">The Idea</h2>
<p>I had to focus my efforts in <a href="/post/2009/06/python-blogger-refresh-part-1/">python-blogger-refresh-part-1</a> on restoring the original functionality of my <a href="/card/python/">Python</a> Blogger script. That&rsquo;s out of the way. I can now start looking at enhancements. The first annoyance - of many - is the fact that Blogger connection settings are hard-coded into the script. Do you want to post to a different blog? That&rsquo;s going to require editing the source.</p>
<p>Let&rsquo;s fix that three ways:</p>
<ol>
<li>Adding the ability to define connection details from the command line</li>
<li>Adding the ability to define connection details from a config file.</li>
<li>Adding the ability to interactively request connection details when they have not been specified on the command line or in a config file.</li>
</ol>
<h3 id="from-the-command-line">From the Command Line</h3>
<p>We&rsquo;re already using <a href="https://docs.python.org/library/optparse.html">optparse</a> , so adding the ability to define connection settings from the command line won&rsquo;t be difficult. Three options are needed:</p>
<ul>
<li>Author Name</li>
<li>Email</li>
<li>Password</li>
</ul>
<p>Add those options in <code>main</code> with <code>parser.add_option</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="kn">from</span> <span class="nn">optparse</span> <span class="kn">import</span> <span class="n">OptionParser</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span> <span class="o">=</span> <span class="n">OptionParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-D&#34;</span><span class="p">,</span> <span class="s2">&#34;--do-tests&#34;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s2">&#34;store_true&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;doTests&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Run built-in doctests&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-f&#34;</span><span class="p">,</span> <span class="s2">&#34;--file&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;filename&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Specify source file for post&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-a&#34;</span><span class="p">,</span> <span class="s2">&#34;--author&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;author&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;The author for this post&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-e&#34;</span><span class="p">,</span> <span class="s2">&#34;--email&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;email&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;The email of the blog owner&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-p&#34;</span><span class="p">,</span> <span class="s2">&#34;--password&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;password&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;The password of the blog owner&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">doTests</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">runTests</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Only process post options if user specified a file to post.</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="n">options</span><span class="o">.</span><span class="n">author</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">raise</span> <span class="ne">NameError</span><span class="p">(</span><span class="s2">&#34;Author required. --help for usage&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="n">options</span><span class="o">.</span><span class="n">email</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">raise</span> <span class="ne">NameError</span><span class="p">(</span><span class="s2">&#34;Email required. --help for usage&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="n">options</span><span class="o">.</span><span class="n">password</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">raise</span> <span class="ne">NameError</span><span class="p">(</span><span class="s2">&#34;Password required. --help for usage&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="ne">NameError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">parser</span><span class="o">.</span><span class="n">print_help</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="n">e</span>
</span></span><span class="line"><span class="cl">            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">author</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">author</span>
</span></span><span class="line"><span class="cl">        <span class="n">email</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">email</span>
</span></span><span class="line"><span class="cl">        <span class="n">password</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">password</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span> <span class="o">=</span> <span class="n">BlogPost</span><span class="p">(</span><span class="n">author</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">postFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">parsePost</span><span class="p">(</span><span class="n">postFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">sendPost</span><span class="p">()</span>
</span></span></code></pre></div><p>Let&rsquo;s see how that behaves. First I&rsquo;ll try using the old way, which is now the wrong way.</p>
<pre tabindex="0"><code>$ python post-to-blog.py -f python-blogger-part-2-settings.mkd
/usr/local/lib/python2.6/dist-packages/gdata/tlslite/utils/cryptomath.py:9: \
DeprecationWarning: the sha module is deprecated; use the hashlib module instead
  import sha
Usage: post-to-blog.py [options]

Options:
  -h, --help            show this help message and exit
  -D, --do-tests        Run built-in doctests
  -f FILENAME, --file=FILENAME
                        Specify source file for post
  -a AUTHOR, --author=AUTHOR
                        The author for this post
  -e EMAIL, --email=EMAIL
                        The email of the blog owner
  -p PASSWORD, --password=PASSWORD
                        The password of the blog owner
Author required. --help for usage
</code></pre><p>That <code>DeprecationWarning</code> is coming from inside GData. I won&rsquo;t worry about it for the moment, but I <em>will</em> keep my eyes open for new releases.</p>
<p>Anyways, how about when running it correctly?</p>
<pre tabindex="0"><code>$ python post-to-blog.py -f python-blogger-part-2-settings.mkd -a &#34;Brian Wisti&#34; \
-e &#34;me@here.com&#34; -p &#34;mysecretpassword&#34;
/usr/local/lib/python2.6/dist-packages/gdata/tlslite/utils/cryptomath.py:9:     \
DeprecationWarning: the sha module is deprecated; use the hashlib module instead
  import sha
</code></pre><p>A quick look at the drafts in my Blogspot dashboard confirms that the code works. That command line has gotten a bit long, though. How about adding a config file?</p>
<h3 id="from-a-config-file">From a Config File</h3>
<p>It&rsquo;s good to have a configuration file holding most of your details. We can keep sensitive information out of the application code, and not have to remember them on the command line every time we run the script.</p>
<p>I am going to make a separate <code>config</code> directory to hold my config. Why? This makes it easier for me to expand my definition of what a configuration <em>is</em>. If I want to use non-core Markdown extensions later - and I will - I can place them here rather than dirtying my Python <code>site-packages</code> folder. Or <code>dist-packages</code>, in Ubuntu&rsquo;s case. Why do they always have to be different?</p>
<p>The actual config file will be a simple ini-style file spiked with <em>key</em>=<em>value</em> lines. Here&rsquo;s mine:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="c1"># config/blog.cfg</span>
</span></span><span class="line"><span class="cl"><span class="k">[connection]</span>
</span></span><span class="line"><span class="cl"><span class="na">author</span><span class="o">=</span><span class="s">Brian Wisti</span>
</span></span><span class="line"><span class="cl"><span class="na">email</span><span class="o">=</span><span class="s">me@here.com</span>
</span></span><span class="line"><span class="cl"><span class="na">password</span><span class="o">=</span><span class="s">mysecretpassword</span>
</span></span></code></pre></div><p>The <a href="http://docs.python.org/library/configparser.html">ConfigParser</a> library will be used to handle opening and reading in these options. Using both a config file and command line parsing is going to require poking a little bit at everything, so I&rsquo;m going to move along slowly.</p>
<p>In <code>main</code>, I&rsquo;ll set up the ConfigParser.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="kn">from</span> <span class="nn">optparse</span> <span class="kn">import</span> <span class="n">OptionParser</span>
</span></span><span class="line"><span class="cl">    <span class="kn">import</span> <span class="nn">ConfigParser</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">config_file</span> <span class="o">=</span> <span class="s2">&#34;config/blog.cfg&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">config</span> <span class="o">=</span> <span class="n">ConfigParser</span><span class="o">.</span><span class="n">ConfigParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">config</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">config_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">parser</span> <span class="o">=</span> <span class="n">OptionParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-D&#34;</span><span class="p">,</span> <span class="s2">&#34;--do-tests&#34;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s2">&#34;store_true&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;doTests&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Run built-in doctests&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-f&#34;</span><span class="p">,</span> <span class="s2">&#34;--file&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;filename&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Specify source file for post&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-a&#34;</span><span class="p">,</span> <span class="s2">&#34;--author&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;author&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;The author for this post&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-e&#34;</span><span class="p">,</span> <span class="s2">&#34;--email&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;email&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;The email of the blog owner&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-p&#34;</span><span class="p">,</span> <span class="s2">&#34;--password&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;password&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;The password of the blog owner&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">doTests</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">runTests</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Allow command line options to overwrite config settings</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">author</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="s2">&#34;author&#34;</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">author</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">email</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="s2">&#34;email&#34;</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">email</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">password</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="s2">&#34;password&#34;</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">author</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="s2">&#34;author&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">email</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="s2">&#34;email&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">password</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="s2">&#34;password&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">ConfigParser</span><span class="o">.</span><span class="n">NoSectionError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="s2">&#34;</span><span class="si">%s</span><span class="s2"> is missing the [connection] section!&#34;</span> <span class="o">%</span> <span class="n">config_file</span>
</span></span><span class="line"><span class="cl">            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">ConfigParser</span><span class="o">.</span><span class="n">NoOptionError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">parser</span><span class="o">.</span><span class="n">print_help</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="n">e</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span> <span class="s2">&#34;Options can be defined in </span><span class="si">%s</span><span class="s2"> or on command line&#34;</span> <span class="o">%</span> <span class="n">config_file</span>
</span></span><span class="line"><span class="cl">            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">post</span> <span class="o">=</span> <span class="n">BlogPost</span><span class="p">(</span><span class="n">author</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">postFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">parsePost</span><span class="p">(</span><span class="n">postFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">sendPost</span><span class="p">()</span>
</span></span></code></pre></div><p>The application reads the configuration file before handling the command line to set up the normal behavior. It still processes the command line, though. Maybe I don&rsquo;t want to keep all of my information in the config, or maybe I&rsquo;m posting to a completely different blog.</p>
<p>It&rsquo;s nice to get the settings both ways, but I think we can be a little nicer still.</p>
<h3 id="interactively">Interactively</h3>
<p>What if there&rsquo;s no config file, or the config file is incomplete, and there are still missing pieces even after parsing the command line? The behavior I would hope for in an app like this is that it would ask me to fill in the missing blanks. Might as well allow the post filename to be one of the blanks.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">password</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="s2">&#34;password&#34;</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="s2">&#34;filename&#34;</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">option</span> <span class="ow">in</span> <span class="p">[</span> <span class="s2">&#34;author&#34;</span><span class="p">,</span> <span class="s2">&#34;email&#34;</span><span class="p">,</span> <span class="s2">&#34;password&#34;</span><span class="p">,</span> <span class="s2">&#34;filename&#34;</span> <span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">value</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="n">option</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">ConfigParser</span><span class="o">.</span><span class="n">NoOptionError</span><span class="p">,</span> <span class="ne">NameError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">value</span> <span class="o">=</span> <span class="n">raw_input</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">%s</span><span class="s2">: &#34;</span> <span class="o">%</span> <span class="n">option</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">config</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&#34;connection&#34;</span><span class="p">,</span> <span class="n">option</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span></span></code></pre></div><p>Hey, it works and I don&rsquo;t even have to use a config file if I don&rsquo;t want to!</p>
<p>The only problem is that now I&rsquo;ve messed up the way testing behaves.</p>
<pre tabindex="0"><code>$ python post-to-blog.py -D
/usr/local/lib/python2.6/dist-packages/gdata/tlslite/utils/cryptomath.py:\
9: DeprecationWarning: the sha module is deprecated; use the hashlib modu\
le instead
  import sha
filename:
</code></pre><p>That&rsquo;s easy enough to fix. I&rsquo;ll just exit after running the tests. You would think I would have  noticed that before. Why would I? I never used the <code>-f</code> flag at the same time as the <code>-D</code> flag, so this issue wouldn&rsquo;t have come up.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">doTests</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">runTests</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span></code></pre></div><p>Let&rsquo;s stop here and get ready for the next leg.</p>
<h3 id="what-was-accomplished">What Was Accomplished</h3>
<p>At the start of this post, we had a script which would submit a blog posting based on a filename command parameter, using connection settings that were hard-coded into the script. After a little fiddling around, we&rsquo;ve added the ability to get all connection details from the command line, from a configuration file, from interactive input, or some combination of all three. That&rsquo;s a pretty big step in making this blog post code more useful for people who aren&rsquo;t me.</p>
<h2 id="next-time">Next Time</h2>
<p>This code gets the job done, but I will freely admit that this code is getting ugly. Half the application has tests, and the other half is in <code>main</code>. Next time I visit this code I&rsquo;ll have to take a long hard look at refactoring and maybe adding some tests for the stuff that is currently in <code>main</code>. I should also look at packaging the whole thing up with <a href="https://docs.python.org/library/distutils.html">distutils</a>. The next post is going to be a long one, isn&rsquo;t it?</p>
<h2 id="getting-the-code">Getting The Code</h2>
<p>Although it&rsquo;s still small enough to reasonably paste the code into this blog posting, I think it might be a little easier for folks to work with if they just had an archive of what&rsquo;s been done so far.  I&rsquo;m going to start making it available directly from coolnamehere.</p>
<blockquote>
<p>[!NOTE] 2015-03-28
Oh, <em>that&rsquo;s</em> what that zipfile was for. No, it&rsquo;s long gone now.</p>
</blockquote>]]></content:encoded>
</item>
<item>
  <title>Post: Python Blogger Refresh, Part 1</title>
  <link>https://randomgeekery.org/post/2009/06/python-blogger-refresh-part-1/</link>
  <pubDate>Tue, 09 Jun 2009 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2009/06/python-blogger-refresh-part-1/</guid>
  <description></description>
   <category>post</category> 
   <category>post</category> 
   <category>blogger</category>  <category>gdata</category>  <category>markdown</category>  <category>python</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<h2 id="the-idea">The Idea</h2>
<p>I  <a href="/post/2007/12/python-loves-blogger-part-1/">wrote a post</a> a while back about using <a href="/card/python/">Python</a> to write <a href="http://blogspot.com">Blogspot</a> posts from the command line. It took me about two weeks to completely forget about it. Still, it&rsquo;s one of the few posts on this blog that gets regular visits, and the code &hellip; well, the code is not great. It was a fair effort, but it didn&rsquo;t even accomplish the things I had initially set out to do. Account information is hard-coded into the code, for example. I also blundered along haphazardly with parsing metadata information myself despite the fact that <a href="https://pypi.python.org/pypi/Markdown">Python Markdown</a> has an extension which is perfectly capable of <a href="https://pythonhosted.org/Markdown/extensions/meta_data.html">handling metadata</a>. Well, let&rsquo;s look at that code again.</p>
<!--more-->
<p>There&rsquo;s a fresh install of <a href="http://ubuntu.com">Ubuntu</a> 9.04 on my laptop and I&rsquo;ve got projects I feel like talking about. So let&rsquo;s get started.</p>
<p>The basic flow will be the same. Given a command line that looks like this:</p>
<pre tabindex="0"><code>$ python post-to-blog.py &lt;post.txt&gt;
</code></pre><ol>
<li>Load settings</li>
<li>Create a HTML formatted string based on the Markdown-formatted text found in <code>post.txt</code></li>
<li>Request that Blogger store the post using post data and user settings</li>
<li>Report the result of the publish request.</li>
</ol>
<p>I&rsquo;ll be starting from the code that already exists in the earlier posts. We can start this project with confidence once we have everything set up and we&rsquo;re sure the old code still does what we expect it to.</p>
<h2 id="setup">Setup</h2>
<p>Ubuntu 9.04 already has a copy of Python 2.6 installed. I suppose I could grab a fresh copy of the Python source and build it myself, but I don&rsquo;t really feel like it right now. Sometimes I&rsquo;m just lazy. Ubuntu&rsquo;s 2.6 will work well enough for my needs.</p>
<p>Modules are a different matter. I want fresh copies of Python Markdown and <a href="https://github.com/google/gdata-python-client">GData</a>, rather than the somewhat dated modules that are available in the repository. There are a fair number of bug fixes and new features in the latest versions.</p>
<pre tabindex="0"><code>$ cd ~/src
$ wget http://gdata-python-client.googlecode.com/files/gdata-1.3.3.tar.gz
$ tar xfz gdata-1.3.3.tar.gz
$ cd gdata-1.3.3/
$ sudo python setup.py install
$ cd ../
$ wget http://pypi.python.org/packages/source/M/Markdown/Markdown-2.0.tar.gz
$ tar xfvz Markdown-2.0.tar.gz
$ cd Markdown-2.0/
$ sudo python setup.py install
</code></pre><h2 id="the-starting-code">The Starting Code</h2>
<p>Now that I have the most important dependencies installed, I can revisit the code from the earlier posts. There&rsquo;s no local copy of the code, so I will just copy and paste the original code, run the tests, and share the starting code. What could possibly go wrong?</p>
<pre tabindex="0"><code>$ cd ~/Projects/python-blogger
$ python post-to-blog.py -D
...
***Test Failed*** 19 failures.
</code></pre><p>Ouch. Something has gone horribly wrong in copying and pasting the code from the posts, the module behaviors have changed, or maybe they never worked as well as I thought they did. Either way, this is bad. Let me fix these issues and then I&rsquo;ll share the <em>new</em> starting code with you.</p>
<h2 id="the-new-starting-code">The New Starting Code</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># post-to-blog.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">markdown</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">xml.etree</span> <span class="kn">import</span> <span class="n">ElementTree</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">gdata</span> <span class="kn">import</span> <span class="n">service</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">gdata</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">atom</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BlogPost</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;A single posting for a blog owned by a Blogger account
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    &gt;&gt;&gt; post = BlogPost(&#39;Brian Wisti&#39;, &#39;me@here.com&#39;, &#39;mysecretpassword&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">    &gt;&gt;&gt; post.body = &#39;This is a paragraph&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">    &gt;&gt;&gt; print post.body
</span></span></span><span class="line"><span class="cl"><span class="s2">    &lt;p&gt;This is a paragraph&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">author</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">config</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__author</span> <span class="o">=</span> <span class="n">author</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__account</span> <span class="o">=</span> <span class="n">account</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__password</span> <span class="o">=</span> <span class="n">password</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">set_body</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bodyText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Stores plain text which will be used as the post body
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post = BlogPost(&#39;Brian Wisti&#39;, &#39;me@here.com&#39;, &#39;mysecretpassword&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.set_body(&#39;This is a paragraph&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="n">bodyText</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">get_body</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Access a HTML-formatted version of the post body
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post = BlogPost(&#39;Brian Wisti&#39;, &#39;me@here.com&#39;, &#39;mysecretpassword&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.set_body(&#39;This is a paragraph&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; print post.get_body()
</span></span></span><span class="line"><span class="cl"><span class="s2">        &lt;p&gt;This is a paragraph&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">markdown</span><span class="o">.</span><span class="n">markdown</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">body</span> <span class="o">=</span> <span class="nb">property</span><span class="p">(</span><span class="n">get_body</span><span class="p">,</span> <span class="n">set_body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parseConfig</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">configText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Reads and stores the directives from the post&#39;s config header.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post = BlogPost(&#39;Brian Wisti&#39;, &#39;me@here.com&#39;, &#39;mysecretpassword&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; import os
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; myConfig = os.linesep.join([&#34;key1: value1&#34;, &#34;key2: value2&#34;])
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.parseConfig(myConfig)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.config[&#39;key1&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#39;value1&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.config[&#39;key2&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#39;value2&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">textLines</span> <span class="o">=</span> <span class="n">configText</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">textLines</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parsePost</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">postText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Parses the contents of a full post, including header and body.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; import os
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; myText = os.linesep.join([&#34;title: Test&#34;, &#34;--&#34;, &#34;This is a test&#34;])
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post = BlogPost(&#39;Brian Wisti&#39;, &#39;me@here.com&#39;, &#39;mysecretpassword&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.parsePost(myText)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; print post.config[&#39;title&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">        Test
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; print post.body
</span></span></span><span class="line"><span class="cl"><span class="s2">        &lt;p&gt;This is a test&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">header</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="n">postText</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;--&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">parseConfig</span><span class="p">(</span><span class="n">header</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="nf">sendPost</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;&#34;&#34;Log into Blogger and submit my already parsed post&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Authenticate using ClientLogin</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="n">GDataService</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__account</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">__password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span><span class="o">.</span><span class="n">source</span> <span class="o">=</span> <span class="s1">&#39;post-to-blog.py_v01.0&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span><span class="o">.</span><span class="n">service</span> <span class="o">=</span> <span class="s1">&#39;blogger&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span><span class="o">.</span><span class="n">server</span> <span class="o">=</span> <span class="s1">&#39;www.blogger.com&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span><span class="o">.</span><span class="n">ProgrammaticLogin</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Get the blog ID</span>
</span></span><span class="line"><span class="cl">      <span class="n">query</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="n">query</span><span class="o">.</span><span class="n">feed</span> <span class="o">=</span> <span class="s1">&#39;/feeds/default/blogs&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="n">feed</span> <span class="o">=</span> <span class="n">blogger</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">query</span><span class="o">.</span><span class="n">ToUri</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">      <span class="n">blog_id</span> <span class="o">=</span> <span class="n">feed</span><span class="o">.</span><span class="n">entry</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">GetSelfLink</span><span class="p">()</span><span class="o">.</span><span class="n">href</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Create the entry to insert.</span>
</span></span><span class="line"><span class="cl">      <span class="n">entry</span> <span class="o">=</span> <span class="n">gdata</span><span class="o">.</span><span class="n">GDataEntry</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="n">entry</span><span class="o">.</span><span class="n">author</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">atom</span><span class="o">.</span><span class="n">Author</span><span class="p">(</span><span class="n">atom</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">__author</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">      <span class="n">entry</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Title</span><span class="p">(</span><span class="s1">&#39;xhtml&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">      <span class="n">entry</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Content</span><span class="p">(</span><span class="n">content_type</span><span class="o">=</span><span class="s1">&#39;html&#39;</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Assemble labels, if any</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="s1">&#39;tags&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="n">tags</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;tags&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="k">for</span> <span class="n">tag</span> <span class="ow">in</span> <span class="n">tags</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">              <span class="n">category</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Category</span><span class="p">(</span><span class="n">term</span><span class="o">=</span><span class="n">tag</span><span class="p">,</span> <span class="n">scheme</span><span class="o">=</span><span class="s1">&#39;http://www.blogger.com/atom/ns#&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">              <span class="n">entry</span><span class="o">.</span><span class="n">category</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">category</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Decide whether this is a draft.</span>
</span></span><span class="line"><span class="cl">      <span class="n">control</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Control</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="n">control</span><span class="o">.</span><span class="n">draft</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Draft</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;yes&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">entry</span><span class="o">.</span><span class="n">control</span> <span class="o">=</span> <span class="n">control</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Submit it!</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span><span class="o">.</span><span class="n">Post</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="s1">&#39;/feeds/&#39;</span> <span class="o">+</span> <span class="n">blog_id</span> <span class="o">+</span> <span class="s1">&#39;/posts/default&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">runTests</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="kn">import</span> <span class="nn">doctest</span>
</span></span><span class="line"><span class="cl">    <span class="n">doctest</span><span class="o">.</span><span class="n">testmod</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="kn">from</span> <span class="nn">optparse</span> <span class="kn">import</span> <span class="n">OptionParser</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span> <span class="o">=</span> <span class="n">OptionParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-D&#34;</span><span class="p">,</span> <span class="s2">&#34;--do-tests&#34;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s2">&#34;store_true&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;doTests&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Run built-in doctests&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-f&#34;</span><span class="p">,</span> <span class="s2">&#34;--file&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;filename&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Specify source file for post&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">doTests</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">runTests</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span> <span class="o">=</span> <span class="n">BlogPost</span><span class="p">(</span><span class="s1">&#39;Brian Wisti&#39;</span><span class="p">,</span> <span class="s1">&#39;me@here.com&#39;</span><span class="p">,</span> <span class="s1">&#39;mysecretpassword&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">postFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">parsePost</span><span class="p">(</span><span class="n">postFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">sendPost</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="coming-up-next">Coming Up Next</h2>
<p>These posts will be short, since I want to get <em>something</em> up while still getting things done at work. We have our starting point reestablished, and <a href="/post/2009/06/python-blogger-refresh-part-2-settings/">next time</a> we will be concentrating on loading user settings rather than embedding those details right in our code.</p>]]></content:encoded>
</item>
</channel>
</rss>
