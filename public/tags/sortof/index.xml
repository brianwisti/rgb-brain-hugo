<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>sortofonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/sortof/</link>
    <description>
      Recent contentinsortof on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Wed, 08 Jul 2020 21:45:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/sortof/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Tangling code from Hugo content with Raku</title>
  <link>https://randomgeekery.org/post/2020/07/tangling-code-from-hugo-content-with-raku/</link>
  <pubDate>Wed, 08 Jul 2020 21:45:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/07/tangling-code-from-hugo-content-with-raku/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;https://randomgeekery.org/post/2020/07/../../../attachments/img/2020/cover-2020-07-08.jpg&#34; alt=&#34;attachments/img/2020/cover-2020-07-08.jpg&#34;/&gt;
You know what else I can tangle? Yarn!&lt;/p&gt;
&lt;p&gt;I spend a while using &lt;a href=&#34;https://randomgeekery.org/card/raku/&#34;&gt;card/Raku&lt;/a&gt; to extract code from a &lt;a href=&#34;https://randomgeekery.org/card/hugo/&#34;&gt;card/Hugo&lt;/a&gt; post.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>raku-lang</category>  <category>literateprogramming</category>  <category>files</category>  <category>hugo</category>  <category>sortof</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>I could just use Org mode, but noo that's too easy</h2><p><img src="/post/2020/07/../../../attachments/img/2020/cover-2020-07-08.jpg" alt="attachments/img/2020/cover-2020-07-08.jpg"/>
You know what else I can tangle? Yarn!</p>
<p>I spend a while using <a href="/card/raku/">card/Raku</a> to extract code from a <a href="/card/hugo/">card/Hugo</a> post.</p>
<blockquote>
<p><strong>2020-09-03</strong></p>
<p><a href="https://fosstodon.org/@codesections">@codesections@fosstodon.org</a> found a typo! I forgot to <em>show</em> the target file name once command line arguments are in place. It should go <code>raku tangle-fragments.raku index.md</code>.</p>
</blockquote>
<p>Let&rsquo;s say I have a file.  The one you&rsquo;re reading, perhaps.  Well, its original Markdown content.</p>
<p>It has a <a href="/card/hugo/">card/Hugo</a> shortcode in it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">code</span> <span class="na">file</span><span class="o">=</span><span class="s">&#34;hello.py&#34;</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">print(&#34;Hello&#34;)
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">code</span> <span class="p">&gt;</span>}}</span></span></code></pre>
</figure><p>I based <code>{{&lt; code &gt;}}</code> here on a shortcode from the <a href="https://github.com/gohugoio/hugoDocs/blob/master/layouts/shortcodes/code.html">Hugo docs</a>. It presents highlighted code with additional context.</p>
<figure class="highlight">
  <figcaption><tt>hello.py</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"> <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><p>Really handy when you&rsquo;re writing about code.  Thing is, now I have two copies. There&rsquo;s one here in the shortcode, and another in a <code>hello.py</code> file that I&rsquo;m writing about.  I&rsquo;d prefer there was only a single copy.  That way they don&rsquo;t get out of sync.</p>
<p>I <em>could</em> use Hugo&rsquo;s <a href="https://gohugo.io/functions/readfile/">readFile</a> function in a new shortcode, including the contents of <code>hello.py</code> in this Markdown file.  Something like this:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">include</span> <span class="na">file</span><span class="o">=</span><span class="s">&#34;hello.py&#34;</span> <span class="p">&gt;</span>}}</span></span></code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>Actual shortcode logic left as an exercise for the reader.</p>
</blockquote>
<p>But that still breaks up the writing flow a little bit.  I&rsquo;m writing the code over here, and writing <em>about</em> it over there.  It&rsquo;s a tiny complaint, but working with <a href="/card/org/">card/Org</a> has spoiled me.  I get to write the code in the same document that I&rsquo;m writing about it in.  Everything stays in sync, more or less.</p>
<p>What I want is to write about <code>hello.py</code> here, and with a command have <code>hello.py</code> appear on my filesystem, containing the Python code I&rsquo;ve been describing.</p>
<p>And I want to do it without disturbing Hugo. Let it turn Markdown into HTML.</p>
<h2 id="tangling">Tangling</h2>
<p>This process is called &ldquo;tangling,&rdquo; and it&rsquo;s popular in the admittedly small
world of <a href="http://literateprogramming.com/">Literate Programming</a>.  The code is interleaved
throughout some kind of document.  A tool like <a href="https://www.cs.tufts.edu/~nr/noweb/">noweb</a> or <a href="https://orgmode.org/worg/org-contrib/babel/intro.html">Babel</a>
parses the document to create code files.  Could be any kind of file, really.
The process can get fancy.</p>
<p>But the start is not fancy: given a text file containing a <code>{{&lt; code file=&quot;(something)&quot; &gt;}}</code>, write the contents of that shortcode to the named file.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">index.md</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{&lt; </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> &gt;}}</span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="k">regex</span> <span class="nf">shortcode</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="nv">$opener</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      code </span><span class="se">\s</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      </span><span class="p">&#39;</span><span class="s1">file=&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;filename&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">  </span><span class="c1"># Remember the filename
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">      </span><span class="ni">.</span><span class="o">*?</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="nv">$&lt;content&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr">  </span><span class="c1"># Remember everything else in the block
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="nv">$opener</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">/code</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$markdown</span> <span class="o">=</span> <span class="nb">slurp</span> <span class="nv">$filename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nv">$markdown</span><span class="o">.</span><span class="nb">match</span><span class="p">(/</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">shortcode</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">/)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="nv">$tangle-file</span> <span class="o">=</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">filename</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="nv">$tangle-content</span> <span class="o">=</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">content</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">spurt</span> <span class="nv">$tangle-file</span><span class="o">,</span> <span class="nv">$tangle-content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Tangled to </span><span class="nv">$tangle-file</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>I love Raku&rsquo;s approach to <a href="https://docs.raku.org/language/regexes">regular expressions</a>.  For starters, the syntax looks a bit more like describing a grammar.  I can break the funny regex characters up with spaces, and clarify them with comments.  In fact, I could someday build this up to a real <a href="https://docs.raku.org/language/grammars">grammar</a>.</p>
<p>Secondly, it addresses the fact that most text we look at these days contains multiple lines.  I didn&rsquo;t have to worry about any special multiline flags to get this working.</p>
<p>Finally, getting at the named captures was — I wouldn&rsquo;t say &ldquo;obvious,&rdquo; but at least &ldquo;coherent.&rdquo; I can treat the match variable <code>$/</code> as a nested <a href="https://docs.raku.org/language/hashmap">Hash</a>. The important bits look something like this::</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">shortcode =&gt;
</span></span><span class="line"><span class="cl">  filename =&gt; ｢hello.py｣
</span></span><span class="line"><span class="cl">  content =&gt; ｢print(&#34;Hello&#34;)｣</span></span></code></pre>
</figure><p>I can grab the named capture <code>filename</code> of my matched <code>shortcode</code> regex with <code>$/&lt;shortcode&gt;&lt;filename&gt;</code> — or <code>~$&lt;shortcode&gt;&lt;filename&gt;</code>, depending on your preferred syntax.</p>
<p>This is all possible in languages like Perl with assorted flags, but I haven&rsquo;t seen parsing treated so well by default since maybe <a href="/card/rebol/">card/REBOL</a>.</p>
<p>Anyways, let&rsquo;s run this thing.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku tangle.raku
</span></span><span class="line"><span class="cl"><span class="go">Tangled to hello.py
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> bat hello.py
</span></span><span class="line"><span class="cl"><span class="go">───────┬──────────────────────────────────────────────────────────────────────
</span></span></span><span class="line"><span class="cl"><span class="go">       │ File: hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">───────┼──────────────────────────────────────────────────────────────────────
</span></span></span><span class="line"><span class="cl"><span class="go">   1   │ print(&#34;Hello&#34;)
</span></span></span><span class="line"><span class="cl"><span class="go">───────┴──────────────────────────────────────────────────────────────────────
</span></span></span></code></pre>
</figure><p>Sweet.</p>
<p>Except — this Markdown file I&rsquo;m writing.  It has <em>two</em> file code blocks now.  I want to tangle both of them.</p>
<h2 id="multiple-output-files">Multiple output files</h2>
<p>This requires a couple changes, since I&rsquo;m writing code about Hugo shortcodes in a Hugo post.</p>
<p>To show shortcode directives without Hugo evaluating them, they need to look like shortcode comments.  Their contents will get passed straight through as part of your post.  To show <code>{{&lt; shortcode &gt;}}</code> in a post, your Hugo content needs <code>{{&lt;/* shortcode */&gt;}}</code>.</p>
<p>So that&rsquo;s lovely and all, but can be a headache of its own for this specific situation of extracting code from a blog post.</p>
<p>I need to remember this commented shortcode syntax.</p>
<figure class="highlight">
  <figcaption><tt>define-commented-shortcodes</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"> <span class="k">my</span> <span class="nv">$commented-opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{</span><span class="p">&#39;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">&lt;/* </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl"> <span class="k">my</span> <span class="nv">$commented-closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> */&gt;</span><span class="p">&#39;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">}}</span><span class="p">&#39;;</span></span></span></code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>Goodness, that looks silly.  Well, I&rsquo;m writing this blog post as a test case
for the code.  I couldn&rsquo;t figure out how to cleanly present the  commented shortcode delimiters without Hugo and my code getting into a fierce argument.</p>
<p>If I wasn&rsquo;t writing the code <em>in</em> this post, I could use something simpler, like this:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$commented-opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{​&lt;/* </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$commented-closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> */&gt;}}</span><span class="p">&#39;;</span></span></span></code></pre>
</figure><p>But that&rsquo;s not the path I chose.  It&rsquo;s not easy to write programs that write themselves.  Sometimes you must help them along.</p>
</blockquote>
<p>That way I can replace those commented shortcode delimiters with their normal counterparts when I tangle later.</p>
<figure class="highlight">
  <figcaption><tt>define-commented-shortcodes</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$tangle-content</span> <span class="o">=</span> <span class="nv">$block</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">content</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="nb">subst</span><span class="p">(:</span><span class="s">global</span><span class="o">,</span> <span class="p">/</span><span class="sr"> </span><span class="nv">$commented-opener</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="nv">$opener</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="nb">subst</span><span class="p">(:</span><span class="s">global</span><span class="o">,</span> <span class="p">/</span><span class="sr"> </span><span class="nv">$commented-closer</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="nv">$closer</span><span class="p">);</span></span></span></code></pre>
</figure><p>Now that I have that particular detail out of the way, tangle every block? Sure!  Make a regular expression match <code>:global</code> and it returns a list containing every match.</p>
<figure class="highlight">
  <figcaption><tt>tangle-every-block</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$markdown</span>  <span class="o">=</span> <span class="nb">slurp</span> <span class="nv">$filename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@fragments</span> <span class="o">=</span> <span class="nv">$markdown</span><span class="o">.</span><span class="nb">match</span><span class="p">(/&lt;</span><span class="nf">shortcode</span><span class="p">&gt;/</span><span class="o">,</span> <span class="p">:</span><span class="s">global</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nv">@fragments</span> <span class="k">-&gt;</span> <span class="nv">$block</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$tangle-file</span> <span class="o">=</span> <span class="nv">$block</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">filename</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">replace-commented-shortcodes</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">  <span class="nb">spurt</span> <span class="nv">$tangle-file</span><span class="o">,</span> <span class="nv">$tangle-content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Tangled to </span><span class="nv">$tangle-file</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>I think that about covers it.  The shortcode recognition logic can stay the same.</p>
<figure class="highlight">
  <figcaption><tt>tangle-multi.raku</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">index.md</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{&lt; </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> &gt;}}</span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="k">regex</span> <span class="nf">shortcode</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="nv">$opener</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      code </span><span class="se">\h</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      </span><span class="p">&#39;</span><span class="s1">file=&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;filename&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">  </span><span class="c1"># Remember the filename
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">      </span><span class="ni">.</span><span class="o">*?</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="nv">$&lt;content&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr">  </span><span class="c1"># Remember everything else in the block
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore trailing newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="nv">$opener</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">/code</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="o">«</span><span class="n">define-commented-shortcodes</span><span class="o">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">tangle-every-block</span><span class="p">»</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>And it works!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku tangle-multi.raku
</span></span><span class="line"><span class="cl"><span class="go">Tangled to hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to tangle.raku
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> bat tangle.raku
</span></span><span class="line"><span class="cl"><span class="go">───────┬──────────────────────────────────────────────────────────────────────
</span></span></span><span class="line"><span class="cl"><span class="go">       │ File: tangle.raku
</span></span></span><span class="line"><span class="cl"><span class="go">───────┼──────────────────────────────────────────────────────────────────────
</span></span></span><span class="line"><span class="cl"><span class="go">   1   │ sub MAIN() {
</span></span></span><span class="line"><span class="cl"><span class="go">   2   │   my $filename = &#34;index.md&#34;;
</span></span></span><span class="line"><span class="cl"><span class="go">   3   │   my $opener = &#39;{{&lt; &#39;;
</span></span></span><span class="line"><span class="cl"><span class="go">   4   │   my $closer = &#39; &gt;}}&#39;;
</span></span></span><span class="line"><span class="cl"><span class="go">   5   │   my regex shortcode {
</span></span></span><span class="line"><span class="cl"><span class="go">   6   │     $opener
</span></span></span><span class="line"><span class="cl"><span class="go">   7   │       code \s
</span></span></span><span class="line"><span class="cl"><span class="go">   8   │       &#39;file=&#34;&#39; $&lt;filename&gt; = .+? &#39;&#34;&#39;  # Remember the filename
</span></span></span><span class="line"><span class="cl"><span class="go">   9   │       .*?
</span></span></span><span class="line"><span class="cl"><span class="go">  10   │     $closer
</span></span></span><span class="line"><span class="cl"><span class="go">  11   │     \n                # Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="go">  12   │     $&lt;content&gt; = .+?  # Remember everything else in the block
</span></span></span><span class="line"><span class="cl"><span class="go">  13   │     \n                # Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="go">  14   │     $opener &#39;/code&#39; $closer
</span></span></span><span class="line"><span class="cl"><span class="go">  15   │   }
</span></span></span><span class="line"><span class="cl"><span class="go">  16   │
</span></span></span><span class="line"><span class="cl"><span class="go">  17   │   my $markdown = slurp $filename;
</span></span></span><span class="line"><span class="cl"><span class="go">  18   │
</span></span></span><span class="line"><span class="cl"><span class="go">  19   │   if $markdown.match(/ &lt;shortcode&gt; /) {
</span></span></span><span class="line"><span class="cl"><span class="go">  20   │     my $tangle-file = $/&lt;shortcode&gt;&lt;filename&gt;;
</span></span></span><span class="line"><span class="cl"><span class="go">  21   │     my $tangle-content = $/&lt;shortcode&gt;&lt;content&gt;;
</span></span></span><span class="line"><span class="cl"><span class="go">  22   │     spurt $tangle-file, $tangle-content;
</span></span></span><span class="line"><span class="cl"><span class="go">  23   │     say &#34;Tangled to $tangle-file&#34;;
</span></span></span><span class="line"><span class="cl"><span class="go">  24   │   }
</span></span></span><span class="line"><span class="cl"><span class="go">  25   │ }
</span></span></span><span class="line"><span class="cl"><span class="go">  ───────┴──────────────────────────────────────────────────────────────────────
</span></span></span></code></pre>
</figure><p>Unfortunately, I&rsquo;m not quite done yet.</p>
<h2 id="multiple-fragments">Multiple fragments</h2>
<p>I&rsquo;m not done yet because I don&rsquo;t like to describe my code a full file at a time.  I&rsquo;d rather talk about this bit here, explain that bit over there, then mash it all up in the end.</p>
<p>Consistency counts, so I need to pick a syntax.  Well — you&rsquo;ve been reading along.  You can see that I already made my choice.  I got used to <code>&lt;&lt;fragment-name&gt;&gt;</code> in Babel, where the attribute is called <code>name</code>. Might as well keep doing that over here.  Oh but hang on. I want it to stand out a bit.  I&rsquo;ll use angle quotes <code>«‥»</code>.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>On a US keyboard using <a href="/card/vim/">card/Vim</a> or <a href="/card/neovim/">card/Neovim</a>, <code>«</code> is a <a href="https://vimhelp.org/digraph.txt.html#digraph.txt">digraph</a> which can be entered via <kbd>Control-k</kbd> followed by <kbd>&lt;&lt;</kbd>.  Or if you&rsquo;ve set up a <a href="https://en.wikipedia.org/wiki/Compose_key">Compose</a> key, it&rsquo;s <kbd>Compose</kbd> followed by <kbd>&lt;&lt;</kbd> in any editor.</p>
<p><code>»</code> is the same, but <kbd>&gt;&gt;</kbd> instead.</p>
<p><em>Or</em> you can use <code>&lt;&lt;…&gt;&gt;</code> in your code and ignore my recent obsession with fancy characters.</p>
<p>Yes, I know I could practically write it <em>all</em> with fancy characters in Raku. One step at a time.</p>
</blockquote>
<p>Let&rsquo;s go back to the Python code because it&rsquo;s still so small.</p>
<p>Say I want to demonstrate the delightful <a href="/card/rich/">card/Rich</a> terminal library for Python.</p>
<figure class="highlight">
  <figcaption><tt>import-libraries</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"> <span class="kn">from</span> <span class="nn">rich</span> <span class="kn">import</span> <span class="nb">print</span>
</span></span><span class="line"><span class="cl"> <span class="kn">from</span> <span class="nn">rich.panel</span> <span class="kn">import</span> <span class="n">Panel</span>
</span></span><span class="line"><span class="cl"> <span class="kn">from</span> <span class="nn">rich.markdown</span> <span class="kn">import</span> <span class="n">Markdown</span></span></span></code></pre>
</figure><p>But before I really use it in my code, I spend 1,500 words singing its praises.</p>
<p>It&rsquo;s nice.  I like it.</p>
<p>Okay, done singing.  Time to write the rest of the program.</p>
<figure class="highlight">
  <figcaption><tt>rich-hello.py</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="err">«</span><span class="n">import</span><span class="o">-</span><span class="n">libraries</span><span class="err">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">md</span> <span class="o">=</span> <span class="n">Markdown</span><span class="p">(</span><span class="s2">&#34;**Hello**, *World*.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">Panel</span><span class="p">(</span><span class="n">md</span><span class="p">))</span></span></span></code></pre>
</figure><p>I identify the fragment with a <code>name</code> attribute:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">code</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;import-libraries&#34;</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;python&#34;</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">from rich import print
</span></span><span class="line"><span class="cl">from rich.panel import Panel
</span></span><span class="line"><span class="cl">from rich.markdown import Markdown
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">code</span> <span class="p">&gt;</span>}}</span></span></code></pre>
</figure><p>My <code>code</code> block references the <code>import-libraries</code> fragment by name when I&rsquo;m ready for it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">code</span> <span class="na">file</span><span class="o">=</span><span class="s">&#34;rich-hello.py&#34;</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">«import-libraries»
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">md = Markdown(&#34;**Hello**, *World*.&#34;)
</span></span><span class="line"><span class="cl">print(Panel(md))
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">code</span> <span class="p">&gt;</span>}}</span></span></code></pre>
</figure><p>I <em>might</em> spend some time talking about the <code>code</code> shortcode in another post, but I dislike Go&rsquo;s templating enough that this does not sound like fun.</p>
<h3 id="rounding-up-fragments-to-tangle">Rounding up fragments to tangle</h3>
<p>Recognizing an additional parameter doesn&rsquo;t make my regular expression <em>that</em> much more complicated, but I can see things getting  ore complex.  I could even find a better pattern later.  Let&rsquo;s give the params their own named regex for some encapsulation.</p>
<figure class="highlight">
  <figcaption><tt>shortcode-params-regex</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">params</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">   </span><span class="p">&#39;</span><span class="s1">file=&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;filename&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">   </span><span class="o">||</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">   </span><span class="p">&#39;</span><span class="s1">name=&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;fragment&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span></span></span></code></pre>
</figure><p>That way I can drop it in <code>shortcode</code> to say &ldquo;oh and look for <code>params</code> while you&rsquo;re at it please.&rdquo;</p>
<figure class="highlight">
  <figcaption><tt>nested-shortcode-regex</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="p">«</span><span class="s2">shortcode-params-regex</span><span class="p">»</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{&lt; </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> &gt;}}</span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">shortcode</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="nv">$opener</span><span class="sr"> code </span><span class="se">\s</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">params</span><span class="p">&gt;</span><span class="sr"> </span><span class="ni">.</span><span class="o">*?</span><span class="sr"> </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">  </span><span class="nv">$&lt;content&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr">  </span><span class="c1"># Remember everything else in the block
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">  </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore trailing newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">  </span><span class="nv">$opener</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">/code</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span></span></span></code></pre>
</figure><p>Okay, we recognize <code>file</code> and <code>name</code> parameters.  What do we do with them? We gather them!</p>
<figure class="highlight">
  <figcaption><tt>gather-fragments-and-files</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">%fragment-for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@filenames</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$markdown</span> <span class="o">=</span> <span class="nb">slurp</span> <span class="nv">$filename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nv">$markdown</span><span class="o">.</span><span class="nb">match</span><span class="p">(/&lt;</span><span class="nf">shortcode</span><span class="p">&gt;/</span><span class="o">,</span> <span class="p">:</span><span class="s">global</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nv">$block</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$tangle-content</span> <span class="o">=</span> <span class="nv">$block</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">content</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$params</span> <span class="o">=</span> <span class="nv">$block</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">params</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$fragment</span> <span class="o">=</span> <span class="nv">$params</span><span class="p">&lt;</span><span class="s">fragment</span><span class="p">&gt;</span> <span class="o">||</span> <span class="nv">$params</span><span class="p">&lt;</span><span class="s">filename</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nv">$fragment</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">fragment: </span><span class="nv">$fragment</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%fragment-for</span><span class="p">{</span> <span class="nv">$fragment</span><span class="o">.</span><span class="kt">Str</span> <span class="p">}</span> <span class="o">=</span> <span class="nv">$tangle-content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$params</span><span class="p">&lt;</span><span class="s">filename</span><span class="p">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">@filenames</span><span class="o">.</span><span class="nb">push</span><span class="p">(</span><span class="nv">$filename</span><span class="o">.</span><span class="kt">Str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h3 id="tangling-my-fragments">Tangling my fragments</h3>
<p>Let&rsquo;s see here.  I know before I can write any files, I need to make sure everything&rsquo;s tangled Trying to keep fragments easy to identify.  They sit on a line by themselves, possibly with some leading whitespace.</p>
<figure class="highlight">
  <figcaption><tt>tangle-fragments</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">fragment</span> <span class="p">{</span><span class="sr"> </span><span class="ni">^^</span><span class="sr"> </span><span class="se">\h</span><span class="o">*?</span><span class="sr"> </span><span class="p">&#34;</span><span class="s2">«</span><span class="p">&#34;</span><span class="sr"> </span><span class="nv">$&lt;name&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#34;</span><span class="s2">»</span><span class="p">&#34;</span><span class="sr"> </span><span class="ni">$$</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">%tangle-for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">«</span><span class="s2">tangle-function</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nv">%fragment-for</span><span class="o">.</span><span class="nb">keys</span> <span class="k">-&gt;</span> <span class="nv">$name</span> <span class="p">{</span> <span class="nf">tangle</span><span class="p">(</span><span class="nv">$name</span><span class="p">);</span> <span class="p">}</span></span></span></code></pre>
</figure><p>Raku functions are lexically scoped, which means it&rsquo;s perfectly okay to declare a function inside another function.  Though next time I revisit  his, I may want to think about a <a href="https://docs.raku.org/language/classtut">class</a> or something to hold the  complexity.</p>
<p>But what does that function need to look like?  I&rsquo;m still not sure I got it quite right.  I mean I know the <em>basic</em> shape of it.</p>
<figure class="highlight">
  <figcaption><tt>tangle-function</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">tangle</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">tangle-error-checking</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">tangle-text</span><span class="p">»</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>It needs some error checking.  I know that much.  Oh, and if it&rsquo;s already been tangled I should avoid going through it again.</p>
<figure class="highlight">
  <figcaption><tt>tangle-error-checking</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl">   <span class="k">return</span> <span class="p">&#34;&#34;</span> <span class="k">unless</span> <span class="nv">$name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nv">%tangle-for</span><span class="p">{</span> <span class="nv">$name</span> <span class="p">}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="nv">%tangle-for</span><span class="p">{</span> <span class="nv">$name</span> <span class="p">}</span><span class="o">.</span><span class="kt">Str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">my</span> <span class="nv">$content</span> <span class="o">=</span> <span class="nv">%fragment-for</span><span class="p">{</span> <span class="nv">$name</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">   <span class="k">unless</span> <span class="nv">$content</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nb">die</span> <span class="p">&#34;</span><span class="s2">«</span><span class="nv">$name</span><span class="s2">» is not a valid fragment</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span></span></span></code></pre>
</figure><p>The idea of the thing is clear enough.  Find and recursively <code>tangle</code> each fragment found in this text, replacing the fragment references with their tangled text.  Once that&rsquo;s all done, cache and return the tangled text.</p>
<figure class="highlight">
  <figcaption><tt>tangle-text</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl">   <span class="k">for</span> <span class="nv">$content</span><span class="o">.</span><span class="nb">match</span><span class="p">(/</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">fragment</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="p">:</span><span class="s">global</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nv">$match</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">my</span> <span class="nv">$fragment-ref</span> <span class="o">=</span> <span class="nv">$match</span><span class="o">.</span><span class="kt">Str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="k">my</span> <span class="nv">$fragment-name</span> <span class="o">=</span> <span class="nv">$match</span><span class="p">&lt;</span><span class="s">fragment</span><span class="p">&gt;&lt;</span><span class="s">name</span><span class="p">&gt;</span><span class="o">.</span><span class="kt">Str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$name</span><span class="s2"> ← «</span><span class="nv">$fragment-name</span><span class="s2">»</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">     <span class="nv">$content</span><span class="o">.</span><span class="nb">subst-mutate</span><span class="p">(/</span><span class="nv">$fragment-ref</span><span class="p">/</span><span class="o">,</span> <span class="nf">tangle</span><span class="p">(</span> <span class="nv">$fragment-name</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nv">%tangle-for</span><span class="p">{</span> <span class="nv">$name</span> <span class="p">}</span> <span class="o">=</span> <span class="nv">$content</span><span class="p">;</span></span></span></code></pre>
</figure><p>I flailed while tangling fragments.  Lots of complaints from Raku about the difference between a <code>Match</code> and a <code>String</code>.  There <em>must</em> be better ways. But the most important thing?  I got it to work eventually.</p>
<h3 id="writing-tangled-files">Writing tangled files</h3>
<p>After all that, writing the tangled files felt easy.</p>
<figure class="highlight">
  <figcaption><tt>write-tangled-fragments</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl">   <span class="p">«</span><span class="s2">define-commented-shortcodes</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="nv">@filenames</span> <span class="k">-&gt;</span> <span class="nv">$tangle-file</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">my</span> <span class="nv">$tangle-content</span> <span class="o">=</span> <span class="nv">%tangle-for</span><span class="p">{</span> <span class="nv">$tangle-file</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="o">.</span><span class="nb">subst</span><span class="p">(:</span><span class="s">global</span><span class="o">,</span> <span class="p">/</span><span class="sr"> </span><span class="nv">$commented-opener</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="nv">$opener</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="o">.</span><span class="nb">subst</span><span class="p">(:</span><span class="s">global</span><span class="o">,</span> <span class="p">/</span><span class="sr"> </span><span class="nv">$commented-closer</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="nv">$closer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="nb">spurt</span> <span class="nv">$tangle-file</span><span class="o">,</span> <span class="nv">$tangle-content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Tangled to </span><span class="nv">$tangle-file</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span></span></span></code></pre>
</figure><p>Then — theoretically — all these fragments I wrote will make a useful code tangler!</p>
<p>Might as well make it so this script can look at more than just the file I&rsquo;m editing right now.</p>
<figure class="highlight">
  <figcaption><tt>tangle-fragments.raku</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$filename</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">nested-shortcode-regex</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">gather-fragments-and-files</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">tangle-fragments</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">write-tangled-files</span><span class="p">»</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>Easiest <a href="https://docs.raku.org/language/create-cli">CLI</a> I ever wrote, by the way.  See?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku tangle-fragments.raku
</span></span><span class="line"><span class="cl"><span class="go">Usage:
</span></span></span><span class="line"><span class="cl"><span class="go">  tangle-fragments.raku &lt;filename&gt;
</span></span></span></code></pre>
</figure><p>Time for the real thing.  I&rsquo;m nervous.  I shouldn&rsquo;t be nervous.  I know how this story ends.  Then again I keep rewriting the middle.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku tangle-fragments.raku index.md
</span></span><span class="line"><span class="cl"><span class="go">fragment: hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle.raku
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: define-commented-shortcodes
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: replace-commented-shortcodes
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-every-block
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-multi.raku
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: import-libraries
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: rich-hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: shortcode-params-regex
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: nested-shortcode-regex
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: gather-fragments-and-files
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-fragments
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-function
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-error-checking
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-text
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: write-tangled-files
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-fragments.raku
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-function &lt;-- (tangle-error-checking)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-function &lt;-- (tangle-text)
</span></span></span><span class="line"><span class="cl"><span class="go">nested-shortcode-regex &lt;-- (shortcode-params-regex)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-every-block &lt;-- (replace-commented-shortcodes)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments &lt;-- (tangle-function)
</span></span></span><span class="line"><span class="cl"><span class="go">write-tangled-files &lt;-- (define-commented-shortcodes)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments.raku &lt;-- (nested-shortcode-regex)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments.raku &lt;-- (gather-fragments-and-files)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments.raku &lt;-- (tangle-fragments)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments.raku &lt;-- (write-tangled-files)
</span></span></span><span class="line"><span class="cl"><span class="go">rich-hello.py &lt;-- (import-libraries)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-multi.raku &lt;-- (define-commented-shortcodes)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-multi.raku &lt;-- (tangle-every-block)
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to tangle.raku
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to tangle-multi.raku
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to rich-hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to tangle-fragments.raku
</span></span></span></code></pre>
</figure><p>That overwrote my test version of <code>tangle-fragments.raku</code>.  Scary.  Ran the new version to keep myself honest.  It produced the same output, and appears to have correctly tangled my fragments!</p>
<figure class="highlight">
  <figcaption><span>Generated rich-hello.py</span></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich</span> <span class="kn">import</span> <span class="nb">print</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.panel</span> <span class="kn">import</span> <span class="n">Panel</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.markdown</span> <span class="kn">import</span> <span class="n">Markdown</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">md</span> <span class="o">=</span> <span class="n">Markdown</span><span class="p">(</span><span class="s2">&#34;**Hello**, *World*.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">Panel</span><span class="p">(</span><span class="n">md</span><span class="p">))</span></span></span></code></pre>
</figure><p>Running <code>rich-hello.py</code> looks more interesting with a screenshot than a text block:</p>
<p><img src="/post/2020/07/attachments/img/2020/rich-panel.png" alt="Formatted output using Rich"/></p>
<p>Okay.  Now I&rsquo;m done.</p>
<p>I <em>could</em> have done this in Python.  There are decent parsing libraries out there.  But Raku did this on its own, without pulling in any extra — without pulling in <em>any</em> libraries.</p>
<h2 id="done-you-barely-started">Done? You barely started!</h2>
<p>My tangle script is no competition for Org mode&rsquo;s Babel.</p>
<ul>
<li>it needs more error checking
<ul>
<li>circular fragment references</li>
<li>unreachable files (path, permissions)</li>
</ul>
</li>
<li>smart handling of whitespace and indentation to keep Python from becoming a chore</li>
<li>rendering fragment names in such a way that syntax highlighters can do something pretty with them
<ul>
<li>especially when writing code in a language that <a href="https://github.com/alecthomas/chroma">Chroma</a> has heard of</li>
</ul>
</li>
<li>hidden blocks</li>
<li>code evaluation and display of results</li>
</ul>
<p>But it&rsquo;ll do for now.</p>]]></content:encoded>
</item>
</channel>
</rss>
