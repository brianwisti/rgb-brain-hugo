<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>rakubrewonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/rakubrew/</link>
    <description>
      Recent contentinrakubrew on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Tue, 19 May 2020 16:38:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/rakubrew/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Setting up Raku with Rakubrew</title>
  <link>https://randomgeekery.org/post/2020/05/setting-up-raku-with-rakubrew/</link>
  <pubDate>Tue, 19 May 2020 16:38:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/05/setting-up-raku-with-rakubrew/</guid>
  <description>I was avoiding Rakudobrew for some now-forgotten technical reason. Probably couldn’t get a particular Perl 6 release to build. But I’m tired of one-off scripts or distribution packages that don’t quite match my expectations. What’s new in the Perl 6 language manager world?
For starters, names have changed. Perl 6 has been [Raku][raku] for a little bit, and Rakudobrew is now Rakubrew.
I don’t recall enough about Rakudobrew to make a better or worse comparison.</description>
   <category>post</category> 
   <category>post</category> 
   <category>raku-lang</category>  <category>version-manager</category>  <category>rakubrew</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>Rakudobrew changed its name since last I looked</h2><p>I was avoiding Rakudobrew for some now-forgotten technical reason.  Probably couldn’t get a particular Perl 6 release to build.  But I’m tired of one-off scripts or distribution packages that don’t quite match my expectations. What’s new in the Perl 6 language manager world?</p>
<p>For starters, names have changed.  Perl 6 has been [Raku][raku] for a little bit, and Rakudobrew is now <a href="https://rakubrew.org/">Rakubrew</a>.</p>
<p>I don’t recall enough about Rakudobrew to make a better or worse comparison. Let’s just install it and see how it works.</p>
<p>Unfortunately <code>curl</code> doesn’t like the rakubrew site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ curl https://rakubrew.org/install-on-perl.sh | sh
</span></span><span class="line"><span class="cl">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span></span><span class="line"><span class="cl">                                 Dload  Upload   Total   Spent    Left  Speed
</span></span><span class="line"><span class="cl">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
</span></span><span class="line"><span class="cl">curl: (60) SSL certificate problem: certificate has expired
</span></span><span class="line"><span class="cl">More details here: https://curl.haxx.se/docs/sslcerts.html
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">curl failed to verify the legitimacy of the server and therefore could not
</span></span><span class="line"><span class="cl">establish a secure connection to it. To learn more about this situation and
</span></span><span class="line"><span class="cl">how to fix it, please visit the web page mentioned above.
</span></span></code></pre></div><p>Firefox thinks the site’s fine, though.  I’ll download <code>install-on-perl.sh</code> and run it locally.  Oh nice, shell initialization instructions specific to the shell I’m running.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ sh ~/Downloads/install-on-perl.sh
</span></span><span class="line"><span class="cl">Downloading rakubrew...
</span></span><span class="line"><span class="cl">Installing rakubrew to /home/random/.rakubrew ...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Load rakubrew automatically in `zsh` by adding
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  eval &#34;$(/home/random/.rakubrew/bin/rakubrew init Zsh)&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">to ~/.zshrc.
</span></span><span class="line"><span class="cl">This can be easily done using:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  echo &#39;eval &#34;$(/home/random/.rakubrew/bin/rakubrew init Zsh)&#34;&#39; &gt;&gt; ~/.zshrc
</span></span></code></pre></div><p>I do not yet have rakubrew on all my machines, but I <em>do</em> have nearly the same config everywhere.  The logic I want looks a little more like this.</p>
<p><strong><code>~/.zshenv</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">RAKUBREW_HOME</span><span class="o">=</span><span class="sb">``</span><span class="nv">$HOME</span>/.rakubrew<span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$RAKUBREW_HOME</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span><span class="nv">$RAKUBREW_HOME</span>/bin/rakubrew init Zsh<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></div><p>Time to reload my shell and see if it worked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ rakubrew --help
</span></span><span class="line"><span class="cl">Usage:
</span></span><span class="line"><span class="cl">     rakubrew version          # or rakubrew current
</span></span><span class="line"><span class="cl">     rakubrew versions         # or rakubrew list
</span></span><span class="line"><span class="cl">     rakubrew global [version] # or rakubrew switch [&lt;version&gt;]
</span></span><span class="line"><span class="cl">     rakubrew shell [--unset|&lt;version&gt;]
</span></span><span class="line"><span class="cl">     rakubrew local [&lt;version&gt;]
</span></span><span class="line"><span class="cl">     rakubrew nuke [&lt;version&gt;] # or rakubrew unregister [&lt;version&gt;]
</span></span><span class="line"><span class="cl">     rakubrew rehash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     rakubrew available        # or rakubrew list-available
</span></span><span class="line"><span class="cl">     rakubrew build [&lt;backend&gt;] [&lt;tag&gt;|&lt;branch&gt;|&lt;sha-1&gt;] [--configure-opts=&lt;options&gt;]
</span></span><span class="line"><span class="cl">     rakubrew triple [&lt;rakudo-version&gt; [&lt;nqp-version&gt; [&lt;moar-version&gt;]]]
</span></span><span class="line"><span class="cl">     rakubrew register &lt;name&gt; &lt;path&gt;
</span></span><span class="line"><span class="cl">     rakubrew build-zef
</span></span><span class="line"><span class="cl">     rakubrew download [&lt;backend&gt;] [&lt;rakudo-version&gt;]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     rakubrew exec &lt;executable&gt; [&lt;executable-args&gt;]
</span></span><span class="line"><span class="cl">     rakubrew which &lt;executable&gt;
</span></span><span class="line"><span class="cl">     rakubrew whence [--path] &lt;executable&gt;
</span></span><span class="line"><span class="cl">     rakubrew mode [env|shim]
</span></span><span class="line"><span class="cl">     rakubrew self-upgrade
</span></span><span class="line"><span class="cl">     rakubrew init
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     rakubrew test [&lt;version&gt;|all]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     rakubrew help [--verbose|&lt;command&gt;]
</span></span><span class="line"><span class="cl">     rakubrew home
</span></span><span class="line"><span class="cl">     rakubrew rakubrew-version
</span></span></code></pre></div><p>Apparently!  Can I install a fresh version of <a href="https://rakudo.org">Rakudo</a>?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ rakubrew download
</span></span><span class="line"><span class="cl">Downloading https://rakudo.org/dl/rakudo/rakudo-moar-2020.05.1-01-linux-x86_64.tar.gz
</span></span><span class="line"><span class="cl">Extracting
</span></span><span class="line"><span class="cl">Done, moar-2020.05.1 installed
</span></span></code></pre></div><p>Yes indeed.  Pretty quick, too.  Looks like I no longer need to do a full build every time there’s a release.  Nice.</p>
<p>Now make <code>moar-2020.05.01</code> the default.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ rakubrew switch moar-2020.05.1
</span></span><span class="line"><span class="cl">Switching to moar-2020.05.1
</span></span></code></pre></div><p>And what can Raku tell me about itself?  I’ll recycle my one-liner from <a href="/post/2019/11/building-rakudo-and-moarvim-on-linux/">a little bit ago</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ raku -e &#39;say &#34;Yo, World! This is $*PERL - specifically: { ($*PERL, $*VM, $*DISTRO).map({ $_.gist })}&#34;&#39;
</span></span><span class="line"><span class="cl">Yo, World! This is Raku - specifically: Raku (6.d) moar (2020.05) manjaro (3.10.0.514.10.2.el.7.x.86._.64)
</span></span></code></pre></div><p>Now the real test.  Can I install <a href="https://github.com/drforr/perl6-readline">perl6-readline</a> via <a href="https://github.com/ugexe/zef">zef</a> for the Raku REPL?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ zef install Readline
</span></span><span class="line"><span class="cl">===&gt; Searching for: Readline
</span></span><span class="line"><span class="cl">===&gt; Updating cpan mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan1.json
</span></span><span class="line"><span class="cl">===&gt; Updating p6c mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/p6c1.json
</span></span><span class="line"><span class="cl">===&gt; Updated p6c mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/p6c1.json
</span></span><span class="line"><span class="cl">===&gt; Updated cpan mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan1.json
</span></span><span class="line"><span class="cl">===&gt; Searching for missing dependencies: LibraryCheck
</span></span><span class="line"><span class="cl">===&gt; Testing: LibraryCheck:ver&lt;0.0.9&gt;:auth&lt;github:jonathanstowe&gt;:api&lt;1.0&gt;
</span></span><span class="line"><span class="cl">===&gt; Testing [OK] for LibraryCheck:ver&lt;0.0.9&gt;:auth&lt;github:jonathanstowe&gt;:api&lt;1.0&gt;
</span></span><span class="line"><span class="cl">===&gt; Testing: Readline:ver&lt;0.1.5&gt;:auth&lt;github:drforr&gt;
</span></span><span class="line"><span class="cl">[Readline]
</span></span><span class="line"><span class="cl">===&gt; Testing [OK] for Readline:ver&lt;0.1.5&gt;:auth&lt;github:drforr&gt;
</span></span><span class="line"><span class="cl">===&gt; Installing: LibraryCheck:ver&lt;0.0.9&gt;:auth&lt;github:jonathanstowe&gt;:api&lt;1.0&gt;
</span></span><span class="line"><span class="cl">===&gt; Installing: Readline:ver&lt;0.1.5&gt;:auth&lt;github:drforr&gt;
</span></span></code></pre></div><p>Aw man. <a href="https://news.perlfoundation.org/post/remembering-jeff-goff">drforr</a> sure has cast a long shadow.  We’ll be missing him for a while.</p>
<p>And with that, I think I’ll sign off on this post.  Everything I needed installed cleanly, including <a href="https://github.com/Raku/doc">p6doc</a> and a few other <a href="https://modules.raku.org">modules</a> for puttering with the site.</p>
<p>Rakubrew worked!</p>
]]></content:encoded>
</item>
</channel>
</rss>
