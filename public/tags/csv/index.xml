<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>csvonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/csv/</link>
    <description>
      Recent contentincsv on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sat, 06 Jun 2020 17:40:07 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/csv/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: CSV and Data Tables in Hugo</title>
  <link>https://randomgeekery.org/post/2020/06/csv-and-data-tables-in-hugo/</link>
  <pubDate>Sat, 06 Jun 2020 17:40:07 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/06/csv-and-data-tables-in-hugo/</guid>
  <description>I’ve been looking at screenshots all day. Here’s Loud Dog instead.
tldr: Use Hugo’s transform.Unmarshal to turn strings into data structures, which you can feed into a table template. But sometimes split makes more sense.
I figured out how to write Hugo shortcodes to generate tables from CSV and other formats. Didn’t even occur to me that it was possible — or this easy — so I had to share.</description>
   <category>post</category> 
   <category>post</category> 
   <category>hugo</category>  <category>data</category>  <category>showing-it-anyways</category>  <category>csv</category>  <category>rst</category>  <category>and-a-dog</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>Am I reinventing reStructuredText with shortcodes? Don't judge me.</h2><p><img src="/post/2020/06/../../../attachments/img/2020/cover-2020-06-06.jpg" alt="attachments/img/2020/cover-2020-06-06.jpg"/>
I&rsquo;ve been looking at screenshots all day. Here&rsquo;s Loud Dog instead.</p>
<p><a href="/card/tldr/">tldr</a>: Use <a href="/card/hugo/">Hugo</a>’s <a href="https://gohugo.io/functions/transform.unmarshal/"><code>transform.Unmarshal</code></a> to turn strings into data structures, which you can feed into a table template. But sometimes <a href="https://gohugo.io/functions/split/"><code>split</code></a> makes more sense.</p>
<p>I figured out how to write Hugo <a href="https://gohugo.io/templates/shortcode-templates/">shortcodes</a> to generate <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table">tables</a> from <a href="/card/csv/">CSV</a> and other formats. Didn’t even occur to me that it was possible — or this easy — so I had to share.</p>
<p>This approach only works as-is for uniform, shallow structures: every row has the same number of fields, and every field translates cleanly to a string. If you have more complex structures, you need more complex templates.</p>
<h2 id="why">Why?</h2>
<p>Most Markdown parsers include some way to handle tables. Usually it involves
drawing your table with ASCII characters. Something like this, from an older
post of mine about <a href="/post/2017/01/elscreen/">elscreen</a>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">Function            | Keys    | Description
</span></span><span class="line"><span class="cl">--------------------|---------|-------------------------------------
</span></span><span class="line"><span class="cl"><span class="sb">`elscreen-create`</span>   | <span class="sb">`C-z c`</span> | Create a new screen and switch to it.
</span></span><span class="line"><span class="cl"><span class="sb">`elscreen-next`</span>     | <span class="sb">`C-z n`</span> | Cycle to the next screen
</span></span><span class="line"><span class="cl"><span class="sb">`elscreen-previous`</span> | <span class="sb">`C-z p`</span> | Cycle to the previous screen
</span></span><span class="line"><span class="cl"><span class="sb">`elscreen-kill`</span>     | <span class="sb">`C-z k`</span> | Kill the current screen
</span></span><span class="line"><span class="cl"><span class="sb">`elscreen-help`</span>     | <span class="sb">`C-z ?`</span> | Show ElScreen key bindings
</span></span></code></pre></div><p>I can read it just fine, but I find managing Markdown tables tedious without editor extensions. I want easy tables. I don’t care if they look like a table while I’m editing them. If I can copy and paste something into a shortcode? Even better.</p>
<p><a href="/card/restructuredtext/">card/reStructuredText</a> and <a href="/card/asciidoctor/">card/Asciidoctor</a> both provide table-handling approaches beyond drawing ASCII, though the default <a href="https://docutils.sourceforge.io/rst.html">rst table</a> is lovely if you <em>do</em> like fiddling with columns. I looked at them for shortcode inspiration — particularly rst’s <a href="https://docutils.sourceforge.io/docs/ref/rst/directives.html#id4">csv-table</a> and <a href="https://docutils.sourceforge.io/docs/ref/rst/directives.html#list-table">list-table</a> directives.</p>
<h2 id="csv-tables">CSV tables</h2>
<p>First up: CSV, &ldquo;Comma-Separated Values&rdquo;. I work a fair amount with CSV on the command line. I may want to copy and paste something into a table for a blog post every once in a while.</p>
<p>A <code>csv-table</code> shortcode could contain any CSV data. Maybe something from the <a href="https://github.com/awesomedata/awesome-public-datasets">Awesome Public Datasets</a>? Nah, I’ll just use my <a href="https://plausible.io">https://plausible.io</a> visitor count for the last week.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">csv-table</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">Date,Visitors
</span></span><span class="line"><span class="cl">2020-05-28,66
</span></span><span class="line"><span class="cl">2020-05-29,43
</span></span><span class="line"><span class="cl">2020-05-30,33
</span></span><span class="line"><span class="cl">2020-05-31,44
</span></span><span class="line"><span class="cl">2020-06-01,74
</span></span><span class="line"><span class="cl">2020-06-02,62
</span></span><span class="line"><span class="cl">2020-06-03,73
</span></span><span class="line"><span class="cl">2020-06-04,28
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">csv-table</span> <span class="p">&gt;</span>}}
</span></span></code></pre></div><p>My shortcode receives that data as a string in the <a href="https://gohugo.io/templates/shortcode-templates/#inner"><code>.Inner</code></a> variable. How to turn that string into a table?</p>
<h3 id="just-use-transformunmarshal">Just use <code>transform.Unmarshal</code></h3>
<p>Give <code>transform.Unmarshal</code> a formatted string, and it gives you back a data structure. CSV text becomes an array of arrays, which we turn into a table by iterating through everything with <a href="https://gohugo.io/functions/range/"><code>range</code></a>.</p>
<div class="highlight" title="layouts/shortcodes/csv-table.html"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">code</span> <span class="na">file</span><span class="o">=</span><span class="s">&#34;layouts/shortcodes/csv-table.html&#34;</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">{{ $rows := .Inner | transform.Unmarshal }}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ range $rows }}
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      {{ range . }} <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{ . }}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span> {{ end }}
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ end }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">code</span> <span class="p">&gt;</span>}}
</span></span></code></pre></div><p>Voila! Instant table!</p>
<p><img src="/post/2020/06/attachments/img/2020/csv-table-no-header.png" alt="A CSV table"/></p>
<p>Not bad, but it could be better.</p>
<ul>
<li>that first row provides column names, which works better as table headers than just another row</li>
<li>I prefer a particular style for numeric columns</li>
<li>what about a summary caption?</li>
</ul>
<p>Give me a minute.</p>
<h3 id="fine-tuning-the-table-with-parameters">Fine-tuning the table with parameters</h3>
<p>I’ll add a parameter for the caption. Maybe another parameter indicating whether to expect a header row, since the first row of CSV doesn’t <em>always</em> contain column names.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">csv-table</span> <span class="na">caption</span><span class="o">=</span><span class="s">&#34;Site visitors, 2020-05-28 to 2020-06-04&#34;</span> <span class="na">header</span><span class="o">=</span><span class="s">true</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">Date,Visitors
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">csv-table</span> <span class="p">&gt;</span>}}
</span></span></code></pre></div><p>Now that I know how I want to use the shortcode, it’s time to implement the details.</p>
<div class="highlight" title="layouts/shortcodes/csv/table.html"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{ $caption := .Get &#34;caption&#34; }}
</span></span><span class="line"><span class="cl">{{ $useHeaderRow := .Get &#34;header&#34; }}
</span></span><span class="line"><span class="cl">{{ $rows := .Inner | transform.Unmarshal }}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ with $caption }}<span class="p">&lt;</span><span class="nt">caption</span><span class="p">&gt;</span>{{ . }}<span class="p">&lt;/</span><span class="nt">caption</span><span class="p">&gt;</span>{{ end }}
</span></span><span class="line"><span class="cl">  {{ if $useHeaderRow }}
</span></span><span class="line"><span class="cl">    {{ $headerRow := index $rows 0 }}
</span></span><span class="line"><span class="cl">    {{ $rows = after 1 $rows }}
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span> {{ range $headerRow }} <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>{{ . }}<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span> {{ end }} <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ end }}
</span></span><span class="line"><span class="cl">  {{ range $rows }}
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      {{ range . }}
</span></span><span class="line"><span class="cl">        {{ if (findRE &#34;^\\d+$&#34; .) }}
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">td</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;numeric&#34;</span><span class="p">&gt;</span>{{ . }}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        {{ else }}
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{ . }}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        {{ end }}
</span></span><span class="line"><span class="cl">      {{ end }}
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ end }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span></code></pre></div><ul>
<li>if there’s a header row, <a href="https://gohugo.io/functions/after/"><code>after</code></a> lets me skip past it when building the data rows</li>
<li>The regular expression I hand to <a href="https://gohugo.io/functions/findre/"><code>findRE</code></a> is a little naive, but it works for today</li>
</ul>
<p>Better!</p>
<p><img src="/post/2020/06/attachments/img/2020/csv-table.png" alt="A CSV table with headers and a caption"/></p>
<p>I still need to fiddle with my styles. This table’s a little wide for these
values. Maybe later.</p>
<p>CSV is great, but <code>transform.Unmarshal</code> supports other formats. What about those?</p>
<h2 id="digression-data-tables">Digression: data tables</h2>
<p>I got a little carried away when I learned how much <code>transform.Unmarshal</code> can
do. You could get a data structure from CSV, <a href="https://json.org">JSON</a>, <a href="/card/toml/">card/TOML</a>, or <a href="/card/yaml/">card/YAML</a>!</p>
<p>What about — what about a <strong>data</strong> table? Mind you, I’m not talking about Hugo <a href="https://gohugo.io/templates/data-templates/">data files</a> or <a href="https://gohugo.io/templates/data-templates/#data-driven-content"><code>getJSON</code></a>. That’s a great idea for later.</p>
<p>No, I’m talking about something similar to the <code>csv-table</code> case: arrays of JSON objects you paste in from somewhere else to add a little information to your blog post.</p>
<p>Heck, you don’t even need parameters. You could put caption and header details <em>in</em> the data! Might be a good idea to use a list of desired columns instead of a simple flag. That way we can pick and choose columns without editing the row objects.</p>
<p>Suppose I extracted details for the US and a couple neighbors from <a href="https://covid19api.com/">COVID19API</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">data-table</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">  &#34;caption&#34;: &#34;COVID-19 updates for 6 Jun 2020&#34;,
</span></span><span class="line"><span class="cl">  &#34;headers&#34;: [
</span></span><span class="line"><span class="cl">      &#34;Country&#34;,
</span></span><span class="line"><span class="cl">      &#34;NewConfirmed&#34;,
</span></span><span class="line"><span class="cl">      &#34;TotalConfirmed&#34;,
</span></span><span class="line"><span class="cl">      &#34;NewDeaths&#34;,
</span></span><span class="line"><span class="cl">      &#34;TotalDeaths&#34;,
</span></span><span class="line"><span class="cl">      &#34;NewRecovered&#34;,
</span></span><span class="line"><span class="cl">      &#34;TotalRecovered&#34;
</span></span><span class="line"><span class="cl">  ],
</span></span><span class="line"><span class="cl">  &#34;rows&#34;: [
</span></span><span class="line"><span class="cl">    {
</span></span><span class="line"><span class="cl">      &#34;Country&#34;: &#34;Canada&#34;,
</span></span><span class="line"><span class="cl">      &#34;CountryCode&#34;: &#34;CA&#34;,
</span></span><span class="line"><span class="cl">      &#34;Slug&#34;: &#34;canada&#34;,
</span></span><span class="line"><span class="cl">      &#34;NewConfirmed&#34;: 1356,
</span></span><span class="line"><span class="cl">      &#34;TotalConfirmed&#34;: 191894,
</span></span><span class="line"><span class="cl">      &#34;NewDeaths&#34;: 122,
</span></span><span class="line"><span class="cl">      &#34;TotalDeaths&#34;: 15554,
</span></span><span class="line"><span class="cl">      &#34;NewRecovered&#34;: 890,
</span></span><span class="line"><span class="cl">      &#34;TotalRecovered&#34;: 53074,
</span></span><span class="line"><span class="cl">      &#34;Date&#34;: &#34;2020-06-06T23:48:14Z&#34;
</span></span><span class="line"><span class="cl">    },
</span></span><span class="line"><span class="cl">    {
</span></span><span class="line"><span class="cl">      &#34;Country&#34;: &#34;Mexico&#34;,
</span></span><span class="line"><span class="cl">      &#34;CountryCode&#34;: &#34;MX&#34;,
</span></span><span class="line"><span class="cl">      &#34;Slug&#34;: &#34;mexico&#34;,
</span></span><span class="line"><span class="cl">      &#34;NewConfirmed&#34;: 4346,
</span></span><span class="line"><span class="cl">      &#34;TotalConfirmed&#34;: 110026,
</span></span><span class="line"><span class="cl">      &#34;NewDeaths&#34;: 625,
</span></span><span class="line"><span class="cl">      &#34;TotalDeaths&#34;: 13170,
</span></span><span class="line"><span class="cl">      &#34;NewRecovered&#34;: 3083,
</span></span><span class="line"><span class="cl">      &#34;TotalRecovered&#34;: 77841,
</span></span><span class="line"><span class="cl">      &#34;Date&#34;: &#34;2020-06-06T23:48:14Z&#34;
</span></span><span class="line"><span class="cl">    },
</span></span><span class="line"><span class="cl">    {
</span></span><span class="line"><span class="cl">      &#34;Country&#34;: &#34;United States of America&#34;,
</span></span><span class="line"><span class="cl">      &#34;CountryCode&#34;: &#34;US&#34;,
</span></span><span class="line"><span class="cl">      &#34;Slug&#34;: &#34;united-states&#34;,
</span></span><span class="line"><span class="cl">      &#34;NewConfirmed&#34;: 24720,
</span></span><span class="line"><span class="cl">      &#34;TotalConfirmed&#34;: 1897380,
</span></span><span class="line"><span class="cl">      &#34;NewDeaths&#34;: 921,
</span></span><span class="line"><span class="cl">      &#34;TotalDeaths&#34;: 109132,
</span></span><span class="line"><span class="cl">      &#34;NewRecovered&#34;: 6704,
</span></span><span class="line"><span class="cl">      &#34;TotalRecovered&#34;: 491706,
</span></span><span class="line"><span class="cl">      &#34;Date&#34;: &#34;2020-06-06T23:48:14Z&#34;
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">  ]
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">data-table</span> <span class="p">&gt;</span>}}
</span></span></code></pre></div><p>The logic looks similar to <code>csv-table</code>, with adjustments for data format differences.</p>
<div class="highlight" title="layouts/shortcodes/data-table.html"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{ $table := .Inner | transform.Unmarshal }}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ with $table.caption }} <span class="p">&lt;</span><span class="nt">caption</span><span class="p">&gt;</span>{{ . | markdownify }}<span class="p">&lt;/</span><span class="nt">caption</span><span class="p">&gt;</span> {{ end }}
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">thead</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      {{ range $table.headers }} <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>{{ . | humanize }}<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span> {{ end }}
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">thead</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    {{ range $table.rows }}
</span></span><span class="line"><span class="cl">      {{ $row := . }}
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        {{ range $table.headers }}
</span></span><span class="line"><span class="cl">          {{ with (index $row .) }}
</span></span><span class="line"><span class="cl">            {{ if (findRE &#34;^\\d+$&#34; .) }}
</span></span><span class="line"><span class="cl">              <span class="p">&lt;</span><span class="nt">td</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;numeric&#34;</span><span class="p">&gt;</span>{{ . | lang.NumFmt 0 }}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            {{ else }}
</span></span><span class="line"><span class="cl">              <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{ . }}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            {{ end }}
</span></span><span class="line"><span class="cl">          {{ end }}
</span></span><span class="line"><span class="cl">        {{ end }}
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    {{ end }}
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>These header fields use <a href="https://en.wikipedia.org/wiki/Camel_case">camel case</a> names like &ldquo;TotalRecovered&rdquo;. Piping them through <a href="https://gohugo.io/functions/humanize/"><code>humanize</code></a> and <a href="https://gohugo.io/functions/title/"><code>title</code></a> transforms them into distinct capitalized words: &ldquo;Total Recovered.&rdquo; That’s easier for me to read in a formatted table.</p>
<p>And — sadly, considering that the topic is <a href="https://www.mayoclinic.org/diseases-conditions/coronavirus/symptoms-causes/syc-20479963">COVID-19</a> cases — <a href="https://gohugo.io/functions/numfmt/"><code>lang.NumFmt</code></a> makes large numbers more readable.</p>
<p><img src="/post/2020/06/attachments/img/2020/data-table.png" alt="A data table"/></p>
<p>Wonderful! Wonderful formatting, anyways. The details are pretty sobering. People! Wash your hands and wear a mask!</p>
<p>There’s really only one <em>slight</em> problem with <code>data-table</code>. I don’t need it. Not today, anyways.</p>
<h2 id="what-i-need-list-tables">What I need: list tables</h2>
<p>What about that first table I mentioned? You know, the <code>elscreen</code> quick reference? <em>That</em> is the kind of table I need a shortcode for. Something like a reStructuredText <code>list-table</code>, or <a href="https://asciidoctor.org/docs/asciidoc-syntax-quick-reference/#tables">Asciidoctor tables</a>.</p>
<p>I tried different approaches with <code>transform.Unmarshal</code> and mashing YAML, TOML, or JSON lists into something useful. That got frustratingly brittle. Time to step back and reevaluate. What’s the simplest structure that still does what I want?</p>
<p>Maybe something line-oriented?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">list-table</span> <span class="na">caption</span><span class="o">=</span><span class="s">&#34;Common `elscreen` commands&#34;</span> <span class="na">header</span><span class="o">=</span><span class="s">true</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">Function
</span></span><span class="line"><span class="cl">Keys
</span></span><span class="line"><span class="cl">Description
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">`elscreen-create`
</span></span><span class="line"><span class="cl">`C-z c`
</span></span><span class="line"><span class="cl">Create a new screen and switch to it.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">`elscreen-next`
</span></span><span class="line"><span class="cl">`C-z n`
</span></span><span class="line"><span class="cl">Cycle to the next screen
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">`elscreen-previous`
</span></span><span class="line"><span class="cl">`C-z p`
</span></span><span class="line"><span class="cl">Cycle to the previous screen
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">`elscreen-kill`
</span></span><span class="line"><span class="cl">`C-z k`
</span></span><span class="line"><span class="cl">Kill the current screen
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">`elscreen-help`
</span></span><span class="line"><span class="cl">`C-z ?`
</span></span><span class="line"><span class="cl">Show ElScreen key bindings
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">list-table</span> <span class="p">&gt;</span>}}
</span></span></code></pre></div><p>Every line contains one field. Blank lines separate table rows. No special prefix characters needed, since everything’s already in a shortcode.</p>
<p>I like it. Easy to write, easy to read, and easy to parse with <a href="https://gohugo.io/functions/split/"><code>split</code></a>. Well — you need to <a href="https://gohugo.io/functions/trim/"><code>trim</code></a> a leading newline because of how <code>.Inner</code> gets handed off, but that’s the only wrinkle so far.</p>
<div class="highlight" title="layouts/shortcodes/list-table.html"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">{{ $caption := .Get &#34;caption&#34; }}
</span></span><span class="line"><span class="cl">{{ $useHeaderRow := .Get &#34;header&#34; }}
</span></span><span class="line"><span class="cl">{{ $rows := split (trim .Inner &#34;\n&#34;) &#34;\n\n&#34; }}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;table&gt;
</span></span><span class="line"><span class="cl">  {{ with $caption }}
</span></span><span class="line"><span class="cl">    &lt;caption&gt;{{ . }}&lt;/caption&gt;
</span></span><span class="line"><span class="cl">  {{ end }}
</span></span><span class="line"><span class="cl">  {{ if $useHeaderRow }}
</span></span><span class="line"><span class="cl">    {{ $headerRow := index $rows 0 }}
</span></span><span class="line"><span class="cl">    {{ $rows = after 1 $rows }}
</span></span><span class="line"><span class="cl">    &lt;tr&gt;
</span></span><span class="line"><span class="cl">      {{ range (split $headerRow &#34;\n&#34;) }} &lt;th&gt;{{ . | markdownify }}&lt;/th&gt; {{ end }}
</span></span><span class="line"><span class="cl">    &lt;/tr&gt;
</span></span><span class="line"><span class="cl">  {{ end }}
</span></span><span class="line"><span class="cl">  {{ range $rows }}
</span></span><span class="line"><span class="cl">    &lt;tr&gt;
</span></span><span class="line"><span class="cl">      {{ range (split . &#34;\n&#34;) }}
</span></span><span class="line"><span class="cl">        {{ if (findRE &#34;^\\d+$&#34; .) }}
</span></span><span class="line"><span class="cl">          &lt;td class=&#34;numeric&#34;&gt;{{ . }}&lt;/td&gt;
</span></span><span class="line"><span class="cl">        {{ else }}
</span></span><span class="line"><span class="cl">          &lt;td&gt;{{ . | markdownify }}&lt;/td&gt;
</span></span><span class="line"><span class="cl">        {{ end }}
</span></span><span class="line"><span class="cl">      {{ end }}
</span></span><span class="line"><span class="cl">    &lt;/tr&gt;
</span></span><span class="line"><span class="cl">  {{ end }}
</span></span><span class="line"><span class="cl">&lt;/table&gt;
</span></span></code></pre></div><p><img src="/post/2020/06/attachments/img/2020/list-table.png" alt="A list table!"/></p>
<p>Perfect. This will keep me going for a while. Time to stop before I get too clever.</p>
<p>Try to keep the original goal in mind when working on a thing. I could try making a universal data table shortcode. I don’t <em>need</em> a universal data table shortcode. Not yet, anyways.</p>
<h2 id="what-next">What Next?</h2>
<ul>
<li>Make a universal data table shortcode.</li>
</ul>
<p>Okay not really, but I can see a few specific conveniences I’d like to add eventually:</p>
<ul>
<li>improve the numeric value handling to recognize and properly format decimal values, including money.</li>
<li>format dates and timestamps</li>
<li>support building a simple table from <code>.Site.Data</code> or <code>getJSON</code></li>
<li>control column widths</li>
<li>control column alignment</li>
<li>refactor into partials where I can, so there’s less duplication between <code>csv-table</code>, <code>list-table</code>, and <code>data-table</code></li>
</ul>
<p>I might steal more ideas from reStructuredText. It’s fun!</p>
<p>Speaking of fun, the dog wants to go outside again.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Listing Hugo Content Extensions With Raku</title>
  <link>https://randomgeekery.org/post/2020/03/listing-hugo-content-extensions-with-raku/</link>
  <pubDate>Tue, 31 Mar 2020 14:33:29 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/03/listing-hugo-content-extensions-with-raku/</guid>
  <description>We like quick answers to important questions
How many text formatting languages have I used for my Hugo site? For that matter, how many content files were written in each?
$ hugo list all | raku -e &#39;bag(lines[1..*].map({ .split(&#34;,&#34;)[0].IO.extension })).say&#39; Bag(adoc(4), html, md(327), rst(109)) Mostly Markdown, with a fair chunk of reStructuredText and a little bit of Asciidoctor. Oh and one HTML source file, originally an Org-Jekyll experiment.
Okay that’s it.</description>
   <category>post</category> 
   <category>post</category> 
   <category>hugo</category>  <category>raku-lang</category>  <category>csv</category>  <category>site</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Twenty seconds to write a one-liner, and two days to think about it</h2><p><img src="/post/2020/03/../../../attachments/img/2020/cover-2020-03-31.jpg" alt="attachments/img/2020/cover-2020-03-31.jpg"/>
We like quick answers to important questions</p>
<p>How many text formatting languages have I used for my <a href="/card/hugo/">Hugo</a> site? For that matter, how many content files were written in each?</p>
<pre tabindex="0"><code>$ hugo list all | raku -e &#39;bag(lines[1..*].map({ .split(&#34;,&#34;)[0].IO.extension })).say&#39;
Bag(adoc(4), html, md(327), rst(109))
</code></pre><p>Mostly <a href="/card/markdown/">Markdown</a>, with a fair chunk of <a href="/card/restructuredtext/">reStructuredText</a> and a little bit of <a href="/card/asciidoctor/">Asciidoctor</a>. Oh and one HTML source file, originally an <a href="/post/2014/10/blog-writing-in-org-mode/">Org-Jekyll experiment</a>.</p>
<p>Okay that’s it. That’s the post, everyone. Time to go home!</p>
<h2 id="breaking-it-down">Breaking it down</h2>
<p>It helps me to understand the pieces I smash together in my one-liners. Read along if you like, or move on to more interesting topics. I don’t judge.</p>
<h3 id="first-off-why">First off: why?</h3>
<p>The <a href="https://gohugo.io">Hugo</a> static site generator supports multiple <a href="https://gohugo.io/content-management/formats/">content formats</a>. I use a few of them, which complicates my occasional urge to rebuild the whole site with something else.</p>
<p>If I know how my content formats are distributed, it will help me understand how much work I have cut out for me in The Eventual Inevitable Rebuild.</p>
<h3 id="hugo-list"><code>hugo list</code></h3>
<p>Hugo’s <a href="https://gohugo.io/commands/hugo_list">list</a> commands print a <a href="/card/csv/">CSV</a> list of your site’s content files. The content listed depends on which subcommand you use:</p>
<dl>
<dt><code>list all</code></dt>
<dd>Everything! Well, except section indexes.</dd>
<dt><code>list draft</code></dt>
<dd>Content with <code>draft: true</code></dd>
<dt><code>list expired</code></dt>
<dd>Content with <code>expiryDate</code> in the past</dd>
<dt><code>list future</code></dt>
<dd>Content with <code>date</code> in the future</dd>
</dl>
<p>What does that output look like?</p>
<pre tabindex="0"><code>$ hugo list all
path,slug,title,date,expiryDate,publishDate,draft,permalink
content/draft/listing-hugo-content-extensions-with-raku/index.adoc,,Listing Hugo Content Extensions With Raku,2020-03-27T22:36:13-07:00,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,true,https://randomgeekery.org/draft/listing-hugo-content-extensions-with-raku/
content/draft/managing-music-with-beets/index.adoc,,Managing My Music With Beets,2020-03-27T10:31:41-07:00,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,true,https://randomgeekery.org/draft/managing-music-with-beets/
content/post/2020/03/stdu-viewer/index.rst,,STDU Viewer,2020-03-26T23:42:16-07:00,0001-01-01T00:00:00Z,2020-03-26T23:42:16-07:00,false,https://randomgeekery.org/2020/03/26/stdu-viewer/
content/note/2020/03/every-post-has-a-uuid/index.rst,,Every Post Has a UUID,2020-03-21T19:06:00-07:00,0001-01-01T00:00:00Z,2020-03-21T19:06:00-07:00,false,https://randomgeekery.org/note/2020/81/every-post-has-a-uuid/
</code></pre><p>I could feed that to any language with a nice library for handling CSV
files — which is most of them. Heck, I could feed it to Excel!</p>
<p>Now that I think to look, there’s the <a href="https://github.com/secretGeek/awesomecsv">Awesome CSV</a> list of tools and resources.</p>
<p>But no. Today I handed it off to the first tool that came to mind.</p>
<h3 id="raku--e"><code>raku -e</code></h3>
<p>Look, we’ve all been stuck at home for a bit. I need a break from Python. How about <a href="/card/perl/">Perl</a>&rsquo;s sister language, <a href="/card/raku/">Raku</a>?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="nb">bag</span><span class="p">(</span><span class="nb">lines</span><span class="o">[</span><span class="mi">1</span><span class="o">..*].</span><span class="nb">map</span><span class="p">({</span> <span class="o">.</span><span class="nb">split</span><span class="p">(&#34;</span><span class="s2">,</span><span class="p">&#34;)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="kt">IO</span><span class="o">.</span><span class="nb">extension</span> <span class="p">}))</span><span class="o">.</span><span class="nb">say</span>
</span></span></code></pre></div><h4 id="bagsay"><code>bag(…).say</code></h4>
<p><a href="https://docs.raku.org/routine/bag"><code>bag</code></a> uses its arguments to create a <a href="https://docs.raku.org/type/Bag">Bag</a> — basically, a set that gives each member a &ldquo;weight&rdquo; based on integer values. <a href="https://docs.raku.org/type/Mu#method_say"><code>say</code></a> prints the <a href="https://docs.raku.org/routine/gist"><code>gist</code></a> of the Bag, telling me what I need to know. The highest level view of this one-liner is &ldquo;make a Bag and give me a general idea what it looks like.&rdquo;</p>
<h4 id="lines1map--"><code>lines[1..*].map({ … })</code></h4>
<p>Now I need to create that bag from <code>hugo list all</code>. <a href="https://docs.raku.org/type/IO::Handle#routine_lines"><code>lines</code></a> called as
a routine creates a list of lines from <a href="https://docs.raku.org/language/variables#$*ARGFILES"><code>$*ARGFILES</code></a>, which currently holds the piped output from my Hugo invocation. I don’t need the header line, so I use a
<a href="https://docs.raku.org/type/Range">Range</a> to <a href="https://docs.raku.org/language/subscripts#Slices">slice</a> the remaining lines.</p>
<p><a href="https://docs.raku.org/routine/map#class_Any"><code>map</code></a> applies a block to each of those lines, returning a new list to create our Bag. What’s going on in that map?</p>
<h4 id="split0ioextension"><code>.split(&quot;,&quot;)[0].IO.extension</code></h4>
<p>That leading dot? It’s an <a href="https://docs.raku.org/language/contexts#Item_context">item context</a> view of the <a href="https://docs.raku.org/language/variables#The_$__variable">topic variable</a> handed to the block by <code>map</code>. Yes, for folks who don’t feel like clicking: <em>topic variable</em> is Raku’s name for <code>$_</code>, an easily abused blessing of Perl languages.</p>
<p>So the line of comma-delimited values is <a href="https://docs.raku.org/type/Str#routine_split"><code>split</code></a> into values. Each line from Hugo’s CSV gets <code>split</code> into a list of values, but I only care about the first one. The first value is the path to the content file itself.</p>
<p>Coercing that to an <a href="https://docs.raku.org/type/IO::Path">IO::Path</a> object lets me ask for an <a href="https://docs.raku.org/type/IO::Path#method_extension"><code>extension</code></a>.</p>
<p>The block returns that extension, so when <code>map</code> is all done it has a list of file extensions:</p>
<pre tabindex="0"><code>(adoc adoc rst rst md md md rst ...)
</code></pre><p>During initialization, the Bag counts how many times each extension appears in the list. Since the result of that tally is all I care about, I print it out.</p>
<pre tabindex="0"><code>$ hugo list all | raku -e &#39;bag(lines[1..*].map({ .split(&#34;,&#34;)[0].IO.extension })).say&#39;
Bag(adoc(4), html, md(327), rst(109))
</code></pre><h2 id="alternate-versions">Alternate versions</h2>
<p>While I was learning more about my impulsive little invocation, I wondered about other ways to get the same information from Raku.</p>
<h3 id="a-bit-more-perlish">A bit more Perlish</h3>
<p>All those method dots bother you? No problem. We can use them like plain old subroutines too. Course, we have to reach for <a href="https://docs.raku.org/language/variables#$*SPEC"><code>$*SPEC</code></a>. This lower-level <a href="https://docs.raku.org/type/IO::Spec">IO::Spec</a> object understands file extensions on our platform.</p>
<pre tabindex="0"><code>$ hugo list all | raku -e &#39;say bag(map({ $*SPEC.extension(split(&#34;,&#34;, $_)[0]) }, lines[1..*]))&#39;
Bag(adoc(4), html, md(327), rst(109))
</code></pre><h3 id="using-textcsv">Using Text::CSV</h3>
<p>I know what to expect from Hugo’s CSV output, but what if I didn’t? I’d feed the standard input handle <code>$*IN</code> to H. Merijn Brand’s <a href="https://github.com/Tux/CSV">Text::CSV</a> module.</p>
<pre tabindex="0"><code>$ zef install Text::CSV
$ hugo list all | raku -MText::CSV -e \
  &#39;bag(csv(in =&gt; $*IN, headers=&gt;&#34;skip&#34;, fragment=&gt;&#34;col=1&#34;).map({ .IO.extension })).say&#39;
Bag(adoc(4), html, md(327), rst(109))
</code></pre><p>Though if I was being <em>this</em> careful, I’d probably also move away from a one-liner. But that takes us a long ways away from my original goal of getting a quick answer to an idle question.</p>
<p>Well, I satisfied my curiosity and understood a little more Raku. That was fun!</p>
]]></content:encoded>
</item>
</channel>
</rss>
