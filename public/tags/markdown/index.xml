<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>markdownonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/markdown/</link>
    <description>
      Recent contentinmarkdown on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sat, 16 Oct 2021 00:00:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/markdown/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Using markdown-it in Python</title>
  <link>https://randomgeekery.org/post/2021/10/using-markdown-it-in-python/</link>
  <pubDate>Sat, 16 Oct 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/10/using-markdown-it-in-python/</guid>
  <description>NOTE
I hope the information I share here is useful, but I’m just documenting what I needed to know after reading the markdown-it-py user guide for basic usage and principles.
What is it markdown-it-py is a Python markdown library based on markdown-it from the JavaScript world. markdown-it-py provides the core flexibility needed by MyST Markdown, a particularly capable Markdown flavor for the Executable Book Project.
markdown-it-py is configurable, extensible, and — most important for me today — not too hard to get started with.</description>
   <category>post</category> 
   <category>post</category> 
   <category>python</category>  <category>markdown</category> 
  <content:encoded><![CDATA[<h2>Figuring out just enough markdown-it-py to write this post</h2><blockquote>
<p><strong>NOTE</strong></p>
<p>I hope the information I share here is useful, but I&rsquo;m just documenting what I
needed to know <em>after</em> reading the markdown-it-py <a href="https://markdown-it-py.readthedocs.io/en/latest/using.html">user guide</a> for basic
usage and principles.</p>
</blockquote>
<h2 id="what-is-it">What is it</h2>
<p><a href="https://pypi.org/project/markdown-it-py/">markdown-it-py</a> is a Python markdown library based on <a href="https://github.com/markdown-it/markdown-it">markdown-it</a> from the JavaScript world. markdown-it-py provides the core flexibility needed by <a href="https://myst-nb.readthedocs.io/en/latest/use/markdown.html">MyST Markdown</a>, a particularly capable Markdown flavor for the <a href="https://executablebooks.org/en/latest/">Executable Book Project</a>.</p>
<p>markdown-it-py is configurable, extensible, and &mdash; most important for me today — not too hard to get started with.</p>
<h2 id="how-do-i-install-it">How do I install it</h2>
<p>markdown-it-py alone gets you &ldquo;enough&rdquo;. Everything you need for <a href="https://commonmark.org">CommonMark</a>, at least. But I want more than enough. I want all the features I can reasonably gather under one install.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> pip install markdown-it-py<span class="o">[</span>linkify,plugins<span class="o">]</span>
</span></span></code></pre>
</figure><p>What did that just install?</p>
<dl>
<dt><code>markdown-it-py</code></dt>
<dd>provides core markdown handling sufficient for common expected behavior</dd>
<dt><a href="https://pypi.org/project/linkify-it-py/"><code>linkify-it-py</code></a></dt>
<dd>enables recognition of URLs embedded in text strings; needs additional plugins to <em>do</em> anything with those URLs</dd>
<dt><a href="https://pypi.org/project/mdit-py-plugins/"><code>mdit-py-plugins</code></a></dt>
<dd>provides a collection of core plugins that make <code>markdown-it-py</code> useful to a feature-happy person such as myself</dd>
</dl>
<h2 id="how-do-i-use-it">How do I use it</h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">markdown_it</span> <span class="kn">import</span> <span class="n">MarkdownIt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">markdown</span> <span class="o">=</span> <span class="s2">&#34;Hello, **world**&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">md</span> <span class="o">=</span> <span class="n">MarkdownIt</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">))</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Hello, <span class="p">&lt;</span><span class="nt">strong</span><span class="p">&gt;</span>world<span class="p">&lt;/</span><span class="nt">strong</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>But I need to be just a <em>little</em> fancier than &ldquo;Hello World.&rdquo; Let&rsquo;s build a little <a href="https://typer.tiangolo.com">Typer</a> application that takes a markdown path and makes an HTML fragment. While I&rsquo;m at it, I can borrow from my <a href="/post/2021/08/trying-a-thing-with-neovim/">neovim rplugin</a> to fit everything into my Hugo site.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">typer</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">markdown_it</span> <span class="kn">import</span> <span class="n">MarkdownIt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return HTML string rendered from markdown source.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">md</span> <span class="o">=</span> <span class="n">MarkdownIt</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">source_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Transforms markdown into HTML with markdown-it-py.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">target_path</span> <span class="o">=</span> <span class="n">source_path</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;.md.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;.html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">source_path</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">markdown</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">html</span> <span class="o">=</span> <span class="n">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">target_path</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">typer</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">)</span></span></span></code></pre>
</figure><p>For the moment I&rsquo;ll rely on Python to let me know if I try rendering a Markdown file that doesn&rsquo;t exist.</p>
<p>This will turn a single <code>.md.txt</code> file - the extension I&rsquo;m using to slide past Hugo&rsquo;s default Markdown handling - into HTML. I even get a nice <code>--help</code> blurb.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> python rendermd.py --help
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Usage: rendermd.py [OPTIONS] SOURCE_PATH
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">  Transforms markdown into HTML with markdown-it-py.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Arguments:
</span></span></span><span class="line"><span class="cl"><span class="go">  SOURCE_PATH  [required]
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Options:
</span></span></span><span class="line"><span class="cl"><span class="go">  --install-completion [bash|zsh|fish|powershell|pwsh]
</span></span></span><span class="line"><span class="cl"><span class="go">                                  Install completion for the specified shell.
</span></span></span><span class="line"><span class="cl"><span class="go">  --show-completion [bash|zsh|fish|powershell|pwsh]
</span></span></span><span class="line"><span class="cl"><span class="go">                                  Show completion for the specified shell, to
</span></span></span><span class="line"><span class="cl"><span class="go">                                  copy it or customize the installation.
</span></span></span><span class="line"><span class="cl"><span class="go">  --help                          Show this message and exit.
</span></span></span></code></pre>
</figure><p>Now I start adding capabilities. If you see this post on the site, you&rsquo;ll know it worked.</p>
<h2 id="picking-a-preset-for-common-patterns">Picking a preset for common patterns</h2>
<p><code>markdown-it-py</code> provides predefined parser presets, allowing you to choose between common parsing patterns.</p>
<dl>
<dt><code>commonmark</code></dt>
<dd>the default; sticks with the core CommonMark specification; probably good enough for 80% of the Markdown that gets written</dd>
<dt><code>gfm-like</code></dt>
<dd>similar to Github-flavored Markdown; better if you need tables and URL transformation</dd>
<dt><code>js-default</code></dt>
<dd>similar to markdown-it base behavior; adds typographical replacements like &ldquo;smart quotes&rdquo; to the <code>gfm-like</code> set</dd>
<dt><code>zero</code></dt>
<dd>basically just breaks text into paragraphs; provides a bare minimum for you to build a highly custom Markdown parser</dd>
</dl>
<p>I went with <code>js_default</code> for my own baseline because it enables the most core features.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return HTML string rendered from markdown source.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">md</span> <span class="o">=</span> <span class="n">MarkdownIt</span><span class="p">(</span><span class="s2">&#34;js-default&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span></span></span></code></pre>
</figure><h2 id="using-options-to-tune-your-parser">Using options to tune your parser</h2>
<p>Even with presets available, there are common tweaks that some folks can&rsquo;t live with and others can&rsquo;t live without. <code>markdown-it-py</code> wraps those up in a single dictionary of options.</p>
<dl>
<dt><code>maxNesting</code></dt>
<dd>recursion protection; think of it as a number for &ldquo;how fancy can I get with my Markdown?&rdquo;</dd>
<dt><code>html</code></dt>
<dd>allow raw HTML through</dd>
<dt><code>linkify</code></dt>
<dd>transform URLs into links</dd>
<dt><code>typographer</code></dt>
<dd>processes assorted <a href="https://markdown-it-py.readthedocs.io/en/latest/using.html#typographic-components">typographic conventions</a> including proper quote marks</dd>
<dt><code>quotes</code></dt>
<dd>what double and single quotes look like if you enable <code>typographer</code></dd>
<dt><code>xhtmlOut</code></dt>
<dd>ensure output is valid in the ancient XHTML dialect</dd>
<dt><code>breaks</code></dt>
<dd>treat line breaks in source as <code>&lt;br&gt;</code> elements</dd>
<dt><code>langPrefix</code></dt>
<dd>CSS class prefix for code blocks; <code>language-python</code>, <code>language-console</code> etc</dd>
<dt><code>highlight</code></dt>
<dd>a function to provide syntax highlighting for code blocks</dd>
</dl>
<p>Presets have default values for each of these options.</p>
<table>
<thead>
<tr>
<th>Option</th>
<th><code>commonmark</code></th>
<th><code>gfm_like</code></th>
<th><code>js_default</code></th>
<th><code>zero</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>maxNesting</code></td>
<td><code>20</code></td>
<td><code>20</code></td>
<td><code>100</code></td>
<td><code>20</code></td>
</tr>
<tr>
<td><code>html</code></td>
<td>enabled</td>
<td>enabled</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td><code>linkify</code></td>
<td>—</td>
<td>enabled</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td><code>typographer</code></td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td><code>quotes</code></td>
<td><code>“”‘’</code></td>
<td><code>“”‘’</code></td>
<td><code>“”‘’</code></td>
<td><code>“”‘’</code></td>
</tr>
<tr>
<td><code>xhtmlOut</code></td>
<td>enabled</td>
<td>enabled</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td><code>breaks</code></td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td><code>langPrefix</code></td>
<td><code>language-</code></td>
<td><code>language-</code></td>
<td><code>language-</code></td>
<td><code>language-</code></td>
</tr>
<tr>
<td><code>highlight</code></td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
</tbody>
</table>
<p>I like fancy quotes. I expect URLs to display as links. I occasionally need to fall back to raw <abbr title="HyperText Markup Language">HTML</abbr>.But most importantly on this here blog: I insist on syntax highlighting.</p>
<h3 id="adding-a-highlight-function">Adding a highlight function</h3>
<p>Rather than decide for themselves how syntax highlighting is done, the markdown-it-py folks added a single option for us to hook in a function using <em>our</em> preferred approach.</p>
<p>The highlight function should take three arguments:</p>
<ul>
<li>the string of code to highlight</li>
<li>the lexer name</li>
<li>a dictionary of any additional attributes</li>
</ul>
<p>You could use whatever highlighting code you want. You could even have your function call out to an external program. I use <a href="https://pygments.org">Pygments</a> because it&rsquo;s familiar.</p>
<p>Also, I&rsquo;m going to ignore <code>attrs</code> for now. I rarely add special options to my code samples, so it&rsquo;s kind of wasted on me. So far.</p>
<p>Better make a note or something in case I forget that I&rsquo;m ignoring it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">highlight_code</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">attrs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Highlight a block of code&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">attrs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Ignoring </span><span class="si">{</span><span class="n">attrs</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">lexer</span> <span class="o">=</span> <span class="n">get_lexer_by_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">formatter</span> <span class="o">=</span> <span class="n">HtmlFormatter</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">highlight</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">lexer</span><span class="p">,</span> <span class="n">formatter</span><span class="p">)</span></span></span></code></pre>
</figure><p>Okay, what&rsquo;s <code>make_html</code> look like now, with options set and highlighting function defined?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return HTML string rendered from markdown source.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">md</span> <span class="o">=</span> <span class="n">MarkdownIt</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;js-default&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;linkify&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;html&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;typographer&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;highlight&#34;</span><span class="p">:</span> <span class="n">highlight_code</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span></span></span></code></pre>
</figure><p>Still a few pieces missing from <em>my</em> minimal toolkit. I need to dig a little deeper than I planned for a &ldquo;hey friends, markdown-it-py looks like fun&rdquo; post. But I at least want to render the kind of posts I would write.</p>
<p>For that I need to use some plugins. Good thing I installed <code>mdit-py-plugins</code>.</p>
<h2 id="adding-parser-functionality-with-plugins">Adding parser functionality with plugins</h2>
<p>mdit-py-plugins bundles many plugins into a single library. Today I need no plugins beyond what that library provides.</p>
<h3 id="definition-lists">definition lists</h3>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl">Description lists</a> have been core to my HTML authoring flow since forever. I&rsquo;ll write the HTML myself if I have to. Fortunately, I don&rsquo;t have to, thanks to the <a href="https://mdit-py-plugins.readthedocs.io/en/latest/#definition-lists">deflist</a> plugin.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mdit_py_plugins</span> <span class="kn">import</span> <span class="n">deflist</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">md</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="n">deflist</span><span class="o">.</span><span class="n">deflist_plugin</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span></span></span></code></pre>
</figure><p>Now I can write a definition list:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">[`markdown-it-py`][markdown-it-py]
</span></span><span class="line"><span class="cl">: provides core markdown handling sufficient for common expected behavior
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[`linkify-it-py`][linkify-it-py]
</span></span><span class="line"><span class="cl">: enables recognition of URLs embedded in text strings; needs additional plugins
</span></span><span class="line"><span class="cl">  to <span class="ge">*do*</span> anything with those URLs
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[`mdit-py-plugins`][mdit-py-plugins]
</span></span><span class="line"><span class="cl">: provides a collection of core plugins that make <span class="sb">`markdown-it-py`</span> useful to a 
</span></span><span class="line"><span class="cl">  feature-happy person such as myself</span></span></code></pre>
</figure><p>And markdown-it-py produces a proper description list:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">dl</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dt</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://pypi.org/project/markdown-it-py/&#34;</span><span class="p">&gt;&lt;</span><span class="nt">code</span><span class="p">&gt;</span>markdown-it-py<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">dt</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dd</span><span class="p">&gt;</span>provides core markdown handling sufficient for common expected behavior<span class="p">&lt;/</span><span class="nt">dd</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dt</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://pypi.org/project/linkify-it-py/&#34;</span><span class="p">&gt;&lt;</span><span class="nt">code</span><span class="p">&gt;</span>linkify-it-py<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">dt</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dd</span><span class="p">&gt;</span>Enables recognition of URLs embedded in text strings; needs additional plugins
</span></span><span class="line"><span class="cl">    to <span class="p">&lt;</span><span class="nt">em</span><span class="p">&gt;</span>do<span class="p">&lt;/</span><span class="nt">em</span><span class="p">&gt;</span> anything with those URLs<span class="p">&lt;/</span><span class="nt">dd</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dt</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://pypi.org/project/mdit-py-plugins/&#34;</span><span class="p">&gt;&lt;</span><span class="nt">code</span><span class="p">&gt;</span>mdit-py-plugins<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">dt</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dd</span><span class="p">&gt;</span>Provides a collection of core plugins that make <span class="p">&lt;</span><span class="nt">code</span><span class="p">&gt;</span>markdown-it-py<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;</span> useful to a
</span></span><span class="line"><span class="cl">    feature-happy person such as myself<span class="p">&lt;/</span><span class="nt">dd</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">dl</span><span class="p">&gt;</span></span></span></code></pre>
</figure><h3 id="admonition-blocks">admonition blocks</h3>
<p>So about a week ago, I was writing the first version of this post. I was nearly done. Then I got a little too tired and deleted the wrong file — without adding it to the repo first!</p>
<p>Oops.</p>
<p>Anyways, this redraft is less of a tutorial and more of a notes dump. I want to warn folks about that with a little blurb at the top. I can use the <a href="https://mdit-py-plugins.readthedocs.io/en/latest/#containers">containers</a> plugin for that. The plugin provides slots for validation and deeper processing. All I want today is a <code>&lt;div&gt;</code> with custom class. I can use CSS for the rest.</p>
<p>Using the container plugin with a <code>name</code> option provides that much.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mdit_py_plugins</span> <span class="kn">import</span> <span class="n">container</span><span class="p">,</span> <span class="n">deflist</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">md</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="n">container</span><span class="o">.</span><span class="n">container_plugin</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">&#34;note&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span></span></span></code></pre>
</figure><p>A <code>note</code> container looks like this in the markdown:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">::: note
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">This is my <span class="ge">*note*</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">:::</span></span></code></pre>
</figure><p>Without any additional configuration, it produces this HTML:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;note&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>This is my <span class="p">&lt;</span><span class="nt">em</span><span class="p">&gt;</span>note<span class="p">&lt;/</span><span class="nt">em</span><span class="p">&gt;</span>.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span></span></span></code></pre>
</figure><h2 id="good-enough">Good enough!</h2>
<p>Stopping here because it&rsquo;s good enough for what I wrote so far today. But there is plenty more to explore. markdown-it-py allows reviewing and manipulating parsed <a href="https://markdown-it-py.readthedocs.io/en/latest/using.html#the-token-stream">tokens</a> directly. Plus there&rsquo;s the whole MyST Markdown thing to explore.</p>
<p>But for now we&rsquo;re good. Let me drop in the Python code that transformed this post in the context of my Hugo site, then go convert the Typer logic to <a href="https://pyinvoke.org">Invoke</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/python</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">frontmatter</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">rich</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">typer</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">markdown_it</span> <span class="kn">import</span> <span class="n">MarkdownIt</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mdit_py_plugins</span> <span class="kn">import</span> <span class="n">container</span><span class="p">,</span> <span class="n">deflist</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pygments</span> <span class="kn">import</span> <span class="n">highlight</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pygments.formatters</span> <span class="kn">import</span> <span class="n">HtmlFormatter</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pygments.lexers</span> <span class="kn">import</span> <span class="n">get_lexer_by_name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">highlight_code</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">attrs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Highlight a block of code&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">attrs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Ignoring </span><span class="si">{</span><span class="n">attrs</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">lexer</span> <span class="o">=</span> <span class="n">get_lexer_by_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">formatter</span> <span class="o">=</span> <span class="n">HtmlFormatter</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">highlight</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">lexer</span><span class="p">,</span> <span class="n">formatter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return HTML string rendered from markdown source.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">md</span> <span class="o">=</span> <span class="n">MarkdownIt</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;js-default&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;linkify&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;html&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;typographer&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;highlight&#34;</span><span class="p">:</span> <span class="n">highlight_code</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">md</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="n">deflist</span><span class="o">.</span><span class="n">deflist_plugin</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">md</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="n">container</span><span class="o">.</span><span class="n">container_plugin</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">&#34;note&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">source_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Transforms markdown into HTML with markdown-it-py.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">target_path</span> <span class="o">=</span> <span class="n">source_path</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;.md.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;.html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span> <span class="o">=</span> <span class="n">frontmatter</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">source_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">make_html</span><span class="p">(</span><span class="n">post</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span><span class="o">.</span><span class="n">metadata</span><span class="p">[</span><span class="s2">&#34;format&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;md&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">target_path</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">frontmatter</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">post</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">typer</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">)</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Post: I wrote this note in Hugo with markdown-it-py</title>
  <link>https://randomgeekery.org/post/2021/10/i-wrote-this-note-in-hugo-with-markdown-it-py/</link>
  <pubDate>Sat, 09 Oct 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/10/i-wrote-this-note-in-hugo-with-markdown-it-py/</guid>
  <description>Blog post pending. But yeah. markdown-it-py preprocessing Markdown content for my card/Hugo site.
Why?
I don’t understand the question. To find out if I can, I guess?
Working well enough that I added another Neovim remote plugin to handle the task.</description>
   <category>post</category> 
   <category>note</category> 
   <category>python</category>  <category>markdown</category>  <category>puttering</category>  <category>wild-weekend</category> 
  <content:encoded><![CDATA[<p>Blog post pending. But yeah. <a href="https://markdown-it-py.readthedocs.io/en/latest/index.html"><code>markdown-it-py</code></a> preprocessing Markdown content for my <a href="/card/hugo/">card/Hugo</a> site.</p>
<p>Why?</p>
<p>I don&rsquo;t understand the question. To find out if I can, I guess?</p>
<p>Working well enough that I added <a href="/post/2021/08/trying-a-thing-with-neovim/">another</a> Neovim remote plugin to handle the task.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Saving some MyST Markdown blogging links for later</title>
  <link>https://randomgeekery.org/post/2021/09/saving-some-myst-markdown-blogging-links-for-later/</link>
  <pubDate>Fri, 03 Sep 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/09/saving-some-myst-markdown-blogging-links-for-later/</guid>
  <description>Got distracted by a note from @choldgraf about MyST, a Markdown flavor aimed at technical writing, in a Twitter conversation that was not specifically about MyST.
Two things you may be interested in:
Markdown in Sphinx : https://t.co/52Rj05JsqV
Automatically rebuild are load docs in sphinx: https://t.co/9lvFyCbB0W
Pydata theme: https://t.co/9qXss5cN15
Lots of other nice themes here: https://t.co/27G9oawNVu
— Chris Holdgraf (@choldgraf) September 3, 2021 This distracted me from the NuxtJS blog idea that was distracting me from a card/Nikola blog idea that was distracting me from an attempt at porting my site to card/Astro that was distracting me from a card/Nanoc-in-Python project idea that was distracting me from preparing a client site proposal that was distracting me from Labor Day weekend prep that was distracting me from the work chat that was distracting me from work.</description>
   <category>post</category> 
   <category>post</category> 
   <category>markdown</category>  <category>python</category>  <category>javascript</category>  <category>plugins</category>  <category>distractions</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>Because structured Markdown is an easier SSG target than reStructuredText</h2><p>Got distracted by a note from <a href="https://twitter.com/choldgraf">@choldgraf</a> about <a href="https://myst-parser.readthedocs.io/en/latest/">MyST</a>, a Markdown flavor aimed at technical writing, in a <a href="https://twitter.com/willmcgugan/status/1433735471323099139">Twitter conversation</a> that was not specifically about MyST.</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Two things you may be interested in:<br><br>Markdown in Sphinx : <a href="https://t.co/52Rj05JsqV">https://t.co/52Rj05JsqV</a><br><br>Automatically rebuild are load docs in sphinx: <a href="https://t.co/9lvFyCbB0W">https://t.co/9lvFyCbB0W</a><br><br>Pydata theme: <a href="https://t.co/9qXss5cN15">https://t.co/9qXss5cN15</a><br><br>Lots of other nice themes here: <a href="https://t.co/27G9oawNVu">https://t.co/27G9oawNVu</a></p>&mdash; Chris Holdgraf (@choldgraf) <a href="https://twitter.com/choldgraf/status/1433802076438482949?ref_src=twsrc%5Etfw">September 3, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>This distracted me from the <a href="https://nuxtjs.org/">NuxtJS</a> blog idea that was distracting me from a <a href="/card/nikola/">card/Nikola</a> blog idea that was distracting me from an attempt at porting my site to <a href="/card/astro/">card/Astro</a> that was distracting me from a <a href="/card/nanoc/">card/Nanoc</a>-in-Python project idea that was distracting me from preparing a client site proposal that was distracting me from Labor Day weekend prep that was distracting me from the work chat that was distracting me from work.</p>
<p>I had a question about using MyST for blogging, but decided to look it up for myself. Then I was going to tweet it but got distracted by the thought that I needed more persistent record what with all the distraction.</p>
<p>The question I almost tweeted:</p>
<blockquote>
<p>Are there plugins or tools for using MyST to author blog posts?</p>
</blockquote>
<p>My answer:</p>
<blockquote>
<p>Why yes there are! A quick search found these, and there are doubtless
other resources.</p>
<ul>
<li><a href="https://github.com/executablebooks/markdown-it-myst">markdown-it-myst</a> for the <code>.js</code> blogs</li>
<li>A <a href="https://plugins.getnikola.com/v8/myst/">myst Nikola plugin</a> for the <code>.py</code> blogs</li>
</ul>
</blockquote>
<p>Could probably even use it in <a href="/card/hugo/">card/Hugo</a> if I make another <a href="/post/2021/08/trying-a-thing-with-neovim/">neovim plugin</a> for <code>.md.txt</code> files.</p>
<p>Anyways, time to refill the coffee and — flips past the Distraction Cards — work! Oh jeez yeah work.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Maybe I don&#39;t know much about Markdown, he says</title>
  <link>https://randomgeekery.org/post/2021/03/maybe-i-dont-know-much-about-markdown-he-says/</link>
  <pubDate>Sun, 07 Mar 2021 15:40:29 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/03/maybe-i-dont-know-much-about-markdown-he-says/</guid>
  <description>John Gruber, the creator of card/Markdown, commenting on Markdown editors and their trend towards hiding the syntax:
Maybe I don’t know much about Markdown, but my understanding is that the whole point of it is to provide a syntax where the most common HTML tags for prose can be replaced by simple punctuation characters that are meant to be visible to the writer.
A joke so dry you’ll need a glass of water when you get it.</description>
   <category>post</category> 
   <category>note</category> 
   <category>links</category>  <category>markdown</category> 
  <content:encoded><![CDATA[<p>John Gruber, the creator of <a href="/card/markdown/">card/Markdown</a>, <a href="https://daringfireball.net/linked/2021/03/05/snell-ios-markdown-editors">commenting</a> on Markdown editors and their trend towards hiding the syntax:</p>
<blockquote>
<p>Maybe I don’t know much about Markdown, but my understanding is that the whole point of it is to provide a syntax where the most common HTML tags for prose can be replaced by simple punctuation characters that are meant to be visible to the writer.</p>
</blockquote>
<p>A joke so dry you&rsquo;ll need a glass of water when you get it.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Exporting From Org to Markdown</title>
  <link>https://randomgeekery.org/post/2014/05/exporting-from-org-to-markdown/</link>
  <pubDate>Fri, 16 May 2014 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2014/05/exporting-from-org-to-markdown/</guid>
  <description>tldr
C-h v org-export-backends to ensure that card/Markdown export is available. C-c C-e m m invokes org-md-export-to-markdown. You may need to update card/Org, which could be a fussy process.
Let’s say that I am supposed to be writing a blog post. Not this one, another one. I have spent a lot of time learning about Org mode, and I’m not ready to leave it just yet. There’s a problem, though.</description>
   <category>post</category> 
   <category>post</category> 
   <category>emacs</category>  <category>orgmode</category>  <category>markdown</category>  <category>tools</category> 
  <content:encoded><![CDATA[<blockquote>
<p><strong><a href="/card/tldr/">tldr</a></strong></p>
<p><code>C-h v org-export-backends</code> to ensure that <a href="/card/markdown/">card/Markdown</a> export is available. <code>C-c C-e m m</code> invokes <code>org-md-export-to-markdown</code>. You may need to update <a href="/card/org/">card/Org</a>, which could be a fussy process.</p>
</blockquote>
<p>Let’s say that I am supposed to be writing a blog post. Not this one, another one. I have spent a lot of time learning about <a href="http://orgmode.org">Org mode</a>, and I’m not ready to leave it just yet. There’s a problem, though. The blog that I’m supposed to be contributing to looks a bit like <a href="/card/jekyll/">Jekyll</a>. Specifically, it uses <a href="http://daringfireball.net/projects/markdown">Markdown</a> formatting. That’s nice, but I <em>really</em> like Org mode formatting this week.</p>
<p>No problem!</p>
<p>According to the <a href="http://orgmode.org/manual/Markdown-export.html">Org Markdown export page</a>, <code>C-c C-e</code> opens an Export view. <code>m m</code> then triggers <code>(org-md-export-to-markdown)</code>, which produces <code>post.md</code> from <code>post.org</code>.</p>
<p>Except that <code>C-c C-e m m</code> just exported the post to a <a href="http://freemind.sourceforge.net/wiki/index.php/Main_Page">FreeMind mind map</a>. Cool, but not Markdown. <code>org-md-export-to-markdown</code> isn’t even available.</p>
<p>Problem.</p>
<p>Apparently I have <code>org-mode</code> 7.9.3f installed. The documentation on the Org Mode site is for the newest version: 8.2.6. How do I get the new version? The <a href="http://orgmode.org/manual/Installation.html">installation instructions</a> suggest it can be done with <code>package-install</code> before you’ve loaded any org files.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >package-install RET org</code></pre>
</figure><p>And now I have 8.2.6.</p>
<p>No problem. Except now I’m getting an error with <code>C-c C-e m</code>. Oh, I see the problem. There are only a few <a href="http://orgmode.org/manual/Export-back_002dends.html#Export-back_002dends">export backends</a> enabled by default.</p>
<ul>
<li>ascii</li>
<li>html</li>
<li>icalendar</li>
<li>latex</li>
</ul>
<p>I need to set <code>org-export-backends</code>. The documentation specifies that I should use the Emacs customization interface. All righty.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >C-h v org-export-backends</code></pre>
</figure><p>I end up with this in my <code>.init.el</code></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">custom-set-variables</span>
</span></span><span class="line"><span class="cl"> <span class="c1">;; custom-set-variables was added by Custom.</span>
</span></span><span class="line"><span class="cl"> <span class="c1">;; If you edit it by hand, you could mess it up, so be careful.</span>
</span></span><span class="line"><span class="cl"> <span class="c1">;; Your init file should contain only one such instance.</span>
</span></span><span class="line"><span class="cl"> <span class="c1">;; If there is more than one, they won&#39;t work right.</span>
</span></span><span class="line"><span class="cl"> <span class="o">&#39;</span><span class="p">(</span><span class="nv">org-export-backends</span> <span class="p">(</span><span class="nb">quote</span> <span class="p">(</span><span class="nv">ascii</span> <span class="nv">html</span> <span class="nv">icalendar</span> <span class="nv">latex</span> <span class="nv">md</span><span class="p">))))</span></span></span></code></pre>
</figure><p>The export interface is better, but now I get a <strong>different</strong> error.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >org-refresh-category-properties: Invalid function: org-with-silent-modifications</code></pre>
</figure><p>This <a href="http://www.benjaminmgross.com/markdown-export-on-aquamacs/">Markdown Export on Aquamacs</a> post by Benjamin M. Gross was particularly helpful. He suggests you use the package manager to remove and reinstall the <code>org</code> package.</p>
<p>So I did. There was a confusing moment where the package manager didn’t seem to realize that a Org Mode was installed. Just turns out that a newer version was available. I installed the newer version and restarted emacs.</p>
<p>Trying <code>C-c C-e m m</code> one more time before I give up for now.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-md" data-lang="md"><span class="line"><span class="cl"><span class="gh"># Exporting From Org to Markdown
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>
</span></span><span class="line"><span class="cl">Let&#39;s say that I am supposed to be writing a blog post. Not this
</span></span><span class="line"><span class="cl">one, another one. I have spent a lot of time learning about
</span></span><span class="line"><span class="cl">[<span class="nt">Org mode</span>](<span class="na">http://orgmode.org</span>), and I&#39;m not ready to leave it just yet.
</span></span><span class="line"><span class="cl">There&#39;s a problem, though. The blog that I&#39;m supposed to be contributing
</span></span><span class="line"><span class="cl">to looks a bit like [<span class="nt">Jekyll</span>](<span class="na">http://jekyllrb.com/</span>). Specifically, it uses
</span></span><span class="line"><span class="cl">[<span class="nt">Markdown</span>](<span class="na">http://daringfireball.net/projects/markdown/</span>)
</span></span><span class="line"><span class="cl">formatting. That&#39;s nice, but I <span class="ge">*really*</span> like <span class="sb">`org-mode`</span> formatting
</span></span><span class="line"><span class="cl">this week.</span></span></code></pre>
</figure><p>See? No problem!</p>
<p>Now I just need to <em>write</em> the post. Not this one. The other one.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Python Blogger Refresh, Part 1</title>
  <link>https://randomgeekery.org/post/2009/06/python-blogger-refresh-part-1/</link>
  <pubDate>Tue, 09 Jun 2009 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2009/06/python-blogger-refresh-part-1/</guid>
  <description></description>
   <category>post</category> 
   <category>post</category> 
   <category>blogger</category>  <category>gdata</category>  <category>markdown</category>  <category>python</category>  <category>blogspot</category> 
  <content:encoded><![CDATA[<h2 id="the-idea">The Idea</h2>
<p>I  <a href="/post/2007/12/python-loves-blogger-part-1/">wrote a post</a> a while back about using <a href="/card/python/">Python</a> to write <a href="http://blogspot.com">Blogspot</a> posts from the command line. It took me about two weeks to completely forget about it. Still, it&rsquo;s one of the few posts on this blog that gets regular visits, and the code &hellip; well, the code is not great. It was a fair effort, but it didn&rsquo;t even accomplish the things I had initially set out to do. Account information is hard-coded into the code, for example. I also blundered along haphazardly with parsing metadata information myself despite the fact that <a href="https://pypi.python.org/pypi/Markdown">Python Markdown</a> has an extension which is perfectly capable of <a href="https://pythonhosted.org/Markdown/extensions/meta_data.html">handling metadata</a>. Well, let&rsquo;s look at that code again.</p>
<!--more-->
<p>There&rsquo;s a fresh install of <a href="http://ubuntu.com">Ubuntu</a> 9.04 on my laptop and I&rsquo;ve got projects I feel like talking about. So let&rsquo;s get started.</p>
<p>The basic flow will be the same. Given a command line that looks like this:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ python post-to-blog.py &lt;post.txt&gt;</code></pre>
</figure><ol>
<li>Load settings</li>
<li>Create a HTML formatted string based on the Markdown-formatted text found in <code>post.txt</code></li>
<li>Request that Blogger store the post using post data and user settings</li>
<li>Report the result of the publish request.</li>
</ol>
<p>I&rsquo;ll be starting from the code that already exists in the earlier posts. We can start this project with confidence once we have everything set up and we&rsquo;re sure the old code still does what we expect it to.</p>
<h2 id="setup">Setup</h2>
<p>Ubuntu 9.04 already has a copy of Python 2.6 installed. I suppose I could grab a fresh copy of the Python source and build it myself, but I don&rsquo;t really feel like it right now. Sometimes I&rsquo;m just lazy. Ubuntu&rsquo;s 2.6 will work well enough for my needs.</p>
<p>Modules are a different matter. I want fresh copies of Python Markdown and <a href="https://github.com/google/gdata-python-client">GData</a>, rather than the somewhat dated modules that are available in the repository. There are a fair number of bug fixes and new features in the latest versions.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ cd ~/src
$ wget http://gdata-python-client.googlecode.com/files/gdata-1.3.3.tar.gz
$ tar xfz gdata-1.3.3.tar.gz
$ cd gdata-1.3.3/
$ sudo python setup.py install
$ cd ../
$ wget http://pypi.python.org/packages/source/M/Markdown/Markdown-2.0.tar.gz
$ tar xfvz Markdown-2.0.tar.gz
$ cd Markdown-2.0/
$ sudo python setup.py install</code></pre>
</figure><h2 id="the-starting-code">The Starting Code</h2>
<p>Now that I have the most important dependencies installed, I can revisit the code from the earlier posts. There&rsquo;s no local copy of the code, so I will just copy and paste the original code, run the tests, and share the starting code. What could possibly go wrong?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ cd ~/Projects/python-blogger
$ python post-to-blog.py -D
...
***Test Failed*** 19 failures.</code></pre>
</figure><p>Ouch. Something has gone horribly wrong in copying and pasting the code from the posts, the module behaviors have changed, or maybe they never worked as well as I thought they did. Either way, this is bad. Let me fix these issues and then I&rsquo;ll share the <em>new</em> starting code with you.</p>
<h2 id="the-new-starting-code">The New Starting Code</h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># post-to-blog.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">markdown</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">xml.etree</span> <span class="kn">import</span> <span class="n">ElementTree</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">gdata</span> <span class="kn">import</span> <span class="n">service</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">gdata</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">atom</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BlogPost</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;A single posting for a blog owned by a Blogger account
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    &gt;&gt;&gt; post = BlogPost(&#39;Brian Wisti&#39;, &#39;me@here.com&#39;, &#39;mysecretpassword&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">    &gt;&gt;&gt; post.body = &#39;This is a paragraph&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">    &gt;&gt;&gt; print post.body
</span></span></span><span class="line"><span class="cl"><span class="s2">    &lt;p&gt;This is a paragraph&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">author</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">config</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__author</span> <span class="o">=</span> <span class="n">author</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__account</span> <span class="o">=</span> <span class="n">account</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__password</span> <span class="o">=</span> <span class="n">password</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">set_body</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bodyText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Stores plain text which will be used as the post body
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post = BlogPost(&#39;Brian Wisti&#39;, &#39;me@here.com&#39;, &#39;mysecretpassword&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.set_body(&#39;This is a paragraph&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="n">bodyText</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">get_body</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Access a HTML-formatted version of the post body
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post = BlogPost(&#39;Brian Wisti&#39;, &#39;me@here.com&#39;, &#39;mysecretpassword&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.set_body(&#39;This is a paragraph&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; print post.get_body()
</span></span></span><span class="line"><span class="cl"><span class="s2">        &lt;p&gt;This is a paragraph&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">markdown</span><span class="o">.</span><span class="n">markdown</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">body</span> <span class="o">=</span> <span class="nb">property</span><span class="p">(</span><span class="n">get_body</span><span class="p">,</span> <span class="n">set_body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parseConfig</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">configText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Reads and stores the directives from the post&#39;s config header.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post = BlogPost(&#39;Brian Wisti&#39;, &#39;me@here.com&#39;, &#39;mysecretpassword&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; import os
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; myConfig = os.linesep.join([&#34;key1: value1&#34;, &#34;key2: value2&#34;])
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.parseConfig(myConfig)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.config[&#39;key1&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#39;value1&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.config[&#39;key2&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#39;value2&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">textLines</span> <span class="o">=</span> <span class="n">configText</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">textLines</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parsePost</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">postText</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Parses the contents of a full post, including header and body.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; import os
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; myText = os.linesep.join([&#34;title: Test&#34;, &#34;--&#34;, &#34;This is a test&#34;])
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post = BlogPost(&#39;Brian Wisti&#39;, &#39;me@here.com&#39;, &#39;mysecretpassword&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; post.parsePost(myText)
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; print post.config[&#39;title&#39;]
</span></span></span><span class="line"><span class="cl"><span class="s2">        Test
</span></span></span><span class="line"><span class="cl"><span class="s2">        &gt;&gt;&gt; print post.body
</span></span></span><span class="line"><span class="cl"><span class="s2">        &lt;p&gt;This is a test&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">header</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="n">postText</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;--&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">parseConfig</span><span class="p">(</span><span class="n">header</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="nf">sendPost</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;&#34;&#34;Log into Blogger and submit my already parsed post&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Authenticate using ClientLogin</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="n">GDataService</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__account</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">__password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span><span class="o">.</span><span class="n">source</span> <span class="o">=</span> <span class="s1">&#39;post-to-blog.py_v01.0&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span><span class="o">.</span><span class="n">service</span> <span class="o">=</span> <span class="s1">&#39;blogger&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span><span class="o">.</span><span class="n">server</span> <span class="o">=</span> <span class="s1">&#39;www.blogger.com&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span><span class="o">.</span><span class="n">ProgrammaticLogin</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Get the blog ID</span>
</span></span><span class="line"><span class="cl">      <span class="n">query</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="n">query</span><span class="o">.</span><span class="n">feed</span> <span class="o">=</span> <span class="s1">&#39;/feeds/default/blogs&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="n">feed</span> <span class="o">=</span> <span class="n">blogger</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">query</span><span class="o">.</span><span class="n">ToUri</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">      <span class="n">blog_id</span> <span class="o">=</span> <span class="n">feed</span><span class="o">.</span><span class="n">entry</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">GetSelfLink</span><span class="p">()</span><span class="o">.</span><span class="n">href</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Create the entry to insert.</span>
</span></span><span class="line"><span class="cl">      <span class="n">entry</span> <span class="o">=</span> <span class="n">gdata</span><span class="o">.</span><span class="n">GDataEntry</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="n">entry</span><span class="o">.</span><span class="n">author</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">atom</span><span class="o">.</span><span class="n">Author</span><span class="p">(</span><span class="n">atom</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">__author</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">      <span class="n">entry</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Title</span><span class="p">(</span><span class="s1">&#39;xhtml&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">      <span class="n">entry</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Content</span><span class="p">(</span><span class="n">content_type</span><span class="o">=</span><span class="s1">&#39;html&#39;</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Assemble labels, if any</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="s1">&#39;tags&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="n">tags</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;tags&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="k">for</span> <span class="n">tag</span> <span class="ow">in</span> <span class="n">tags</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">              <span class="n">category</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Category</span><span class="p">(</span><span class="n">term</span><span class="o">=</span><span class="n">tag</span><span class="p">,</span> <span class="n">scheme</span><span class="o">=</span><span class="s1">&#39;http://www.blogger.com/atom/ns#&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">              <span class="n">entry</span><span class="o">.</span><span class="n">category</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">category</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Decide whether this is a draft.</span>
</span></span><span class="line"><span class="cl">      <span class="n">control</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Control</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="n">control</span><span class="o">.</span><span class="n">draft</span> <span class="o">=</span> <span class="n">atom</span><span class="o">.</span><span class="n">Draft</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;yes&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">entry</span><span class="o">.</span><span class="n">control</span> <span class="o">=</span> <span class="n">control</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># Submit it!</span>
</span></span><span class="line"><span class="cl">      <span class="n">blogger</span><span class="o">.</span><span class="n">Post</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="s1">&#39;/feeds/&#39;</span> <span class="o">+</span> <span class="n">blog_id</span> <span class="o">+</span> <span class="s1">&#39;/posts/default&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">runTests</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="kn">import</span> <span class="nn">doctest</span>
</span></span><span class="line"><span class="cl">    <span class="n">doctest</span><span class="o">.</span><span class="n">testmod</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="kn">from</span> <span class="nn">optparse</span> <span class="kn">import</span> <span class="n">OptionParser</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span> <span class="o">=</span> <span class="n">OptionParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-D&#34;</span><span class="p">,</span> <span class="s2">&#34;--do-tests&#34;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s2">&#34;store_true&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;doTests&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Run built-in doctests&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s2">&#34;-f&#34;</span><span class="p">,</span> <span class="s2">&#34;--file&#34;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s2">&#34;filename&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">help</span><span class="o">=</span><span class="s2">&#34;Specify source file for post&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">doTests</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">runTests</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span> <span class="o">=</span> <span class="n">BlogPost</span><span class="p">(</span><span class="s1">&#39;Brian Wisti&#39;</span><span class="p">,</span> <span class="s1">&#39;me@here.com&#39;</span><span class="p">,</span> <span class="s1">&#39;mysecretpassword&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">postFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">parsePost</span><span class="p">(</span><span class="n">postFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">sendPost</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span></span></span></code></pre>
</figure><h2 id="coming-up-next">Coming Up Next</h2>
<p>These posts will be short, since I want to get <em>something</em> up while still getting things done at work. We have our starting point reestablished, and <a href="/post/2009/06/python-blogger-refresh-part-2-settings/">next time</a> we will be concentrating on loading user settings rather than embedding those details right in our code.</p>]]></content:encoded>
</item>
</channel>
</rss>
