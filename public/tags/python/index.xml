<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>pythononRandom Geekery</title>
    <link>https://randomgeekery.org/tags/python/</link>
    <description>
      Recent contentinpython on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sat, 20 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://randomgeekery.org/tags/python/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: A Fun Python Turtle YouTube Playlist</title>
  <link>https://randomgeekery.org/post/2023/05/a-fun-python-turtle-youtube-playlist/</link>
  <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2023/05/a-fun-python-turtle-youtube-playlist/</guid>
  <description>I went a bit past the videos
Got a little bored of trying to build relevant skills for my ongoing job search. Went through Coding Cassowary’s Generative Art playlist yesterday instead. Had some ideas and fiddled a bit more with those ideas today. Trees should have leaves usually, right?
I’ll share the code, but only if you promise to remember this is my brain adding unsorted thoughts to code from the aforementioned playlist.</description>
   <category>post</category> 
   <category>note</category> 
   <category>python</category>  <category>art</category> 
  <content:encoded><![CDATA[<p><img src="/post/2023/05/../../../attachments/img/2023/cover-2023-05-20.png" alt="attachments/img/2023/cover-2023-05-20.png"/>
I went a bit past the videos</p>
<p>Got a little bored of trying to build relevant skills for my ongoing job search.
Went through Coding Cassowary&rsquo;s <a href="https://www.youtube.com/playlist?list=PLBLV84VG7Md9oO4MUOhyqz7gBFOzx8XIw">Generative Art playlist</a> yesterday instead. Had some ideas and fiddled a bit more with those ideas today. Trees should have leaves usually, right?</p>
<p>I&rsquo;ll share the code, but only if you promise to remember this is my brain adding unsorted thoughts to code from the aforementioned playlist. Most of the thoughts in here are unfinished. What I <em>want</em> is for you to watch the playlist.
And have some fun drawing with <a href="/card/python/">Python</a>, using <a href="https://docs.python.org/3/library/turtle.html">Turtle</a> or some other library.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;Draw a fractal tree.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">random</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">turtle</span> <span class="kn">import</span> <span class="n">Screen</span><span class="p">,</span> <span class="n">Turtle</span><span class="p">,</span> <span class="n">_Screen</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Tuple</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">RGBColor</span> <span class="o">=</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="nb">float</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">COLOR_CANVAS_DEFAULT</span><span class="p">:</span> <span class="n">RGBColor</span> <span class="o">=</span> <span class="p">(</span><span class="mi">232</span> <span class="o">/</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">210</span> <span class="o">/</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">210</span> <span class="o">/</span> <span class="mi">255</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">COLOR_PEN_DEFAULT</span><span class="p">:</span> <span class="n">RGBColor</span> <span class="o">=</span> <span class="p">(</span><span class="mi">94</span> <span class="o">/</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">71</span> <span class="o">/</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">69</span> <span class="o">/</span> <span class="mi">255</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">COLOR_SKY_LIGHT</span><span class="p">:</span> <span class="n">RGBColor</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.53</span><span class="p">,</span> <span class="mf">0.81</span><span class="p">,</span> <span class="mf">0.92</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">COLOR_SKY_DARK</span><span class="p">:</span> <span class="n">RGBColor</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.008</span><span class="p">,</span> <span class="mf">0.043</span><span class="p">,</span> <span class="mf">0.059</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">COLOR_TRUNK_BASE</span><span class="p">:</span> <span class="n">RGBColor</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.26</span><span class="p">,</span> <span class="mf">0.16</span><span class="p">,</span> <span class="mf">0.11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">COLOR_TRUNK_LIGHT</span><span class="p">:</span> <span class="n">RGBColor</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.96</span><span class="p">,</span> <span class="mf">0.86</span><span class="p">,</span> <span class="mf">0.81</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">set_theme</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">screen</span><span class="p">:</span> <span class="n">_Screen</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="p">:</span> <span class="n">Turtle</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">canvas_width</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">canvas_height</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">canvas_color</span><span class="o">=</span><span class="n">COLOR_CANVAS_DEFAULT</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">pen_color</span><span class="o">=</span><span class="n">COLOR_PEN_DEFAULT</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">thickness</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">speed_value</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">tracer_value</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">hide_turtle</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Set properties for the current drawing.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">screen</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="n">canvas_width</span><span class="p">,</span> <span class="n">canvas_height</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">screen</span><span class="o">.</span><span class="n">bgcolor</span><span class="p">(</span><span class="n">canvas_color</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">color</span><span class="p">(</span><span class="n">pen_color</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">width</span><span class="p">(</span><span class="n">thickness</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">speed</span><span class="p">(</span><span class="n">speed_value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">screen</span><span class="o">.</span><span class="n">tracer</span><span class="p">(</span><span class="n">tracer_value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">hide_turtle</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">turtle</span><span class="o">.</span><span class="n">hideturtle</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">draw_leaf</span><span class="p">(</span><span class="n">turtle</span><span class="p">:</span> <span class="n">Turtle</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Draw a single leaf.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">leaf_color</span> <span class="o">=</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.75</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">color</span><span class="p">(</span><span class="n">leaf_color</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">begin_fill</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="mf">4.0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">end_fill</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">color</span><span class="p">(</span><span class="n">COLOR_TRUNK_BASE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">grow</span><span class="p">(</span><span class="n">turtle</span><span class="p">:</span> <span class="n">Turtle</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">decrease</span><span class="p">,</span> <span class="n">angle</span><span class="p">,</span> <span class="n">noise</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Draw a single tree segment.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">length</span> <span class="o">&lt;=</span> <span class="mi">8</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">draw_leaf</span><span class="p">(</span><span class="n">turtle</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">length_factor</span> <span class="o">=</span> <span class="n">length</span> <span class="o">/</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">    <span class="n">trunk_color</span> <span class="o">=</span> <span class="n">lighten_trunk</span><span class="p">(</span><span class="n">length_factor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">color</span><span class="p">(</span><span class="n">trunk_color</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">width</span><span class="p">(</span><span class="n">length_factor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">forward</span><span class="p">(</span><span class="n">length</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">new_length</span> <span class="o">=</span> <span class="n">length</span> <span class="o">*</span> <span class="n">decrease</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">noise</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">new_length</span> <span class="o">*=</span> <span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mf">0.9</span><span class="p">,</span> <span class="mf">1.1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">angle_l</span> <span class="o">=</span> <span class="n">angle</span> <span class="o">+</span> <span class="n">random</span><span class="o">.</span><span class="n">gauss</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">noise</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">angle_r</span> <span class="o">=</span> <span class="n">angle</span> <span class="o">+</span> <span class="n">random</span><span class="o">.</span><span class="n">gauss</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">noise</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">left</span><span class="p">(</span><span class="n">angle_l</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">grow</span><span class="p">(</span><span class="n">turtle</span><span class="p">,</span> <span class="n">new_length</span><span class="p">,</span> <span class="n">decrease</span><span class="p">,</span> <span class="n">angle</span><span class="p">,</span> <span class="n">noise</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">right</span><span class="p">(</span><span class="n">angle_l</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">right</span><span class="p">(</span><span class="n">angle_r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">grow</span><span class="p">(</span><span class="n">turtle</span><span class="p">,</span> <span class="n">new_length</span><span class="p">,</span> <span class="n">decrease</span><span class="p">,</span> <span class="n">angle</span><span class="p">,</span> <span class="n">noise</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">left</span><span class="p">(</span><span class="n">angle_r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">backward</span><span class="p">(</span><span class="n">length</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">fit_color</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">rgb</span><span class="p">:</span> <span class="n">RGBColor</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">minimum_rgb</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">RGBColor</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">maximum_rgb</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">RGBColor</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Ensure color fits within an allowed RGB range.&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">fitted_color</span> <span class="o">=</span> <span class="n">rgb</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">minimum_rgb</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">fitted_color</span> <span class="o">=</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="nb">min</span><span class="p">(</span><span class="n">minimum_rgb</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">fitted_color</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl">            <span class="nb">min</span><span class="p">(</span><span class="n">minimum_rgb</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">fitted_color</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl">            <span class="nb">min</span><span class="p">(</span><span class="n">minimum_rgb</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">fitted_color</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">maximum_rgb</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">fitted_color</span> <span class="o">=</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="nb">max</span><span class="p">(</span><span class="n">maximum_rgb</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">fitted_color</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl">            <span class="nb">max</span><span class="p">(</span><span class="n">maximum_rgb</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">fitted_color</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl">            <span class="nb">max</span><span class="p">(</span><span class="n">maximum_rgb</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">fitted_color</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fitted_color</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">draw_sky</span><span class="p">(</span><span class="n">screen</span><span class="p">:</span> <span class="n">_Screen</span><span class="p">,</span> <span class="n">turtle</span><span class="p">:</span> <span class="n">Turtle</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Draw a fractured sky.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">size</span> <span class="o">=</span> <span class="mi">30</span>
</span></span><span class="line"><span class="cl">    <span class="n">noise</span> <span class="o">=</span> <span class="mf">0.0</span>
</span></span><span class="line"><span class="cl">    <span class="n">x_edge</span> <span class="o">=</span> <span class="n">screen</span><span class="o">.</span><span class="n">window_width</span><span class="p">()</span> <span class="o">//</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_edge</span> <span class="o">=</span> <span class="n">screen</span><span class="o">.</span><span class="n">window_height</span><span class="p">()</span> <span class="o">//</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="n">y_edge</span><span class="p">,</span> <span class="n">y_edge</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="n">x_edge</span><span class="p">,</span> <span class="n">x_edge</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># move to the location</span>
</span></span><span class="line"><span class="cl">            <span class="n">turtle</span><span class="o">.</span><span class="n">penup</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">turtle</span><span class="o">.</span><span class="n">goto</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># rotate</span>
</span></span><span class="line"><span class="cl">            <span class="n">angle</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="o">-</span><span class="n">noise</span><span class="p">,</span> <span class="n">noise</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">noise</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">noise_factor</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="n">y_edge</span> <span class="o">-</span> <span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">                <span class="n">sky_color</span> <span class="o">=</span> <span class="n">darken_sky</span><span class="p">(</span><span class="n">noise_factor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">sky_color</span> <span class="o">=</span> <span class="n">COLOR_SKY_DARK</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">turtle</span><span class="o">.</span><span class="n">pendown</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">turtle</span><span class="o">.</span><span class="n">color</span><span class="p">(</span><span class="n">COLOR_SKY_DARK</span><span class="p">,</span> <span class="n">sky_color</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">turtle</span><span class="o">.</span><span class="n">begin_fill</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">turtle</span><span class="o">.</span><span class="n">right</span><span class="p">(</span><span class="n">angle</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># draw square</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">turtle</span><span class="o">.</span><span class="n">forward</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">turtle</span><span class="o">.</span><span class="n">right</span><span class="p">(</span><span class="mi">90</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">turtle</span><span class="o">.</span><span class="n">left</span><span class="p">(</span><span class="n">angle</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">turtle</span><span class="o">.</span><span class="n">end_fill</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">noise</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">draw_tree</span><span class="p">(</span><span class="n">screen</span><span class="p">:</span> <span class="n">_Screen</span><span class="p">,</span> <span class="n">turtle</span><span class="p">:</span> <span class="n">Turtle</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Draw one tree.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># start at the bottom edge, off-center for visual interest</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_edge</span> <span class="o">=</span> <span class="n">screen</span><span class="o">.</span><span class="n">window_height</span><span class="p">()</span> <span class="o">/</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="n">trunk_x</span> <span class="o">=</span> <span class="n">screen</span><span class="o">.</span><span class="n">window_width</span><span class="p">()</span> <span class="o">/</span> <span class="mi">4</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">penup</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">goto</span><span class="p">(</span><span class="n">trunk_x</span><span class="p">,</span> <span class="o">-</span><span class="n">y_edge</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">left</span><span class="p">(</span><span class="mi">90</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span><span class="o">.</span><span class="n">pendown</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">grow</span><span class="p">(</span><span class="n">turtle</span><span class="p">,</span> <span class="mi">140</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="n">noise</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">darken_sky</span><span class="p">(</span><span class="n">noise_factor</span><span class="p">:</span> <span class="nb">float</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Manages a gradual darkening of sky squares.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">sky_color</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">value</span> <span class="o">-</span> <span class="n">noise_factor</span> <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">COLOR_SKY_LIGHT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fit_color</span><span class="p">(</span><span class="n">sky_color</span><span class="p">,</span> <span class="n">maximum_rgb</span><span class="o">=</span><span class="n">COLOR_SKY_DARK</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">lighten_trunk</span><span class="p">(</span><span class="n">length_factor</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Manages a gradual lightening of the trunk&#39;s color.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">color_factor</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">length_factor</span>
</span></span><span class="line"><span class="cl">    <span class="n">trunk_color</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">value</span> <span class="o">+</span> <span class="n">color_factor</span> <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">COLOR_TRUNK_BASE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fit_color</span><span class="p">(</span><span class="n">trunk_color</span><span class="p">,</span> <span class="n">minimum_rgb</span><span class="o">=</span><span class="n">COLOR_TRUNK_LIGHT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Draw a tree.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">screen</span> <span class="o">=</span> <span class="n">Screen</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">turtle</span> <span class="o">=</span> <span class="n">Turtle</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">set_theme</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">turtle</span><span class="p">,</span> <span class="n">canvas_width</span><span class="o">=</span><span class="mi">1920</span><span class="p">,</span> <span class="n">canvas_height</span><span class="o">=</span><span class="mi">1080</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">draw_sky</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">turtle</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">draw_tree</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">turtle</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">screen</span><span class="o">.</span><span class="n">tracer</span><span class="p">(</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">screen</span><span class="o">.</span><span class="n">exitonclick</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Post: [2022-07-29 Fri 22:50]</title>
  <link>https://randomgeekery.org/post/2022/07/2022-07-29-fri-2250/</link>
  <pubDate>Fri, 29 Jul 2022 22:50:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/07/2022-07-29-fri-2250/</guid>
  <description>&lt;p&gt;Used &lt;a href=&#34;https://cogdb.io&#34;&gt;CogDB&lt;/a&gt; to describe a folder hierarchy. Easier than figuring out how to annotate recursive structures for [Mypy](&lt;a href=&#34;http://mypy-lang.org&#34;&gt;http://mypy-lang.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I got some weird ideas of hard vs easy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://randomgeekery.org/post/2022/07/../../../attachments/img/2022-07-29-graph.png&#34; alt=&#34;attachments/img/2022-07-29-graph.png&#34;/&gt;
No labels or code because it’s work(ish)&lt;/p&gt;</description>
   <category>post</category> 
   <category>note</category> 
   <category>python</category>  <category>cog-db</category> 
  <content:encoded><![CDATA[<p>Used <a href="https://cogdb.io">CogDB</a> to describe a folder hierarchy. Easier than figuring out how to annotate recursive structures for [Mypy](<a href="http://mypy-lang.org">http://mypy-lang.org</a>.</p>
<p>I got some weird ideas of hard vs easy.</p>
<p><img src="/post/2022/07/../../../attachments/img/2022-07-29-graph.png" alt="attachments/img/2022-07-29-graph.png"/>
No labels or code because it&rsquo;s work(ish)</p>
<p>Okay <em>fine</em>. Here&rsquo;s a cleaned-up version of the code looking at my <a href="https://randomgeekery.org">main
blog</a> Markdown sources.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Set</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cog.torque</span> <span class="kn">import</span> <span class="n">Graph</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@dataclass</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Folder</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">root</span><span class="p">:</span> <span class="n">Path</span>
</span></span><span class="line"><span class="cl">    <span class="n">pattern</span><span class="p">:</span> <span class="nb">str</span>
</span></span><span class="line"><span class="cl">    <span class="n">graph</span><span class="p">:</span> <span class="n">Graph</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="n">init</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">files</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="n">init</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">graph_paths</span><span class="p">:</span> <span class="n">Set</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="n">init</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">default_factory</span><span class="o">=</span><span class="nb">set</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">__post_init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span> <span class="o">=</span> <span class="n">Graph</span><span class="p">(</span><span class="s2">&#34;files&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">__load_files</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">__load_files</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">files</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pattern</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">load_path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">graph_path_for</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Path</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># some funkiness because this started on windows</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s2">&#34;/&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">path</span><span class="o">.</span><span class="n">relative_to</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">)</span><span class="o">.</span><span class="n">parts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">load_path</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">graph_path</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph_path_for</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">files</span><span class="p">[</span><span class="n">graph_path</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;FILLER&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">graph_paths</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">graph_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">place_graph_path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">place_graph_path</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">path</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">parent</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="n">parent</span>
</span></span><span class="line"><span class="cl">        <span class="n">graph_child</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph_path_for</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">graph_parent</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">graph_path_for</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">graph_paths</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">graph_parent</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">graph_parent</span><span class="p">,</span> <span class="s2">&#34;parent&#34;</span><span class="p">,</span> <span class="n">graph_child</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">place_graph_path</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">root</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s2">&#34;~/Sites/rgb-hugo&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">expanduser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">folder</span> <span class="o">=</span> <span class="n">Folder</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="s2">&#34;**/*.md&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">url</span> <span class="o">=</span> <span class="n">folder</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">v</span><span class="p">()</span><span class="o">.</span><span class="n">tag</span><span class="p">(</span><span class="s2">&#34;from&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">out</span><span class="p">(</span><span class="s2">&#34;parent&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">tag</span><span class="p">(</span><span class="s2">&#34;to&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">view</span><span class="p">(</span><span class="s2">&#34;parent&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">url</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">url</span><span class="p">)</span></span></span></code></pre>
</figure><p><img src="/post/2022/07/../../../attachments/img/2022-07-29-rgb-hugo.png" alt="attachments/img/2022-07-29-rgb-hugo.png"/>
that image took a lot longer to render</p>
<p>Aside from the pretty picture, the nested structure that is now a graph helps me pull some files into <a href="/card/logseq/">card/Logseq</a> for better notes.</p>
<p>ooh i could pull my site into logseq</p>
<p>Go to bed, Brian.</p>]]></content:encoded>
</item>
<item>
  <title>Post: [2022-06-09 Thu 10:17]</title>
  <link>https://randomgeekery.org/post/2022/06/2022-06-09-thu-1017/</link>
  <pubDate>Thu, 09 Jun 2022 10:17:01 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/06/2022-06-09-thu-1017/</guid>
  <description>Seeing some impressive numbers for the Python 3.11 beta on Phoronix:
When taking the geometric mean of all the Python benchmarks I carried out for this article on the AMD Ryzen 9 5950X, Python 3.11 Beta was about 41% faster overall than the current Python 3.10.4 stable release or 45% over the aging Python 3.8 series. All the individual benchmark data can be found via this OpenBenchmarking.org result page.
via Python Weekly</description>
   <category>post</category> 
   <category>note</category> 
   <category>python</category> 
  <content:encoded><![CDATA[<p>Seeing some impressive numbers for the <a href="https://docs.python.org/3.11/whatsnew/3.11.html">Python 3.11</a> beta on <a href="https://www.phoronix.com/scan.php?page=article&amp;item=python-311-benchmarks&amp;num=1">Phoronix</a>:</p>
<blockquote>
<p>When taking the geometric mean of all the Python benchmarks I carried out for this article on the AMD Ryzen 9 5950X, Python 3.11 Beta was about 41% faster overall than the current Python 3.10.4 stable release or 45% over the aging Python 3.8 series. All the individual benchmark data can be found via this <a href="https://openbenchmarking.org/result/2205310-PTS-PYTHON3127">OpenBenchmarking.org result page</a>.</p>
</blockquote>
<p>via <a href="https://www.pythonweekly.com">Python Weekly</a></p>
]]></content:encoded>
</item>
<item>
  <title>Post: Using markdown-it in Python</title>
  <link>https://randomgeekery.org/post/2021/10/using-markdown-it-in-python/</link>
  <pubDate>Sat, 16 Oct 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/10/using-markdown-it-in-python/</guid>
  <description>NOTE
I hope the information I share here is useful, but I’m just documenting what I needed to know after reading the markdown-it-py user guide for basic usage and principles.
What is it markdown-it-py is a Python markdown library based on markdown-it from the JavaScript world. markdown-it-py provides the core flexibility needed by MyST Markdown, a particularly capable Markdown flavor for the Executable Book Project.
markdown-it-py is configurable, extensible, and — most important for me today — not too hard to get started with.</description>
   <category>post</category> 
   <category>post</category> 
   <category>python</category>  <category>markdown</category> 
  <content:encoded><![CDATA[<h2>Figuring out just enough markdown-it-py to write this post</h2><blockquote>
<p><strong>NOTE</strong></p>
<p>I hope the information I share here is useful, but I&rsquo;m just documenting what I
needed to know <em>after</em> reading the markdown-it-py <a href="https://markdown-it-py.readthedocs.io/en/latest/using.html">user guide</a> for basic
usage and principles.</p>
</blockquote>
<h2 id="what-is-it">What is it</h2>
<p><a href="https://pypi.org/project/markdown-it-py/">markdown-it-py</a> is a Python markdown library based on <a href="https://github.com/markdown-it/markdown-it">markdown-it</a> from the JavaScript world. markdown-it-py provides the core flexibility needed by <a href="https://myst-nb.readthedocs.io/en/latest/use/markdown.html">MyST Markdown</a>, a particularly capable Markdown flavor for the <a href="https://executablebooks.org/en/latest/">Executable Book Project</a>.</p>
<p>markdown-it-py is configurable, extensible, and &mdash; most important for me today — not too hard to get started with.</p>
<h2 id="how-do-i-install-it">How do I install it</h2>
<p>markdown-it-py alone gets you &ldquo;enough&rdquo;. Everything you need for <a href="https://commonmark.org">CommonMark</a>, at least. But I want more than enough. I want all the features I can reasonably gather under one install.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> pip install markdown-it-py<span class="o">[</span>linkify,plugins<span class="o">]</span>
</span></span></code></pre>
</figure><p>What did that just install?</p>
<dl>
<dt><code>markdown-it-py</code></dt>
<dd>provides core markdown handling sufficient for common expected behavior</dd>
<dt><a href="https://pypi.org/project/linkify-it-py/"><code>linkify-it-py</code></a></dt>
<dd>enables recognition of URLs embedded in text strings; needs additional plugins to <em>do</em> anything with those URLs</dd>
<dt><a href="https://pypi.org/project/mdit-py-plugins/"><code>mdit-py-plugins</code></a></dt>
<dd>provides a collection of core plugins that make <code>markdown-it-py</code> useful to a feature-happy person such as myself</dd>
</dl>
<h2 id="how-do-i-use-it">How do I use it</h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">markdown_it</span> <span class="kn">import</span> <span class="n">MarkdownIt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">markdown</span> <span class="o">=</span> <span class="s2">&#34;Hello, **world**&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">md</span> <span class="o">=</span> <span class="n">MarkdownIt</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">))</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Hello, <span class="p">&lt;</span><span class="nt">strong</span><span class="p">&gt;</span>world<span class="p">&lt;/</span><span class="nt">strong</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>But I need to be just a <em>little</em> fancier than &ldquo;Hello World.&rdquo; Let&rsquo;s build a little <a href="https://typer.tiangolo.com">Typer</a> application that takes a markdown path and makes an HTML fragment. While I&rsquo;m at it, I can borrow from my <a href="/post/2021/08/trying-a-thing-with-neovim/">neovim rplugin</a> to fit everything into my Hugo site.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">typer</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">markdown_it</span> <span class="kn">import</span> <span class="n">MarkdownIt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return HTML string rendered from markdown source.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">md</span> <span class="o">=</span> <span class="n">MarkdownIt</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">source_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Transforms markdown into HTML with markdown-it-py.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">target_path</span> <span class="o">=</span> <span class="n">source_path</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;.md.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;.html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">source_path</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">markdown</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">html</span> <span class="o">=</span> <span class="n">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">target_path</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">typer</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">)</span></span></span></code></pre>
</figure><p>For the moment I&rsquo;ll rely on Python to let me know if I try rendering a Markdown file that doesn&rsquo;t exist.</p>
<p>This will turn a single <code>.md.txt</code> file - the extension I&rsquo;m using to slide past Hugo&rsquo;s default Markdown handling - into HTML. I even get a nice <code>--help</code> blurb.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> python rendermd.py --help
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Usage: rendermd.py [OPTIONS] SOURCE_PATH
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">  Transforms markdown into HTML with markdown-it-py.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Arguments:
</span></span></span><span class="line"><span class="cl"><span class="go">  SOURCE_PATH  [required]
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Options:
</span></span></span><span class="line"><span class="cl"><span class="go">  --install-completion [bash|zsh|fish|powershell|pwsh]
</span></span></span><span class="line"><span class="cl"><span class="go">                                  Install completion for the specified shell.
</span></span></span><span class="line"><span class="cl"><span class="go">  --show-completion [bash|zsh|fish|powershell|pwsh]
</span></span></span><span class="line"><span class="cl"><span class="go">                                  Show completion for the specified shell, to
</span></span></span><span class="line"><span class="cl"><span class="go">                                  copy it or customize the installation.
</span></span></span><span class="line"><span class="cl"><span class="go">  --help                          Show this message and exit.
</span></span></span></code></pre>
</figure><p>Now I start adding capabilities. If you see this post on the site, you&rsquo;ll know it worked.</p>
<h2 id="picking-a-preset-for-common-patterns">Picking a preset for common patterns</h2>
<p><code>markdown-it-py</code> provides predefined parser presets, allowing you to choose between common parsing patterns.</p>
<dl>
<dt><code>commonmark</code></dt>
<dd>the default; sticks with the core CommonMark specification; probably good enough for 80% of the Markdown that gets written</dd>
<dt><code>gfm-like</code></dt>
<dd>similar to Github-flavored Markdown; better if you need tables and URL transformation</dd>
<dt><code>js-default</code></dt>
<dd>similar to markdown-it base behavior; adds typographical replacements like &ldquo;smart quotes&rdquo; to the <code>gfm-like</code> set</dd>
<dt><code>zero</code></dt>
<dd>basically just breaks text into paragraphs; provides a bare minimum for you to build a highly custom Markdown parser</dd>
</dl>
<p>I went with <code>js_default</code> for my own baseline because it enables the most core features.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return HTML string rendered from markdown source.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">md</span> <span class="o">=</span> <span class="n">MarkdownIt</span><span class="p">(</span><span class="s2">&#34;js-default&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span></span></span></code></pre>
</figure><h2 id="using-options-to-tune-your-parser">Using options to tune your parser</h2>
<p>Even with presets available, there are common tweaks that some folks can&rsquo;t live with and others can&rsquo;t live without. <code>markdown-it-py</code> wraps those up in a single dictionary of options.</p>
<dl>
<dt><code>maxNesting</code></dt>
<dd>recursion protection; think of it as a number for &ldquo;how fancy can I get with my Markdown?&rdquo;</dd>
<dt><code>html</code></dt>
<dd>allow raw HTML through</dd>
<dt><code>linkify</code></dt>
<dd>transform URLs into links</dd>
<dt><code>typographer</code></dt>
<dd>processes assorted <a href="https://markdown-it-py.readthedocs.io/en/latest/using.html#typographic-components">typographic conventions</a> including proper quote marks</dd>
<dt><code>quotes</code></dt>
<dd>what double and single quotes look like if you enable <code>typographer</code></dd>
<dt><code>xhtmlOut</code></dt>
<dd>ensure output is valid in the ancient XHTML dialect</dd>
<dt><code>breaks</code></dt>
<dd>treat line breaks in source as <code>&lt;br&gt;</code> elements</dd>
<dt><code>langPrefix</code></dt>
<dd>CSS class prefix for code blocks; <code>language-python</code>, <code>language-console</code> etc</dd>
<dt><code>highlight</code></dt>
<dd>a function to provide syntax highlighting for code blocks</dd>
</dl>
<p>Presets have default values for each of these options.</p>
<table>
<thead>
<tr>
<th>Option</th>
<th><code>commonmark</code></th>
<th><code>gfm_like</code></th>
<th><code>js_default</code></th>
<th><code>zero</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>maxNesting</code></td>
<td><code>20</code></td>
<td><code>20</code></td>
<td><code>100</code></td>
<td><code>20</code></td>
</tr>
<tr>
<td><code>html</code></td>
<td>enabled</td>
<td>enabled</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td><code>linkify</code></td>
<td>—</td>
<td>enabled</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td><code>typographer</code></td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td><code>quotes</code></td>
<td><code>“”‘’</code></td>
<td><code>“”‘’</code></td>
<td><code>“”‘’</code></td>
<td><code>“”‘’</code></td>
</tr>
<tr>
<td><code>xhtmlOut</code></td>
<td>enabled</td>
<td>enabled</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td><code>breaks</code></td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td><code>langPrefix</code></td>
<td><code>language-</code></td>
<td><code>language-</code></td>
<td><code>language-</code></td>
<td><code>language-</code></td>
</tr>
<tr>
<td><code>highlight</code></td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
</tbody>
</table>
<p>I like fancy quotes. I expect URLs to display as links. I occasionally need to fall back to raw <abbr title="HyperText Markup Language">HTML</abbr>.But most importantly on this here blog: I insist on syntax highlighting.</p>
<h3 id="adding-a-highlight-function">Adding a highlight function</h3>
<p>Rather than decide for themselves how syntax highlighting is done, the markdown-it-py folks added a single option for us to hook in a function using <em>our</em> preferred approach.</p>
<p>The highlight function should take three arguments:</p>
<ul>
<li>the string of code to highlight</li>
<li>the lexer name</li>
<li>a dictionary of any additional attributes</li>
</ul>
<p>You could use whatever highlighting code you want. You could even have your function call out to an external program. I use <a href="https://pygments.org">Pygments</a> because it&rsquo;s familiar.</p>
<p>Also, I&rsquo;m going to ignore <code>attrs</code> for now. I rarely add special options to my code samples, so it&rsquo;s kind of wasted on me. So far.</p>
<p>Better make a note or something in case I forget that I&rsquo;m ignoring it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">highlight_code</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">attrs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Highlight a block of code&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">attrs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Ignoring </span><span class="si">{</span><span class="n">attrs</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">lexer</span> <span class="o">=</span> <span class="n">get_lexer_by_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">formatter</span> <span class="o">=</span> <span class="n">HtmlFormatter</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">highlight</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">lexer</span><span class="p">,</span> <span class="n">formatter</span><span class="p">)</span></span></span></code></pre>
</figure><p>Okay, what&rsquo;s <code>make_html</code> look like now, with options set and highlighting function defined?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return HTML string rendered from markdown source.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">md</span> <span class="o">=</span> <span class="n">MarkdownIt</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;js-default&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;linkify&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;html&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;typographer&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;highlight&#34;</span><span class="p">:</span> <span class="n">highlight_code</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span></span></span></code></pre>
</figure><p>Still a few pieces missing from <em>my</em> minimal toolkit. I need to dig a little deeper than I planned for a &ldquo;hey friends, markdown-it-py looks like fun&rdquo; post. But I at least want to render the kind of posts I would write.</p>
<p>For that I need to use some plugins. Good thing I installed <code>mdit-py-plugins</code>.</p>
<h2 id="adding-parser-functionality-with-plugins">Adding parser functionality with plugins</h2>
<p>mdit-py-plugins bundles many plugins into a single library. Today I need no plugins beyond what that library provides.</p>
<h3 id="definition-lists">definition lists</h3>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl">Description lists</a> have been core to my HTML authoring flow since forever. I&rsquo;ll write the HTML myself if I have to. Fortunately, I don&rsquo;t have to, thanks to the <a href="https://mdit-py-plugins.readthedocs.io/en/latest/#definition-lists">deflist</a> plugin.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mdit_py_plugins</span> <span class="kn">import</span> <span class="n">deflist</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">md</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="n">deflist</span><span class="o">.</span><span class="n">deflist_plugin</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span></span></span></code></pre>
</figure><p>Now I can write a definition list:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">[`markdown-it-py`][markdown-it-py]
</span></span><span class="line"><span class="cl">: provides core markdown handling sufficient for common expected behavior
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[`linkify-it-py`][linkify-it-py]
</span></span><span class="line"><span class="cl">: enables recognition of URLs embedded in text strings; needs additional plugins
</span></span><span class="line"><span class="cl">  to <span class="ge">*do*</span> anything with those URLs
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[`mdit-py-plugins`][mdit-py-plugins]
</span></span><span class="line"><span class="cl">: provides a collection of core plugins that make <span class="sb">`markdown-it-py`</span> useful to a 
</span></span><span class="line"><span class="cl">  feature-happy person such as myself</span></span></code></pre>
</figure><p>And markdown-it-py produces a proper description list:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">dl</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dt</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://pypi.org/project/markdown-it-py/&#34;</span><span class="p">&gt;&lt;</span><span class="nt">code</span><span class="p">&gt;</span>markdown-it-py<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">dt</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dd</span><span class="p">&gt;</span>provides core markdown handling sufficient for common expected behavior<span class="p">&lt;/</span><span class="nt">dd</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dt</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://pypi.org/project/linkify-it-py/&#34;</span><span class="p">&gt;&lt;</span><span class="nt">code</span><span class="p">&gt;</span>linkify-it-py<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">dt</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dd</span><span class="p">&gt;</span>Enables recognition of URLs embedded in text strings; needs additional plugins
</span></span><span class="line"><span class="cl">    to <span class="p">&lt;</span><span class="nt">em</span><span class="p">&gt;</span>do<span class="p">&lt;/</span><span class="nt">em</span><span class="p">&gt;</span> anything with those URLs<span class="p">&lt;/</span><span class="nt">dd</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dt</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://pypi.org/project/mdit-py-plugins/&#34;</span><span class="p">&gt;&lt;</span><span class="nt">code</span><span class="p">&gt;</span>mdit-py-plugins<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">dt</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">dd</span><span class="p">&gt;</span>Provides a collection of core plugins that make <span class="p">&lt;</span><span class="nt">code</span><span class="p">&gt;</span>markdown-it-py<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;</span> useful to a
</span></span><span class="line"><span class="cl">    feature-happy person such as myself<span class="p">&lt;/</span><span class="nt">dd</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">dl</span><span class="p">&gt;</span></span></span></code></pre>
</figure><h3 id="admonition-blocks">admonition blocks</h3>
<p>So about a week ago, I was writing the first version of this post. I was nearly done. Then I got a little too tired and deleted the wrong file — without adding it to the repo first!</p>
<p>Oops.</p>
<p>Anyways, this redraft is less of a tutorial and more of a notes dump. I want to warn folks about that with a little blurb at the top. I can use the <a href="https://mdit-py-plugins.readthedocs.io/en/latest/#containers">containers</a> plugin for that. The plugin provides slots for validation and deeper processing. All I want today is a <code>&lt;div&gt;</code> with custom class. I can use CSS for the rest.</p>
<p>Using the container plugin with a <code>name</code> option provides that much.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mdit_py_plugins</span> <span class="kn">import</span> <span class="n">container</span><span class="p">,</span> <span class="n">deflist</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">md</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="n">container</span><span class="o">.</span><span class="n">container_plugin</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">&#34;note&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span></span></span></code></pre>
</figure><p>A <code>note</code> container looks like this in the markdown:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">::: note
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">This is my <span class="ge">*note*</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">:::</span></span></code></pre>
</figure><p>Without any additional configuration, it produces this HTML:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;note&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>This is my <span class="p">&lt;</span><span class="nt">em</span><span class="p">&gt;</span>note<span class="p">&lt;/</span><span class="nt">em</span><span class="p">&gt;</span>.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span></span></span></code></pre>
</figure><h2 id="good-enough">Good enough!</h2>
<p>Stopping here because it&rsquo;s good enough for what I wrote so far today. But there is plenty more to explore. markdown-it-py allows reviewing and manipulating parsed <a href="https://markdown-it-py.readthedocs.io/en/latest/using.html#the-token-stream">tokens</a> directly. Plus there&rsquo;s the whole MyST Markdown thing to explore.</p>
<p>But for now we&rsquo;re good. Let me drop in the Python code that transformed this post in the context of my Hugo site, then go convert the Typer logic to <a href="https://pyinvoke.org">Invoke</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/python</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">frontmatter</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">rich</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">typer</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">markdown_it</span> <span class="kn">import</span> <span class="n">MarkdownIt</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mdit_py_plugins</span> <span class="kn">import</span> <span class="n">container</span><span class="p">,</span> <span class="n">deflist</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pygments</span> <span class="kn">import</span> <span class="n">highlight</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pygments.formatters</span> <span class="kn">import</span> <span class="n">HtmlFormatter</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pygments.lexers</span> <span class="kn">import</span> <span class="n">get_lexer_by_name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">highlight_code</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">attrs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Highlight a block of code&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">attrs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Ignoring </span><span class="si">{</span><span class="n">attrs</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">lexer</span> <span class="o">=</span> <span class="n">get_lexer_by_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">formatter</span> <span class="o">=</span> <span class="n">HtmlFormatter</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">highlight</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">lexer</span><span class="p">,</span> <span class="n">formatter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_html</span><span class="p">(</span><span class="n">markdown</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return HTML string rendered from markdown source.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">md</span> <span class="o">=</span> <span class="n">MarkdownIt</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;js-default&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;linkify&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;html&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;typographer&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;highlight&#34;</span><span class="p">:</span> <span class="n">highlight_code</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">md</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="n">deflist</span><span class="o">.</span><span class="n">deflist_plugin</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">md</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="n">container</span><span class="o">.</span><span class="n">container_plugin</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">&#34;note&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">markdown</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">source_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Transforms markdown into HTML with markdown-it-py.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">target_path</span> <span class="o">=</span> <span class="n">source_path</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;.md.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;.html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span> <span class="o">=</span> <span class="n">frontmatter</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">source_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">make_html</span><span class="p">(</span><span class="n">post</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span><span class="o">.</span><span class="n">metadata</span><span class="p">[</span><span class="s2">&#34;format&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;md&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">target_path</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">frontmatter</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">post</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">typer</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">)</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Post: I wrote this note in Hugo with markdown-it-py</title>
  <link>https://randomgeekery.org/post/2021/10/i-wrote-this-note-in-hugo-with-markdown-it-py/</link>
  <pubDate>Sat, 09 Oct 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/10/i-wrote-this-note-in-hugo-with-markdown-it-py/</guid>
  <description>Blog post pending. But yeah. markdown-it-py preprocessing Markdown content for my card/Hugo site.
Why?
I don’t understand the question. To find out if I can, I guess?
Working well enough that I added another Neovim remote plugin to handle the task.</description>
   <category>post</category> 
   <category>note</category> 
   <category>python</category>  <category>markdown</category>  <category>puttering</category>  <category>wild-weekend</category> 
  <content:encoded><![CDATA[<p>Blog post pending. But yeah. <a href="https://markdown-it-py.readthedocs.io/en/latest/index.html"><code>markdown-it-py</code></a> preprocessing Markdown content for my <a href="/card/hugo/">card/Hugo</a> site.</p>
<p>Why?</p>
<p>I don&rsquo;t understand the question. To find out if I can, I guess?</p>
<p>Working well enough that I added <a href="/post/2021/08/trying-a-thing-with-neovim/">another</a> Neovim remote plugin to handle the task.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Creating a reStructuredText kbd Role</title>
  <link>https://randomgeekery.org/post/2021/09/creating-a-restructuredtext-kbd-role/</link>
  <pubDate>Thu, 23 Sep 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/09/creating-a-restructuredtext-kbd-role/</guid>
  <description>Today’s the day I learn how to create custom roles in card/reStructuredText. There’s already documentation on how to do this. I’m just applying it for my specific case.
Prologue: Setup Install some stuff if you want to play along.
pip install -U docutils invoke Some of the requirements are specific to my writing flow.
pip install python-frontmatter For experimentation, I copied the build code from my Neovim rst plugin into the site’s Invoke task file.</description>
   <category>post</category> 
   <category>post</category> 
   <category>rst</category>  <category>python</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>But first a couple others as I figure this out</h2><p>Today&rsquo;s the day I learn how to create custom roles in <a href="/card/restructuredtext/">card/reStructuredText</a>. There&rsquo;s already <a href="https://docutils.sourceforge.io/docs/howto/rst-roles.html">documentation</a> on how to do this. I&rsquo;m just applying it for my specific case.</p>
<h2 id="prologue-setup">Prologue: Setup</h2>
<p>Install some stuff if you want to play along.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install -U docutils invoke</span></span></code></pre>
</figure><p>Some of the requirements are specific to my writing flow.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install python-frontmatter</span></span></code></pre>
</figure><p>For experimentation, I copied the build code from my <a href="/post/2021/08/trying-a-thing-with-neovim/">Neovim rst plugin</a> into the site&rsquo;s <a href="https://www.pyinvoke.org">Invoke</a> task file. Easier than updating remote plugins and restarting the editor with every change.</p>
<figure class="highlight">
  <figcaption><tt>tasks.py</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;Site generation tasks for randomgeekery.org&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">locale</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">frontmatter</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">rich</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">docutils.core</span> <span class="kn">import</span> <span class="n">publish_parts</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">invoke</span> <span class="kn">import</span> <span class="n">task</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">locale</span><span class="o">.</span><span class="n">setlocale</span><span class="p">(</span><span class="n">locale</span><span class="o">.</span><span class="n">LC_ALL</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">convert_rst_file_for_hugo</span><span class="p">(</span><span class="n">source_filename</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Transform a single reStructuredText file so Hugo can handle it.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">target_filename</span> <span class="o">=</span> <span class="n">determine_target</span><span class="p">(</span><span class="n">source_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span> <span class="o">=</span> <span class="n">frontmatter</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">source_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parts</span> <span class="o">=</span> <span class="n">publish_parts</span><span class="p">(</span><span class="n">source</span><span class="o">=</span><span class="n">post</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="n">writer_name</span><span class="o">=</span><span class="s2">&#34;html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="s2">&#34;body&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span><span class="o">.</span><span class="n">metadata</span><span class="p">[</span><span class="s2">&#34;format&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;rst&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">target_filename</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">out</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">out</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">frontmatter</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">post</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;:crayon: </span><span class="si">{</span><span class="n">target_filename</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">determine_target</span><span class="p">(</span><span class="n">source</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return the filename that rst transformations should write to.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Using an odd suffix so Hugo doesn&#39;t try to build the rst itself</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">source</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s2">&#34;.rst.txt&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Look at </span><span class="si">{</span><span class="n">source</span><span class="si">}</span><span class="s2"> more closely before transforming it.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">source</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;.rst.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;.html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@task</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">rst</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Transform a single reStructuredText file.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">convert_rst_file_for_hugo</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span></span></span></code></pre>
</figure><p>Then I use Invoke to do the transform:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> inv content/draft/creating-a-restructuredtext-kbd-role/index.rst.txt
</span></span><span class="line"><span class="cl"><span class="go">🖍 content/draft/creating-a-restructuredtext-kbd-role/index.html
</span></span></span></code></pre>
</figure><p>Some variation of this is bound to work for you.</p>
<p>Let&rsquo;s get started!</p>
<h2 id="what-even-is-a-role">What even is a role?</h2>
<p>First, we need the background. There&rsquo;s this thing called <em>interpreted text</em>. It&rsquo;s a reserved bit of functionality for specially marked text. Folks coming to reStructuredText from Markdown mostly know it as the weird reason they have to use double backticks for <code>code</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="nv">`interpreted text`</span></span></span></code></pre>
</figure><p>Interpreted text has all sorts of fancy potential. I mainly know it for the fact that rst links use it. Unless told otherwise, <a href="https://docutils.sourceforge.io/">Docutils</a> treats interpreted text as a citation.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">cite</span><span class="p">&gt;</span>interpreted text<span class="p">&lt;/</span><span class="nt">cite</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>It assumes any interpreted text is <code>:title-reference:</code> — that is, it references the title of a book, movie, song, or other publication.  The <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite"><code>cite</code></a> element is a perfectly reasonable choice for that.</p>
<p>But what if you aren&rsquo;t specifically talking about a title? <em>Roles</em> provide an explicit label for your interpreted text.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="na">:term:</span><span class="nv">`Roles`</span></span></span></code></pre>
</figure><p>What&rsquo;s a <code>:term:</code> in rst? Nothing. I made it up. Seems like a good role for when I introduce a new name and I want it to stand out.</p>
<p>I need to define the role to use it. Otherwise?</p>
<p><img src="/post/2021/09/../../../attachments/img/2021/docutils-unknown-role.png" alt="attachments/img/2021/docutils-unknown-role.png"/>
Docutils embeds an error message below the offending block</p>
<p>So up at the top of my document use the <a href="https://docutils.sourceforge.io/docs/ref/rst/directives.html#custom-interpreted-text-roles">role directive</a> to create <code>:term:</code> and register it with the parser.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="p">..</span> <span class="ow">role</span><span class="p">::</span> term</span></span></code></pre>
</figure><p>Now that Docutils knows about the role, it can turn it into HTML.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;term&#34;</span><span class="p">&gt;</span>Roles<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>It still doesn&rsquo;t have any inherent <em>meaning</em>, but I can put some style rules on it so that anything I label with the <code>:term:</code> role shows up a little differently.</p>
<h2 id="inline-roles-in-your-document">Inline roles in your document</h2>
<p>If I want the term to stand out a little more, I can adjust my role definition.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="p">..</span> <span class="ow">role</span><span class="p">::</span> term(strong)</span></span></code></pre>
</figure><p>Now it inherits from the <code>:strong:</code> role, keeping the <code>&quot;term&quot;</code> CSS class.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">strong</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;term&#34;</span><span class="p">&gt;</span>Roles<span class="p">&lt;/</span><span class="nt">strong</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>You can inherit from any role. That makes it a nice way to create aliases or slight variations to existing roles.</p>
<p>But I want to get fancy. Let&rsquo;s look at defining reStructuredText roles in Python.</p>
<h2 id="defining-roles-in-your-code">Defining roles in your code</h2>
<p>Defining a role has two main steps. Okay, three. Because first we need to import some libraries.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">docutils</span> <span class="kn">import</span> <span class="n">nodes</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">docutils.parsers.rst</span> <span class="kn">import</span> <span class="n">roles</span></span></span></code></pre>
</figure><p><em>Now</em> we create a function that knows what to do when given a role and some preprocessed parameters.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">role_term</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">lineno</span><span class="p">,</span> <span class="n">inliner</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{},</span> <span class="n">content</span><span class="o">=</span><span class="p">[]):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return text marked as domain terminology.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span></span></span></code></pre>
</figure><p>That&rsquo;s quite a function signature to take in without context, so here&rsquo;s a breakdown of what got sent when Docutils saw my first <code>:term:`Roles</code>:</p>
<table>
<thead>
<tr>
<th>parameter</th>
<th>value</th>
<th>explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>name</code></td>
<td><code>term</code></td>
<td>the role name</td>
</tr>
<tr>
<td><code>rawtext</code></td>
<td><code>:term:`Roles</code></td>
<td>all text input including role and markup</td>
</tr>
<tr>
<td><code>text</code></td>
<td><code>Roles</code></td>
<td>the interpreted text content</td>
</tr>
<tr>
<td><code>lineno</code></td>
<td><code>103</code></td>
<td>the interpreted text starts on this line</td>
</tr>
<tr>
<td><code>inliner</code></td>
<td><code>&lt;docutils…Inliner object at …&gt;</code></td>
<td>the object that called this function</td>
</tr>
<tr>
<td><code>options</code></td>
<td><code>{}</code></td>
<td>a dictionary of customization options</td>
</tr>
<tr>
<td><code>content</code></td>
<td><code>[]</code></td>
<td>a list of strings containing text content</td>
</tr>
</tbody>
</table>
<p>I won&rsquo;t pretend I know how to use all these yet. That&rsquo;s okay. <code>role_term</code> only cares about three:</p>
<ul>
<li><code>rawtext</code></li>
<li><code>text</code></li>
<li><code>options</code> — just in case</li>
</ul>
<p>I chose to mirror the inline directive I made earlier, creating a <code>strong</code> node with a class of <code>&quot;term&quot;</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">term_node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">strong</span><span class="p">(</span><span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">term_node</span><span class="o">.</span><span class="n">set_class</span><span class="p">(</span><span class="s2">&#34;term&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><p>Anyone calling <code>role_term</code> expects a tuple with two node lists: one for content, and another holding any error nodes I may need to create. In this case the content list has my term node and the error list is empty.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">return</span> <span class="p">[</span><span class="n">term_node</span><span class="p">],</span> <span class="p">[]</span></span></span></code></pre>
</figure><p>With our role implementation defined, we register it and the name associated with it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">role_term</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">lineno</span><span class="p">,</span> <span class="n">inliner</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{},</span> <span class="n">content</span><span class="o">=</span><span class="p">[]):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return text marked as domain terminology.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">term_node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">strong</span><span class="p">(</span><span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">term_node</span><span class="o">.</span><span class="n">set_class</span><span class="p">(</span><span class="s2">&#34;term&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">term_node</span><span class="p">],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">roles</span><span class="o">.</span><span class="n">register_canonical_role</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">,</span> <span class="n">role_term</span><span class="p">)</span></span></span></code></pre>
</figure><p>I don&rsquo;t need my inline <code>role</code> directive anymore, so I remove it. Registering <code>role_term</code> makes it available to every document processed by this particular Python script.</p>
<p>Okay, now I basically know how to implement a reStructuredText role. Let&rsquo;s keep going.</p>
<h3 id="tag-references"><code>:tag:</code> references</h3>
<p>I link to tags on this site frequently. Since I&rsquo;m the main audience for this site, it&rsquo;s mostly to give me a shortcut to related content. But hey it may help <em>you</em> find related content to if you happen to click through.</p>
<p>Couple of problems with those tag links, though. First off, they look exactly like every other link in my published HTML. It would be nice for them to stand out a bit when I&rsquo;m reading. Second, they look like every other link in my post source. It would be nice for them to stand out a bit when I&rsquo;m <em>writing</em>.</p>
<p>So let&rsquo;s make a <code>:tag:</code> reference role.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">role_reference_tag</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span><span class="p">,</span> <span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">lineno</span><span class="p">,</span> <span class="n">inliner</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{},</span> <span class="n">content</span><span class="o">=</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return a reference to a site tag.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">tag_ref</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;/tags/</span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag_node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">reference</span><span class="p">(</span><span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">refuri</span><span class="o">=</span><span class="n">tag_ref</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag_node</span><span class="o">.</span><span class="n">set_class</span><span class="p">(</span><span class="s2">&#34;p-category&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">tag_node</span><span class="p">],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">roles</span><span class="o">.</span><span class="n">register_canonical_role</span><span class="p">(</span><span class="s1">&#39;tag&#39;</span><span class="p">,</span> <span class="n">role_reference_tag</span><span class="p">)</span></span></span></code></pre>
</figure><p>I thought about putting the <code>#</code> in CSS, but not every <code>p-category</code> is a tag. I can always change my mind later, maybe make a distinct <code>tag</code> CSS class.</p>
<p>It looks similar to <code>:term:</code>, except because I&rsquo;m referencing something I use a <code>reference</code> node and give it a link to that tag&rsquo;s page as <code>refuri</code>.  The <code>p-category</code> class is a <a href="/card/microformats/">card/microformats</a> thing for <a href="/card/indieweb/">card/IndieWeb</a>. I also decided to prefix my tag text with the traditional octothorpe used to mark tags out in the wild.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="na">:tag:</span><span class="nv">`microformats`</span></span></span></code></pre>
</figure><p>Oh yes that is <em>much</em> nicer to read than a standard reStructuredText link.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;p-category reference external&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/tags/microformats&#34;</span><span class="p">&gt;</span>#microformats<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>There&rsquo;s my <code>p-category</code> class, along with an unsurprising <code>reference</code> — since it&rsquo;s a clear way to indicate the reference node I used — and a slightly confusing <code>external</code> class. Pretty sure that means &ldquo;external to the document.&rdquo;</p>
<h3 id="a-kbd-role">A <code>:kbd:</code> role</h3>
<p>Something I need rather often is a way to indicate keyboard input. <kbd>Control</kbd> <kbd>c</kbd>, stuff like that.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">role_kbd</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">lineno</span><span class="p">,</span> <span class="n">inliner</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{},</span> <span class="n">content</span><span class="o">=</span><span class="p">[]):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return literal text marked as keyboard input.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">kbd_node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">literal</span><span class="p">(</span><span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">kbd_node</span><span class="o">.</span><span class="n">set_class</span><span class="p">(</span><span class="s2">&#34;keyboard&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">kbd_node</span><span class="p">],</span> <span class="p">[]</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="na">:kbd:</span><span class="nv">`Control c`</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">tt</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;keyboard docutils literal&#34;</span><span class="p">&gt;</span>Control c<span class="p">&lt;/</span><span class="nt">tt</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>Well that was easy. A bit verbose, but okay. That&rsquo;s not the real problem though.</p>
<h3 id="theres-a-perfectly-good-kbd-element">There&rsquo;s a perfectly good <code>&lt;kbd&gt;</code> element</h3>
<p>This blog is HTML, right? Can&rsquo;t I just use the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd"><code>kbd</code></a> element in my role?</p>
<p>Yes, but kind of no. It&rsquo;s considered poor form to put raw HTML in your output nodes. Docutils writes all sorts of content, and a <code>&lt;kbd&gt;</code> would be pretty ungainly sitting in a PDF. Ideally you&rsquo;d take care of writing HTML in an HTML Writer. Unfortunately, I have no idea how to work an HTML Writer yet.</p>
<p>But we <em>can</em> output raw HTML in a role implementation. It would be frowned on slightly less if we flagged it as a raw role.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">html</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">role_raw_kbd</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">lineno</span><span class="p">,</span> <span class="n">inliner</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{},</span> <span class="n">content</span><span class="o">=</span><span class="p">[]):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return literal text marked as keyboard input.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">escaped_text</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">kbd_html</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;&lt;kbd&gt;</span><span class="si">{</span><span class="n">escaped_text</span><span class="si">}</span><span class="s2">&lt;/kbd&gt;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">options</span><span class="p">[</span><span class="s2">&#34;format&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;html&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">kbd_node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">raw</span><span class="p">(</span><span class="n">rawtext</span><span class="p">,</span> <span class="n">kbd_html</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">kbd_node</span><span class="p">],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">roles</span><span class="o">.</span><span class="n">register_canonical_role</span><span class="p">(</span><span class="s1">&#39;raw-kbd&#39;</span><span class="p">,</span> <span class="n">role_raw_kbd</span><span class="p">)</span></span></span></code></pre>
</figure><p>Better pull in the <a href="https://docs.python.org/3/library/html.html">html</a> standard library and escape that text. Otherwise I&rsquo;d feel awful silly when talking about indenting with <code>&gt;&gt;</code> in <a href="/card/vim/">card/Vim</a> or something and it breaks the whole page.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="na">:raw-kbd:</span><span class="nv">`&gt;&gt;`</span></span></span></code></pre>
</figure><p>Yeah, that works. It&rsquo;s not too bad to look at while writing.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">kbd</span><span class="p">&gt;</span><span class="ni">&amp;lt;&amp;lt;</span><span class="p">&lt;/</span><span class="nt">kbd</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>And there we go. An honest to goodness <code>&lt;kbd&gt;</code> element. And <code>:raw-kbd:</code> will be easier to search for if and when I get around to custom HTML Writers.</p>
<p>Figuring out a role for keyboard input was the reason I started writing this post — though my favorite new role is <code>:tag:</code>. Anyways, I think this is a good spot to stop writing and start editing.</p>
<h2 id="wrap-it-up">Wrap it up</h2>
<p>…pardon me while I copy those role functions back into my Neovim plugin…</p>
<p>Well that was fun. I wanted a role for keyboard input, and I got it. Plus, my tags are a little easier to find in the page. <em>And</em> I have a <code>:term:</code> role for when I&rsquo;m feeling pedagogical.</p>
<p>Cool.</p>
<p>Roles are just a first step in customizing Docutils output. No idea when I&rsquo;ll get to the rest. You can learn more for yourself with Docutils and heavily customized publishing environments like <a href="https://www.sphinx-doc.org/en/master/">Sphinx</a>.</p>
<p>Me, I&rsquo;m just having a grand time embedding this whole authoring flow in the middle of my <a href="/card/hugo/">card/Hugo</a> site. May want to think about a new theme though if I&rsquo;m going to continue with Hugo. Perhaps borrow from Alexander Carlton&rsquo;s <a href="https://www.fisodd.com/code/b-side/">Hugo B-side</a>.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Saving some MyST Markdown blogging links for later</title>
  <link>https://randomgeekery.org/post/2021/09/saving-some-myst-markdown-blogging-links-for-later/</link>
  <pubDate>Fri, 03 Sep 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/09/saving-some-myst-markdown-blogging-links-for-later/</guid>
  <description>Got distracted by a note from @choldgraf about MyST, a Markdown flavor aimed at technical writing, in a Twitter conversation that was not specifically about MyST.
Two things you may be interested in:
Markdown in Sphinx : https://t.co/52Rj05JsqV
Automatically rebuild are load docs in sphinx: https://t.co/9lvFyCbB0W
Pydata theme: https://t.co/9qXss5cN15
Lots of other nice themes here: https://t.co/27G9oawNVu
— Chris Holdgraf (@choldgraf) September 3, 2021 This distracted me from the NuxtJS blog idea that was distracting me from a card/Nikola blog idea that was distracting me from an attempt at porting my site to card/Astro that was distracting me from a card/Nanoc-in-Python project idea that was distracting me from preparing a client site proposal that was distracting me from Labor Day weekend prep that was distracting me from the work chat that was distracting me from work.</description>
   <category>post</category> 
   <category>post</category> 
   <category>markdown</category>  <category>python</category>  <category>javascript</category>  <category>plugins</category>  <category>distractions</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>Because structured Markdown is an easier SSG target than reStructuredText</h2><p>Got distracted by a note from <a href="https://twitter.com/choldgraf">@choldgraf</a> about <a href="https://myst-parser.readthedocs.io/en/latest/">MyST</a>, a Markdown flavor aimed at technical writing, in a <a href="https://twitter.com/willmcgugan/status/1433735471323099139">Twitter conversation</a> that was not specifically about MyST.</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Two things you may be interested in:<br><br>Markdown in Sphinx : <a href="https://t.co/52Rj05JsqV">https://t.co/52Rj05JsqV</a><br><br>Automatically rebuild are load docs in sphinx: <a href="https://t.co/9lvFyCbB0W">https://t.co/9lvFyCbB0W</a><br><br>Pydata theme: <a href="https://t.co/9qXss5cN15">https://t.co/9qXss5cN15</a><br><br>Lots of other nice themes here: <a href="https://t.co/27G9oawNVu">https://t.co/27G9oawNVu</a></p>&mdash; Chris Holdgraf (@choldgraf) <a href="https://twitter.com/choldgraf/status/1433802076438482949?ref_src=twsrc%5Etfw">September 3, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>This distracted me from the <a href="https://nuxtjs.org/">NuxtJS</a> blog idea that was distracting me from a <a href="/card/nikola/">card/Nikola</a> blog idea that was distracting me from an attempt at porting my site to <a href="/card/astro/">card/Astro</a> that was distracting me from a <a href="/card/nanoc/">card/Nanoc</a>-in-Python project idea that was distracting me from preparing a client site proposal that was distracting me from Labor Day weekend prep that was distracting me from the work chat that was distracting me from work.</p>
<p>I had a question about using MyST for blogging, but decided to look it up for myself. Then I was going to tweet it but got distracted by the thought that I needed more persistent record what with all the distraction.</p>
<p>The question I almost tweeted:</p>
<blockquote>
<p>Are there plugins or tools for using MyST to author blog posts?</p>
</blockquote>
<p>My answer:</p>
<blockquote>
<p>Why yes there are! A quick search found these, and there are doubtless
other resources.</p>
<ul>
<li><a href="https://github.com/executablebooks/markdown-it-myst">markdown-it-myst</a> for the <code>.js</code> blogs</li>
<li>A <a href="https://plugins.getnikola.com/v8/myst/">myst Nikola plugin</a> for the <code>.py</code> blogs</li>
</ul>
</blockquote>
<p>Could probably even use it in <a href="/card/hugo/">card/Hugo</a> if I make another <a href="/post/2021/08/trying-a-thing-with-neovim/">neovim plugin</a> for <code>.md.txt</code> files.</p>
<p>Anyways, time to refill the coffee and — flips past the Distraction Cards — work! Oh jeez yeah work.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Extracting Rich Output for fun and profit</title>
  <link>https://randomgeekery.org/post/2021/08/extracting-rich-output/</link>
  <pubDate>Tue, 24 Aug 2021 15:08:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/08/extracting-rich-output/</guid>
  <description>a screenshot of the HTML that I created to show I don’t need screenshots
Somewhere in the middle of post/2021/08/tooting-with-python, I mentioned I how I get Rich output into a post. That approach was a little clumsy though. I want to run my code and paste its output into whatever draft I’m editing.
So I’ll figure that one out now.
[!NOTE] 2021-08-25 Update I initially posted a version of this post using BeautifulSoup for HTML extraction.</description>
   <category>post</category> 
   <category>post</category> 
   <category>python</category>  <category>rich</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>Okay maybe not so much on the profit but definitely fun!</h2><p><img src="/post/2021/08/../../../attachments/img/2021/cover-2021-08-24.png" alt="attachments/img/2021/cover-2021-08-24.png"/>
a screenshot of the HTML that I created to show I don&rsquo;t need screenshots</p>
<p>Somewhere in the middle of <a href="/post/2021/08/tooting-with-python/">post/2021/08/tooting-with-python</a>, I mentioned I how I get <a href="https://rich.readthedocs.io">Rich</a> output into a post.  That approach was a little clumsy though. I want to run my code and paste its output into whatever draft I&rsquo;m editing.</p>
<p>So I&rsquo;ll figure that one out now.</p>
<blockquote>
<p>[!NOTE] 2021-08-25 Update
I initially posted a version of this post using <a href="https://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a> for HTML extraction. Then Rich creator <a href="https://www.willmcgugan.com/">Will McGugan</a> pointed out that I could get what I need from Rich itself!</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Great write up!<br><br>You may be able to skip the Beautiful Soup step with the following:<br><br>console.export_html(code_format=&quot;&lt;pre style=&quot;font-family:Menlo,&#39;DejaVu Sans Mono&#39;,consolas,&#39;Courier New&#39;,monospace&quot;&gt;{code}&lt;/pre&gt;&quot;)</p>&mdash; Will McGugan (@willmcgugan) <a href="https://twitter.com/willmcgugan/status/1430452309536956421?ref_src=twsrc%5Etfw">August 25, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</blockquote>
<p>Yeah let&rsquo;s do that instead. Much less to remember.</p>
<h2 id="what-are-we-printing">What are we printing?</h2>
<p>How about a <a href="https://rich.readthedocs.io/en/stable/tables.html">Table</a> of the most popular pages on my site? I use <a href="https://plausible.io">Plausible</a> for stats, and I&rsquo;ve been meaning to play with their <a href="https://plausible.io/docs/stats-api">API</a>. But I&rsquo;m here to talk about Rich, not Plausible. Let&rsquo;s use a static copy of API results so everyone&rsquo;s using the same data.</p>
<figure class="highlight">
  <figcaption><tt>showstats.py</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">rich</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.table</span> <span class="kn">import</span> <span class="n">Table</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">STATS</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;results&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;page&#34;</span><span class="p">:</span> <span class="s2">&#34;/post/2017/11/drawing-grids-with-python-and-pillow/&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;visitors&#34;</span><span class="p">:</span> <span class="mi">1114</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="s2">&#34;page&#34;</span><span class="p">:</span> <span class="s2">&#34;/post/2017/01/cinnamon-screenshot-shortcuts/&#34;</span><span class="p">,</span> <span class="s2">&#34;visitors&#34;</span><span class="p">:</span> <span class="mi">580</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="s2">&#34;page&#34;</span><span class="p">:</span> <span class="s2">&#34;/&#34;</span><span class="p">,</span> <span class="s2">&#34;visitors&#34;</span><span class="p">:</span> <span class="mi">458</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;page&#34;</span><span class="p">:</span> <span class="s2">&#34;/post/2014/06/what-is-build-essentials-for-opensuse/&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;visitors&#34;</span><span class="p">:</span> <span class="mi">340</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="s2">&#34;page&#34;</span><span class="p">:</span> <span class="s2">&#34;/config/emacs/doom/&#34;</span><span class="p">,</span> <span class="s2">&#34;visitors&#34;</span><span class="p">:</span> <span class="mi">303</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="s2">&#34;page&#34;</span><span class="p">:</span> <span class="s2">&#34;/post/2020/06/csv-and-data-tables-in-hugo/&#34;</span><span class="p">,</span> <span class="s2">&#34;visitors&#34;</span><span class="p">:</span> <span class="mi">293</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="s2">&#34;page&#34;</span><span class="p">:</span> <span class="s2">&#34;/post/2019/05/kitty-terminal/&#34;</span><span class="p">,</span> <span class="s2">&#34;visitors&#34;</span><span class="p">:</span> <span class="mi">265</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;page&#34;</span><span class="p">:</span> <span class="s2">&#34;/post/2018/02/setting-task-dependencies-in-taskwarrior/&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;visitors&#34;</span><span class="p">:</span> <span class="mi">263</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="s2">&#34;page&#34;</span><span class="p">:</span> <span class="s2">&#34;/post/2019/02/taskwarrior-projects/&#34;</span><span class="p">,</span> <span class="s2">&#34;visitors&#34;</span><span class="p">:</span> <span class="mi">260</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;page&#34;</span><span class="p">:</span> <span class="s2">&#34;/post/2019/01/circular-grids-with-python-and-pillow/&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;visitors&#34;</span><span class="p">:</span> <span class="mi">242</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">build_stats_table</span><span class="p">(</span><span class="n">stats</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Construct a Rich Table from site traffic breakdown.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">table</span> <span class="o">=</span> <span class="n">Table</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;Plausible.io Traffic Breakdown&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">table</span><span class="o">.</span><span class="n">add_column</span><span class="p">(</span><span class="s2">&#34;Page&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">table</span><span class="o">.</span><span class="n">add_column</span><span class="p">(</span><span class="s2">&#34;Visitors&#34;</span><span class="p">,</span> <span class="n">justify</span><span class="o">=</span><span class="s2">&#34;right&#34;</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s2">&#34;green&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">stats</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">table</span><span class="o">.</span><span class="n">add_row</span><span class="p">(</span><span class="n">entry</span><span class="p">[</span><span class="s2">&#34;page&#34;</span><span class="p">],</span> <span class="s2">&#34;</span><span class="si">{:,}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">entry</span><span class="p">[</span><span class="s2">&#34;visitors&#34;</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">table</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show_stats</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Display Plausible&#39;s breakdown of site traffic.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">table</span> <span class="o">=</span> <span class="n">build_stats_table</span><span class="p">(</span><span class="n">STATS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="n">table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">show_stats</span><span class="p">()</span></span></span></code></pre>
</figure><p>Here&rsquo;s a screenshot, so you know what this produces in my own terminal.</p>
<p><img src="/post/2021/08/attachments/img/2021/showstats-table.png" title="table output" alt="table output"/></p>
<p>Okay. Now let&rsquo;s start talking about exporting output.</p>
<h2 id="xclip-is-usually-good-enough"><code>xclip</code> is usually good enough</h2>
<p>This post focuses on the &ldquo;blog writing and pretty reports&rdquo; situations. For everyday sharing, all I need is a legibly formatted data dump. <a href="https://github.com/astrand/xclip"><code>xclip</code></a> works for those situations.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python showstats.py <span class="p">|</span> xclip</span></span></code></pre>
</figure><p>I don&rsquo;t see anything on my screen, of course, because I piped everything to <code>xclip</code>. But when I paste from the clipboard:</p>
<figure class="highlight">
  <figcaption><span>output</span></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">                    Plausible.io Traffic Breakdown
</span></span><span class="line"><span class="cl">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┓
</span></span><span class="line"><span class="cl">┃ Page                                                    ┃ Visitors ┃
</span></span><span class="line"><span class="cl">┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━┩
</span></span><span class="line"><span class="cl">│ /post/2017/11/drawing-grids-with-python-and-pillow/     │    1,114 │
</span></span><span class="line"><span class="cl">│ /post/2017/01/cinnamon-screenshot-shortcuts/            │      580 │
</span></span><span class="line"><span class="cl">│ /                                                       │      458 │
</span></span><span class="line"><span class="cl">│ /post/2014/06/what-is-build-essentials-for-opensuse/    │      340 │
</span></span><span class="line"><span class="cl">│ /config/emacs/doom/                                     │      303 │
</span></span><span class="line"><span class="cl">│ /post/2020/06/csv-and-data-tables-in-hugo/              │      293 │
</span></span><span class="line"><span class="cl">│ /post/2019/05/kitty-terminal/                           │      265 │
</span></span><span class="line"><span class="cl">│ /post/2018/02/setting-task-dependencies-in-taskwarrior/ │      263 │
</span></span><span class="line"><span class="cl">│ /post/2019/02/taskwarrior-projects/                     │      260 │
</span></span><span class="line"><span class="cl">│ /post/2019/01/circular-grids-with-python-and-pillow/    │      242 │
</span></span><span class="line"><span class="cl">└─────────────────────────────────────────────────────────┴──────────┘</span></span></code></pre>
</figure><p><code>xclip</code> preserves the basic shape of my output. I see a table. The <em>Visitors</em> column is right-aligned. The title is centered. But it loses some of the finer formatting bits: bold, italicization, color.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Also? This renders great on Chrome-based browsers and weird on Firefox.  There
are definite limitations to just copying and pasting from the terminal.</p>
</blockquote>
<p>Let&rsquo;s pull that clipboard management into the script with Al Sweigart&rsquo;s <a href="https://pypi.org/project/pyperclip/">Pyperclip</a> library.</p>
<h2 id="let-rich-and-pyperclip-handle-the-clipboard">Let Rich and Pyperclip handle the clipboard</h2>
<p>Pyperclip gives our code access to the system clipboard, letting us copy and paste from Python.  The Rich <a href="https://rich.readthedocs.io/en/stable/reference/console.html">Console</a> can <a href="https://rich.readthedocs.io/en/stable/console.html#capturing-output"><code>capture</code></a> the characters it would have printed, and hand them to us when needed. Sounds like a great team.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pyperclip</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.console</span> <span class="kn">import</span> <span class="n">Console</span></span></span></code></pre>
</figure><p>I set up Pyperclip and create a local Console to handle capturing.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show_stats</span><span class="p">(</span><span class="n">stats</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Display Plausible&#39;s breakdown of site traffic.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">table</span> <span class="o">=</span> <span class="n">build_stats_table</span><span class="p">(</span><span class="n">stats</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pyperclip</span><span class="o">.</span><span class="n">set_clipboard</span><span class="p">(</span><span class="s2">&#34;xclip&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">console</span> <span class="o">=</span> <span class="n">Console</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">console</span><span class="o">.</span><span class="n">capture</span><span class="p">()</span> <span class="k">as</span> <span class="n">capture</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">console</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="n">table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">text_output</span> <span class="o">=</span> <span class="n">capture</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">pyperclip</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">text_output</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">text_output</span><span class="p">)</span></span></span></code></pre>
</figure><p>I need to tell Pyperclip about <code>xclip</code> or it gets a bit confused on WSL. Also, since I captured the output, I need to print it myself. Why <code>print</code> instead of <code>rich.print</code> or <code>console.print</code>?</p>
<p>Let me answer that question by pasting the contents of my clipboard:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">[3m                    Plausible.io Traffic Breakdown                    [0m
</span></span><span class="line"><span class="cl">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┓
</span></span><span class="line"><span class="cl">┃[1m [0m[1mPage                                                   [0m[1m [0m┃[1m [0m[1mVisitors[0m[1m [0m┃
</span></span><span class="line"><span class="cl">┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━┩
</span></span><span class="line"><span class="cl">│ /post/2017/11/drawing-grids-with-python-and-pillow/     │[32m [0m[32m    1114[0m[32m [0m│
</span></span><span class="line"><span class="cl">│ /post/2017/01/cinnamon-screenshot-shortcuts/            │[32m [0m[32m     580[0m[32m [0m│
</span></span><span class="line"><span class="cl">│ /                                                       │[32m [0m[32m     458[0m[32m [0m│
</span></span><span class="line"><span class="cl">│ /post/2014/06/what-is-build-essentials-for-opensuse/    │[32m [0m[32m     340[0m[32m [0m│
</span></span><span class="line"><span class="cl">│ /config/emacs/doom/                                     │[32m [0m[32m     303[0m[32m [0m│
</span></span><span class="line"><span class="cl">│ /post/2020/06/csv-and-data-tables-in-hugo/              │[32m [0m[32m     293[0m[32m [0m│
</span></span><span class="line"><span class="cl">│ /post/2019/05/kitty-terminal/                           │[32m [0m[32m     265[0m[32m [0m│
</span></span><span class="line"><span class="cl">│ /post/2018/02/setting-task-dependencies-in-taskwarrior/ │[32m [0m[32m     263[0m[32m [0m│
</span></span><span class="line"><span class="cl">│ /post/2019/02/taskwarrior-projects/                     │[32m [0m[32m     260[0m[32m [0m│
</span></span><span class="line"><span class="cl">│ /post/2019/01/circular-grids-with-python-and-pillow/    │[32m [0m[32m     242[0m[32m [0m│
</span></span><span class="line"><span class="cl">└─────────────────────────────────────────────────────────┴──────────┘</span></span></code></pre>
</figure><p>Uh. Oops? <code>console</code> captured <em>exactly</em> what it would have printed, including terminal <a href="https://en.wikipedia.org/wiki/ANSI_escape_code">escape codes</a>.</p>
<p>Rich supports <a href="https://rich.readthedocs.io/en/stable/console.html#exporting">exporting</a> output beyond a raw dump, though.</p>
<h2 id="let-rich-get-you-some-html">Let Rich get you some HTML</h2>
<blockquote>
<p><strong>NOTE</strong></p>
<p>For safety reasons, most Markdown converters must be explicitly configured to allow raw HTML through. Check the documentation of your converter or blogging tools to see if and how you need to do that.</p>
</blockquote>
<p>A Console created with the <code>record</code> option enabled remembers everything it prints. You can get export your copy at any point. The <a href="https://rich.readthedocs.io/en/stable/reference/console.html#rich.console.Console.export_text"><code>export_text</code></a> method provides a copy with minimal formatting, while <a href="https://rich.readthedocs.io/en/stable/reference/console.html#rich.console.Console.export_html"><code>export_html</code></a> produces HTML pages. That&rsquo;s for sure something I can paste into my post source. Nice!</p>
<p>One <em>slight</em> wrinkle. Unless you tell it otherwise, <code>export_html</code> produces a complete HTML file — with <code>&lt;head&gt;</code>, <code>&lt;body&gt;</code>, and even a <code>&lt;style&gt;</code> section. All I want is the <code>&lt;pre&gt;...&lt;/pre&gt;</code> describing my output.</p>
<p>Fortunately, <code>export_html</code> also lets us tell it exactly what we want:</p>
<ul>
<li><code>code_format</code> lets me specify the HTML fragment to generate</li>
<li>turn on <code>inline_styles</code> to directly embed style rules; handy if I don&rsquo;t have my own CSS definitions for Rich-specific classes</li>
</ul>
<p>Let&rsquo;s make some HTML for Pyperclip to copy.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show_stats</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Display Plausible&#39;s breakdown of site traffic.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># print the stats</span>
</span></span><span class="line"><span class="cl">    <span class="n">table</span> <span class="o">=</span> <span class="n">build_stats_table</span><span class="p">(</span><span class="n">STATS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">console</span> <span class="o">=</span> <span class="n">Console</span><span class="p">(</span><span class="n">record</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">console</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="n">table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># copy the stats</span>
</span></span><span class="line"><span class="cl">    <span class="n">pyperclip</span><span class="o">.</span><span class="n">set_clipboard</span><span class="p">(</span><span class="s2">&#34;xclip&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">exported_html</span> <span class="o">=</span> <span class="n">console</span><span class="o">.</span><span class="n">export_html</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">inline_styles</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">code_format</span><span class="o">=</span><span class="s2">&#34;&lt;pre&gt;</span><span class="si">{code}</span><span class="s2">&lt;/pre&gt;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pyperclip</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">exported_html</span><span class="p">)</span></span></span></code></pre>
</figure><p>What do the contents of my clipboard look like now?</p>
<pre><span style="font-style: italic">                    Plausible.io Traffic Breakdown                    </span>
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┓
┃<span style="font-weight: bold"> Page                                                    </span>┃<span style="font-weight: bold"> Visitors </span>┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━┩
│ /post/2017/11/drawing-grids-with-python-and-pillow/     │<span style="color: #008000; text-decoration-color: #008000">    1,114 </span>│
│ /post/2017/01/cinnamon-screenshot-shortcuts/            │<span style="color: #008000; text-decoration-color: #008000">      580 </span>│
│ /                                                       │<span style="color: #008000; text-decoration-color: #008000">      458 </span>│
│ /post/2014/06/what-is-build-essentials-for-opensuse/    │<span style="color: #008000; text-decoration-color: #008000">      340 </span>│
│ /config/emacs/doom/                                     │<span style="color: #008000; text-decoration-color: #008000">      303 </span>│
│ /post/2020/06/csv-and-data-tables-in-hugo/              │<span style="color: #008000; text-decoration-color: #008000">      293 </span>│
│ /post/2019/05/kitty-terminal/                           │<span style="color: #008000; text-decoration-color: #008000">      265 </span>│
│ /post/2018/02/setting-task-dependencies-in-taskwarrior/ │<span style="color: #008000; text-decoration-color: #008000">      263 </span>│
│ /post/2019/02/taskwarrior-projects/                     │<span style="color: #008000; text-decoration-color: #008000">      260 </span>│
│ /post/2019/01/circular-grids-with-python-and-pillow/    │<span style="color: #008000; text-decoration-color: #008000">      242 </span>│
└─────────────────────────────────────────────────────────┴──────────┘</pre>
<p>That works well enough for a blog post!</p>
<p>If you&rsquo;re curious about the exported HTML, here&rsquo;s a chunk of it:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">pre</span><span class="p">&gt;&lt;</span><span class="nt">span</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;font-style: italic&#34;</span><span class="p">&gt;</span>                    Plausible.io Traffic Breakdown                    <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┓
</span></span><span class="line"><span class="cl">    ┃<span class="p">&lt;</span><span class="nt">span</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;font-weight: bold&#34;</span><span class="p">&gt;</span> Page                                                    <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>┃<span class="p">&lt;</span><span class="nt">span</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;font-weight: bold&#34;</span><span class="p">&gt;</span> Visitors <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>┃
</span></span><span class="line"><span class="cl">    ┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━┩
</span></span><span class="line"><span class="cl">    │ /post/2017/11/drawing-grids-with-python-and-pillow/     │<span class="p">&lt;</span><span class="nt">span</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;color: #008000; text-decoration-color: #008000&#34;</span><span class="p">&gt;</span>    1,114 <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>│
</span></span><span class="line"><span class="cl">    ...
</span></span><span class="line"><span class="cl">    │ /post/2019/01/circular-grids-with-python-and-pillow/    │<span class="p">&lt;</span><span class="nt">span</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;color: #008000; text-decoration-color: #008000&#34;</span><span class="p">&gt;</span>      242 <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>│
</span></span><span class="line"><span class="cl">    └─────────────────────────────────────────────────────────┴──────────┘
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">pre</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>Anyways, this was just another thing I wanted to get down before I forgot again.</p>
<h2 id="what-else">What else?</h2>
<p>There are a few more pieces that tie it into my particular workflow, but this covers what you&rsquo;d need to export output from your own Rich programs for easy blogging or information sharing.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Tooting with Python</title>
  <link>https://randomgeekery.org/post/2021/08/tooting-with-python/</link>
  <pubDate>Sun, 15 Aug 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/08/tooting-with-python/</guid>
  <description>What? Let’s set up a Mastodon application with Python to read and post toots.
How? card/Python is the second best tool for any job in 2021, which makes it an excellent glue language. I’ve been centering my site workflow around it. That means the Mastodon.py library, which I have dabbled with once or twice before.
Why? Because I’ve let the card/IndieWeb social aspects of this site go stale and one step to fixing that is restoring POSSE automation.</description>
   <category>post</category> 
   <category>post</category> 
   <category>python</category>  <category>mastodon</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Spent the day goofing off with Mastodon.py</h2><h2 id="what">What?</h2>
<p>Let&rsquo;s set up a <a href="https://joinmastodon.org">Mastodon</a> application with Python to read and post toots.</p>
<h3 id="how">How?</h3>
<p><a href="/card/python/">card/Python</a> is the <a href="https://twitter.com/glyph/status/1426414435275448324">second best</a> tool for any job in 2021, which makes it an excellent glue language.  I&rsquo;ve been centering my site workflow around it. That means the <a href="https://mastodonpy.readthedocs.io/en/stable/">Mastodon.py</a> library, which I have dabbled with once or twice before.</p>
<h3 id="why">Why?</h3>
<p>Because I&rsquo;ve let the <a href="/card/indieweb/">card/IndieWeb</a> social aspects of this site go stale and one step to fixing that is restoring POSSE automation. The first part of <em>that</em> is making sure I remember how to automate posting to Mastodon.</p>
<h2 id="ok-fine-get-on-with-it">Ok fine; get on with it</h2>
<p>Course, you&rsquo;re going to need an account at a Mastodon instance.  I have my
account on <a href="https://hackers.town/@randomgeek">one</a> of many. You can find one suitable for your tastes at
[Mastodon instances](<a href="https://instances.social">https://instances.social</a>.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>If you don&rsquo;t already know Mastodon, think of it as island versions of <a href="https://twitter.com">Twitter</a>.  Each instance has its own practices and policies depending on who runs it, so it&rsquo;s very much a &ldquo;hanging out at a friend&rsquo;s house&rdquo; experience. Lots more details, but much more than I feel like covering.</p>
<p>It&rsquo;s fun. You should try it out maybe. You can even host your own instance if you&rsquo;re hard-core into DIY.</p>
</blockquote>
<h3 id="registering-your-application">Registering your application</h3>
<p>I have 2FA enabled, so it turned out to be easier for me to set up the application in account preferences (under the &ldquo;Development&rdquo; section).</p>
<p>I entered an application name, added my Website for &ldquo;Application website,&rdquo; and selected the scopes that are important to me for today&rsquo;s explorations.</p>
<dl>
<dt><code>read</code></dt>
<dd>read all your account&rsquo;s data</dd>
<dt><code>write:statuses</code></dt>
<dd>publish statuses</dd>
</dl>
<p>That&rsquo;s enough to cover today&rsquo;s play.  I&rsquo;m not creating my own full-fledged Mastodon client so I don&rsquo;t need every permission.</p>
<h3 id="connecting-your-application">Connecting your application</h3>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Dict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mastodon</span> <span class="kn">import</span> <span class="n">Mastodon</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.pretty</span> <span class="kn">import</span> <span class="n">pprint</span></span></span></code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>Spoiler alert: yes I&rsquo;ll be using <a href="https://rich.readthedocs.io">Rich</a> and <a href="https://docs.python.org/3/library/dataclasses.html">dataclasses</a> along with Mastodon.py.  Nothing fancy planned with Rich today. It&rsquo;s just part of my regular toolkit.</p>
<p>The dataclasses library comes standard with Python these days, but you may need to install the others::</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install --upgrade rich mastodon</span></span></code></pre>
</figure></blockquote>
<p>The Mastodon instance developer panel gives me the details I need to connect. I set them as workspace environment variables with <a href="https://direnv.net">direnv</a> out of habit, but you could just as easily hard-code them in Python or define in a config file of your own.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">API_BASE</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;API_BASE&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">CLIENT_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;CLIENT_KEY&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">CLIENT_SECRET</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;CLIENT_SECRET&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ACCESS_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;ACCESS_TOKEN&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><p>From my first few attempts writing this post, I know I&rsquo;ll want a class to organize views for the connection.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@dataclass</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Provides convenience methods for querying an instance and posting toots.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">mastodon</span><span class="p">:</span> <span class="n">Mastodon</span></span></span></code></pre>
</figure><p>Once I have a connection, I don&rsquo;t care about those application config details. Rather than storing them in the instance, I&rsquo;ll use a class method to handle the work and return my new App with only the details I <em>do</em> care about.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@classmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="bp">cls</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">client_key</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">CLIENT_KEY</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">api_base_url</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">API_BASE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">client_secret</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">CLIENT_SECRET</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">access_token</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">ACCESS_TOKEN</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span> <span class="o">-&gt;</span> <span class="s2">&#34;App&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Return an App connected to a specific Mastodon instance.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">mastodon</span> <span class="o">=</span> <span class="n">Mastodon</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">client_id</span><span class="o">=</span><span class="n">client_key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">api_base_url</span><span class="o">=</span><span class="n">api_base_url</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">client_secret</span><span class="o">=</span><span class="n">client_secret</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">access_token</span><span class="o">=</span><span class="n">access_token</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">cls</span><span class="p">(</span><span class="n">mastodon</span><span class="o">=</span><span class="n">mastodon</span><span class="p">)</span></span></span></code></pre>
</figure><p>Basic setup&rsquo;s done. Let&rsquo;s create an App and see if it worked.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">app</span><span class="p">)</span></span></span></code></pre>
</figure><pre style="font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">App</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">mastodon</span>=<span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">mastodon.Mastodon.Mastodon</span><span style="color: #000000; text-decoration-color: #000000"> object at </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0x7ff14f1e8850</span><span style="font-weight: bold">&gt;)</span>
</pre>
<blockquote>
<p>[!NOTE] Exporting Rich output
My code doesn&rsquo;t look <em>exactly</em> like what I&rsquo;ve shared here. I take advantage of Rich&rsquo;s export features to simplify sharing program output.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">rich</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">rich</span><span class="o">.</span><span class="n">reconfigure</span><span class="p">(</span><span class="n">record</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">rich</span><span class="o">.</span><span class="n">get_console</span><span class="p">()</span><span class="o">.</span><span class="n">save_html</span><span class="p">(</span><span class="s2">&#34;output.html&#34;</span><span class="p">,</span> <span class="n">inline_styles</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span></span></span></code></pre>
</figure><p>The extra bits change two aspects of Rich&rsquo;s default <a href="https://rich.readthedocs.io/en/stable/reference/console.html#rich.console.Console">Console</a> behavior:</p>
<ul>
<li>record output so it can be exported by <code>save_text</code> or <code>save_html</code> and I can add it here in my post</li>
<li>set console width to 80, simplifying display of exported output within the confines of a Web page</li>
</ul>
<p>After <code>app</code> does its thing, I export any output as formatted HTML, where I can edit as needed and insert here.</p>
</blockquote>
<p>So anyways, we verified that our connection works. Let&rsquo;s take a look at what that connection provides.</p>
<h3 id="the-instance">The instance</h3>
<p>Mastodon.py provides methods specifically for <a href="https://mastodonpy.readthedocs.io/en/stable/#reading-data-instances">reading instance details</a>. For example, <a href="https://mastodonpy.readthedocs.io/en/stable/#mastodon.Mastodon.instance_health"><code>instance_health</code></a> tells of if a quick health check succeeded.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">app</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">instance_health</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [green]healthy[/green]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [red][b]not[/b] healthy![/red]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span></span></span></code></pre>
</figure><pre style="font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Connection instance is <span style="color: #008000; text-decoration-color: #008000">healthy</span>
</pre>
<h4 id="instance-details">Instance details</h4>
<p>Most of the querying methods return a dictionary or a list of dictionaries. <a href="https://mastodonpy.readthedocs.io/en/stable/#mastodon.Mastodon.instance"><code>Mastodon.instance</code></a> returns an <a href="https://mastodonpy.readthedocs.io/en/stable/#instance-dicts">instance dict</a>.</p>
<p>I don&rsquo;t feel like showing every item in that dictionary, though. Let&rsquo;s pick a few to make a decent summary. Oh hey, and let&rsquo;s cache that dictionary to disk so I&rsquo;m not making a fresh API query every time I check this post while I&rsquo;m writing it.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Be considerate about server resources for Mastodon. Most instances are run as personal projects. There&rsquo;s no need for us to run up their AWS bill.</p>
</blockquote>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">stored</span><span class="p">(</span><span class="n">func</span><span class="p">:</span> <span class="n">Callable</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">filename</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="si">}</span><span class="s2">.json&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stored.inner for </span><span class="si">{</span><span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Loading data from </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Calling </span><span class="si">{</span><span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Writing data to </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="nb">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">inner</span></span></span></code></pre>
</figure><p>I can do proper memoization later. &ldquo;Look for a file before you hit the server&rdquo; is good enough for writing a blog post.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@stored</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">instance</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Return a dictionary of information about the connected instance.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">instance_summary</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Return a small dictionary of instance information.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">instance</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;uri&#34;</span><span class="p">,</span> <span class="s2">&#34;title&#34;</span><span class="p">,</span> <span class="s2">&#34;short_description&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="n">field</span><span class="p">:</span> <span class="n">instance</span><span class="p">[</span><span class="n">field</span><span class="p">]</span> <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="n">fields</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="p">[</span><span class="s2">&#34;contact_account&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">instance</span><span class="p">[</span><span class="s2">&#34;contact_account&#34;</span><span class="p">][</span><span class="s2">&#34;display_name&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">data</span></span></span></code></pre>
</figure><p>Time to look at that instance summary.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">app</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">instance_health</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [green]healthy[/green]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [red][b]not[/b] healthy![/red]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">instance_summary</span><span class="p">())</span></span></span></code></pre>
</figure><pre style="font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Connection instance is <span style="color: #008000; text-decoration-color: #008000">healthy</span>
stored.inner for instance
Calling instance
Writing data to instance.json
<span style="font-weight: bold">{</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'uri'</span>: <span style="color: #008000; text-decoration-color: #008000">'hackers.town'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'title'</span>: <span style="color: #008000; text-decoration-color: #008000">'hackers.town'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'short_description'</span>: <span style="color: #008000; text-decoration-color: #008000">"A bunch of technomancers in the fediverse. Keep it fairly clean please. This arcology is for all who wash up upon it's digital shore."</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'contact_account'</span>: <span style="color: #008000; text-decoration-color: #008000">'The_Gibson'</span>
<span style="font-weight: bold">}</span>
</pre>
<h3 id="reading-the-timelines">Reading the timelines</h3>
<p>Mastodon&rsquo;s <a href="https://mastodonpy.readthedocs.io/en/stable/#reading-data-timelines">timeline methods</a> provide different views of recent post activity, both public and private.  To simplify demonstration on this public blog post, I&rsquo;ll stick to <a href="https://mastodonpy.readthedocs.io/en/stable/#mastodon.Mastodon.timeline_public"><code>timeline_public</code></a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@stored</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">timeline_public</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">timeline_public</span><span class="p">()</span></span></span></code></pre>
</figure><p>The <a href="https://mastodonpy.readthedocs.io/en/stable/#toot-dicts">toot dict</a> also contains far more information than I need, so let&rsquo;s summarize those like with instances.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"> <span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">timeline_summary</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">timeline</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">timeline_public</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;date&#34;</span><span class="p">:</span> <span class="n">toot</span><span class="p">[</span><span class="s2">&#34;created_at&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;author&#34;</span><span class="p">:</span> <span class="n">toot</span><span class="p">[</span><span class="s2">&#34;account&#34;</span><span class="p">][</span><span class="s2">&#34;display_name&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;content&#34;</span><span class="p">:</span> <span class="n">toot</span><span class="p">[</span><span class="s2">&#34;content&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">toot</span> <span class="ow">in</span> <span class="n">timeline</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span></span></span></code></pre>
</figure><p>Adding <code>app.timeline_summary()</code> to the main block:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">app</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">instance_health</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [green]healthy[/green]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [red][b]not[/b] healthy![/red]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">instance_summary</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">timeline_summary</span><span class="p">(),</span> <span class="n">max_string</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span></span></span></code></pre>
</figure><pre style="font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Connection instance is <span style="color: #008000; text-decoration-color: #008000">healthy</span>
stored.inner for instance
Loading data from instance.json
<span style="font-weight: bold">{</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'uri'</span>: <span style="color: #008000; text-decoration-color: #008000">'hackers.town'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'title'</span>: <span style="color: #008000; text-decoration-color: #008000">'hackers.town'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'short_description'</span>: <span style="color: #008000; text-decoration-color: #008000">"A bunch of technomancers in the fediverse. Keep it fairly clean please. This arcology is for all who wash up upon it's digital shore."</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'contact_account'</span>: <span style="color: #008000; text-decoration-color: #008000">'The_Gibson'</span>
<span style="font-weight: bold">}</span>
stored.inner for timeline_public
Calling timeline_public
Writing data to timeline_public.json
<span style="font-weight: bold">[</span>
<span style="font-style: italic">    .. skipping a few ...</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="font-weight: bold">{</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'date'</span>: <span style="color: #008000; text-decoration-color: #008000">'2021-08-15 22:24:35+00:00'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'author'</span>: <span style="color: #008000; text-decoration-color: #008000">'Endless Screaming'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'content'</span>: <span style="color: #008000; text-decoration-color: #008000">'&lt;p&gt;AAAAAAAAAAAAAAAAAAAAH&lt;/p&gt;'</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="font-weight: bold">}</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="font-weight: bold">{</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'date'</span>: <span style="color: #008000; text-decoration-color: #008000">'2021-08-15 22:24:43.531000+00:00'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'author'</span>: <span style="color: #008000; text-decoration-color: #008000">'Lynne'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'content'</span>: <span style="color: #008000; text-decoration-color: #008000">'&lt;p&gt;This just touched a single topic that I’ve never heard being brought up anywh'</span>+<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">97</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="font-weight: bold">}</span>
<span style="font-weight: bold">]</span>
</pre>
<p>Nice. Looks like <code>content</code> is in HTML format. Need to remember that if I ever make a more interesting Mastodon client.</p>
<p>But I&rsquo;m ready to start tooting.</p>
<h3 id="writing">Writing</h3>
<p>Mastodon <a href="https://mastodonpy.readthedocs.io/en/stable/#writing-data-statuses">write methods</a> let us add toots, polls, replies, reblogs, faves. All that good stuff.</p>
<p>Let&rsquo;s stick with your basic toot for now.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">status_post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">status</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">visibility</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s2">&#34;direct&#34;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Post a toot to our connection, private unless we say otherwise.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">status_post</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">visibility</span><span class="o">=</span><span class="n">visibility</span><span class="p">)</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">app</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">instance_health</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [green]healthy[/green]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [red][b]not[/b] healthy![/red]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">status_text</span> <span class="o">=</span> <span class="s2">&#34;Ignore me, just messing with Mastodon.py&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span><span class="o">.</span><span class="n">status_post</span><span class="p">(</span><span class="n">status_text</span><span class="p">)</span></span></span></code></pre>
</figure><p><img src="/post/2021/08/attachments/img/2021/toot.jpg" title="It worked!" alt="toot screenshot"/></p>
<p>Okay my brain is fading. Should probably put away the keyboard soon.</p>
<h2 id="wrap-it-up">Wrap it up</h2>
<p>Am I done?</p>
<p>Well, no. I still need to turn this into a proper command line application that looks for the newest published blog post and posts a toot about it. But that&rsquo;s not going to happen in today&rsquo;s post.</p>
<p>I had fun, and that&rsquo;s the important part.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: trying a thing with neovim</title>
  <link>https://randomgeekery.org/post/2021/08/trying-a-thing-with-neovim/</link>
  <pubDate>Mon, 09 Aug 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/08/trying-a-thing-with-neovim/</guid>
  <description>But will it even work?
Oh right I need to :UpdateRemotePlugins first.
Test [PASSED] It worked!
What did I just do? I used a remote plugin in card/Neovim to transform my card/reStructuredText into an HTML source document, simplifying card/Hugo’s site-building duties.
I won’t make you wait around for a proper post. Hugo lets you use reStructuredText. But Hugo’s way is slow and hard to customize. Not their fault. reStructuredText is not their focus.</description>
   <category>post</category> 
   <category>post</category> 
   <category>neovim</category>  <category>python</category>  <category>hugo</category>  <category>rst</category>  <category>site</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>testing a python remote plugin for quicker reStructuredText in Hugo</h2><p>But will it even work?</p>
<p>Oh right I need to <code>:UpdateRemotePlugins</code> first.</p>
<h2 id="test-passed">Test [PASSED]</h2>
<p>It worked!</p>
<h3 id="what-did-i-just-do">What did I just do?</h3>
<p>I used a <a href="https://neovim.io/doc/user/remote_plugin.html">remote plugin</a> in <a href="/card/neovim/">card/Neovim</a> to transform my <a href="/card/restructuredtext/">card/reStructuredText</a> into an HTML source document, simplifying <a href="/card/hugo/">card/Hugo</a>&rsquo;s site-building duties.</p>
<p>I won&rsquo;t make you wait around for a proper post. Hugo lets you use reStructuredText.  But Hugo&rsquo;s way is slow and hard to customize. Not their fault. reStructuredText is not their focus.</p>
<p>Still — why not format it ahead of time?</p>
<blockquote>
<p><strong>Answer</strong></p>
<p>Because it took a lot of work to figure this out? And most folks are perfectly happy with Markdown? And bloggers who prefer reStructuredText are probably using <a href="/card/pelican/">card/Pelican</a> or <a href="/card/nikola/">card/Nikola</a>?</p>
</blockquote>
<p>Shush, me.</p>
<h3 id="the-implementation">The Implementation</h3>
<p>Start with <code>content/whatever/index.rst.txt</code>.</p>
<p>Make sure Hugo won&rsquo;t track <code>rst.txt</code> files by explicitly adding an item the <a href="https://gohugo.io/getting-started/configuration/#ignore-content-and-data-files-when-rendering"><code>ignoreFiles</code></a> config setting.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="c"># config.toml</span>
</span></span><span class="line"><span class="cl"><span class="nx">ignoreFiles</span> <span class="p">=</span> <span class="p">[</span><span class="s1">&#39;\.rst\.txt$&#39;</span><span class="p">]</span></span></span></code></pre>
</figure><p>This way <code>hugo server --navigateToChanged</code> behaves how we expect.</p>
<p>I tried setting <code>ignoreFiles = ['\.rst$']</code> but as far as I could tell, Hugo ignored my request to ignore the file. Looks like I&rsquo;m sticking with <code>.rst.txt</code> for now.</p>
<p>With the code down below in my Neovim python3 — that&rsquo;s <em>python3</em> not <em>python</em> — rplugin folder, and remote plugins updated, I write <code>index.rst.txt</code> to disk.</p>
<p>The remote plugin transforms it to HTML, copying my YAML frontmatter as is. So what Hugo sees is updated HTML with frontmatter, and builds that into the site templates nice and quick.</p>
<h4 id="the-code">The Code</h4>
<figure class="highlight">
  <figcaption><tt>~/.config/nvim/rplugin/python3/rstbuild_hugo.py</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;Give my reStructuredText posts in Hugo a little boost.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">locale</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">frontmatter</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pynvim</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">docutils.core</span> <span class="kn">import</span> <span class="n">publish_parts</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">locale</span><span class="o">.</span><span class="n">setlocale</span><span class="p">(</span><span class="n">locale</span><span class="o">.</span><span class="n">LC_ALL</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">determine_target</span><span class="p">(</span><span class="n">source</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Using an odd suffix so Hugo doesn&#39;t try to build the rst itself</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">source</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s2">&#34;.rst.txt&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Look at </span><span class="si">{</span><span class="n">source</span><span class="si">}</span><span class="s2"> more closely before transforming it.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">source</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;.rst.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;.html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@pynvim.plugin</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">RSTBuildHugo</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nvim</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">nvim</span> <span class="o">=</span> <span class="n">nvim</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@pynvim.autocmd</span><span class="p">(</span><span class="s2">&#34;BufWritePost&#34;</span><span class="p">,</span> <span class="n">pattern</span><span class="o">=</span><span class="s2">&#34;*.rst.txt&#34;</span><span class="p">,</span> <span class="nb">eval</span><span class="o">=</span><span class="s1">&#39;expand(&#34;&lt;afile&gt;&#34;)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">convert_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">source_filename</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">target_path</span> <span class="o">=</span> <span class="n">determine_target</span><span class="p">(</span><span class="n">source_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span> <span class="o">=</span> <span class="n">frontmatter</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">source_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">parts</span> <span class="o">=</span> <span class="n">publish_parts</span><span class="p">(</span><span class="n">source</span><span class="o">=</span><span class="n">post</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="n">writer_name</span><span class="o">=</span><span class="s2">&#34;html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="s2">&#34;body&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">post</span><span class="o">.</span><span class="n">metadata</span><span class="p">[</span><span class="s2">&#34;format&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;rst&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">target_path</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">out</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">out</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">frontmatter</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">post</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">nvim</span><span class="o">.</span><span class="n">out_write</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Wrote </span><span class="si">{</span><span class="n">target_path</span><span class="si">}</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><p>Lord knows this code ain&rsquo;t perfect. This post is its main test. Who knows what bugs and improvements will come later?</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p><em>You</em> will, if you skim the Updates at the end.</p>
</blockquote>
<p>If you grab a copy for your own nefarious plans — a similar template could get you fast Asciidoctor transforms as well — just remember a couple things:</p>
<ul>
<li>
<p>make sure the Python you&rsquo;re using has the libraries needed; I listed my  choices below</p>
</li>
<li>
<p>put it in the right folder; <code>rplugin/python</code> is for Python 2; <code>rplugin/python3</code> is for Python 3</p>
</li>
<li>
<p>run <code>:UpdateRemotePlugins</code> and restart Neovim when you make changes to the plugin file</p>
</li>
</ul>
<h3 id="libraries-used">Libraries Used</h3>
<ul>
<li><a href="https://docutils.sourceforge.io/">Docutils</a> of course, for transforming the reStructuredText</li>
<li>Docutils takes advantage of the fact that I have <a href="https://pygments.org/">Pygments</a> installed, for syntax highlighting</li>
<li><a href="https://python-frontmatter.readthedocs.io/en/latest/index.html">Python Frontmatter</a> gives me a consistent tool for handling post frontmatter and content</li>
<li><a href="https://pynvim.readthedocs.io/en/latest/">pynvim</a> is the bit that hooks it all into Neovim</li>
</ul>
]]></content:encoded>
</item>
</channel>
</rss>
