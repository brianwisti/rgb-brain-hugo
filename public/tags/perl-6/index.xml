<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>perl-6onRandom Geekery</title>
    <link>https://randomgeekery.org/tags/perl-6/</link>
    <description>
      Recent contentinperl-6 on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sat, 25 Feb 2017 00:00:00 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/tags/perl-6/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Converting OGG To MP3</title>
  <link>https://randomgeekery.org/post/2017/02/converting-ogg-to-mp3/</link>
  <pubDate>Sat, 25 Feb 2017 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/02/converting-ogg-to-mp3/</guid>
  <description>I have ignored my MacBook Pro for a few months. Now my iTunes and Rhythmbox music libraries are out of sync. The Rhythmbox library includes a handful of Ogg Vorbis files. Because iTunes does not support Ogg by default, I will use FFmpeg to convert those files to MP3. For the sake of novelty, card/Raku is the glue language for the task.
I know. I could go digging in the box at the bottom of the back of the closet and re-rip those CDs.</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>raku-lang</category>  <category>perl-6</category>  <category>music</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p>I have ignored my MacBook Pro for a few months. Now my iTunes and   Rhythmbox music libraries are out of sync. The Rhythmbox library includes a handful of <a href="http://vorbis.com/">Ogg Vorbis</a> files. Because iTunes does not support Ogg by default, I will use <a href="http://ffmpeg.org/">FFmpeg</a> to convert those files to MP3. For the sake of novelty, <a href="/card/raku/">card/Raku</a> is the glue language for the task.</p>
<p>I know. I could go digging in the box at the bottom of the back of the closet
and re-rip those CDs. But the closet is all the way over there. I’m right here. I
don’t feel like getting up, and I do feel like using Perl 6 for something.</p>
<p>Don’t you judge me.</p>
<p>This is a quick journey into Raku for my own amusement, and not a tutorial. I linger on the stuff that caught my attention rather than explain all the details. Still &ndash; hopefully it’s useful to you!</p>
<h2 id="perl-6-star-notes">Perl 6 Star Notes</h2>
<p>I installed <a href="http://rakudo.org/downloads/star/">Rakudo Star</a> 2017.01 from source. Some of this information may be useful to others poking at a new <a href="http://rakudo.org/">Rakudo</a> installation.</p>
<h3 id="did-i-set-up-my-path-correctly">Did I Set Up My Path Correctly?</h3>
<p>I misread the path setup instructions after <code>make</code> finished, and ended up flailing in confusion for several minutes before I double-checked the Makefile. You can skip the flailing by reading correctly or by rerunning the &ldquo;welcome message.&rdquo;</p>
<pre tabindex="0"><code>$ make welcome-message

Rakudo Star has been built and installed successfully.
Please make sure that the following directories are in PATH:
  /home/random/src/rakudo-star-2017.01/install/bin
  /home/random/src/rakudo-star-2017.01/install/share/perl6/site/bin
</code></pre><h3 id="what-version-of-perl-6-do-i-have">What Version Of Perl 6 Do I Have?</h3>
<p>Just throwing it in so you can see what I’m working with.</p>
<pre tabindex="0"><code>$ perl6 --version
This is Rakudo version 2017.01 built on MoarVM version 2017.01
implementing Perl 6.c.
</code></pre><h3 id="what-modules-do-i-have">What Modules Do I Have?</h3>
<p>As of version 2017.01, Rakudo includes <a href="https://github.com/ugexe/zef">zef</a> as its default package manager. See its <a href="https://github.com/ugexe/zef#usage">usage summary</a> for details of finding and installing modules. For the moment I want to know what came with my Rakudo Star installation.</p>
<pre tabindex="0"><code>$ zef list --installed
===&gt; Found via /home/random/src/rakudo-star-2017.01/install/share/perl6
CORE:ver(&#39;6.c&#39;):auth(&#39;perl&#39;)
===&gt; Found via /home/random/src/rakudo-star-2017.01/install/share/perl6/site
Test::Mock:ver(&#39;1.3&#39;)
LWP::Simple:ver(&#39;0.090&#39;):auth(&#39;Cosimo Streppone&#39;)
Pod::To::HTML:ver(&#39;0.3.7&#39;)
panda:ver(&#39;2016.02&#39;)
NativeHelpers::Blob:ver(&#39;0.1.10&#39;):auth(&#39;github:salortiz&#39;)
SVG
JSON::Tiny
Grammar::Debugger
zef:auth(&#39;github:ugexe&#39;)
HTTP::Easy:ver(&#39;1.1.0&#39;)
XML::Writer
Template::Mojo:ver(&#39;0.1&#39;)
File::Which
File::Temp
File::Directory::Tree:auth(&#39;labster&#39;)
TAP::Harness::Prove6:ver(&#39;0.0.1&#39;):auth(&#39;Leon Timmermans&#39;)
Terminal::ANSIColor:ver(&#39;0.2&#39;)
DBIish:ver(&#39;0.5.9&#39;)
SVG::Plot
Template::Mustache:auth(&#39;github:softmoth&#39;)
File::Find:ver(&#39;0.1&#39;)
Debugger::UI::CommandLine
Grammar::Profiler::Simple:ver(&#39;0.01&#39;):auth(&#39;Jonathan Scott Duff&#39;)
Pod::To::BigPage:ver(&#39;0.2.1&#39;):auth(&#39;Wenzel P. P. Peppmeyer&#39;)
PSGI:ver(&#39;1.2.0&#39;)
p6doc
HTTP::Status
Linenoise:ver(&#39;0.1.1&#39;):auth(&#39;Rob Hoelz&#39;)
JSON::Fast:ver(&#39;0.7&#39;)
Native::Resources:ver(&#39;0.1.0&#39;):auth(&#39;Rob Hoelz&#39;)
Shell::Command
LibraryMake:ver(&#39;1.0.0&#39;):auth(&#39;github:retupmoca&#39;)
MIME::Base64:ver(&#39;1.2&#39;):auth(&#39;github:retupmoca&#39;)
Digest::MD5:ver(&#39;0.05&#39;):auth(&#39;Cosimo Streppone&#39;)
URI:ver(&#39;0.1.2&#39;)
JSON::RPC:ver(&#39;0.17.1&#39;):auth(&#39;Pawel Pabian&#39;)
</code></pre><p>It would be nice if the output had a sort option. I can sort myself, though I’d lose information about where the modules were found.</p>
<pre tabindex="0"><code>$ zef list --installed | sort
</code></pre><p>I’m sure pull requests are welcome.</p>
<h3 id="how-do-i-get-at-the-documentation">How Do I Get At The Documentation?</h3>
<p>Once you stop flailing with your setup and know what modules are installed, use <a href="https://github.com/perl6/doc">p6doc</a> to read module documentation.</p>
<pre tabindex="0"><code>$ p6doc File::Find
</code></pre><p>Okay I have my Rakudo Star installation sorted out. Time for the task at hand.</p>
<h2 id="quick-question-how-many">Quick question: How many?</h2>
<p>How many Ogg files do I have, anyways?</p>
<pre tabindex="0"><code>$ find ~/Music/ -name &#39;*.ogg&#39; | wc -l
212
</code></pre><p>More than a handful, but still - that’s not too bad. Let’s take a minute to look at the Perl 6 I used.</p>
<h3 id="count-the-files-from-perl-6">Count The Files From Perl 6</h3>
<p>In order to get a feel for what I’m doing in Perl 6, I’m going to use Perl 6 to count the Ogg files. This task relies on <a href="https://github.com/tadzik/File-Find">File::Find</a>, which comes with Rakudo Star. Perl 6 File::Find works like Perl 5’s <a href="https://metacpan.org/pod/File::Find::Rule">File::Find::Rule</a>. You describe characteristics of the files you’re looking for, and it hands you back a <a href="https://docs.perl6.org/language/list.html#Lazy_Lists">lazy list</a> of files that match.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="k">v</span><span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Find</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$music_dir</span> <span class="o">=</span> <span class="vg">%*ENV</span><span class="p">&lt;</span><span class="s">HOME</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#34;</span><span class="s2">/Music</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@ogg_files</span> <span class="o">=</span> <span class="nb">find</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">dir</span>  <span class="o">=&gt;</span> <span class="nv">$music_dir</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">name</span> <span class="o">=&gt;</span> <span class="p">/</span><span class="se">\</span><span class="sr">.ogg</span><span class="ni">$</span><span class="p">/</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$count</span> <span class="o">=</span> <span class="nv">@ogg_files</span><span class="o">.</span><span class="nb">elems</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nb">say</span> <span class="p">&#34;</span><span class="s2">I see </span><span class="nv">$count</span><span class="s2"> Ogg files</span><span class="p">&#34;;</span>
</span></span></code></pre></div><p>This does the same as the one-liner: look in <code>$HOME/Music</code> for and files suffixed with <code>.ogg</code>, and tell me how many matches it found.</p>
<pre tabindex="0"><code>$ perl6 ogg-to-mp3.p6
I see 212 Ogg files
</code></pre><p>Yay I get exactly the same number of files that <code>find</code> found! Okay now I’m going to convert them to MP3. I’ll put them in a working directory so that I don’t confuse Rhythmbox.</p>
<p>FFmpeg can handle conversion, but my string starts looking a bit funky thanks to funky Perl quoting rules. Anyways.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="k">v</span><span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Find</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Audio::Taglib::Simple</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$music_dir</span> <span class="o">=</span> <span class="vg">%*ENV</span><span class="p">&lt;</span><span class="s">HOME</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#34;</span><span class="s2">/Music</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@ogg_files</span> <span class="o">=</span> <span class="nb">find</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="s">dir</span>  <span class="o">=&gt;</span> <span class="nv">$music_dir</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">  <span class="s">name</span> <span class="o">=&gt;</span> <span class="p">/</span><span class="se">\</span><span class="sr">.ogg</span><span class="ni">$</span><span class="p">/</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nv">@ogg_files</span> <span class="k">-&gt;</span> <span class="nv">$ogg_file</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$path</span> <span class="o">=</span> <span class="kt">IO::Path</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span><span class="nv">$ogg_file</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Where will the converted file go?</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$working_dir</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">converted</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$new_dir</span> <span class="o">=</span> <span class="nv">$path</span><span class="o">.</span><span class="nb">dirname</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span><span class="nv">$music_dir</span><span class="o">,</span> <span class="nv">$working_dir</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$new_file</span> <span class="o">=</span> <span class="nv">$path</span><span class="o">.</span><span class="nb">basename</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span><span class="nv">$path</span><span class="o">.</span><span class="nb">extension</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">mp3</span><span class="p">&#34;);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$mp3_file</span> <span class="o">=</span> <span class="p">&#34;</span><span class="nv">$new_dir</span><span class="s2">/</span><span class="nv">$new_file</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Create the directory path if needed</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># (still returns True if $new_dir already exists)</span>
</span></span><span class="line"><span class="cl">  <span class="nb">mkdir</span> <span class="nv">$new_dir</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Ask ffmpeg to convert.</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   -y                    &lt;- overwrite if $mp3_file exists</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   -v warning            &lt;- report warnings &amp; errors but not general info</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   -i &#34;$ogg_file&#34;        &lt;- Read from here (quoted for spaces)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   -map_metadata &#34;0:s:0&#34; &lt;- include title, artist, etc (quoted for P6 interpolation oddness)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   &#34;$mp3_file&#34;           &lt;- write to here (quoted for spaces)</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$captured</span> <span class="o">=</span> <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2">ffmpeg -y -v warning -i &#34;</span><span class="nv">$ogg_file</span><span class="s2">&#34; -map_metadata &#34;0:s:0&#34; &#34;</span><span class="nv">$mp3_file</span><span class="s2">&#34;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span> <span class="nv">$captured</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span> <span class="p">&#34;</span><span class="s2">.</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">say</span> <span class="p">&#34;</span><span class="s2">DONE</span><span class="p">&#34;;</span>
</span></span></code></pre></div><p><a href="https://docs.perl6.org/type/IO::Path">IO::Path</a> objects understand how file and directory paths work. Constructing the <code>$mp3_file</code> filename was easy enough thanks to a little string substitution on the Path components.</p>
<p><a href="https://docs.perl6.org/language/quoting#Shell_quoting_with_interpolation:_qqx"><code>qqx</code></a> shell quoting allows variable interpolation, though Perl 6 saw <code>0:s:0</code> as a thing it needed to interpolate until I wrapped it in quotes. It took me a while to figure out the correct FFmpeg invocation, so breaking it down in the comments made sense. Oh and if there’s any output from the conversion I print it.</p>
<blockquote>
<p>[!NOTE]
I need to remind myself that I’m putting down notes here and not writing a  tutorial, but I suggest newcomers to Perl 6 explore the <a href="https://docs.perl6.org/type.html">types</a> and <a href="https://docs.perl6.org/routine.html">routines</a>.</p>
<p>Yes, Perl 6 syntax can be strange and intimidating. You don’t need to learn all the syntax to get stuff done. The types and routines hold most of what you need for daily work. Can’t find it there? Look at the <a href="https://modules.perl6.org/">modules</a>. Easy stuff should still be easy. This is Perl, after all.</p>
</blockquote>
<h3 id="quality-control">Quality Control</h3>
<p>I used <a href="https://github.com/zoffixznet/perl6-audio-taglib-simple">Audio::Taglib::Simple</a> to double-check my work while figuring out the correct <code>ffmpeg</code> incantaion.</p>
<pre tabindex="0"><code>$ sudo apt-get install libtagc0
$ zef install Audio::Taglib::Simple
</code></pre><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="k">v</span><span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Audio::Taglib::Simple</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="vg">@*ARGS</span> <span class="k">-&gt;</span> <span class="nv">$mp3_file</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$mp3_tags</span> <span class="o">=</span> <span class="n">Audio::Taglib::Simple</span><span class="o">.</span><span class="nb">new</span><span class="p">(&#34;</span><span class="nv">$mp3_file</span><span class="p">&#34;);</span>
</span></span><span class="line"><span class="cl">  <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$mp3_file:</span><span class="s2"> </span><span class="p">{</span><span class="nv">$mp3_tags</span><span class="o">.</span><span class="nf">title</span><span class="p">}</span><span class="s2"> - </span><span class="p">{</span><span class="nv">$mp3_tags</span><span class="o">.</span><span class="nf">album</span><span class="p">}</span><span class="s2"> - </span><span class="p">{</span><span class="nv">$mp3_tags</span><span class="o">.</span><span class="nf">artist</span><span class="p">}&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$mp3_tags</span><span class="o">.</span><span class="nf">free</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>This takes any command line arguments and presents a summary of track information for each argument. It will choke if I hand it anything that’s not an MP3 file, but for an idle weekend thing on my own machine it’s fine.</p>
<pre tabindex="0"><code>$ perl6 check-mp3.p6 converted/Melvins/Houdini/*
converted/Melvins/Houdini/01 - Hooch.mp3
Hooch - Houdini - Melvins
converted/Melvins/Houdini/02 - Night Goat.mp3
Night Goat - Houdini - Melvins
converted/Melvins/Houdini/03 - Lizzy.mp3
Lizzy - Houdini - Melvins
converted/Melvins/Houdini/04 - Going Blind.mp3
Going Blind - Houdini - Melvins
converted/Melvins/Houdini/05 - Honey Bucket.mp3
Honey Bucket - Houdini - Melvins
converted/Melvins/Houdini/06 - Hag Me.mp3
Hag Me - Houdini - Melvins
converted/Melvins/Houdini/07 - Set Me Straight.mp3
Set Me Straight - Houdini - Melvins
converted/Melvins/Houdini/08 - Sky Pup.mp3
Sky Pup - Houdini - Melvins
converted/Melvins/Houdini/09 - Joan of Arc.mp3
Joan of Arc - Houdini - Melvins
converted/Melvins/Houdini/10 - Teet.mp3
Teet - Houdini - Melvins
converted/Melvins/Houdini/11 - Copache.mp3
Copache - Houdini - Melvins
converted/Melvins/Houdini/12 - Pearl Bomb.mp3
Pearl Bomb - Houdini - Melvins
converted/Melvins/Houdini/13 - Spread Eagle Beagle.mp3
Spread Eagle Beagle - Houdini - Melvins
</code></pre><p>Cool. It worked.</p>
<h3 id="what-now">What Now?</h3>
<p>I move the converted files to my <code>~/Sync</code> folder and let <a href="https://syncthing.net/">Syncthing</a> handle copying them to the Mac. They import into iTunes and I’m all done!</p>
<p>Wait. I still have to sync the files that were imported to Rhythmbox as MP3 but aren’t on iTunes yet.</p>
<p>Not today, though.</p>
]]></content:encoded>
</item>
</channel>
</rss>
