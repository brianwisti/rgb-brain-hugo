<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>orgmodeonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/orgmode/</link>
    <description>
      Recent contentinorgmode on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sat, 24 Oct 2020 18:26:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/orgmode/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: I added this note from org mode</title>
  <link>https://randomgeekery.org/post/2020/10/i-added-this-note-from-org-mode/</link>
  <pubDate>Sat, 24 Oct 2020 18:26:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/10/i-added-this-note-from-org-mode/</guid>
  <description>Trying an experiment with setting up a capture template so ox-hugo can add short notes to the site from card/Org.
I built up the ox-hugo capture sample to get my preferred SECTION/YEAR/MONTH/STUB folder layout.
(defun org-hugo-note-capture-template () &#34;Returns `org-capture&#39; template string for new site note.&#34; (let* ((title (read-from-minibuffer &#34;Title: &#34;)) (fname (org-hugo-slug title)) (year (format-time-string &#34;%Y&#34;)) (month (format-time-string &#34;%m&#34;))) (mapconcat #&#39;identity `( ,(concat &#34;* TODO &#34; title) &#34;:properties:&#34; ,(concat &#34;:export_hugo_bundle: &#34; (mapconcat #&#39;identity (list year month fname) &#34;/&#34;)) &#34;:export_file_name: index&#34; &#34;:end:&#34; &#34;%?</description>
   <category>post</category> 
   <category>note</category> 
   <category>emacs</category>  <category>orgmode</category> 
  <content:encoded><![CDATA[<p>Trying an experiment with setting up a <a href="https://orgmode.org/manual/Capture-templates.html">capture template</a> so <a href="https://ox-hugo.scripter.co/">ox-hugo</a> can add short notes to the site from <a href="/card/org/">card/Org</a>.</p>
<p>I built up the <a href="https://ox-hugo.scripter.co/doc/org-capture-setup/">ox-hugo capture sample</a> to get my preferred <code>SECTION/YEAR/MONTH/STUB</code> folder layout.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">org-hugo-note-capture-template</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Returns </span><span class="ss">`org-capture&#39;</span><span class="s"> template string for new site note.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">let*</span> <span class="p">((</span><span class="nv">title</span> <span class="p">(</span><span class="nf">read-from-minibuffer</span> <span class="s">&#34;Title: &#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nv">fname</span> <span class="p">(</span><span class="nv">org-hugo-slug</span> <span class="nv">title</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nv">year</span> <span class="p">(</span><span class="nf">format-time-string</span> <span class="s">&#34;%Y&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nv">month</span> <span class="p">(</span><span class="nf">format-time-string</span> <span class="s">&#34;%m&#34;</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nf">mapconcat</span> <span class="nf">#&#39;identity</span>
</span></span><span class="line"><span class="cl">               <span class="o">`</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                 <span class="o">,</span><span class="p">(</span><span class="nf">concat</span> <span class="s">&#34;* TODO &#34;</span> <span class="nv">title</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;:properties:&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="o">,</span><span class="p">(</span><span class="nf">concat</span> <span class="s">&#34;:export_hugo_bundle: &#34;</span>
</span></span><span class="line"><span class="cl">                          <span class="p">(</span><span class="nf">mapconcat</span> <span class="nf">#&#39;identity</span> <span class="p">(</span><span class="nf">list</span> <span class="nv">year</span> <span class="nv">month</span> <span class="nv">fname</span><span class="p">)</span> <span class="s">&#34;/&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;:export_file_name: index&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;:end:&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;%?\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">               <span class="s">&#34;\n&#34;</span><span class="p">)))</span>
</span></span></code></pre></div><p>Then the important bits of my capture template…</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">org</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:custom</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">org-capture-templates</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nb">quote</span> <span class="p">(</span><span class="s">&#34;s&#34;</span> <span class="s">&#34;Site&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="s">&#34;sn&#34;</span> <span class="s">&#34;Note&#34;</span> <span class="nv">entry</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="nv">file+olp+datetree</span> <span class="nv">bmw/org-site</span> <span class="s">&#34;Notes&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="nb">function</span> <span class="nv">org-hugo-note-capture-template</span><span class="p">)))))</span>
</span></span></code></pre></div><p>Eventually I got it right, and <code>C-c c s n</code> brought me to this buffer, where I&rsquo;m editing a note that&rsquo;s already longer than I usually intend these to be.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="gh">*</span><span class="gs"> Notes</span>
</span></span><span class="line"><span class="cl"><span class="c">:properties:
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="cs">:export_hugo_section: note
</span></span></span><span class="line"><span class="cl"><span class="cs"></span><span class="c">:end:</span>
</span></span><span class="line"><span class="cl"><span class="gu">**</span> 2020
</span></span><span class="line"><span class="cl"><span class="gu">***</span> 2020-10 October
</span></span><span class="line"><span class="cl"><span class="gu">****</span> 2020-10-24 Saturday
</span></span><span class="line"><span class="cl"><span class="gu">*****</span><span class="err"> TODO</span> I added this note from org mode                        :emacs:
</span></span><span class="line"><span class="cl"><span class="c">:properties:
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="cs">:export_hugo_bundle: 2020/10/i-added-this-note-from-org-mode
</span></span></span><span class="line"><span class="cl"><span class="cs">:export_file_name: index
</span></span></span><span class="line"><span class="cl"><span class="cs"></span><span class="c">:end:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Trying an experiment: setting up a [[<span class="na">https://orgmode.org/manual/Capture-templates.html</span>][<span class="nt">capture template</span>]] so [[<span class="na">https://ox-hugo.scripter.co/</span>][<span class="nt">ox-hugo</span>]] can add short notes to the site.
</span></span></code></pre></div><p>Still loads to figure out — for example, how will I get cover images working? But at least I proved to myself that it works.</p>
<p>Back to fixing the broken <a href="/card/indieweb/">card/IndieWeb</a> mentions, which is why I opened my editor a couple of hours ago.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: OrgMode-ish VimWiki</title>
  <link>https://randomgeekery.org/post/2020/07/orgmode-ish-vimwiki/</link>
  <pubDate>Fri, 03 Jul 2020 23:51:27 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/07/orgmode-ish-vimwiki/</guid>
  <description>I just wanted to see if I can something like the card/Org experience in card/Vim without vim-orgmode. I can. Sort of. Using Vimwiki with TaskWiki for Taskwarrior integration. Not appearing in this image: vim-table-mode. Appearing but not relevant to the Org-ish experiment is vim-which-key. Completely missing: any sort of Babel code evaluation/tangling.
That agenda-ish task list is real cool but needs to show more info, like tags.</description>
   <category>post</category> 
   <category>note</category> 
   <category>vim</category>  <category>taskwarrior</category>  <category>orgmode</category> 
  <content:encoded><![CDATA[<p><img src="/post/2020/07/../../../attachments/img/2020/cover-2020-07-03.png" alt="attachments/img/2020/cover-2020-07-03.png"/></p>
<p>I just wanted to see if I can something like the <a href="/card/org/">card/Org</a> experience in <a href="/card/vim/">card/Vim</a> without <a href="https://github.com/jceb/vim-orgmode">vim-orgmode</a>. I can. Sort of. Using <a href="https://vimwiki.github.io/">Vimwiki</a> with <a href="https://github.com/tbabej/taskwiki">TaskWiki</a> for Taskwarrior integration. Not appearing in this image: <a href="https://github.com/dhruvasagar/vim-table-mode">vim-table-mode</a>. Appearing but not relevant to the Org-ish experiment is <a href="https://github.com/liuchengxu/vim-which-key">vim-which-key</a>. Completely missing: any sort of <a href="https://orgmode.org/worg/org-contrib/babel/intro.html">Babel</a> code evaluation/tangling.</p>
<p>That agenda-ish task list is <em>real</em> cool but needs to show more info, like tags.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Ox Hugo for the Orgconfig</title>
  <link>https://randomgeekery.org/post/2020/06/ox-hugo-for-the-orgconfig/</link>
  <pubDate>Sat, 27 Jun 2020 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/06/ox-hugo-for-the-orgconfig/</guid>
  <description>What? I’m combining all my card/Org config files into one, and then using ox-hugo to generate Markdown files for my card/Hugo site.
Why? Hugo renders Org files just fine, but I wanted my config to be a bit more tightly integrated. ox-hugo works well as both plain old Org and as an intermediary that exports Hugo content. A single Org file can become as many Hugo pages as I want.</description>
   <category>post</category> 
   <category>post</category> 
   <category>orgconfig</category>  <category>orgmode</category>  <category>site</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>Putting a couple how-to details down for easy searching later</h2><p><img src="/post/2020/06/../../../attachments/img/2020/cover-2020-06-27.png" alt="attachments/img/2020/cover-2020-06-27.png"/></p>
<h2 id="what">What?</h2>
<p>I’m combining all my <a href="/card/org/">card/Org</a> config files into one, and then using <a href="https://ox-hugo.scripter.co"><code>ox-hugo</code></a> to generate Markdown files for my <a href="/card/hugo/">card/Hugo</a> site.</p>
<h2 id="why">Why?</h2>
<p>Hugo renders Org files just fine, but I wanted my config to be a bit more tightly integrated.  <code>ox-hugo</code> works well as both plain old Org and as an intermediary that exports Hugo content.  A single Org file can become as many Hugo pages as I want.</p>
<h2 id="getting-it-to-work">Getting it to work</h2>
<p>This week my favorite Emacs flavor is <a href="https://github.com/hlissner/doom-emacs">Doom Emacs</a>.  Their <a href="https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/org">org module</a> supports <code>ox-hugo</code> as an option, so enabling that option in my init should do the trick — after a <code>doom sync</code> of course.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">doom!</span>
</span></span><span class="line"><span class="cl"> <span class="err">⋮</span>
</span></span><span class="line"><span class="cl"> <span class="nb">:lang</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nv">org</span> <span class="nv">+hugo</span><span class="p">))</span>
</span></span></code></pre></div><p>Off in the depths of my <code>~/org/</code> folder, I create a new <code>config.org</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="cs">#+title</span><span class="c">: My Orgconfig</span>
</span></span><span class="line"><span class="cl"><span class="cs">#+hugo_base_dir</span><span class="c">: ~/Sites/random-geekery-blog/</span>
</span></span><span class="line"><span class="cl"><span class="cs">#+hugo_section</span><span class="c">: config</span>
</span></span></code></pre></div><p>Everything here will end up going in the <code>config</code> section of my site, under <code>~/Sites/random-geekery-blog/content/config</code>.</p>
<blockquote>
<p>[!NOTE]
A while back I got stuck with <code>ox-hugo</code> for my site because of how big each section is.  Using an Org file per section might work really well!  It works great for this case, that’s for sure.</p>
</blockquote>
<p>Each top-level section will be a page in <code>/config/</code>. I show <em>which</em> page in the subtree’s <code>:properties:</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="k">+ </span>Emacs config
</span></span><span class="line"><span class="cl"><span class="c">:properties:
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="cs">:export_description: Be kinda weird if I didn&#39;t manage that one in Org, yes?
</span></span></span><span class="line"><span class="cl"><span class="cs">:export_file_name: emacs
</span></span></span><span class="line"><span class="cl"><span class="cs">:export_hugo_weight: 5
</span></span></span><span class="line"><span class="cl"><span class="cs"></span><span class="c">:end:</span>
</span></span></code></pre></div><p><code>ox-hugo</code> automatically <a href="https://ox-hugo.scripter.co/doc/org-meta-data-to-hugo-front-matter/%5D">converts</a> the <code>export</code> properties to Hugo front matter.  <code>:export_file_name:</code> of <code>emacs</code> maps out to a generated file <code>emacs/index.md</code> under <code>content/config/</code>.</p>
<blockquote>
<p>[!WARNING]
If you’re playing along, remember to tag sensitive config sections as <code>:noexport:</code>!</p>
</blockquote>
<p>Since I’m showing off <a href="https://orgmode.org/worg/org-contrib/babel/intro.html">Babel</a>’s ability to tangle, I want to show the tangle references.  <code>:noweb no-export</code> tells Babel to tangle when evaluating the block, but <em>not</em> when exporting.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="cs">#+name</span><span class="c">: zsh/base-variables</span>
</span></span><span class="line"><span class="cl"><span class="c">#+begin_src </span><span class="cs">text</span><span class="c"> :noweb no-export
</span></span></span><span class="line"><span class="cl"><span class="c"></span>&lt;&lt;zsh/set-base-path&gt;&gt;
</span></span><span class="line"><span class="cl">&lt;&lt;zsh/define-editor&gt;&gt;
</span></span><span class="line"><span class="cl">&lt;&lt;zsh/clicolor&gt;&gt;
</span></span><span class="line"><span class="cl">&lt;&lt;zsh/add-home-bin&gt;&gt;
</span></span><span class="line"><span class="cl"><span class="c">#+end_src</span>
</span></span></code></pre></div><p>And — yeah.  I still haven’t figured out a nice way to highlight those tangle bits, so for the moment I default to calling my mostly-tangled blocks &ldquo;text&rdquo;.</p>
<p>I also create a subtree for the section <code>_index.md</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="k">+ </span>My personal orgconfig
</span></span><span class="line"><span class="cl"><span class="c">:properties:
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="cs">:export_file_name: _index
</span></span></span><span class="line"><span class="cl"><span class="cs"></span><span class="c">:end:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#+begin_note
</span></span><span class="line"><span class="cl">This is my live config, written as an [[<span class="na">https://orgmode.org/</span>][<span class="nt">Org</span>]] file and integrated with my site with [[<span class="na">https://ox-hugo.scripter.co/</span>][<span class="nt">=ox-hugo=</span>]].
</span></span><span class="line"><span class="cl">⋮
</span></span></code></pre></div><p>Now my config section summary is part of the config org file.  I find this aesthetically pleasing.</p>
<h2 id="the-rest-is-implementation-details">The rest is implementation details</h2>
<p>This whole process is fiddly.  Org mode.  Literate config.  Hugo.  <code>ox-hugo</code>. That makes the whole thing fiddly^4 or something.  But these quick notes covered things that got in my way while gluing the whole thing together.  If you want to try it out, at least <em>some</em> of the fiddliness should be clearer.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: From Dotfiles to Org File</title>
  <link>https://randomgeekery.org/post/2020/04/from-dotfiles-to-org-file/</link>
  <pubDate>Tue, 28 Apr 2020 01:36:54 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/04/from-dotfiles-to-org-file/</guid>
  <description>I read Literate Configuration by Diego Zamboni. Now I want to replace my Dotbot-managed dotfiles with an card/Org file.
Literate Configuration? Literate configuration comes out of literate programming, which mixes code and text about the code in a single document. Okay yes. Like code comments. Where literate programming gets more interesting than comments is how it “tangles” snippets together, creating files out of these code snippets you’ve described. It’ll be a little easier to understand when you try it.</description>
   <category>post</category> 
   <category>post</category> 
   <category>emacs</category>  <category>shell</category>  <category>orgmode</category>  <category>orgconfig</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>at 1:30am they're all good ideas</h2><p><img src="/post/2020/04/../../../attachments/img/2020/cover-2020-04-28.png" alt="attachments/img/2020/cover-2020-04-28.png"/></p>
<p>I read <a href="https://leanpub.com/lit-config/">Literate Configuration</a> by <a href="https://zzamboni.org/">Diego Zamboni</a>. Now I want to replace my <a href="https://github.com/anishathalye/dotbot">Dotbot</a>-managed dotfiles with an <a href="/card/org/">card/Org</a> file.</p>
<h2 id="literate-configuration">Literate Configuration?</h2>
<p>Literate configuration comes out of <a href="http://literateprogramming.com/index.html">literate programming</a>, which mixes code and text about the code in a single document. Okay yes. Like code comments. Where literate programming gets more interesting than comments is how it &ldquo;tangles&rdquo; snippets together, creating files out of these code snippets you’ve described. It’ll be a little easier to understand when you try it. But you can describe the reasoning behind your code or look at your code as high level components.</p>
<p>Folks still argue whether literate programming is a useful approach to software development. But it could be a good way to handle config files. Personal configuration tends to collect disparate elements with little organization. Weaving them together in a single document could help create a coherent story of how you use your systems.</p>
<p>Diego Zamboni’s booklet includes 17 pages of instruction and 80 pages of sample config for Emacs, the <a href="https://www.hammerspoon.org/">Hammerspoon</a> macOS automation tool, and the <a href="https://elv.sh/">Elvish</a> shell, all of which you can also find <a href="https://zzamboni.org/post/2017-12-17-my-emacs-configuration-with-commentary/">on his blog</a>. I have no regrets about spending $5 on <em>Literate Configuration</em>. The
formatting is better, for one thing.</p>
<h2 id="dotfiles">Dotfiles?</h2>
<p>An informal reference to one person’s collection of configurations and settings. They’re named for the common Unix convention of using a leading dot in config filenames: <code>.zshrc</code>, for example. Many folks, including me, like to keep those dotfiles in version control. Makes it easier to track changes or roll back when something doesn’t work like you thought it would. Also simplifies setting up new machines.</p>
<p>You can find a nice introductory site for the version-controlled dotfiles approach on <a href="https://dotfiles.github.io/">Github</a>.</p>
<h2 id="in-an-org-file">In an Org file?</h2>
<p>Well of course. What did you think I was going to use — <a href="https://github.com/jostylr/literate-programming">Markdown</a>? <a href="https://slott56.github.io/PyLit-3/_build/html/index.html">reStructuredText</a>? <a href="https://aimlesslygoingforward.com/blog/2019/10/02/roguelike-tutorial-up-to-date-and-literate/">Asciidoctor</a>?</p>
<p>Actually those are pretty cool. I could maybe work up an extension for more pleasing notation, and — no! I already started this with Org mode. I can finish this with Org mode.</p>
<p>Maybe later, Asciidoctor.</p>
<p>Yeah, Org. <a href="https://orgmode.org/worg/org-contrib/babel/">Babel</a> lets Org execute and/or <a href="https://orgmode.org/manual/Extracting-Source-Code.html#Extracting-Source-Code">extract</a> source code. It supports a long list of <a href="https://orgmode.org/worg/org-contrib/babel/languages.html">languages</a>. I don’t need to find or write extensions for basic functionality.</p>
<h2 id="prepare-org-mode">Prepare Org mode</h2>
<p>Babel used to be an extension to Org, but it’s been a core part of the framework for a bit now. Thing is, Babel is powerful and a little dangerous. You need to give it permission.</p>
<p><strong><code>~/.emacs</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">org</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:ensure</span> <span class="nv">org-plus-contrib</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:defer</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:custom</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">org-confirm-babel-evaluate</span> <span class="no">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">; ...</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:config</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">org-babel-do-load-languages</span>
</span></span><span class="line"><span class="cl">   <span class="ss">&#39;org-babel-load-languages</span>
</span></span><span class="line"><span class="cl">   <span class="o">&#39;</span><span class="p">((</span><span class="nv">shell</span> <span class="o">.</span> <span class="no">t</span><span class="p">))))</span> 
</span></span></code></pre></div><ul>
<li><code>shell</code> is a general-purpose mode that covers <code>sh</code>, <code>bash</code>, <code>zsh</code>, and so on.</li>
</ul>
<p>Babel wants to know what languages it can load. I’m only tangling shell files, so that’s all I put in <code>org-babel-load-languages</code>.</p>
<p>By default, Babel requests confirmation from you for every code block it handles. That’s smart, but also annoying. Disabling <code>org-confirm-babel-evaluate</code> means I’m okay with Babel executing or extracting any code it finds. It also means I need to ensure that my code blocks don’t request any dangerous actions. Leave this setting enabled if smart matters more to you than annoying.</p>
<blockquote>
<p>[!NOTE] Correction
The Babel settings I added are for code <em>extraction</em>, not code evaluation. Babel extracts anything you want. <a href="https://orgmode.org/manual/Evaluating-Code-Blocks.html#Evaluating-Code-Blocks">Code evaluation</a> is a different feature, and not needed for this post. Skip my <code>:custom</code> and <code>:config</code> items if you’re just tangling.</p>
</blockquote>
<p>Zamboni’s booklet provides directions for automatic export on save, but I’m still new to this. I’ll stick with manually triggering extraction for now.</p>
<h2 id="my-literate-config">My literate config</h2>
<p>Let’s keep my starting point really really simple. Just a little bit out of my <a href="https://www.zsh.org/">Zsh</a> config.</p>
<p><strong><code>config.org</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="cs">#+title</span><span class="c">: My config</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gh">*</span><span class="gs"> Notes</span>
</span></span><span class="line"><span class="cl"><span class="nb">{{{kbd(C-c C-v t)}}}</span> to tangle until I&#39;m ready to add hooks
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gh">*</span><span class="gs"> zsh</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">**</span> zshenv
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Loaded for all sessions.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">#+begin_src </span><span class="cs">shell</span><span class="c"> :tangle ~/.zshenv
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nv">EDITOR</span><span class="o">=</span><span class="s2">&#34;vim&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c">#+end_src</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">**</span> zshrc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Loaded for interactive sessions
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">#+begin_src </span><span class="cs">shell</span><span class="c"> :tangle ~/.zshrc
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">source</span> ~/.config/broot/launcher/bash/br
</span></span><span class="line"><span class="cl"><span class="c">#+end_src</span>
</span></span></code></pre></div><p>Then I hit <code>C-c C-v t</code> to run <code>org-babel-tangle</code>, which tells me:</p>
<pre tabindex="0"><code>Tangled 2 code blocks from config.org
</code></pre><p>So I look in my files.</p>
<p><strong><code>~/.zshenv</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nv">EDITOR</span><span class="o">=</span><span class="s2">&#34;vim&#34;</span>
</span></span></code></pre></div><p><strong><code>~/.zshrc</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nb">source</span> ~/.config/broot/launcher/bash/br
</span></span></code></pre></div><p>Yay it worked!</p>
<p>There’s not much being &ldquo;tangled&rdquo; though, is there?</p>
<p>I’ve been playing with <a href="https://antigen.sharats.me/">Antigen</a>, but I may go back to <a href="https://ohmyz.sh/">Oh My Zsh</a>. Let’s put the Antigen stuff in its own block.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="cs">#+name</span><span class="c">: antigen</span>
</span></span><span class="line"><span class="cl"><span class="c">#+begin_src </span><span class="cs">shell</span><span class="c">
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">source</span> ~/.dotfiles/zsh/antigen.zsh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen use oh-my-zsh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen bundle git
</span></span><span class="line"><span class="cl">antigen bundle nvm
</span></span><span class="line"><span class="cl">antigen bundle pyenv
</span></span><span class="line"><span class="cl">antigen bundle rbenv
</span></span><span class="line"><span class="cl">antigen bundle taskwarrior
</span></span><span class="line"><span class="cl">antigen bundle tmux
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen bundle zsh-users/zsh-syntax-highlighting
</span></span><span class="line"><span class="cl">antigen theme gozilla
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen apply
</span></span><span class="line"><span class="cl"><span class="c">#+end_src</span>
</span></span></code></pre></div><p>Now we update the <code>~/.zshrc</code> block to tangle with <code>:noweb yes</code> and include that new block.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="c">#+begin_src </span><span class="cs">shell</span><span class="c"> :tangle ~/.zshrc :noweb yes
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="s">&lt;&lt;antigen&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">source /home/ran</span>dom/.config/broot/launcher/bash/br
</span></span><span class="line"><span class="cl"><span class="c">#+end_src</span>
</span></span></code></pre></div><p>C-c C-v t again, and there it is!</p>
<p><strong><code>~/.zshrc</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nb">source</span> ~/.dotfiles/zsh/antigen.zsh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen use oh-my-zsh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen bundle brew
</span></span><span class="line"><span class="cl">antigen bundle git
</span></span><span class="line"><span class="cl">antigen bundle nvm
</span></span><span class="line"><span class="cl">antigen bundle pyenv
</span></span><span class="line"><span class="cl">antigen bundle rbenv
</span></span><span class="line"><span class="cl">antigen bundle taskwarrior
</span></span><span class="line"><span class="cl">antigen bundle tmux
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen bundle zsh-users/zsh-syntax-highlighting
</span></span><span class="line"><span class="cl">antigen theme gozilla
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen apply
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">source</span> /home/random/.config/broot/launcher/bash/br
</span></span></code></pre></div><p>Okay now to finish getting the rest of my zsh config. Oh, and put <code>config.org</code> in version control.</p>
<p><strong>Emacs code extraction key bindings</strong></p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Function</th>
<th>Action</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>C-c C-v t</code></td>
<td><code>org-babel-tangle</code></td>
<td>Extract and write code blocks in the current Org file</td>
</tr>
</tbody>
</table>
]]></content:encoded>
</item>
<item>
  <title>Post: Having fun with Emacs</title>
  <link>https://randomgeekery.org/post/2019/11/having-fun-with-emacs/</link>
  <pubDate>Tue, 19 Nov 2019 21:26:30 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/11/having-fun-with-emacs/</guid>
  <description>I kind of understand what folks say about Emacs being their operating system.
BTW the theme is the poet package, more or less.</description>
   <category>post</category> 
   <category>note</category> 
   <category>emacs</category>  <category>ansi-term</category>  <category>orgmode</category>  <category>htop</category>  <category>overkill</category> 
  <content:encoded><![CDATA[<p>I kind of understand what folks say about <a href="/card/emacs/">Emacs</a> being their operating system.</p>
<p><img src="/post/2019/11/../../../attachments/img/2019/cover-2019-11-19.png" alt="attachments/img/2019/cover-2019-11-19.png"/></p>
<p>BTW the theme is the <a href="https://github.com/kunalb/poet">poet</a> package, more or less.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Logging Money In Org Mode</title>
  <link>https://randomgeekery.org/post/2017/07/logging-money-in-org-mode/</link>
  <pubDate>Mon, 31 Jul 2017 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/07/logging-money-in-org-mode/</guid>
  <description>I am setting up Emacs card/Org to track how I use my money. This is a healthy habit, which I applied in the past with a little paper notebook. This needs to be as easy as that little notebook, or I will never use it.
[!NOTE] 2020-03-01 It wasn’t. I didn’t. But I’ve come back to it for other ideas over time.
I only want to see how I use my money.</description>
   <category>post</category> 
   <category>post</category> 
   <category>emacs</category>  <category>orgmode</category>  <category>budgeting</category>  <category>tools</category> 
  <content:encoded><![CDATA[<p><img src="/post/2017/07/../../../attachments/img/2017/cover-2017-07-31.png" alt="attachments/img/2017/cover-2017-07-31.png"/></p>
<p>I am setting up Emacs <a href="/card/org/">card/Org</a> to track how I use my money. This is a healthy habit, which I applied in the past with a little paper notebook. This needs to be as easy as that little notebook, or I will never use it.</p>
<blockquote>
<p>[!NOTE] 2020-03-01
It wasn’t. I didn’t. But I’ve come back to it for other ideas over time.</p>
</blockquote>
<p>I only want to see how I use my money. This can eventually become part of a budget, but all I want today is the ability to make quick money notes.</p>
<ul>
<li>My friend paid me back some money they borrowed</li>
<li>One of the housemates chipped in for groceries</li>
<li>I treated myself to coffee.</li>
</ul>
<p>Stuff like that. Let’s see what I come up with.</p>
<p>What about my phone?</p>
<p>I know there are budgeting phone apps. Those apps just haven’t served my needs. I spend more time in front of a computer than using my phone. I type at a keyboard quicker than on a phone.</p>
<h2 id="the-setup">The Setup</h2>
<p>I already use <a href="http://www.howardism.org/Technical/Emacs/journaling-org.html">journaling features</a> of Emacs org mode to record tasks that I accomplish through the day. That journal could also record income and expenses. I need a new org <a href="http://orgmode.org/manual/Capture-templates.html#Capture-templates">capture template</a> and menu item for money, though.</p>
<h2 id="adding-a-menu-entry-and-template">Adding a menu entry and template</h2>
<p><code>org-capture-templates</code> holds templates for creating new org entries. I manually edit mine, although the recommended approach to managing those is through the Emacs Customize interface. Old habits die hard.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="c1">;; Probably easier for most folks to manage this with Customize (C-c c C),</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; but setting this stuff directly helps me understand the structure better.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">org-capture-templates</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nb">quote</span>
</span></span><span class="line"><span class="cl">       <span class="p">((</span><span class="s">&#34;p&#34;</span> <span class="s">&#34;Personal&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">; ... other entries removed for clarity</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="s">&#34;pm&#34;</span> <span class="s">&#34;Money entry&#34;</span> <span class="nv">entry</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nv">file+datetree</span> <span class="s">&#34;~/Sync/org/agendas/journal.org&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="s">&#34;** %U - %^{Amount} %^{Summary} :money:%^g&#34;</span><span class="p">))))</span>
</span></span></code></pre></div><p>I start with fields needed for the template selection menu in <code>org-capture</code>. I also tell org mode to save money entries will in the <code>journal.org</code> file under a <em>date tree</em>, which presents a year / month / date hierarchy for entries. Finally, I describe the capture template.</p>
<p>A capture template can be a string or file containing text and template directives. A short string describes money entries. The table below explains the <a href="http://orgmode.org/manual/Template-expansion.html#Template-expansion">template expansion</a> rules I used.</p>
<table>
<thead>
<tr>
<th>Code</th>
<th>What it does</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>%U</code></td>
<td>Creates an <em>inactive</em> timestamp, which will not appear in my regular agenda</td>
</tr>
<tr>
<td><code>%^{Amount}</code></td>
<td>Prompts me for the dollar amount of this transaction</td>
</tr>
<tr>
<td><code>%^{Summary}</code></td>
<td>Prompts me for a summary of this transaction</td>
</tr>
<tr>
<td><code>%^g</code></td>
<td>Prompts me for additional tags for this transaction</td>
</tr>
</tbody>
</table>
<p>This template does not validate input. I don’t know how to do that yet. I must remember to use money values for &ldquo;Amount&rdquo; and to tag every transaction as <code>:income</code> or <code>:expense:</code>. Later I can learn how to enforce these rules with code.</p>
<h2 id="triggering-a-capture">Triggering a Capture</h2>
<p><code>C-c c</code> is a global binding which starts <code>org-capture</code> from whatever I’m doing.</p>
<p><img src="/post/2017/07/attachments/img/2017/org-capture-menu-1.png" title="`C-c c` to enter org capture menu" alt="menu 1 for money capture"/></p>
<p><img src="/post/2017/07/attachments/img/2017/org-capture-menu-2.png" title="`p` then `m` for a Personal Money entry" alt="menu 2 for money capture"/></p>
<p>I get prompted for Amount, Summary, and tags. Once I answer those prompts, I am shown the Capture buffer. I don’t need to change anything, so I finalize the entry with <code>C-c C-c</code>.</p>
<p><img src="/post/2017/07/attachments/img/2017/org-money-capture-buffer.png" title="`C-c C-c` to finalize" alt="Finalize capture buffer"/></p>
<p>After I finalize the entry, Emacs closes the Capture buffer and returns me to whatever I was doing before. I can complete the whole process in about five seconds, which makes it even more convenient for me than the old paper notebook.</p>
<h2 id="filtering-my-agenda">Filtering my agenda</h2>
<p>Even though Org knows <code>journal.org</code> is an agenda file, inactive timestamps aren’t shown in the default agenda view. I’m okay with this for now. Things can get a little cluttered if I start showing every logged item.</p>
<h3 id="show-me-all-the-money-entries">Show me all the <code>:money:</code> entries</h3>
<p><code>C-c a</code> opens the menu of Agenda commands. m lets me search for tag matches. Let’s start with all <code>:money:</code> entries.</p>
<p><img src="/post/2017/07/attachments/img/2017/agenda-filter-money.png" title="`C-c a m money` to filter on the `:money` tag" alt="Filtered on money"/></p>
<h3 id="show-me-income">Show me income</h3>
<p>I already have the agenda match view open, so I use <code>C-u r</code> to refresh with a new search string, &ldquo;income&rdquo;.</p>
<p><img src="/post/2017/07/attachments/img/2017/agenda-filter-income.png" title="`C-u r income` to filter on the `:income:` tag" alt="Filtered on income"/></p>
<h3 id="show-me-expenses">Show me expenses</h3>
<p>Again, I use <code>C-u r</code> to refresh, this time looking for entries that match &ldquo;expense&rdquo;.</p>
<p><img src="/post/2017/07/attachments/img/2017/agenda-filter-expense.png" title="`C-u r expense` to filter on the `:expense:` tag" alt="Filtered on expense"/></p>
<h2 id="stop-here">STOP HERE</h2>
<p>Oh I want to get fancy so bad. Honestly though, I need to set the basic habit of logging all the little things I do with my money. Besides, this gives me something to learn and write future blog posts about!</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Blog Writing in Org Mode</title>
  <link>https://randomgeekery.org/post/2014/10/blog-writing-in-org-mode/</link>
  <pubDate>Tue, 21 Oct 2014 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2014/10/blog-writing-in-org-mode/</guid>
  <description>Introduction Much of what I’ve read aboutOrg has focused on its utility as a task management tool. That’s great. I wouldn’t mind spending some time on that aspect. Mostly I’ve been focused on its usefulness for note-taking and writing.
Org mode includes features which make it attractive for blogging and journaling. It has a relatively simple set of markup rules for common constructs such as paragraphs, lists, source code, and tables.</description>
   <category>post</category> 
   <category>post</category> 
   <category>emacs</category>  <category>orgmode</category>  <category>jekyll</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>An experiment with using Org mode to write Jekyll blog posts.</h2><h2 id="introduction">Introduction</h2>
<p>Much of what I’ve read about<a href="/card/org/">Org</a> has focused on its utility as a task management tool. That’s great. I wouldn’t mind spending some time on that aspect. Mostly I’ve been focused on its usefulness for note-taking and writing.</p>
<p>Org mode includes features which make it attractive for blogging and journaling. It has a relatively simple set of markup rules for common constructs such as paragraphs, <a href="http://orgmode.org/manual/Plain-lists.html">lists</a>, <a href="http://orgmode.org/manual/Working-With-Source-Code.html">source code</a>, and <a href="http://orgmode.org/manual/Tables.html">tables</a>. The mode itself provides an editing interface which simplifies creating and managing those constructs. Most importantly for the blogger, org files can be exported to a range of formats including Markdown and HTML.</p>
<p>Why not use that functionality for my own site? Random Geekery is built with <a href="/card/jekyll/">Jekyll</a>, and there are already <a href="http://orgmode.org/worg/org-tutorials/org-jekyll.html">instructions</a> available for using the two together. I can use those as a starting point.</p>
<h2 id="organize-directories">Organize Directories</h2>
<p>When I’m using Org mode to write the blog pages, Jekyll becomes an implementation detail specific to publishing the blog. One folder contains all of the Jekyll project files, and an <code>org</code> folder mirrors the content-specific structure of the <code>jekyll</code> tree.</p>
<pre tabindex="0"><code>+jekyll
+- css
+- _data
+- _drafts
+- img
+- _includes
+- _layouts
+- pages
+- _plugins
+- _posts
+- _sass
+- _scripts
+- _site
+org
    +- _drafts
    +- _posts
    +- pages
</code></pre><p>I use <code>_drafts</code> because I don’t always know when I will be publishing a post, and <code>pages</code> because I have legacy content that will get rewritten in Org format as it gets updated.</p>
<h2 id="front-matter">Front Matter</h2>
<p>The <a href="http://jekyllrb.com/docs/frontmatter/">front matter</a> used by Jekyll and other engines to determine content metadata requires some special handling to get exported correctly by Org mode. The most straightforward thing is to use the suggestion from the instructions mentioned earlier. Put your front matter in a HTML block right at the top of the file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="c">#+BEGIN_HTML</span>
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">title: Blog Writing in Org Mode
</span></span><span class="line"><span class="cl">layout: post
</span></span><span class="line"><span class="cl">category: Emacs
</span></span><span class="line"><span class="cl">tags: org jekyll
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl"><span class="c">#+END_HTML</span>
</span></span></code></pre></div><p>Okay, it’s not HTML. But Org mode doesn’t really care. It will get passed through untouched when you export.</p>
<h2 id="configure-html-export">Configure HTML Export</h2>
<p>HTML and other output needs to be placed correctly within the Jekyll layout conventions. A proper <code>org-publish-project-alist</code> will take care of this.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">org-publish-project-alist</span>
</span></span><span class="line"><span class="cl">      <span class="o">&#39;</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="s">&#34;org-randomgeekery&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="c1">;; Location of org files</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:base-directory</span> <span class="s">&#34;~/Projects/randomgeekery.org/org/&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:base-extension</span> <span class="s">&#34;org&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">         <span class="c1">;; Location of Jekyll files</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:publishing-directory</span> <span class="s">&#34;~/Projects/randomgeekery.org/jekyll/&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:recursive</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:publishing-function</span> <span class="nv">org-publish-org-to-html</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:headline-levels</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:html-extension</span> <span class="s">&#34;html&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">         <span class="c1">;; Only export section between &lt;body&gt;&lt;/body&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:body-only</span> <span class="no">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="s">&#34;org-static-randomgeekery&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:base-directory</span> <span class="s">&#34;~/Projects/randomgeekery.org/org/&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:base-extension</span> <span class="s">&#34;css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:publishing-directory</span> <span class="s">&#34;~/Projects/randomgeekery.org/&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:recursive</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:publishing-function</span> <span class="nv">org-publish-attachment</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="s">&#34;rg&#34;</span> <span class="nb">:components</span> <span class="p">(</span><span class="s">&#34;org-randomgeekery&#34;</span> <span class="s">&#34;org-static-randomgeekery&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="p">))</span>
</span></span></code></pre></div><p>Now when I export the project with <code>org-mode-export (C-c C-e X) rg</code>, all of my org content for the project gets put in the correct spot. I even get a table of contents, which is not such a bad thing.</p>
<h2 id="publishing-a-post">Publishing A Post</h2>
<p>So when you’ve been editing a draft long enough and you’re ready to make it a real live post, you need to move the file from <code>_drafts</code> to <code>_posts</code>, with the publish date prefixing the filename.</p>
<p>I could do that manually, but it’s tedious to do that for every blog post.</p>
<p>I experiment with my rudimentary Emacs Lisp skills to create a new filename that looks about right.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">post-it</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Write current draft file as a Jekyll post file&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">interactive</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">if</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nf">string-match</span> <span class="s">&#34;_drafts&#34;</span> <span class="nf">buffer-file-name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">draft-copy</span> <span class="nf">buffer-file-name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="nv">post-copy</span>
</span></span><span class="line"><span class="cl">             <span class="c1">;; _drafts/&lt;stub&gt;.org</span>
</span></span><span class="line"><span class="cl">             <span class="c1">;; becomes</span>
</span></span><span class="line"><span class="cl">             <span class="c1">;; _posts/yyyy-mm-dd-&lt;stub&gt;.org</span>
</span></span><span class="line"><span class="cl">             <span class="p">(</span><span class="nf">concat</span>
</span></span><span class="line"><span class="cl">              <span class="p">(</span><span class="nv">replace-regexp-in-string</span> <span class="s">&#34;_drafts&#34;</span> <span class="s">&#34;_posts&#34;</span>
</span></span><span class="line"><span class="cl">                                        <span class="p">(</span><span class="nf">file-name-directory</span> <span class="nf">buffer-file-name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">              <span class="p">(</span><span class="nf">format-time-string</span> <span class="s">&#34;%Y-%m-%d&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">              <span class="s">&#34;-&#34;</span>
</span></span><span class="line"><span class="cl">              <span class="p">(</span><span class="nf">file-name-nondirectory</span> <span class="nf">buffer-file-name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">              <span class="p">)</span>
</span></span><span class="line"><span class="cl">             <span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="nv">write-file</span> <span class="nv">post-copy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nf">message</span> <span class="s">&#34;%s is not in _drafts!&#34;</span> <span class="p">(</span><span class="nf">file-name-nondirectory</span> <span class="nf">buffer-file-name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">      <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span></code></pre></div><p>Awkward, but it works. It worked at least once, anyways. Should manually remove the original <code>_draft</code> file until I know what I’m doing a little more.</p>
<blockquote>
<p>[!WARNING]
See that Lisp I wrote? It’s probably wrong in some horrible way. It’s the most complex Elisp I’ve ever managed. Look at it for interesting ideas, but please don’t just copy and paste.</p>
</blockquote>
<h2 id="followup">Followup</h2>
<p>I wonder if maybe this isn’t the best approach, since it seems to confuse the heck out of Org mode. My lone org file just would not republish until I found <a href="http://lists.gnu.org/archive/html/emacs-orgmode/2009-05/msg00285.html">this post</a> for a similar situation. If it’s just not rebuilding, force it with a numeric argument: <kbd>C-u 0 C-c e</kbd>.</p>
<p>This works well enough to get one post published, anyways. I’m sure to revisit this topic as I continue to learn more about Org mode and Emacs.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Exporting From Org to Markdown</title>
  <link>https://randomgeekery.org/post/2014/05/exporting-from-org-to-markdown/</link>
  <pubDate>Fri, 16 May 2014 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2014/05/exporting-from-org-to-markdown/</guid>
  <description>[!NOTE] tldr C-h v org-export-backends to ensure that card/Markdown export is available. C-c C-e m m invokes org-md-export-to-markdown. You may need to update card/Org, which could be a fussy process.
Let’s say that I am supposed to be writing a blog post. Not this one, another one. I have spent a lot of time learning about Org mode, and I’m not ready to leave it just yet. There’s a problem, though.</description>
   <category>post</category> 
   <category>post</category> 
   <category>emacs</category>  <category>orgmode</category>  <category>markdown</category>  <category>tools</category> 
  <content:encoded><![CDATA[<blockquote>
<p>[!NOTE] <a href="/card/tldr/">tldr</a>
<code>C-h v org-export-backends</code> to ensure that <a href="/card/markdown/">card/Markdown</a> export is available. <code>C-c C-e m m</code> invokes <code>org-md-export-to-markdown</code>. You may need to update <a href="/card/org/">card/Org</a>, which could be a fussy process.</p>
</blockquote>
<p>Let’s say that I am supposed to be writing a blog post. Not this one, another one. I have spent a lot of time learning about <a href="http://orgmode.org">Org mode</a>, and I’m not ready to leave it just yet. There’s a problem, though. The blog that I’m supposed to be contributing to looks a bit like <a href="/card/jekyll/">Jekyll</a>. Specifically, it uses <a href="http://daringfireball.net/projects/markdown">Markdown</a> formatting. That’s nice, but I <em>really</em> like Org mode formatting this week.</p>
<p>No problem!</p>
<p>According to the <a href="http://orgmode.org/manual/Markdown-export.html">Org Markdown export page</a>, <code>C-c C-e</code> opens an Export view. <code>m m</code> then triggers <code>(org-md-export-to-markdown)</code>, which produces <code>post.md</code> from <code>post.org</code>.</p>
<p>Except that <code>C-c C-e m m</code> just exported the post to a <a href="http://freemind.sourceforge.net/wiki/index.php/Main_Page">FreeMind mind map</a>. Cool, but not Markdown. <code>org-md-export-to-markdown</code> isn’t even available.</p>
<p>Problem.</p>
<p>Apparently I have <code>org-mode</code> 7.9.3f installed. The documentation on the Org Mode site is for the newest version: 8.2.6. How do I get the new version? The <a href="http://orgmode.org/manual/Installation.html">installation instructions</a> suggest it can be done with <code>package-install</code> before you’ve loaded any org files.</p>
<pre tabindex="0"><code>package-install RET org
</code></pre><p>And now I have 8.2.6.</p>
<p>No problem. Except now I’m getting an error with <code>C-c C-e m</code>. Oh, I see the problem. There are only a few <a href="http://orgmode.org/manual/Export-back_002dends.html#Export-back_002dends">export backends</a> enabled by default.</p>
<ul>
<li>ascii</li>
<li>html</li>
<li>icalendar</li>
<li>latex</li>
</ul>
<p>I need to set <code>org-export-backends</code>. The documentation specifies that I should use the Emacs customization interface. All righty.</p>
<pre tabindex="0"><code>C-h v org-export-backends
</code></pre><p>I end up with this in my <code>.init.el</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">custom-set-variables</span>
</span></span><span class="line"><span class="cl"> <span class="c1">;; custom-set-variables was added by Custom.</span>
</span></span><span class="line"><span class="cl"> <span class="c1">;; If you edit it by hand, you could mess it up, so be careful.</span>
</span></span><span class="line"><span class="cl"> <span class="c1">;; Your init file should contain only one such instance.</span>
</span></span><span class="line"><span class="cl"> <span class="c1">;; If there is more than one, they won&#39;t work right.</span>
</span></span><span class="line"><span class="cl"> <span class="o">&#39;</span><span class="p">(</span><span class="nv">org-export-backends</span> <span class="p">(</span><span class="nb">quote</span> <span class="p">(</span><span class="nv">ascii</span> <span class="nv">html</span> <span class="nv">icalendar</span> <span class="nv">latex</span> <span class="nv">md</span><span class="p">))))</span>
</span></span></code></pre></div><p>The export interface is better, but now I get a <strong>different</strong> error.</p>
<pre tabindex="0"><code>org-refresh-category-properties: Invalid function: org-with-silent-modifications
</code></pre><p>This <a href="http://www.benjaminmgross.com/markdown-export-on-aquamacs/">Markdown Export on Aquamacs</a> post by Benjamin M. Gross was particularly helpful. He suggests you use the package manager to remove and reinstall the <code>org</code> package.</p>
<p>So I did. There was a confusing moment where the package manager didn’t seem to realize that a Org Mode was installed. Just turns out that a newer version was available. I installed the newer version and restarted emacs.</p>
<p>Trying <code>C-c C-e m m</code> one more time before I give up for now.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-md" data-lang="md"><span class="line"><span class="cl"><span class="gh"># Exporting From Org to Markdown
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>
</span></span><span class="line"><span class="cl">Let&#39;s say that I am supposed to be writing a blog post. Not this
</span></span><span class="line"><span class="cl">one, another one. I have spent a lot of time learning about
</span></span><span class="line"><span class="cl">[<span class="nt">Org mode</span>](<span class="na">http://orgmode.org</span>), and I&#39;m not ready to leave it just yet.
</span></span><span class="line"><span class="cl">There&#39;s a problem, though. The blog that I&#39;m supposed to be contributing
</span></span><span class="line"><span class="cl">to looks a bit like [<span class="nt">Jekyll</span>](<span class="na">http://jekyllrb.com/</span>). Specifically, it uses
</span></span><span class="line"><span class="cl">[<span class="nt">Markdown</span>](<span class="na">http://daringfireball.net/projects/markdown/</span>)
</span></span><span class="line"><span class="cl">formatting. That&#39;s nice, but I <span class="ge">*really*</span> like <span class="sb">`org-mode`</span> formatting
</span></span><span class="line"><span class="cl">this week.
</span></span></code></pre></div><p>See? No problem!</p>
<p>Now I just need to <em>write</em> the post. Not this one. The other one.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: My New New (New) Site</title>
  <link>https://randomgeekery.org/post/2014/05/my-new-new-new-site/</link>
  <pubDate>Thu, 15 May 2014 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2014/05/my-new-new-new-site/</guid>
  <description>&lt;p&gt;I have been exploring &lt;a href=&#34;https://randomgeekery.org/card/emacs/&#34;&gt;Emacs&lt;/a&gt; recently. As part of that exploration, I decided to use &lt;a href=&#34;http://renard.github.io/o-blog/&#34;&gt;o-blog&lt;/a&gt;. Why? Well. I want to blog more. I want to use Emacs more. I got tired of my WordPress blog. o-blog sits on top of &lt;a href=&#34;https://randomgeekery.org/card/org/&#34;&gt;Org&lt;/a&gt;, which is the Killer App of Emacs for me. Org mode is amazing. o-blog is nifty, and relatively easy to get started with. I have fiddled with the o-blog templates to suit my tastes. I replaced browser-side Less CSS with a bit of Sass at build time. Eventually I’ll port the Wordpress posts to o-blog and maybe the old &lt;a href=&#34;https://randomgeekery.org/card/coolnamehere/&#34;&gt;coolnamehere&lt;/a&gt; pages to something involving org-mode.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>site</category>  <category>emacs</category>  <category>orgmode</category>  <category>marginalia</category> 
  <content:encoded><![CDATA[<p>I have been exploring <a href="/card/emacs/">Emacs</a> recently. As part of that exploration, I decided to use <a href="http://renard.github.io/o-blog/">o-blog</a>. Why? Well. I want to blog more. I want to use Emacs more. I got tired of my WordPress blog. o-blog sits on top of <a href="/card/org/">Org</a>, which is the Killer App of Emacs for me. Org mode is amazing. o-blog is nifty, and relatively easy to get started with. I have fiddled with the o-blog templates to suit my tastes. I replaced browser-side Less CSS with a bit of Sass at build time. Eventually I&rsquo;ll port the Wordpress posts to o-blog and maybe the old <a href="/card/coolnamehere/">coolnamehere</a> pages to something involving org-mode.</p>
<p>Just thinking and typing right now. You can go home if you want.</p>
<p>I will try to keep things a little better organized than the WordPress blog. A bucket for each language was excessive. I&rsquo;m thinking categories for tools, programming, emacs, and whatever. Tags can cut across categories. Programming would be the general art of using words to make computers do things. Tools are about specific ways to make life easier or extend your capabilities. For example, a post about using <a href="http://beyondgrep.com">ack</a> would go under &ldquo;Tools&rdquo; and a post about using Perl to extend ack&rsquo;s functionality would go under &ldquo;Programming.&rdquo; Emacs is its own world, with its own tools and programming. The default category is the more mundane blog stuff: what I&rsquo;m up to, what I had for dinner, the latest cat video to catch my attention.</p>
<p>There is bound to be some overlap. I may need to fiddle with the categories. That means a good site map is important. This is a good start, though.</p>
<p>Anyways. I better post this now or I will keep fiddling with it forever.</p>]]></content:encoded>
</item>
</channel>
</rss>
