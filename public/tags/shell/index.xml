<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>shellonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/shell/</link>
    <description>
      Recent contentinshell on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Fri, 22 Apr 2022 21:15:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/shell/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Trying Nushell on Windows</title>
  <link>https://randomgeekery.org/post/2022/04/trying-nushell-on-windows/</link>
  <pubDate>Fri, 22 Apr 2022 21:15:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/04/trying-nushell-on-windows/</guid>
  <description>Hugo’s article list piped through multiple Nushell built-ins
[!NOTE] The important bit Jack — one of the cats — has recovered from whatever was bothering him with a little help from vet drugs. Thank goodness for that! Now I can get back to puttering.
I have been puttering a little here and there with card/Nushell, a command line shell in the spirit of Bash, Zsh, and Fish. It’s different from any of the above, though.</description>
   <category>post</category> 
   <category>post</category> 
   <category>nushell</category>  <category>windows</category>  <category>shell</category> 
  <content:encoded><![CDATA[<h2>They say I can run Nushell on Windows. Let's try that.</h2><p><img src="/post/2022/04/../../../attachments/img/2022/cover-2022-04-22.png" alt="attachments/img/2022/cover-2022-04-22.png"/>
Hugo&rsquo;s article list piped through multiple Nushell built-ins</p>
<blockquote>
<p>[!NOTE] The important bit
Jack — one of the cats — has recovered from whatever was bothering him with a little help from vet drugs. Thank goodness for that! Now I can get back to puttering.</p>
</blockquote>
<p>I have been puttering a little here and there with <a href="/card/nushell/">card/Nushell</a>, a command line shell in the spirit of Bash, Zsh, and Fish. It&rsquo;s different from any of the above, though. It starts from the same &ldquo;let me run my commands&rdquo; starting point, but data handling, filtering, and transformation are core to Nu&rsquo;s functionality.</p>
<h2 id="you-said-something-about-windows">You said something about Windows</h2>
<p>Right. I have also been spending more time in Windows recently. No big deal. I bounce between emphasizing Windows and Linux on my hard drive routinely.</p>
<h3 id="installing-nushell-with-winget">Installing Nushell with Winget</h3>
<p>The quickstart on the Nushell suggests using <a href="https://www.nushell.sh/book/installation.html">winget</a>. Lucky me, I happen to have played with that recently enough to remember it&rsquo;s there.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ winget install nushell
Found nu [Nushell.Nushell] Version 0.61.0
This application is licensed to you by its owner.
Microsoft is not responsible for, nor does it grant any licenses to, third-party packages.
Downloading https://github.com/nushell/nushell/releases/download/0.61.0/nu_0_61_0_windows.msi
  ██████████████████████████████  10.8 MB / 10.8 MB
Successfully verified installer hash
Starting package install...
Successfully installed</code></pre>
</figure><p>That installed Nushell to my Program Files. <code>nu.exe</code> itself is under <code>C:/Program Files/nu/bin</code>. I run that and agree to everything — I don&rsquo;t know Nushell all that well yet, and I certainly don&rsquo;t know Nushell under Windows enough yet.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ C:\&#34;Program Files&#34;\nu\bin\nu
No environment config file found at C:\Users\brian\AppData\Roaming\nushell\env.nu
Would you like to create one with defaults (Y/n):
y
Config file created at: C:\Users\brian\AppData\Roaming\nushell\env.nu
No config file found at C:\Users\brian\AppData\Roaming\nushell\config.nu
Would you like to create one with defaults (Y/n):
y
Config file created at: C:\Users\brian\AppData\Roaming\nushell\config.nu
C:\Users\brian\AppData\Local〉 ls | sort-by modified | last 5</code></pre>
</figure><p>And it works!</p>
<p><img src="/post/2022/04/attachments/img/2022/nu-win-initial-ls.png" alt="output of ls in Nushell on Windows"/></p>
<h3 id="integrating-with-windows-terminal">Integrating with Windows Terminal</h3>
<p><a href="https://docs.microsoft.com/en-us/windows/terminal/">Windows Terminal</a> is my preferred terminal emulator over in the Windows world. Though I could absolutely point and click my way through adding a Nushell profile, I&rsquo;ll follow <a href="https://www.nushell.sh/book/installation.html#setting-the-default-shell-windows-terminal">Setting the default shell</a> and update <code>settings.json</code> myself.</p>
<p>Here are the relevant changes to my profile.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;defaultProfile&#34;</span><span class="p">:</span> <span class="s2">&#34;{2b372ca1-1ee2-403d-a839-6d63077ad871}&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;profiles&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;list&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;guid&#34;</span><span class="p">:</span> <span class="s2">&#34;{2b372ca1-1ee2-403d-a839-6d63077ad871}&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;hidden&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Nu Shell&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;commandline&#34;</span><span class="p">:</span> <span class="s2">&#34;C:/Program Files/nu/bin/nu.exe&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;colorScheme&#34;</span><span class="p">:</span> <span class="s2">&#34;Fairy Floss&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;font&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&#34;face&#34;</span><span class="p">:</span> <span class="s2">&#34;FantasqueSansMono NF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">14</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>I add an entry for Nu Shell to the profile list, and make that entry my default in Windows Terminal. I chopped out everything not immediately relevant, so this is <em>not</em> a complete <code>settings.json</code>.</p>
<p>You can ignore my choices for font and color scheme. But if you <em>do</em> want exactly the same look, install the <a href="https://www.nerdfonts.com">Nerd Fonts</a> version of <a href="https://github.com/belluzj/fantasque-sans">Fantasque Sans Mono</a> and add this entry for <a href="http://sailorhg.github.io/fairyfloss/">Fairy Floss</a> colors to the <code>schemes</code> section of your <code>settings.json</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-json" data-lang="json"><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;background&#34;</span><span class="p">:</span> <span class="s2">&#34;#5A5475&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;black&#34;</span><span class="p">:</span> <span class="s2">&#34;#464258&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;blue&#34;</span><span class="p">:</span> <span class="s2">&#34;#6C71C4&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;brightBlack&#34;</span><span class="p">:</span> <span class="s2">&#34;#C19FD8&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;brightBlue&#34;</span><span class="p">:</span> <span class="s2">&#34;#6796E6&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;brightCyan&#34;</span><span class="p">:</span> <span class="s2">&#34;#C2FFDF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;brightGreen&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFB8D1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;brightPurple&#34;</span><span class="p">:</span> <span class="s2">&#34;#AE81FF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;brightRed&#34;</span><span class="p">:</span> <span class="s2">&#34;#F44747&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;brightWhite&#34;</span><span class="p">:</span> <span class="s2">&#34;#F8F8F0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;brightYellow&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFF352&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;cursorColor&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;cyan&#34;</span><span class="p">:</span> <span class="s2">&#34;#AFECAD&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;foreground&#34;</span><span class="p">:</span> <span class="s2">&#34;#F8F8F0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;green&#34;</span><span class="p">:</span> <span class="s2">&#34;#AD5877&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Fairy Floss&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;purple&#34;</span><span class="p">:</span> <span class="s2">&#34;#B267E6&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;red&#34;</span><span class="p">:</span> <span class="s2">&#34;#FF857F&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;selectionBackground&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;white&#34;</span><span class="p">:</span> <span class="s2">&#34;#CCCCCC&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;yellow&#34;</span><span class="p">:</span> <span class="s2">&#34;#E6C000&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="err">,</span></span></span></code></pre>
</figure><h3 id="integration-with-starship">Integration with Starship</h3>
<p>Nushell provides all sorts of customization options, but I prefer <a href="https://starship.rs">Starship</a>&rsquo;s cross-shell prompt setup. Unfortunately Starship is not yet available through Winget on my system. It is available through <a href="https://chocolatey.org">Chocolatey</a>. It just so happens I have Chocolatey installed.</p>
<p>Open myself an administrator terminal by Control-clicking the PowerShell entry on my Windows Terminal menu, and away we go!</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ choco install starship
Chocolatey v1.1.0
Installing the following packages:
starship
By installing, you accept licenses for the packages.
Progress: Downloading starship 1.4.2... 100%

starship v1.4.2 [Approved]
starship package files install completed. Performing other installation steps.
The package starship wants to run &#39;chocolateyInstall.ps1&#39;.
Note: If you don&#39;t run this script, the installation will fail.
Note: To confirm automatically next time, use &#39;-y&#39; or consider:
choco feature enable -n allowGlobalConfirmation
Do you want to run the script?([Y]es/[A]ll - yes to all/[N]o/[P]rint): y

Downloading starship
  from &#39;https://github.com/starship/starship/releases/download/v1.4.2/starship-x86_64-pc-windows-msvc.zip&#39;
Progress: 100% - Completed download of C:\Users\brian\AppData\Local\Temp\chocolatey\starship\1.4.2\starship-x86_64-pc-windows-msvc.zip (2.31 MB).
Download of starship-x86_64-pc-windows-msvc.zip (2.31 MB) completed.
Hashes match.
Extracting C:\Users\brian\AppData\Local\Temp\chocolatey\starship\1.4.2\starship-x86_64-pc-windows-msvc.zip to C:\ProgramData\chocolatey\lib\starship\tools...
C:\ProgramData\chocolatey\lib\starship\tools
Add the following to the end of ~\Documents\PowerShell\Microsoft.PowerShell_profile.ps1 &#39;Invoke-Expression (&amp;starship init powershell)&#39;
 ShimGen has successfully created a shim for starship.exe
 The install of starship was successful.
  Software installed to &#39;C:\ProgramData\chocolatey\lib\starship\tools&#39;

Chocolatey installed 1/1 packages.
 See the log for details (C:\ProgramData\chocolatey\logs\chocolatey.log).</code></pre>
</figure><p>Nushell explicitly allows for multiple segments in your prompt, with <code>PROMPT_COMMAND</code> and <code>PROMPT_COMMAND_RIGHT</code>. I&rsquo;ll keep their right-hand prompt, but use Starship for the left-hand prompt in my <code>env.nu</code>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nu" data-lang="nu"
      >let-env STARSHIP_SHELL = &#34;nu&#34;

def create_left_prompt [] {
    starship prompt --cmd-duration $env.CMD_DURATION_MS $&#39;--status=($env.LAST_EXIT_CODE)&#39;
}

def create_right_prompt [] {
    let time_segment = ([
        (date now | date format &#39;%m/%d/%Y %r&#39;)
    ] | str collect)

    $time_segment
}

# Use nushell functions to define your right and left prompt
let-env PROMPT_COMMAND = { create_left_prompt }
let-env PROMPT_COMMAND_RIGHT = { create_right_prompt }

# The prompt indicators are environmental variables that represent
# the state of the prompt
let-env PROMPT_INDICATOR = { &#34;&#34; }
let-env PROMPT_INDICATOR_VI_INSERT = { &#34;: &#34; }
let-env PROMPT_INDICATOR_VI_NORMAL = { &#34;〉&#34; }
let-env PROMPT_MULTILINE_INDICATOR = { &#34;::: &#34; }

# ...</code></pre>
</figure><p><img src="/post/2022/04/attachments/img/2022/nu-win-themed-starship.png" alt="Nushell with Fairy Floss theme and a Starship prompt"/></p>
<p>I&rsquo;ll keep the Starship default config for now.</p>
<p>That&rsquo;s pretty much it! I&rsquo;m good to go explore the world of Nushell on Windows.</p>
<h2 id="sure-but-why">Sure but why</h2>
<p>Well, now that I have all this set up along with a local checkout of the site&rsquo;s current <a href="/card/hugo/">card/Hugo</a> iteration, I can play with Hugo&rsquo;s article listing.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >❯ hugo list all | from csv | select title publishDate draft | sort-by -r publishDate | first 5
╭───┬──────────────────────────────────────────────────┬───────────────────────────┬───────╮
│ # │                      title                       │        publishDate        │ draft │
├───┼──────────────────────────────────────────────────┼───────────────────────────┼───────┤
│ 0 │ Trying Nushell on Windows                        │ 2022-04-22T18:11:46-07:00 │ true  │
│ 1 │ Didn&#39;t I do this last year too?                  │ 2022-04-17T22:15:00-07:00 │ false │
│ 2 │ Logseq&#39;s Export Formats                          │ 2022-03-13T00:00:00Z      │ false │
│ 3 │ Added an Emacs config based off of nano-emacs    │ 2022-02-19T23:30:00-08:00 │ false │
│ 4 │ Thinking about Hugo again but maybe with Site.js │ 2022-01-26T23:50:00-08:00 │ false │
╰───┴──────────────────────────────────────────────────┴───────────────────────────┴───────╯</code></pre>
</figure><p>Okay sure you can do exactly the same thing with some combination of a POSIX shell, GNU CoreUtils, and maybe <a href="https://github.com/BurntSushi/xsv">xsv</a>. Or just <a href="/post/2020/05/querying-hugo-content-with-python/">write Python code</a>.</p>
<p>But I get all this in one tool! Hypothetically, a tool that works the same on Windows and Linux! And as I <a href="https://hackers.town/@randomgeek/108162569000821645">tooted</a> at a friend while gushing over Nushell:</p>
<blockquote>
<p>Now you no longer need two dozen separate tools installed on each of a million systems. Now you can do it all with one tool installed on a couple dozen systems wait hang on</p>
</blockquote>
<p>Anyways it&rsquo;s fun. That&rsquo;s all the reason I need.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Joplin CLI Batch Processing With Raku</title>
  <link>https://randomgeekery.org/post/2021/05/joplin-cli-batch-processing-with-raku/</link>
  <pubDate>Mon, 24 May 2021 20:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/05/joplin-cli-batch-processing-with-raku/</guid>
  <description>don’t get excited; these are the only notes I took
NOTE
This sidetracks enough for three blog posts, mostly about card/Raku. Sorry about that. No time to make it shorter. You know how it is. There’s a little card/Joplin stuff in here.
This is embarrassing. I fired up the Joplin desktop app this morning and it told me there was an update. Makes sense. I haven’t loaded the desktop app in a couple months.</description>
   <category>post</category> 
   <category>post</category> 
   <category>tools</category>  <category>joplin</category>  <category>raku-lang</category>  <category>regular-expressions</category>  <category>shell</category>  <category>oops</category>  <category>i-fixed-it</category> 
  <content:encoded><![CDATA[<h2>In which a minor update veers off on a Raku regex tangent</h2><p><img src="/post/2021/05/../../../attachments/img/2021/cover-2021-05-24.jpg" alt="attachments/img/2021/cover-2021-05-24.jpg"/>
don&rsquo;t get excited; these are the only notes I took</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>This sidetracks enough for three blog posts, mostly about <a href="/card/raku/">card/Raku</a>.  Sorry about that.  No time to make it shorter.  You know how it is.  There&rsquo;s a little <a href="/card/joplin/">card/Joplin</a> stuff in here.</p>
</blockquote>
<p>This is embarrassing.  I fired up the Joplin <a href="https://joplinapp.org/desktop/">desktop app</a> this morning and it told me there was an update.  Makes sense.  I haven&rsquo;t loaded the desktop app in a couple months.</p>
<p>Oh hang on.  What about the <a href="https://joplinapp.org/terminal/">terminal app</a> which I was just writing about over the last couple posts?</p>
<p>Yep.  The <a href="https://joplinapp.org/changelog_cli">Changelog</a> shows updates, one of which includes batch processing.  Batch processing sounds like exactly the thing to address my many complaints about performance.</p>
<h2 id="update-joplin-with-volta">Update Joplin with Volta</h2>
<p>I use <a href="https://volta.sh">Volta</a> to manage my<a href="/card/node.js/">card/Node.js</a> resources.  Volta treats installing and updating as the same action.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">volta install joplin</span></span></code></pre>
</figure><p>This is what I have now:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> joplin version
</span></span><span class="line"><span class="cl"><span class="go">joplin 1.8.1 (prod)
</span></span></span></code></pre>
</figure><p>Now I&rsquo;m up to date.  Let&rsquo;s see what changes I can make to my journaling code.</p>
<h2 id="fix-the-one-liners">Fix the one-liners</h2>
<p>The one-liner for adding journal entries works fine as-is.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="o">&amp;&amp;</span> joplin edit <span class="k">$(</span>date --iso<span class="o">=</span>minute<span class="k">)</span></span></span></code></pre>
</figure><p>Reading the entries needs improvement.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">raku -e <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">  qqx{joplin cat $_}.subst(/^(&lt;[\dT:\-]&gt;+)/, { &#34;# $0&#34; }).say for qx{ joplin ls }.lines.sort
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="p">|</span> python -m rich.markdown -</span></span></code></pre>
</figure><p>Joplin CLI v1.8.1 added a <code>batch</code> command, which executes commands from a text file.  My challenge: <code>joplin batch</code> does not appear to have an option for standard input.  This means I can&rsquo;t casually pipe output from another process.  Here&rsquo;s what I came up with:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin batch &lt;<span class="o">(</span>raku -e <span class="s1">&#39;qx{joplin ls}.lines.sort.map({ &#34;cat $_&#34; }).join(&#34;\n&#34;).say&#39;</span><span class="o">)</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> raku -ne <span class="s1">&#39;.subst(/^(&lt;[\dT:\-]&gt;+)$/, { &#34;# $0&#34; }).say&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> python -m rich.markdown -</span></span></code></pre>
</figure><p>We take advantage of a little shell magic to treat the output of another process as a file.</p>
<p>Don&rsquo;t ask me to understand the shell magic.  In <a href="https://www.gnu.org/software/bash/">GNU Bash</a>, <code>command &lt;(stuff)</code> means something along the lines of &ldquo;evaluate <em>stuff</em> and hand the output of that evaluation to <code>command</code> as if it was a file.&rdquo;</p>
<p>It&rsquo;s all a little inside-out and twisty.  It might help if we break up the chunks.</p>
<table>
<thead>
<tr>
<th>Chunk</th>
<th>What it does</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>qx{joplin ls}.lines.sort</code></td>
<td>collect the sorted entry list from this notebook</td>
</tr>
<tr>
<td><code>.map{ &quot;cat $_&quot; }</code></td>
<td>create a Joplin command to display this entry</td>
</tr>
<tr>
<td><code>.join(&quot;\n&quot;).say</code></td>
<td>print those commands as one multi-line string</td>
</tr>
<tr>
<td><code>joplin batch &lt;(...)</code></td>
<td>send <code>raku</code>&rsquo;s output to <code>joplin batch</code></td>
</tr>
<tr>
<td><code>... | .subst(...)</code></td>
<td>turn timestamp lines from output into Markdown headers</td>
</tr>
<tr>
<td><code>... | python -m rich.markdown -</code></td>
<td>format the output for terminal display</td>
</tr>
</tbody>
</table>
<p>We pull Raku in twice: once to build the command and again to parse the output. On the other hand we&rsquo;re only calling Joplin twice instead of forty or so times.</p>
<p>That makes the one-liner downright zippy, all things considered.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time joplin batch &lt;(raku -e &#39;qx{joplin ls}.lines.sort.map({ &#34;cat $_&#34; }).join(&#34;\n&#34;).say&#39;) \
</span></span><span class="line"><span class="cl">  | raku -ne &#39;.subst(/^(&lt;[\dT:\-]&gt;+)$/, { &#34;# $0&#34; }).say&#39; \
</span></span><span class="line"><span class="cl">  | python -m rich.markdown -
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m1.407s
</span></span><span class="line"><span class="cl">user    0m1.608s
</span></span><span class="line"><span class="cl">sys     0m0.140s</span></span></code></pre>
</figure><p>One and a half seconds for a formatted display of every journal entry.  Not bad, considering that I&rsquo;m running on <a href="https://docs.microsoft.com/en-us/windows/wsl/">WSL</a>.  Plus I don&rsquo;t really know one-liners, Raku, or Joplin.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>The documentation for <code>joplin ls</code> mentions a <code>--sort</code> flag, but as of v1.8.1 I got no difference when using <code>joplin ls --sort title</code>. Didn&rsquo;t see a mention of the specific issue, so I overcame my shyness and filed <a href="https://github.com/laurent22/joplin/issues/5004">#5004</a>.</p>
</blockquote>
<h2 id="fix-the-script">Fix the script</h2>
<p>Splitting up the Raku script into logical pieces the other day means that today I only need to fix a single function.  Thank goodness.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>How much does this function need to improve?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time jj today
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m3.001s
</span></span><span class="line"><span class="cl">user    0m3.281s
</span></span><span class="line"><span class="cl">sys     0m0.390s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ time jj all
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m31.253s
</span></span><span class="line"><span class="cl">user    0m31.779s
</span></span><span class="line"><span class="cl">sys     0m4.616s</span></span></code></pre>
</figure><p>Lots.  This function needs to be lots quicker.  It took three seconds to display today&rsquo;s lone entry, and over 30 seconds to display all 40 journal entries.  Every new entry slows the whole thing down, because every new entry means a new call to <code>joplin</code>.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>I don&rsquo;t jot <em>that</em> many notes in a day. Some of that&rsquo;s from reorganizing my Joplin notebooks, putting daily journals in with the quick entries.</p>
</blockquote>
<p>I tried mimicking the shell magic but couldn&rsquo;t figure out how in the time I allowed myself.  This isn&rsquo;t work code where you have to get things just so. This is a fun little utility for my own amusement.</p>
<p><code>joplin batch</code> expects a file?  Let&rsquo;s give it a file.  But I want that file to go away when I&rsquo;m done, so let&rsquo;s find a module to handle temporary files.</p>
<p>Poking through the directory of <a href="https://modules.raku.org">Raku modules</a> quickly showed me two possibilities:</p>
<dl>
<dt><a href="https://modules.raku.org/dist/Temp::Path:cpan:UFOBAT"><code>Temp::Path</code></a></dt>
<dd>gives you a friendly object you can write to or stringify when you need a filename</dd>
<dt><a href="https://modules.raku.org/dist/File::Temp:cpan:RBT"><code>File::Temp</code></a></dt>
<dd>presents a more utilitarian interface, providing filename and filehandle as separate variables</dd>
</dl>
<p>The end result is the same: a file that goes away when you no longer need it.</p>
<p>I like friendly. Let&rsquo;s see how <code>Temp::Path</code> does.</p>
<h3 id="try-temppath">Try <code>Temp::Path</code></h3>
<p>Need to install it, of course.  <a href="https://github.com/ugexe/zef"><code>zef</code></a> handles Raku modules.  I set that up a while back with [[post/2020/05/setting-up-raku-with-rakubrew|<code>rakubrew</code>]].</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">zef install Temp::Path</span></span></code></pre>
</figure><p>Then we let Raku know we&rsquo;re using the module.  That traditionally goes near the top of our script.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Temp::Path</span><span class="p">;</span></span></span></code></pre>
</figure><p>More or less following along Temp::Path&rsquo;s sample usage.  <a href="https://docs.raku.org/language/control#index-entry-control_flow_with"><code>with</code></a> creates a block for our temporary file.  It even sets the <a href="https://docs.raku.org/language/variables#The_$__variable">topic variable</a> <code>$_</code>.  Don&rsquo;t need to come up with a temporary variable name for our temporary file.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">with</span> <span class="n">make-temp-path</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="nb">spurt</span><span class="p">(</span><span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="p">&#34;</span><span class="s2">cat </span><span class="nv">$_</span><span class="p">&#34;</span> <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="se">\n</span><span class="p">&#34;));</span>
</span></span><span class="line"><span class="cl">    <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin batch </span><span class="nv">$_</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span> <span class="p">/</span><span class="ni">^^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)</span><span class="ni">$$</span><span class="p">/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>The regular expression is starting to look interesting.  <code>joplin batch</code> hands everything to us as one string.  We need to adjust the entry-oriented logic we had before.  Now we find any <em>line</em> containing a lone ISO-8601 timestamp, and convert it to a top-level Markdown header.  The <code>:g</code> flag tells <code>.subst</code> to replace every occurrence.</p>
<blockquote>
<p>[!NOTE] <code>^..$</code> vs <code>^^..$$</code>
Regular expressions in other languages treat <code>^</code> and <code>$</code> differently depending on whether you&rsquo;re applying the expression in a single-line or multiple-line context. Raku&rsquo;s <a href="https://docs.raku.org/language/regexes#Anchors">anchors</a> treat every expression as multi-line.</p>
<p>That&rsquo;s a nice consistency point in Raku&rsquo;s favor. Instead of memorizing more flags and contexts, and more special anchors for when the flags and context make things unclear, we get these two paired anchors.</p>
<table>
<thead>
<tr>
<th>Anchor</th>
<th>Where it matches</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>beginning of the string</td>
</tr>
<tr>
<td><code>$</code></td>
<td>end of the string</td>
</tr>
<tr>
<td><code>^^</code></td>
<td>beginning of a line</td>
</tr>
<tr>
<td><code>$$</code></td>
<td>end of a line</td>
</tr>
</tbody>
</table>
<p>There are plenty of other things for us to memorize, of course.</p>
<p>If you&rsquo;re more of a visual person, here&rsquo;s a quality page from my extensive notebook.</p>
<p><img src="/post/2021/05/attachments/img/2021/cover-2021-05-24.jpg" alt="diagram of multi-line string showing where these anchors match"/></p>
<p>So what if my Raku notebook only has this one page with this one diagram. It&rsquo;s a good diagram.  Very professional.  High quality learning aid.</p>
</blockquote>
<p>Those few lines don&rsquo;t change anything for me as a user.  Maybe the speed?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time jj today
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m2.969s
</span></span><span class="line"><span class="cl">user    0m3.385s
</span></span><span class="line"><span class="cl">sys     0m0.303s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ time jj all
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m3.034s
</span></span><span class="line"><span class="cl">user    0m3.328s
</span></span><span class="line"><span class="cl">sys     0m0.505s</span></span></code></pre>
</figure><p>Huh. It&rsquo;s not any faster than the best case for the initial script, with a single entry taking roughly the same amount of time to load and display.  Then again, <code>batch</code> is clearly doing its job.  One entry takes almost exactly the same amount of time as 40.  Since most days I&rsquo;ll have multiple entries, that is an effective optimization for the common case.</p>
<p>But why is my one-liner twice as fast?  Is it Temp::Path?  Raku?  Joplin? Something to do with file I/O on WSL 2?  No idea.</p>
<p>Let&rsquo;s find out if File::Temp does any better.</p>
<h3 id="try-filetemp">Try File::Temp</h3>
<p>Out comes <code>zef</code>…</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">zef install File::Temp</span></span></code></pre>
</figure><p>…then use File::Temp instead of Temp::Path…</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Temp</span><span class="p">;</span></span></span></code></pre>
</figure><p>…then rewrite <code>read-entries</code> one more time…</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="p">(</span><span class="nv">$filename</span><span class="o">,</span> <span class="nv">$filehandle</span><span class="p">)</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$filehandle</span><span class="o">.</span><span class="nb">spurt</span><span class="p">(</span> <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="p">&#34;</span><span class="s2">cat </span><span class="nv">$_</span><span class="p">&#34;</span> <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="se">\n</span><span class="p">&#34;)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin batch </span><span class="nv">$filename</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^^</span><span class="sr"> </span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)</span><span class="sr"> </span><span class="ni">$$</span><span class="p">/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><blockquote>
<p>[!NOTE] Space is insignificant in regular expressions
Did you catch that?  Raku ignores whitespace in regular expressions unless you say otherwise with <a href="https://docs.raku.org/language/regexes#Sigspace"><code>:sigspace</code></a>.  Means you can make a regex easier to read.  This wasn&rsquo;t <em>much</em> easier to read, but at least we can tell where the anchors are and what I hope to find between those anchors.</p>
<p>For Perl folks, this plus the multi-line thing is like giving every regex <code>/mx</code>.  For  Python folks, like <code>re.MULTILINE</code> and <code>re.VERBOSE</code>.  For JavaScript folks — um — it&rsquo;s like having useful regular expressions.  Okay, it&rsquo;s like having <a href="https://xregexp.com">XRegExp</a> installed and using <code>'x'</code>.</p>
</blockquote>
<p>…and try it out.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time jj today
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m2.502s
</span></span><span class="line"><span class="cl">user    0m2.771s
</span></span><span class="line"><span class="cl">sys     0m0.326s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ time jj all
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m2.611s
</span></span><span class="line"><span class="cl">user    0m2.911s
</span></span><span class="line"><span class="cl">sys     0m0.381s</span></span></code></pre>
</figure><p>Ran each version a few times, just to be sure.  The version with File::Temp consistently finished a noticeable fraction of a section quicker than using Temp::Path.  Still nowhere near the one-liner&rsquo;s performance, but good enough
that I&rsquo;ll stick with File::Temp until I come up with something better.</p>
<p>Do I care enough to reboot into Linux and see how much of a difference that makes?</p>
<p>Not really.</p>
<p>I can probably optimize this, but it&rsquo;s not urgent or important.  So far I only skim my entries when I already have a few moments to spare.  Besides, the real optimizations almost definitely lie with using the Joplin API.</p>
<p>What I&rsquo;m saying is don&rsquo;t get hung up on trivia.</p>
<p>Speaking of trivia…</p>
<h2 id="about-that-regular-expression">About that regular expression</h2>
<p>I need to do something about this.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> ... </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^^</span><span class="sr"> </span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)</span><span class="sr"> </span><span class="ni">$$</span><span class="p">/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">);</span></span></span></code></pre>
</figure><p>We already know that regular expressions are their own little language embedded in whatever programming language we happen to be getting work done in.  With Raku, we can treat regular expressions as part of the Raku language itself.</p>
<p>Let&rsquo;s tackle this backwards.  Top-down.  Whatever it is the fancy people say. I&rsquo;m going to split it out into its own function.  Makes it easier to think of this transformation in isolation.</p>
<h3 id="hide-it-in-a-function">Hide it in a function</h3>
<p>What do I want this function to do?  I want it to give me my <em>journal text</em>, but with <em>formatted headers</em> in the right places.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">format-headers</span><span class="p">(</span><span class="nv">$journal-text</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$journal-text</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">/</span><span class="ni">^^</span><span class="sr"> </span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)</span><span class="sr"> </span><span class="ni">$$</span><span class="p">/</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h3 id="use-a-named-capture">Use a named capture</h3>
<p>Do I want to format every <code>$0</code>? No. I want to format every <em>entry title</em>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">format-journal</span><span class="p">(</span><span class="nv">$journal-text</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$journal-text</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="o">...,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># $&lt;entry-title&gt;</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>Of course Raku supports <a href="https://docs.raku.org/language/regexes#Named_captures">named captures</a>.  The part we care about is stored in the match object.  Behind the scenes, <code>$&lt;entry-title&gt;</code> is getting the value stored under the key <code>&quot;entry-title&quot;</code>.</p>
<h2 id="an-rx-block-for-legibility">An <code>rx{}</code> block for legibility</h2>
<p>How do I know the <em>entry title</em>?  I know the <em>entry title</em> because I found a
<em>lone timestamp</em>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">format-journal</span><span class="p">(</span><span class="nv">$journal-text</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$journal-text</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">rx</span><span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      </span><span class="nv">$&lt;entry-title&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="p">(</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">lone-timestamp</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">)</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="p">}</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># $&lt;entry-title&gt;</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p><code>rx{ ... }</code> indicates an <a href="https://docs.raku.org/language/regexes#Anonymous_regex_definition_syntax">anonymous regex</a>.  &ldquo;Anonymous&rdquo; as opposed to what exactly?  I&rsquo;m getting there.  As our expressions get more complex, take advantage of all useful quoting mechanisms.</p>
<p>Notice that instead of a <code>(?&lt;name&gt; pattern)</code> approach to named captures, in Raku it looks a lot more like assigning a pattern to a variable.  Okay fine. Assigning a pattern to the match object&rsquo;s hash, under the key <code>&quot;entry-title&quot;</code>.  But still.  It looks like a more familiar programming language assignment.</p>
<p>But rather than the expected elaborate chain of metacharacters, the pattern we store is — another identifier?</p>
<p>I told you I was getting there.</p>
<h3 id="name-your-regex-not-just-your-capture">Name your regex, not just your capture</h3>
<p>What&rsquo;s a <em>lone timestamp</em>? It&rsquo;s a <em>timestamp</em> on a line by itself.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">lone-timestamp</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="ni">^^</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">timestamp</span><span class="p">&gt;</span><span class="sr"> </span><span class="ni">$$</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span></span></span></code></pre>
</figure><p>Now we have a regular expression as its own scoped code object.  The <a href="https://docs.raku.org/language/regexes#Named_regex_definition_syntax">regex</a> is the rawest component of a family that includes tokens, rules, and entire <a href="https://docs.raku.org/language/grammar_tutorial">grammars</a>.  I&rsquo;m not ready to get into grammars yet, but I am absolutely getting closer.</p>
<h3 id="its-not-an-expression-its-a-composition">It&rsquo;s not an expression; it&rsquo;s a composition</h3>
<p>What does a <em>timestamp</em> look like?  Well, a <a href="https://docs.raku.org/type/DateTime#method_Str">DateTime String</a> holds an <em>ISO 8601 date</em>, a <em>clock time</em>, and and <em>offset</em>, with a <code>'T'</code> between the date and the clock time.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">timestamp</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">iso8601-date</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">T</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">clock-time</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">offset</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span></span></span></code></pre>
</figure><p>If we&rsquo;re looking for a literal string, it&rsquo;s okay to use a string literal.</p>
<p>Now we have a few regex patterns to define.  An <em>ISO 8601 date</em> includes a <em>year</em>, a <em>month</em>, and a <em>day of the month</em>, separated by <code>'-'</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">iso8601-date</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">year</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">month</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">day-of-month</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span></span></span></code></pre>
</figure><p>Playing more with a language gives me a feel for how to use it based on what it makes easy.  Raku makes it easy to create a program by composing it from small pieces.  Tiny pieces, even.</p>
<p>Mind you, I have no idea if that&rsquo;s what <code>raku</code> the <em>compiler</em> likes.  But the <em>syntax</em> loves it.</p>
<p>A <em>year</em> is four digits, a <em>month</em> is two digits, and the <em>day of the month</em> is two digits.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">year</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">4</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">month</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">day-of-month</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span></span></span></code></pre>
</figure><p>The <a href="https://docs.raku.org/language/regexes#General_quantifier:_**_min..max">general quantifier</a> <code>**</code> indicates how many times you expect a chunk to appear.  To this day I can&rsquo;t remember the exact syntax for quantifiers in old-school regular expressions.  But I can remember the number 4.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>This regex is wrong for verifying real dates. It&rsquo;s not wrong enough to worry about today. I&rsquo;m identifying header lines, not validating forms. But if some day I decide to enforce zero-padded months from <code>01</code> to <code>12</code>, I know exactly which block to edit.</p>
</blockquote>
<p>Looks like <em>clock time</em> gets saved as <em>hours</em>, <em>minutes</em>, and <em>seconds</em>.  In the interest of time, we&rsquo;ll oversimplify those too.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">hours</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">minutes</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">seconds</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">clock-time</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">hours</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">minutes</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">seconds</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span></span></span></code></pre>
</figure><p>And my offset holds an indicator, some <em>hours</em>, and some <em>minutes</em>.  Hey, I can reuse my existing regex definitions for those!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">offset</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;[</span><span class="sr">+-</span><span class="p">]&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">hours</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">minutes</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span></span></span></code></pre>
</figure><p>All right.  I think that covers it.  I enjoyed reusing my expressions for <em>hours</em> and <em>minutes</em> like that.  Actual code reuse, in a regular expression. Who would&rsquo;ve thought?</p>
<p>When I take this <code>lone-timestamp</code> regex and match it against <code>&quot;2021-05-24T08:11:00-07:00&quot;</code> we can see those named expressions at work. The potential really starts to sink in for me.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">｢2021-05-24T08:11:00-07:00｣
</span></span><span class="line"><span class="cl"> lone-timestamp =&gt; ｢2021-05-24T08:11:00-07:00｣
</span></span><span class="line"><span class="cl">  timestamp =&gt; ｢2021-05-24T08:11:00-07:00｣
</span></span><span class="line"><span class="cl">   iso8601-date =&gt; ｢2021-05-24｣
</span></span><span class="line"><span class="cl">    year =&gt; ｢2021｣
</span></span><span class="line"><span class="cl">    month =&gt; ｢05｣
</span></span><span class="line"><span class="cl">    day-of-month =&gt; ｢24｣
</span></span><span class="line"><span class="cl">   clock-time =&gt; ｢08:11:00｣
</span></span><span class="line"><span class="cl">    hours =&gt; ｢08｣
</span></span><span class="line"><span class="cl">    minutes =&gt; ｢11｣
</span></span><span class="line"><span class="cl">    seconds =&gt; ｢00｣
</span></span><span class="line"><span class="cl">   offset =&gt; ｢-07:00｣
</span></span><span class="line"><span class="cl">    hours =&gt; ｢07｣
</span></span><span class="line"><span class="cl">    minutes =&gt; ｢00｣</span></span></code></pre>
</figure><p>And this is just me composing regex objects.  Eventually I&rsquo;m going to try grammars and then look out world!</p>
<blockquote>
<p>[!NOTE] but why?
This may all seem a little ridiculous, and for this use case — parsing my own entry titles — it is.  So why am I going through all this work? Aside from it being fun, of course.</p>
<p>Raku&rsquo;s sibling language Perl got a bad reputation for being dense and unreadable. Regular expressions factored heavily into that density. By providing language-level structures for defining our expressions, Raku gives us an opportunity to use their full power for handling text without resorting to the infamous density of 1990s regexen.</p>
<p>We should absolutely use that opportunity and encourage new languages to steal <em>these</em> regular expressions rather than the stuff that impressed us twenty years ago.</p>
</blockquote>
<h3 id="ship-it">Ship it!</h3>
<p>What am I doing on this soapbox? Time to step down.</p>
<p>My script works. It&rsquo;s still not fast, but at least it&rsquo;s never slow. It&rsquo;s readable. And most important of all, I had fun.</p>
<h2 id="the-complete-script">The complete script</h2>
<p>Includes a couple more steps into composition that I didn&rsquo;t feel merited extra blog post paragraphs.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env raku</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$notebook</span>     <span class="o">=</span> <span class="p">&#34;</span><span class="s2">Journal</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$entry-window</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">minute</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">digit</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">two-digits</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">digit</span><span class="p">&gt;</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">year</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">digit</span><span class="p">&gt;</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">4</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">month</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">day-of-month</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">hours</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">minutes</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">seconds</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">iso8601-date</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">year</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">month</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">day-of-month</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">clock-time</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">hours</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">minutes</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">seconds</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">offset</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;[</span><span class="sr">+-</span><span class="p">]&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">hours</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">minutes</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">timestamp</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">iso8601-date</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">T</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">clock-time</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">offset</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">lone-timestamp</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="ni">^^</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">timestamp</span><span class="p">&gt;</span><span class="sr"> </span><span class="ni">$$</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">add-entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$timestamp</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">truncated-to</span><span class="p">(</span><span class="nv">$entry-window</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$command</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin edit </span><span class="nv">$timestamp</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">shell</span><span class="p">(</span> <span class="nv">$command</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">all-entries</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin ls</span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">filtered-entries</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">all-entries</span><span class="o">.</span><span class="nb">grep</span><span class="p">({</span> <span class="o">.</span><span class="nb">starts-with</span><span class="p">(</span><span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-today</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-yesterday</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$yesterday</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">earlier</span><span class="p">(</span><span class="s">days</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1"># or :1day for the terse</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="nv">$yesterday</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="p">(</span><span class="nv">$filename</span><span class="o">,</span> <span class="nv">$filehandle</span><span class="p">)</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$filehandle</span><span class="o">.</span><span class="nb">spurt</span><span class="p">(</span> <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="p">&#34;</span><span class="s2">cat </span><span class="nv">$_</span><span class="p">&#34;</span> <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="se">\n</span><span class="p">&#34;)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">format-headers</span><span class="p">(</span> <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin batch </span><span class="nv">$filename</span><span class="s2"> </span><span class="p">}</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">format-headers</span><span class="p">(</span><span class="nv">$journal-text</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nv">$journal-text</span> <span class="o">~~</span> <span class="p">/&lt;</span><span class="nf">lone-timestamp</span><span class="p">&gt;/</span> <span class="p">{</span> <span class="nv">$/</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nv">$journal-text</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">rx</span><span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      </span><span class="nv">$&lt;entry-title&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="p">[</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">lone-timestamp</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">]</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="p">}</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># $&lt;entry-title&gt;</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">add</span><span class="p">&#34;)</span> <span class="p">{</span>   <span class="k">#= </span><span class="sd">Add an entry
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="n">add-entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">today</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read today&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-today</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">yesterday</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read yesterday&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-yesterday</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">all</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read all entries (SLOW!)
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">all-entries</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Post: My Raku script for Journaling in Joplin</title>
  <link>https://randomgeekery.org/post/2021/05/my-raku-script-for-journaling-in-joplin/</link>
  <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/05/my-raku-script-for-journaling-in-joplin/</guid>
  <description>Setting the scene So yesterday I wrote a couple of one-liners for managing journal entries in the card/Joplin note-taking application, with help from card/Raku.
I made one for writing:
joplin use Journal &amp;&amp; joplin edit $(date --iso=minute) I made one for reading:
joplin use Journal \ &amp;&amp; raku -e &#39; for qx{ joplin ls }.lines.sort { qqx{ joplin cat $_ }.subst( /^(&lt;[\dT:\-]&gt;&#43;)/, { &#34;# $0&#34; } ).say }&#39; \ | python -m rich.</description>
   <category>post</category> 
   <category>post</category> 
   <category>programming</category>  <category>raku-lang</category>  <category>joplin</category>  <category>shell</category> 
  <content:encoded><![CDATA[<h2>Why mess with getopt when I can just use multi-dispatch?</h2><p><img src="/post/2021/05/../../../attachments/img/2021/cover-2021-05-22.png" alt="attachments/img/2021/cover-2021-05-22.png"/></p>
<h2 id="setting-the-scene">Setting the scene</h2>
<p>So yesterday I wrote a couple of <a href="/post/2021/05/cli-journaling-in-joplin-with-raku/">one-liners</a> for managing journal entries in the <a href="/card/joplin/">card/Joplin</a> note-taking application, with help from <a href="/card/raku/">card/Raku</a>.</p>
<p>I made one for writing:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="o">&amp;&amp;</span> joplin edit <span class="k">$(</span>date --iso<span class="o">=</span>minute<span class="k">)</span></span></span></code></pre>
</figure><p>I made one for reading:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="o">&amp;&amp;</span> raku -e <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    for qx{ joplin ls }.lines.sort {
</span></span></span><span class="line"><span class="cl"><span class="s1">      qqx{ joplin cat $_ }.subst(
</span></span></span><span class="line"><span class="cl"><span class="s1">        /^(&lt;[\dT:\-]&gt;+)/, { &#34;# $0&#34; }
</span></span></span><span class="line"><span class="cl"><span class="s1">      ).say
</span></span></span><span class="line"><span class="cl"><span class="s1">    }&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> python -m rich.markdown -</span></span></code></pre>
</figure><p>They work.  That&rsquo;s great.</p>
<p>They don&rsquo;t work great, though.  Mainly the one-liner for reading.  It dumps every journal entry, which is both overwhelming and slow.  Overwhelming because I only want to see today&rsquo;s journal entries most of the time.  Slow because every one of those entries requires a separate call to <code>joplin</code>.  Joplin is lovely, but it expects to be used as a persistent application.  The command line functionality is optimized for convenience.  It is <em>not</em> optimized for being hammered repeatedly by an overenthusiastic command line script.</p>
<p>I can fix the overwhelming.  I can&rsquo;t properly fix the slow until I learn more about the <a href="https://joplinapp.org/api/overview/">Joplin API</a>.  At least I can make the experience less awful.</p>
<h2 id="make-it-less-awful">Make it less awful</h2>
<h3 id="less-hard-coding-please">Less hard-coding please</h3>
<p>First things first.  I might change the name of my journal notebook.  You might want a daily diary rather than a giant stack of entries.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$notebook</span>     <span class="o">=</span> <span class="p">&#34;</span><span class="s2">Journal</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$entry-window</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">minute</span><span class="p">&#34;;</span></span></span></code></pre>
</figure><p>Focusing on daily journals? Set <code>$entry-window</code> to <code>&quot;day&quot;</code>.</p>
<h3 id="adding-an-entry">Adding an entry</h3>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">add-entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$timestamp</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">truncated-to</span><span class="p">(</span><span class="nv">$entry-window</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$command</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin edit </span><span class="nv">$timestamp</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">shell</span><span class="p">(</span> <span class="nv">$command</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>Raku&rsquo;s <a href="https://docs.raku.org/type/DateTime">DateTime</a> classes provide the gist of what we got with GNU Date. <a href="https://docs.raku.org/type/DateTime#method_truncated-to"><code>truncated-to</code></a> rounds our current timestamp — <a href="https://docs.raku.org/type/DateTime#method_now"><code>now</code></a> — down to the minute.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku -e <span class="s1">&#39;DateTime.now.say&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go">2021-05-22T11:52:28.380996-07:00
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">$</span> raku -e <span class="s1">&#39;DateTime.now.truncated-to(&#34;minute&#34;).say&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go">2021-05-22T11:52:00-07:00
</span></span></span></code></pre>
</figure><p>It doesn&rsquo;t print exactly the same as <code>date</code>:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> date --iso<span class="o">=</span>minute
</span></span><span class="line"><span class="cl"><span class="go">2021-05-22T11:52-07:00
</span></span></span></code></pre>
</figure><p>It wouldn&rsquo;t take excessive effort to make them match, but I&rsquo;m just not concerned about it at the moment.</p>
<h4 id="use-a-main-sub">Use a <code>MAIN</code> sub</h4>
<p>Well, we went and put the logic for adding an entry into a function.  We want to call that function at some point, right?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">add-entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>We don&rsquo;t need <a href="https://docs.raku.org/routine/MAIN"><code>MAIN</code></a> yet.  If present, it&rsquo;s your Raku script&rsquo;s official entry point.  If not, you have a plain old script.  You&rsquo;re good either way.  Having that entry point will make things easier to manage in a minute, though.</p>
<p>If we run this as-is, it adds a new entry.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku journal
</span></span><span class="line"><span class="cl"><span class="go">Note does not exist: &#34;2021-05-22T12:18:00-07:00&#34;. Create it? (Y/n) y
</span></span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Note has been saved.
</span></span></span></code></pre>
</figure><p>Okay, fine.  It works.  So far it&rsquo;s neither tidier nor more readable than the initial one-liner.  But writing an entry was never the problem.</p>
<p>The problem was reading the entries.</p>
<h3 id="read-all-the-entries">Read all the entries?</h3>
<p>Back in our one-liner, collecting entries and reading them got smushed together.  They&rsquo;re two distinct actions, though.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">all-entries</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin ls</span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>Right.  Now we have subs for writing, and subs for reading.  How do we want to get at them?  Maybe a callback table with action keywords? Maybe a fancy <a href="https://modules.raku.org">module</a>?</p>
<p>Nope!  Well — we <em>could</em>.  But we don&rsquo;t need to.  Raku has <a href="https://docs.raku.org/language/functions#Multi-dispatch">multi-dispatch</a>!</p>
<h4 id="use-multiple-main-subs">Use multiple <code>MAIN</code> subs!</h4>
<p>We replace the initial <code>MAIN</code> definition with these:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">add</span><span class="p">&#34;)</span> <span class="p">{</span>   <span class="k">#= </span><span class="sd">Add an entry
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="n">add-entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">read</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read all entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span><span class="n">all-entries</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p><code>multi</code> tells Raku to expect multiple definitions for this sub.  Without it, the compiler gets annoyed.</p>
<p><a href="https://en.wikipedia.org/wiki/Multiple_dispatch">Multiple dispatch</a> means a few things depending on which language you&rsquo;re using — or which computer scientist you&rsquo;re asking.  Basically it lets you avoid having one giant glob of a function with all sorts of special logic.  You do that by having a different version of the function for different situations.</p>
<p>Where I got surprised?  Most of the tiny amount I&rsquo;ve read out there for multiple dispatch talks about basing on types or pattern matching against variables.  You could absolutely do that with Raku.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$action</span> <span class="k">where</span> <span class="p">{</span> <span class="nv">$action</span> <span class="o">==</span> <span class="p">&#34;</span><span class="s2">add</span><span class="p">&#34;</span> <span class="p">})</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$action</span> <span class="k">where</span> <span class="p">{</span> <span class="nv">$action</span> <span class="o">==</span> <span class="p">&#34;</span><span class="s2">read</span><span class="p">&#34;</span> <span class="p">})</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span></span></span></code></pre>
</figure><p>Thing is, we&rsquo;re not doing anything with <code>$action</code>.  We <em>read</em> if the first command line argument is <code>read</code>.  We <em>add</em> if it&rsquo;s <code>add</code>.  Raku is happy enough matching that first argument against literal strings.  I assume other multi-dispatch languages can to the same, but nobody&rsquo;s been uncouth enough to bring it up in polite company.  It&rsquo;s always &ldquo;this type&rdquo; and &ldquo;that pattern&rdquo; or &ldquo;this enum.&rdquo;</p>
<p>What happens if we try to run the script with no arguments?  Well, if we didn&rsquo;t remove that initial version of <code>MAIN</code> we get a compiler error about redefining the sub.  But once that&rsquo;s out of the way, we no longer have a default path into the application!</p>
<p>No worries.  Raku&rsquo;s special handling of the entry point sub shows us the accepted usage.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku journal.raku
</span></span><span class="line"><span class="cl"><span class="go">Usage:
</span></span></span><span class="line"><span class="cl"><span class="go">  journal.raku add -- Add an entry
</span></span></span><span class="line"><span class="cl"><span class="go">  journal.raku read -- Read all entries
</span></span></span></code></pre>
</figure><p>And that&rsquo;s where those <code>#=</code> comments come in.  They provide extra detail for the usage message displayed.</p>
<p>Let&rsquo;s try them out.  We&rsquo;ll <code>add</code> an entry and then make sure it shows up when we <code>read</code> them.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku journal.raku add
</span></span><span class="line"><span class="cl"><span class="go">Note does not exist: &#34;2021-05-22T12:55:00-07:00&#34;. Create it? (Y/n)
</span></span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Note has been saved.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> raku journal.raku <span class="nb">read</span>
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">#</span> 2021-05-22T12:55:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">[multi-dispatch]: https://docs.raku.org/language/functions#Multi-dispatch
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Raku Joplin journaling script, now with [multi-dispatch][]!
</span></span></span></code></pre>
</figure><p>Nice.  Of course, at this point I&rsquo;m being handed 142 lines of text, and it&rsquo;s taking about 12 seconds to do it.  All that work and we finally reached the full &ldquo;overwhelming and slow&rdquo; point we were at this morning.</p>
<p>Things are about to improve!</p>
<h3 id="i-just-want-today">I just want today</h3>
<p>I&rsquo;ve been carefully using <em>inbox/ISO 8601</em> format for my entries.  That means I can filter to a specific date — or year, month, hour, etc — by constructing a date fragment and grabbing each entry that starts with the fragment.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">filtered-entries</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">all-entries</span><span class="o">.</span><span class="nb">grep</span><span class="p">({</span> <span class="o">.</span><span class="nb">starts-with</span><span class="p">(</span><span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>Getting today&rsquo;s entries then becomes a matter of extracting a <code>yyyy-mm-dd</code> string from the ever-so-helpful DateTime.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-today</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><blockquote>
<p><strong>2021-05-24</strong></p>
<p><a href="https://twitter.com/b2gills">@b2gills</a> mentioned that I could also use <a href="https://docs.raku.org/type/Date#method_today[Date.today]"><code>Date.today</code></a>
here!</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Why didn&#39;t you use Date.​today?<br><br>If you had a coercive parameter, you wouldn&#39;t even need to do anything more than Date.​today.<br><br> sub filtered-entries(Str(Date) $​date-funnel) {…}<br><br> sub entries-for-today() {<br> filtered-entries Date.​today<br> }</p>&mdash; Brad Gilbert (@b2gills) <a href="https://twitter.com/b2gills/status/1397038905405452296?ref_src=twsrc%5Etfw">May 25, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</blockquote>
<p>I haven&rsquo;t messed with <a href="https://docs.raku.org/syntax/Coercion%20type">parameter coercion</a> yet, but that looks like it will come in handy.</p>
<p>Need to touch up my reading <code>MAIN</code> definition, though.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">read</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read today&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-today</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>Does it work?  Is it fast?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nb">time</span> raku journal.raku <span class="nb">read</span>
</span></span><span class="line"><span class="cl"><span class="gp">#</span> 2021-05-22T08:12:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Millie let me sleep in until 7:54. How gracious.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">[@liztormato]: https://twitter.com/liztormato
</span></span></span><span class="line"><span class="cl"><span class="go">[Reddit]: https://www.reddit.com/r/rakulang/comments/nif2sf/cli_journaling_in_joplin_with_raku_brian_wisti/
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Oh and last night&#39;s Joplin / Raku post got some legs. [@liztormato][] even
</span></span></span><span class="line"><span class="cl"><span class="go">shared it on [Reddit][]. That&#39;s cool. I always hope they like it when I post
</span></span></span><span class="line"><span class="cl"><span class="go">something about #RakuLang.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">#</span> 2021-05-22T10:43:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">My note script needs an option for &#34;read yesterday&#39;s notes.&#34;
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">#</span> 2021-05-22T12:18:00-07:00 Making sure that my Raku Joplin journaling script lets me add an entry.
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">#</span> 2021-05-22T12:55:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">[multi-dispatch]: https://docs.raku.org/language/functions#Multi-dispatch
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Raku Joplin journaling script, now with [multi-dispatch][]!
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">real    0m3.815s
</span></span></span><span class="line"><span class="cl"><span class="go">user    0m3.966s
</span></span></span><span class="line"><span class="cl"><span class="go">sys     0m0.502s
</span></span></span></code></pre>
</figure><p>It works.  It&rsquo;s — it&rsquo;s not <em>fast</em> by any means, but 3.8 seconds is much faster than 12.  Again, there&rsquo;s an API waiting for when I&rsquo;m bored of abusing Joplin&rsquo;s command line conveniences.</p>
<h3 id="and-maybe-yesterday">And maybe yesterday</h3>
<p>Most of my deep dives into the journal will be from inside the Joplin app.  A quick glance at yesterday&rsquo;s notes could still be useful.</p>
<p>Of course a DateTime lets me ask for an <a href="https://docs.raku.org/type/DateTime#%28Dateish%29_method_earlier"><code>earlier</code></a> DateTime.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-yesterday</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$yesterday</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">earlier</span><span class="p">(</span><span class="s">days</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1"># or :1day for the terse</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="nv">$yesterday</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>For <code>MAIN</code> I <em>could</em> add and match against a subcommand.  I think instead I will adjust my top-level commands to reflect the most common cases.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">today</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read today&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-today</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">yesterday</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read yesterday&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-yesterday</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>And it works!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku journal.raku yesterday
</span></span><span class="line"><span class="cl"><span class="gp">#</span> 2021-05-21T09:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Alarm 07:00, stayed in bed as long as I could. Thanks to the dogs, that was 15
</span></span></span><span class="line"><span class="cl"><span class="go">minutes. Oh well.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">[Homebrew]: https://brew.sh
</span></span></span><span class="line"><span class="cl"><span class="go">[Nix]: https://nixos.org/
</span></span></span><span class="line"><span class="cl"><span class="go">[using Nix on Debian]: https://ariya.io/2020/05/nix-package-manager-on-ubuntu-or-debian
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Got the Raspberry Pi 4 set up with Raspbian, and the 500GB external drive
</span></span></span><span class="line"><span class="cl"><span class="go">attached. Thinking about package managers. I know [Homebrew][] but I could
</span></span></span><span class="line"><span class="cl"><span class="go">maybe try [Nix][]. There&#39;s a post about [using Nix on Debian][].
</span></span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">#</span> 2021-05-21T21:29:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Just about to post my Raku Joplin Journaling One-liners, but maybe a couple
</span></span></span><span class="line"><span class="cl"><span class="go">screenshots? People love screenshots.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Maybe they do. Maybe they don&#39;t. *I* love screenshots.
</span></span></span></code></pre>
</figure><h3 id="what-about-formatting">What about formatting?</h3>
<p>Honestly?  I&rsquo;m not going to worry about it right now.  Piping to <a href="/card/rich/">card/Rich</a>
or <a href="/card/glow/">card/Glow</a> suffices when I want it pretty.</p>
<pre class="rich">╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-22T08:12:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

Millie let me sleep in until 7:54. How gracious.

Oh and last night's Joplin / Raku post got some legs. <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://twitter.com/liztormato">@liztormato</a></span> even shared it
on <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://www.reddit.com/r/rakulang/comments/nif2sf/cli_journaling_in_joplin_with_raku_brian_wisti/">Reddit</a></span>. That's cool. I always hope they like it when I post something about
#RakuLang.

╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-22T10:43:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

My note script needs an option for "read yesterday's notes."

╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-22T12:18:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

Making sure that my Raku Joplin journaling script lets me add an entry.

╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-22T12:55:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

Raku Joplin journaling script, now with <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://docs.raku.org/language/functions#Multi-dispatch">multi-dispatch</a></span>!

╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-22T14:05:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

Guess I'm about ready to post the second Raku Joplin journaling post. Ah, the
joys of hyperfocus.

Better stretch my legs and get back to the official task list after.
</pre>
<h2 id="the-complete-script">The complete script</h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env raku</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$notebook</span>     <span class="o">=</span> <span class="p">&#34;</span><span class="s2">Journal</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$entry-window</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">minute</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">add-entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$timestamp</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">truncated-to</span><span class="p">(</span><span class="nv">$entry-window</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$command</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin edit </span><span class="nv">$timestamp</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">shell</span><span class="p">(</span> <span class="nv">$command</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">all-entries</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin ls</span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">filtered-entries</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">all-entries</span><span class="o">.</span><span class="nb">grep</span><span class="p">({</span> <span class="o">.</span><span class="nb">starts-with</span><span class="p">(</span><span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-today</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-yesterday</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$yesterday</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">earlier</span><span class="p">(</span><span class="s">days</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1"># or :1day for the terse</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="nv">$yesterday</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">add</span><span class="p">&#34;)</span> <span class="p">{</span>   <span class="k">#= </span><span class="sd">Add an entry
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="n">add-entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">today</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read today&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-today</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">yesterday</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read yesterday&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-yesterday</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">all</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read all entries (SLOW!)
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">all-entries</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Post: CLI Journaling in Joplin with Raku</title>
  <link>https://randomgeekery.org/post/2021/05/cli-journaling-in-joplin-with-raku/</link>
  <pubDate>Fri, 21 May 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/05/cli-journaling-in-joplin-with-raku/</guid>
  <description>the formatted output of my journal-reading one-liner
Let’s write a couple one-liners so I can journal in card/Joplin from the command line!
But why? Journaling is great. Now I’m not talking about big name Bujo bullet journaling process. I mean getting a thought down quick before I lose it. Even better if I can get that thought down in a place where I can find it later.
I know there are loads of great journaling applications.</description>
   <category>post</category> 
   <category>post</category> 
   <category>shell</category>  <category>joplin</category>  <category>raku-lang</category>  <category>second-brain</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>I sure do use a lot of words to justify my one-liners</h2><p><img src="/post/2021/05/../../../attachments/img/2021/cover-2021-05-21.png" alt="attachments/img/2021/cover-2021-05-21.png"/>
the formatted output of my journal-reading one-liner</p>
<p>Let&rsquo;s write a couple one-liners so I can journal in <a href="/card/joplin/">card/Joplin</a> from the command line!</p>
<h2 id="but-why">But why?</h2>
<p>Journaling is great.  Now I&rsquo;m not talking about big name <a href="https://bulletjournal.com/">Bujo</a> bullet journaling process.  I mean getting a thought down quick before I lose it. Even better if I can get that thought down in a place where I can find it later.</p>
<p>I know there are loads of great journaling applications.  And lots of great applications that support journaling generally.  But I love my command line. Too many distractions in those apps.</p>
<p>Command line options exist.  I could use one of the bazillion command line journaling tools.  Okay.  Maybe not a bazillion.  A couple dozen, at least.</p>
<p>Those apps and tools are yet another interface, another set of rules.  I already have Joplin handy.  Besides desktop, mobile, and terminal applications, Joplin has a CLI.  And an API, but I suspect I&rsquo;ll get to that later.</p>
<p>With uncharacteristic restraint, today I choose to get better at the tools I have rather than installing a new one.</p>
<h2 id="adding-a-journal-entry">Adding a journal entry</h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="o">&amp;&amp;</span> joplin edit <span class="k">$(</span>date --iso<span class="o">=</span>minute<span class="k">)</span></span></span></code></pre>
</figure><p><a href="https://www.gnu.org/software/coreutils/manual/html_node/date-invocation.html#date-invocation">GNU Date</a> — from GNU Coreutils — gets us consistent timestamps, which simplify searching and filtering.  <code>--iso</code> produces an <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> timestamp.  Very handy.  By default it prints the <code>YYYY-MM-DD</code> version of today&rsquo;s date, but you can opt for more granularity.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> date --iso<span class="o">=</span>minute
</span></span><span class="line"><span class="cl"><span class="go">2021-05-20T08:26-07:00
</span></span></span></code></pre>
</figure><p>I plan to make frequent small notes, so <code>minute</code> feels like a good choice.</p>
<blockquote>
<p>[!NOTE] <code>use Journal</code>?
Yes, this came up.  Had the Joplin terminal app open in one terminal while I added a journal entry in another terminal.  Terminal app did some sort of state maintenance thing.  Next thing I know I&rsquo;m adding journal entries to &ldquo;Nerd Notes.&rdquo;</p>
</blockquote>
<p>Since it doesn&rsquo;t exist, <code>joplin</code> will ask for confirmation before creating it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> joplin use Journal <span class="o">&amp;&amp;</span> joplin edit <span class="k">$(</span>date --iso<span class="o">=</span>minute<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="go">Note does not exist: &#34;2021-05-20T08:26-07:00&#34;. Create it? (Y/n)
</span></span></span></code></pre>
</figure><p>I&rsquo;m okay with the confirmation request for now. That way I have fewer moments of accidentally creating entries.</p>
<p><img src="/post/2021/05/attachments/img/2021/editing-note.png" alt="Editing a journal entry"/></p>
<h3 id="what-about-more-of-a-diary">What about more of a diary?</h3>
<p>Leave <code>minute</code> off the <code>--iso</code> argument if you prefer a tidy collection of daily pages to my big stack of notes.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin edit <span class="k">$(</span>date --iso<span class="k">)</span></span></span></code></pre>
</figure><p>Now you&rsquo;ll be editing the single entry for today&rsquo;s date.</p>
<h2 id="reading-journal-entries">Reading journal entries</h2>
<p>The best review path will be via the Joplin app itself.  That way you can tag and edit.</p>
<p><em>But</em> – if you just want a quick view of recent thoughts?  That is something we can do from the command line.</p>
<p>This next bit gets a little fancy.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="o">&amp;&amp;</span> raku -e <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    for qx{ joplin ls }.lines.sort {
</span></span></span><span class="line"><span class="cl"><span class="s1">      qqx{ joplin cat $_ }.subst(
</span></span></span><span class="line"><span class="cl"><span class="s1">        /^(&lt;[\dT:\-]&gt;+)/, { &#34;# $0&#34; }
</span></span></span><span class="line"><span class="cl"><span class="s1">      ).say
</span></span></span><span class="line"><span class="cl"><span class="s1">    }&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> python -m rich.markdown -</span></span></code></pre>
</figure><p>Let me stall for a second.</p>
<h3 id="pretty-print-with-rich">Pretty print with Rich</h3>
<p>We already talked about <code>joplin use Journal</code>. <a href="https://rich.readthedocs.io/en/stable/markdown.html">Rich Markdown</a> formats Markdown — Joplin&rsquo;s default format — for rich display in a terminal.  It can even run as a standalone application.  I take advantage of that here to get a pretty view of my Joplin entries:</p>
<pre class="rich">╔══════════════════════════════════════════════════════════════════════════════╗
║                            <span style="font-weight: bold">2021-05-20T08:26-07:00</span>                            ║
╚══════════════════════════════════════════════════════════════════════════════╝


Getting an idea for a CLI journaling tool using Joplin as the backend

The logic would look something like this:

<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">┌──────────────────────────────────────────────────────────────────────────────┐</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│</span> <span style="color: #f8f8f2; text-decoration-color: #f8f8f2; background-color: #272822">joplin use Journal</span><span style="background-color: #272822">                                                          </span> <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│</span> <span style="color: #f8f8f2; text-decoration-color: #f8f8f2; background-color: #272822">joplin edit </span><span style="color: #66d9ef; text-decoration-color: #66d9ef; background-color: #272822">$(</span><span style="color: #f8f8f2; text-decoration-color: #f8f8f2; background-color: #272822">date --iso</span><span style="color: #66d9ef; text-decoration-color: #66d9ef; background-color: #272822">)</span><span style="background-color: #272822">                                                   </span> <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│</span> <span style="color: #75715e; text-decoration-color: #75715e; background-color: #272822"># append "## $(date --iso=minute)"</span><span style="background-color: #272822">                                          </span> <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">└──────────────────────────────────────────────────────────────────────────────┘</span>

That's it, basically. There could be more functionality, such as reviewing the
log.

╔══════════════════════════════════════════════════════════════════════════════╗
║                            <span style="font-weight: bold">2021-05-21T09:00-07:00</span>                            ║
╚══════════════════════════════════════════════════════════════════════════════╝

Alarm 07:00, stayed in bed as long as I could. Thanks to the dogs, that was 15
minutes. Oh well.

Got the Raspberry Pi 4 set up with Raspbian, and the 500GB external drive
attached. Thinking about package managers. I know <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://brew.sh">Homebrew</a></span> but I could maybe try
<span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://nixos.org/">Nix</a></span>. There's a post about <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://ariya.io/2020/05/nix-package-manager-on-ubuntu-or-debian">using Nix on Debian</a></span>.

╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-21T14:01:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

Resuming productivity, or something like it.

╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-21T20:20:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

I keep forgetting <span style="color: #ffffff; text-decoration-color: #ffffff; background-color: #000000">-sel clip</span> when using xclip. Without that it doesn't go into
the easy copy buffer.

<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">┌──────────────────────────────────────────────────────────────────────────────┐</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│</span> <span style="color: #f92672; text-decoration-color: #f92672; background-color: #272822; font-weight: bold">$ </span><span style="color: #f8f8f2; text-decoration-color: #f8f8f2; background-color: #272822">my-command | xclip -sel clip</span><span style="background-color: #272822">                                              </span> <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">│</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">└──────────────────────────────────────────────────────────────────────────────┘</span>
</pre>
<p>You can also use <a href="https://github.com/charmbracelet/glow">Glow</a> if you want a standalone Markdown pretty printer. It works.  Rich is already part of my toolkit, so I&rsquo;ll keep using it.</p>
<h3 id="am-i-ready-to-explain-myself">Am I ready to explain myself?</h3>
<p>Okay, I think I&rsquo;ve stalled enough.  That middle bit.  That&rsquo;s <a href="/card/raku/">card/Raku</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">for</span> <span class="k">q</span><span class="sa">x</span><span class="p">{</span><span class="s"> joplin ls </span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span><span class="o">.</span><span class="nb">say</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>I don&rsquo;t often do one-liners. We&rsquo;ll have to break it down into tiny pieces.</p>
<p>First, we need a sorted list of journal entries.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">q</span><span class="sa">x</span><span class="p">{</span><span class="s"> joplin ls </span><span class="p">}</span>  <span class="c1"># ask `joplin` to print note titles, saving the output</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="nb">lines</span>         <span class="c1"># Split that output into lines, one per note</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="nb">sort</span>          <span class="c1"># Sort those lines by note title</span></span></span></code></pre>
</figure><p>Things get unpredictable if I don&rsquo;t sort notes myself.  Joplin tends to sort notes by last activity.  Thank goodness for ISO 8601, which is easily sorted:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">2021-05-20T08:26-07:00
</span></span><span class="line"><span class="cl">2021-05-21T09:00-07:00
</span></span><span class="line"><span class="cl">2021-05-21T14:01-07:00
</span></span><span class="line"><span class="cl">2021-05-21T20:20-07:00</span></span></code></pre>
</figure><p>Next, we need to do something with each of those note titles.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">for</span> <span class="k">q</span><span class="sa">x</span><span class="p">{</span><span class="s"> joplin ls </span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span></span></span></code></pre>
</figure><p>Well? The content of each note is important.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="s2"> </span><span class="p">}</span></span></span></code></pre>
</figure><p><code>qqx</code> interpolates variables before asking the system to run your command. The variable being interpolated is our old friend <code>$_</code>, this time around standing in for whichever of those sorted lines we reached.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">2021-05-20T08:26-07:00
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Getting an idea for a CLI journaling tool using Joplin as the backend
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The logic would look something like this:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s">```bash
</span></span></span><span class="line"><span class="cl"><span class="s"></span>joplin use Journal
</span></span><span class="line"><span class="cl">joplin edit <span class="k">$(</span>date --iso<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># append &#34;## $(date --iso=minute)&#34;</span>
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">That&#39;s it, basically. There could be more functionality, such as reviewing
</span></span><span class="line"><span class="cl">the log.</span></span></code></pre>
</figure><p>I want to print this out in the terminal.  I need to massage it a little first. Even though the file is Markdown, the first line is the note&rsquo;s unformatted title.  It makes quick one-line notes easier.</p>
<p>But it also means if <em>I</em> want that first line to look significant, I need to do something with this:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-language" data-lang="language"
      >2021-05-20T08:26-07:00</code></pre>
</figure><p>The most obvious fix to me? Turn it into a level one Markdown header.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"># 2021-05-20T08:26-07:00</span></span></code></pre>
</figure><p>That&rsquo;s a single <a href="https://docs.raku.org/routine/subst"><code>.subst</code></a> transformation.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>  <span class="c1"># in printed note</span>
</span></span><span class="line"><span class="cl">  <span class="p">/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span>          <span class="c1"># find the first line that looks like a timestamp</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span>                 <span class="c1"># and turn it into a Markdown header</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre>
</figure><p>Okay, I got a little lazy with the regular expression.  But my brain was in one-liner mode.  For a full script I&rsquo;d probably spell it out more clearly.</p>
<p>The last step is to display the transformed note contents.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span><span class="o">...</span><span class="p">)</span><span class="o">.</span><span class="nb">say</span></span></span></code></pre>
</figure><p>Or ask them to display themselves.  However you want to think of it.</p>
<p>This whole thing would be rather clunky as a shell alias.  I could add it as a function to my <code>.bashrc</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">jread<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  joplin use Journal <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> raku -e <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">      qqx{joplin cat $_}.subst(/^(&lt;[\dT:\-]&gt;+)/, { &#34;# $0&#34; }).say for qx{ joplin ls }.lines.sort
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="p">|</span> python -m rich.markdown -
</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre>
</figure><p>Then again, maybe not.  This should probably be a script.  Check back in a few days.</p>
<blockquote>
<p>[!NOTE] Oooh a cliffhanger!
I have a working script already.  What I don&rsquo;t have much of is unallocated
time.  But hopefully yes!  Soon.  I did some cool stuff with <code>multi MAIN</code>
in Raku that I&rsquo;m desperate to show off.</p>
</blockquote>
]]></content:encoded>
</item>
<item>
  <title>Post: Joplin Terminal Basics</title>
  <link>https://randomgeekery.org/post/2021/04/joplin-terminal-basics/</link>
  <pubDate>Thu, 15 Apr 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/04/joplin-terminal-basics/</guid>
  <description>Joplin’s terminal view of my notebooks
Look. I don’t know if card/Joplin is going to be my note manager of choice. I don’t even know if I’ll still be using it next week. It’s cool. I’m just not that consistent.
But there’s these notes. Why not share them? Someone out there might make use of them.
Just give me a minute to turn the bullet points into sentences.
What? Try out Joplin’s terminal application for typing up and organizing quick notes.</description>
   <category>post</category> 
   <category>post</category> 
   <category>second-brain</category>  <category>joplin</category>  <category>shell</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>Managing notes with Joplin's terminal mode</h2><p><img src="/post/2021/04/../../../attachments/img/2021/cover-2021-04-15.png" alt="attachments/img/2021/cover-2021-04-15.png"/>
Joplin&rsquo;s terminal view of my notebooks</p>
<p>Look.  I don’t know if <a href="/card/joplin/">card/Joplin</a> is going to be my note manager of choice.  I don’t even know if I’ll still be using it next week.  It’s cool. I’m just not that consistent.</p>
<p>But there’s these notes.  Why not share them?  Someone out there might make use of them.</p>
<p>Just give me a minute to turn the bullet points into sentences.</p>
<h2 id="what">What?</h2>
<p>Try out Joplin’s <a href="https://joplinapp.org/terminal/">terminal application</a> for typing up and organizing quick notes.</p>
<h2 id="why">Why?</h2>
<p>I’m often taking notes.  It’s the only way I can remember the little things. You can find a note-taking app whatever your preferences are.  I spend a lot of time in the terminal.  I don’t want to <em>leave</em> the terminal when deep in concentration.</p>
<p>Joplin has a terminal application.  It also has lovely <a href="https://joplinapp.org/desktop/">desktop</a> and <a href="https://joplinapp.org/mobile/">mobile</a> applications.</p>
<p>But we’re just looking at the terminal application.</p>
<h3 id="why-not-">Why not …</h3>
<p>Like I said: there are a lot of options.  I regularly play with several of them.  But for the kind of &ldquo;quick get this down before I forget it?&rdquo;</p>
<ul>
<li><a href="https://vimwiki.github.io/">Vimwiki</a> is hard to remember</li>
<li><a href="/card/org/">card/Org</a> is hard to learn, or at least hard to master; and the temptation to fuss around is too strong</li>
<li><a href="/card/obsidian/">card/Obsidian</a> needs a desktop window</li>
<li>so does <a href="/card/zettlr/">card/Zettlr</a></li>
</ul>
<p>So for today it’s Joplin.</p>
<h2 id="setup">Setup</h2>
<p>Joplin runs on NodeJS, so install it with <a href="/card/volta/">card/Volta</a>, Yarn, NPM, or whatever you install Node stuff with.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ volta install joplin
</span></span><span class="line"><span class="cl">success: installed joplin@1.6.4 with executables: joplin</span></span></code></pre>
</figure><p>Now there’s a <code>joplin</code> command in your path!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">joplin</span></span></code></pre>
</figure><p>You get these four panes you can tab around in, and — look, Joplin’s <a href="https://joplinapp.org/terminal/#usage">usage</a> docs break it down better than I could.  Go look at those.</p>
<h2 id="basic-usage">Basic usage</h2>
<p>Joplin has a command line mode, which you get at with the colon character <code>:</code>.  Gonna focus on that command line mode.</p>
<p>The first and most important command?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:help</span></span></code></pre>
</figure><p>That gives you a list of commands, including the second most important command.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:exit</span></span></code></pre>
</figure><p>Not <code>:quit</code>.  Not <code>:wq</code>.  No.  Joplin’s terminal application is kind of inspired by <a href="/card/vim/">card/Vim</a>, but it is not Vim.</p>
<h2 id="setting-up-note-synchronization">Setting up note synchronization</h2>
<p>I’ve already been using Joplin elsewhere, so <em>my</em> first task is to configure <a href="https://joplinapp.org/terminal/#synchronisation">synchronization</a>.</p>
<p>The <code>sync</code> needs no additional arguments when used with Dropbox, lucky for me.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:sync</span></span></code></pre>
</figure><p>Joplin gives me:</p>
<ul>
<li>a URL to copy and paste into the browser</li>
<li>a prompt to enter Dropbox’s validation code</li>
</ul>
<p>From there?</p>
<ol>
<li>follow the link with a <code>[Control]</code> + click (in my terminal, at least)</li>
<li>allow the integration; Dropbox gives me a string of nonsense text</li>
<li>copy that nonsense and paste it into Joplin’s prompt</li>
</ol>
<p>If you’re me, the leftmost pane fills with folders from your previous Joplin sessions.  The screenshot you already saw, pretty much.</p>
<h3 id="creating-a-note">Creating a note</h3>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:mknote &#34;Terminal notes with Joplin&#34;</span></span></code></pre>
</figure><p>The quotes aren’t needed for single-word notes.  But for multi-word notes it’s either wrap it in quotes or use CamelCase.</p>
<p>I can see it’s up there in the middle tab, but now I’m obsessing over the command line mode.  Is there an <code>ls</code> equivalent?  There sure is!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:ls
</span></span><span class="line"><span class="cl">Terminal notes with Joplin</span></span></code></pre>
</figure><h3 id="editing-a-note">Editing a note</h3>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:edit &#34;Terminal notes with Joplin&#34;</span></span></code></pre>
</figure><p>Joplin offers a chance to autocomplete once I type enough in.  I accept that autocompletion with <code>[TAB]</code>, then hit <code>[ENTER]</code> to complete the command.</p>
<p>This passes the note buffer off to your default text editor — in my case,
<a href="https://micro-editor.github.io/">micro</a>.</p>
<p>The notes themselves are in a straightforward Markdown.  See <a href="https://joplinapp.org/markdown/">Joplin&rsquo;s Markdown guide</a> for those details.</p>
<p>Keep in mind that this is just a Markdown file to your editor.  Any impressive integration with Joplin requires work in the editor config.  I have not done anything with that yet.  I use Joplin’s desktop app for anything fancier than jotting down quick notes.</p>
<p>Edit.  Save.  Quit the editor.  You’re back in Joplin, and your updated content is in Joplin’s content pane.</p>
<h3 id="deleting-a-note">Deleting a note</h3>
<p>I forgot about the quotes and made myself a &ldquo;Terminal&rdquo; note.  How do I delete it?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:rmnote Terminal</span></span></code></pre>
</figure><p>Joplin asks for confirmation, defaulting to &ldquo;No&rdquo; because you can’t get the note back once deleted.</p>
<h3 id="organizing-notes-into-notebooks">Organizing notes into notebooks</h3>
<p>I can see this becoming a whole series of notes.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:mkbook MyJoplinNotes</span></span></code></pre>
</figure><p>Didn’t feel like using quotes this time.  Anyways, &ldquo;MyJoplinNotes&rdquo; gets created at the top level.  Joplin automatically sets it as the notebook I’m using.</p>
<p>&ldquo;Using&rdquo; a particular notebook means this is where your focus is.  Any new notes you create end up in the notebook you’re using.</p>
<p>I need to get <em>this</em> note over to the right location.  First I <code>use</code> the random notebook I started in.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:use &#39;Nerd notes&#39;</span></span></code></pre>
</figure><p>My first round notebook names tend to be terrible. Sorry.</p>
<h3 id="moving-notes">Moving notes</h3>
<p>Now I can move it, letting Joplin help me with autocompletion.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:mv &#39;Terminal notes with Joplin&#39; MyJoplinNotes</span></span></code></pre>
</figure><p>Switch over to the new notebook:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:use MyJoplinNotes</span></span></code></pre>
</figure><p>And there it is.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:ls
</span></span><span class="line"><span class="cl">Terminal notes with Joplin</span></span></code></pre>
</figure><h3 id="renaming-notes">Renaming notes</h3>
<p>Of course, now that it’s in a dedicated notebook the name seems redundant. Let’s rename this note.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:ren &#39;Terminal notes with Joplin&#39; &#39;Adding and Organizing Notes&#39;</span></span></code></pre>
</figure><h2 id="parting-thought">Parting thought</h2>
<p>Even though Joplin keeps a narrow focus, there’s much more than I looked at here.  I just wanted to take some notes.  You can manage tasks with it, and even extend it with an API.</p>
<p>Keep your notes short, unless your editor supports folding.  If it does?  Go wild.  Have fun!</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Command Line Interface Guidelines</title>
  <link>https://randomgeekery.org/post/2020/12/clig-dev/</link>
  <pubDate>Sat, 05 Dec 2020 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/clig-dev/</guid>
  <description>Command Line Interface Guidelines
An open-source guide to help you write better command-line programs, taking traditional UNIX principles and updating them for the modern day.</description>
   <category>post</category> 
   <category>bookmark</category> 
   <category>cli</category>  <category>shell</category>  <category>ux</category> 
  <content:encoded><![CDATA[<p><a href="https://clig.dev/">Command Line Interface Guidelines</a></p>
<blockquote>
<p>An open-source guide to help you write better command-line programs, taking traditional UNIX principles and updating them for the modern day.</p>
</blockquote>
]]></content:encoded>
</item>
<item>
  <title>Post: Found the micro editor</title>
  <link>https://randomgeekery.org/post/2020/11/found-the-micro-editor/</link>
  <pubDate>Mon, 30 Nov 2020 20:41:49 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/11/found-the-micro-editor/</guid>
  <description>micro — apparently it’s like nano but bigger.
OMG I hit C-v and it pasted the link. Just like that. Then I dragged that filemanager divider over with my mouse and it worked.
A shell text editor? With key bindings that make sense to people who haven’t had their brains warped by Unix? With window splitting and tabs and JSON configuration and Lua plugins? I’m so confused.</description>
   <category>post</category> 
   <category>note</category> 
   <category>editors</category>  <category>shell</category>  <category>life-doesn-t-have-to-be-hard</category> 
  <content:encoded><![CDATA[<p><img src="/post/2020/11/../../../attachments/img/2020/cover-2020-11-30.png" alt="attachments/img/2020/cover-2020-11-30.png"/></p>
<p><a href="https://micro-editor.github.io/">micro</a> — apparently it&rsquo;s like <code>nano</code> but bigger.</p>
<p>OMG I hit <code>C-v</code> and it pasted the link. Just like that. Then I dragged that <a href="https://github.com/NicolaiSoeborg/filemanager-plugin">filemanager</a> divider over with my <em>mouse</em> and it worked.</p>
<p>A shell text editor? With key bindings that make sense to people who haven&rsquo;t had their brains warped by Unix? With window splitting and tabs and JSON configuration and Lua plugins? I&rsquo;m so confused.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Naming things in tmux</title>
  <link>https://randomgeekery.org/post/2020/11/naming-things-in-tmux/</link>
  <pubDate>Sat, 21 Nov 2020 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/11/naming-things-in-tmux/</guid>
  <description>I got the basics of tmux down:
starting a new session creating new windows moving between windows scrolling back in a window buffer And that’s about it.
After this long you might expect me to know more. Alas, no.
At some point I realized you can have more than one tmux session going at a time. Now my normal day includes the site in one session, work in another, and sometimes a third for random puttering.</description>
   <category>post</category> 
   <category>post</category> 
   <category>shell</category>  <category>tmux</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>In which I sort out which tmux session is which</h2><p>I got the basics of <a href="https://github.com/tmux/tmux">tmux</a> down:</p>
<ul>
<li>starting a new session</li>
<li>creating new windows</li>
<li>moving between windows</li>
<li>scrolling back in a window buffer</li>
</ul>
<p>And that’s about it.</p>
<p>After this long you might expect me to know more.  Alas, no.</p>
<p>At some point I realized you can have more than one tmux session going at a time.  Now my normal day includes the site in one session, work in another, and sometimes a third for random puttering.</p>
<p>I need to manage everything better.</p>
<h2 id="using-tmux-commands">Using Tmux commands</h2>
<p>Although tmux binds keys to commands, it’s easier for me to remember words than keys.  It’s part of why I still use <a href="/card/taskwarrior/">Taskwarrior</a> more than <a href="/card/org/">card/Org</a>.  Because of that, I’ll focus on the tmux commands.</p>
<p>You can send them directly to <code>tmux</code> in an open shell.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ tmux &lt;command&gt; [arguments]</span></span></code></pre>
</figure><p>You don’t have a shell handy?  <code>C-b :</code> will pull up a quick Tmux  command prompt to enter your commands:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">C-b :&lt;command&gt; [arguments]</span></span></code></pre>
</figure><p>If your command produces output, it will display in place of your current window until you hit <code>ENTER</code>.</p>
<p>On to the commands themselves.  I’ve added some highlights along the way, with command full names, aliases, and useful arguments — but not <em>all</em> arguments.</p>
<h2 id="sessions">Sessions</h2>
<p>First things first.  Let’s figure out what I have.</p>
<h3 id="listing-sessions">Listing sessions</h3>
<dl>
<dt>command</dt>
<dd><code>list-sessions</code></dd>
<dt>alias</dt>
<dd><code>ls</code></dd>
</dl>
<p>I can list sessions with <code>list-sessions</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ tmux list-sessions
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">0: 3 windows (created Wed Nov 18 22:25:18 2020) (attached)
</span></span><span class="line"><span class="cl">2: 1 windows (created Sat Nov 21 12:08:28 2020)</span></span></code></pre>
</figure><p>This shows two sessions.  The first one — currently attached, which means its the one I’m typing in right now — contains three windows, and has been open a few days.  The other is open with some work stuff.  Yes, I know.  On a Saturday.  I’m working on that &ldquo;life/work balance&rdquo; thing.</p>
<p>By writing a blog post.</p>
<p>Whatever.</p>
<p>Anyways, that number on the start of each entry identifies the session.  It starts at zero, and keeps going up with each new session until you quit all your tmux sessions and start again.  Quitting a session won’t affect the numbering.  <code>2</code> is the name of the session, and that stayed true even when I quit session <code>1</code>.</p>
<h3 id="switching-to-different-sessions">Switching to different sessions</h3>
<dl>
<dt>command</dt>
<dd><code>switch-client</code></dd>
<dt>alias</dt>
<dd><code>switchc</code></dd>
<dt>shortcut</dt>
<dd><code>C-b )</code> / <code>C-b (</code></dd>
<dt>options</dt>
<dd><code>-t N</code>  target</dd>
<dd><code>-n</code>    next</dd>
<dd><code>-p</code>    previous</dd>
</dl>
<p>Used to be I’d get at that other session by opening a new tab in my terminal and telling <code>tmux</code> to attach to it, making sure to detach it from whatever other connections I may have had open.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">tmux attach -d -t 2</span></span></code></pre>
</figure><p>Then I learned that we can switch to my other sessions with <code>switch-client</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:switch-client -t 2
</span></span><span class="line"><span class="cl">:ls
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">0: 3 windows (created Wed Nov 18 22:25:18 2020)
</span></span><span class="line"><span class="cl">2: 1 windows (created Sat Nov 21 12:08:28 2020) (attached)</span></span></code></pre>
</figure><p>We can cycle through sessions without targeting them, too.  A <code>-n</code> argument cycles to the next, while <code>-p</code> cycles to the previous.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:switch-client -n</span></span></code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>Okay, key bindings might help here.  Cycle through your Tmux sessions with <kbd>C-b )</kbd> and <kbd>C-b (</kbd>.</p>
</blockquote>
<p>I don’t think so much about tabbed terminals anymore.  I do forget which session holds work stuff and which holds site stuff, though.</p>
<h3 id="renaming-sessions">Renaming sessions</h3>
<dl>
<dt>command</dt>
<dd><code>rename-session</code></dd>
<dt>shortcut</dt>
<dd><em>C-b $</em></dd>
<dt>alias</dt>
<dd><code>rename</code></dd>
<dt>usage</dt>
<dd><code>rename -t N &lt;name&gt;</code></dd>
<dt>options</dt>
<dd><code>-t</code>  target</dd>
</dl>
<p>I’m not stuck with the tmux-assigned session numbers for identification. I can rename them!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:rename-session -t 0 site
</span></span><span class="line"><span class="cl">:rename -t 2 work</span></span></code></pre>
</figure><p>Does that help?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:ls
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">site: 3 windows (created Wed Nov 18 22:25:18 2020) (attached)
</span></span><span class="line"><span class="cl">work: 1 windows (created Sat Nov 21 12:08:28 2020)</span></span></code></pre>
</figure><p>It sure does.  Oh and it sorts the listing alphabetically.  Good to know.</p>
<p>With several sessions going at once — it happens sometimes — names tell me what I intended to do with my time.  Makes switching to a targeted session easier for me as well.</p>
<p>I gave each of my sessions a purpose.  Now.  What’s going on with the windows <em>inside</em> the sessions?</p>
<h2 id="windows">Windows</h2>
<h3 id="listing-windows">Listing windows</h3>
<dl>
<dt>command</dt>
<dd><code>list-windows</code></dd>
<dt>alias</dt>
<dd><code>lsw</code></dd>
<dt>options</dt>
<dd><code>-a</code>  all</dd>
</dl>
<p><code>list-windows</code> summarizes the windows in my current session.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:list-windows
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">1: zsh* (2 panes) [282x65] [layout eb16,282x65,0,0{142x65,0,0,0,139x65,143,0,1}] @0 (active)
</span></span><span class="line"><span class="cl">2: zsh#- (1 panes) [282x65] [layout c59f,282x65,0,0,2] @1
</span></span><span class="line"><span class="cl">3: zsh# (1 panes) [282x65] [layout c5a0,282x65,0,0,3] @2</span></span></code></pre>
</figure><p>Let’s see.  There’s a window with two panes, one of which is a Zsh session. There’s a second Zsh session.  And — uh — a third Zsh session.</p>
<p>I can even list every window in every session!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:lsw -a
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">site:1: zsh* (2 panes) [282x65]
</span></span><span class="line"><span class="cl">site:2: zsh#- (1 panes) [282x65]
</span></span><span class="line"><span class="cl">site:3: zsh# (1 panes) [282x65]
</span></span><span class="line"><span class="cl">work:1: zsh* (1 panes) [282x63]</span></span></code></pre>
</figure><p>That’s not very helpful. The named sessions help clarify things somewhat, but the windows are just a lot of Zsh.</p>
<p>Let’s fix that.</p>
<h3 id="renaming-windows">Renaming windows</h3>
<dl>
<dt>command</dt>
<dd><code>rename-window</code></dd>
<dt>alias</dt>
<dd><code>renamew</code></dd>
<dt>usage</dt>
<dd><code>rename-window -t N &lt;NAME&gt;</code></dd>
<dt>options</dt>
<dd><code>-t N</code>  target window</dd>
</dl>
<p>I can rename the windows within my session.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:rename-window -t 1 writing
</span></span><span class="line"><span class="cl">:renamew -t 2 hugo
</span></span><span class="line"><span class="cl">:renamew -t 3 kexp</span></span></code></pre>
</figure><p>There we go.  I’m writing this post in <a href="/card/neovim/">card/Neovim</a>, serving my site with <a href="/card/hugo/">card/Hugo</a> locally for review, and listening to the <a href="/card/kexp/">card/KEXP</a> stream via <code>mplayer</code>.</p>
<p>Heck, I can rename windows in my other session if I like.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:rename-window -t work:1 compiling</span></span></code></pre>
</figure><p>Does <em>that</em> help?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">:lsw -a
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">site:1: writing* (2 panes) [282x65]
</span></span><span class="line"><span class="cl">site:2: hugo# (1 panes) [282x65]
</span></span><span class="line"><span class="cl">site:3: kexp#- (1 panes) [282x65]
</span></span><span class="line"><span class="cl">work:1: compiling* (1 panes) [282x65]</span></span></code></pre>
</figure><p>It does!  My sessions and windows all make sense!  More or less.</p>
<p>Some folks might prefer naming their windows according to the current process. Maybe even automating that process.  For my own brain, a named purpose is generally more informative and more persistent than any executable.</p>
<p>So much more I could learn, but this covers enough to call it a post.</p>
<p>Besides, I need to get back to work.</p>
<h2 id="resources">Resources</h2>
<p>Where did I get all this?</p>
<ul>
<li><a href="https://tmuxcheatsheet.com/">tmux cheat sheet</a></li>
<li><a href="https://linux.die.net/man/1/tmux">tmux man page</a> — which you can get at on your own system with <code>man tmux</code></li>
</ul>
]]></content:encoded>
</item>
<item>
  <title>Post: From Dotfiles to Org File</title>
  <link>https://randomgeekery.org/post/2020/04/from-dotfiles-to-org-file/</link>
  <pubDate>Tue, 28 Apr 2020 01:36:54 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/04/from-dotfiles-to-org-file/</guid>
  <description>I read Literate Configuration by Diego Zamboni. Now I want to replace my Dotbot-managed dotfiles with an card/Org file.
Literate Configuration? Literate configuration comes out of literate programming, which mixes code and text about the code in a single document. Okay yes. Like code comments. Where literate programming gets more interesting than comments is how it “tangles” snippets together, creating files out of these code snippets you’ve described. It’ll be a little easier to understand when you try it.</description>
   <category>post</category> 
   <category>post</category> 
   <category>emacs</category>  <category>shell</category>  <category>orgmode</category>  <category>orgconfig</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>at 1:30am they're all good ideas</h2><p><img src="/post/2020/04/../../../attachments/img/2020/cover-2020-04-28.png" alt="attachments/img/2020/cover-2020-04-28.png"/></p>
<p>I read <a href="https://leanpub.com/lit-config/">Literate Configuration</a> by <a href="https://zzamboni.org/">Diego Zamboni</a>. Now I want to replace my <a href="https://github.com/anishathalye/dotbot">Dotbot</a>-managed dotfiles with an <a href="/card/org/">card/Org</a> file.</p>
<h2 id="literate-configuration">Literate Configuration?</h2>
<p>Literate configuration comes out of <a href="http://literateprogramming.com/index.html">literate programming</a>, which mixes code and text about the code in a single document. Okay yes. Like code comments. Where literate programming gets more interesting than comments is how it &ldquo;tangles&rdquo; snippets together, creating files out of these code snippets you’ve described. It’ll be a little easier to understand when you try it. But you can describe the reasoning behind your code or look at your code as high level components.</p>
<p>Folks still argue whether literate programming is a useful approach to software development. But it could be a good way to handle config files. Personal configuration tends to collect disparate elements with little organization. Weaving them together in a single document could help create a coherent story of how you use your systems.</p>
<p>Diego Zamboni’s booklet includes 17 pages of instruction and 80 pages of sample config for Emacs, the <a href="https://www.hammerspoon.org/">Hammerspoon</a> macOS automation tool, and the <a href="https://elv.sh/">Elvish</a> shell, all of which you can also find <a href="https://zzamboni.org/post/2017-12-17-my-emacs-configuration-with-commentary/">on his blog</a>. I have no regrets about spending $5 on <em>Literate Configuration</em>. The
formatting is better, for one thing.</p>
<h2 id="dotfiles">Dotfiles?</h2>
<p>An informal reference to one person’s collection of configurations and settings. They’re named for the common Unix convention of using a leading dot in config filenames: <code>.zshrc</code>, for example. Many folks, including me, like to keep those dotfiles in version control. Makes it easier to track changes or roll back when something doesn’t work like you thought it would. Also simplifies setting up new machines.</p>
<p>You can find a nice introductory site for the version-controlled dotfiles approach on <a href="https://dotfiles.github.io/">Github</a>.</p>
<h2 id="in-an-org-file">In an Org file?</h2>
<p>Well of course. What did you think I was going to use — <a href="https://github.com/jostylr/literate-programming">Markdown</a>? <a href="https://slott56.github.io/PyLit-3/_build/html/index.html">reStructuredText</a>? <a href="https://aimlesslygoingforward.com/blog/2019/10/02/roguelike-tutorial-up-to-date-and-literate/">Asciidoctor</a>?</p>
<p>Actually those are pretty cool. I could maybe work up an extension for more pleasing notation, and — no! I already started this with Org mode. I can finish this with Org mode.</p>
<p>Maybe later, Asciidoctor.</p>
<p>Yeah, Org. <a href="https://orgmode.org/worg/org-contrib/babel/">Babel</a> lets Org execute and/or <a href="https://orgmode.org/manual/Extracting-Source-Code.html#Extracting-Source-Code">extract</a> source code. It supports a long list of <a href="https://orgmode.org/worg/org-contrib/babel/languages.html">languages</a>. I don’t need to find or write extensions for basic functionality.</p>
<h2 id="prepare-org-mode">Prepare Org mode</h2>
<p>Babel used to be an extension to Org, but it’s been a core part of the framework for a bit now. Thing is, Babel is powerful and a little dangerous. You need to give it permission.</p>
<p><strong><code>~/.emacs</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">org</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:ensure</span> <span class="nv">org-plus-contrib</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:defer</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:custom</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">org-confirm-babel-evaluate</span> <span class="no">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">; ...</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:config</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">org-babel-do-load-languages</span>
</span></span><span class="line"><span class="cl">   <span class="ss">&#39;org-babel-load-languages</span>
</span></span><span class="line"><span class="cl">   <span class="o">&#39;</span><span class="p">((</span><span class="nv">shell</span> <span class="o">.</span> <span class="no">t</span><span class="p">))))</span> </span></span></code></pre>
</figure><ul>
<li><code>shell</code> is a general-purpose mode that covers <code>sh</code>, <code>bash</code>, <code>zsh</code>, and so on.</li>
</ul>
<p>Babel wants to know what languages it can load. I’m only tangling shell files, so that’s all I put in <code>org-babel-load-languages</code>.</p>
<p>By default, Babel requests confirmation from you for every code block it handles. That’s smart, but also annoying. Disabling <code>org-confirm-babel-evaluate</code> means I’m okay with Babel executing or extracting any code it finds. It also means I need to ensure that my code blocks don’t request any dangerous actions. Leave this setting enabled if smart matters more to you than annoying.</p>
<blockquote>
<p><strong>Correction</strong></p>
<p>The Babel settings I added are for code <em>extraction</em>, not code evaluation. Babel extracts anything you want. <a href="https://orgmode.org/manual/Evaluating-Code-Blocks.html#Evaluating-Code-Blocks">Code evaluation</a> is a different feature, and not needed for this post. Skip my <code>:custom</code> and <code>:config</code> items if you’re just tangling.</p>
</blockquote>
<p>Zamboni’s booklet provides directions for automatic export on save, but I’m still new to this. I’ll stick with manually triggering extraction for now.</p>
<h2 id="my-literate-config">My literate config</h2>
<p>Let’s keep my starting point really really simple. Just a little bit out of my <a href="https://www.zsh.org/">Zsh</a> config.</p>
<p><strong><code>config.org</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="cs">#+title</span><span class="c">: My config</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gh">*</span><span class="gs"> Notes</span>
</span></span><span class="line"><span class="cl"><span class="nb">{{{kbd(C-c C-v t)}}}</span> to tangle until I&#39;m ready to add hooks
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gh">*</span><span class="gs"> zsh</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">**</span> zshenv
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Loaded for all sessions.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">#+begin_src </span><span class="cs">shell</span><span class="c"> :tangle ~/.zshenv
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nv">EDITOR</span><span class="o">=</span><span class="s2">&#34;vim&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c">#+end_src</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">**</span> zshrc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Loaded for interactive sessions
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">#+begin_src </span><span class="cs">shell</span><span class="c"> :tangle ~/.zshrc
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">source</span> ~/.config/broot/launcher/bash/br
</span></span><span class="line"><span class="cl"><span class="c">#+end_src</span></span></span></code></pre>
</figure><p>Then I hit <code>C-c C-v t</code> to run <code>org-babel-tangle</code>, which tells me:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >Tangled 2 code blocks from config.org</code></pre>
</figure><p>So I look in my files.</p>
<p><strong><code>~/.zshenv</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nv">EDITOR</span><span class="o">=</span><span class="s2">&#34;vim&#34;</span></span></span></code></pre>
</figure><p><strong><code>~/.zshrc</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nb">source</span> ~/.config/broot/launcher/bash/br</span></span></code></pre>
</figure><p>Yay it worked!</p>
<p>There’s not much being &ldquo;tangled&rdquo; though, is there?</p>
<p>I’ve been playing with <a href="https://antigen.sharats.me/">Antigen</a>, but I may go back to <a href="https://ohmyz.sh/">Oh My Zsh</a>. Let’s put the Antigen stuff in its own block.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="cs">#+name</span><span class="c">: antigen</span>
</span></span><span class="line"><span class="cl"><span class="c">#+begin_src </span><span class="cs">shell</span><span class="c">
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">source</span> ~/.dotfiles/zsh/antigen.zsh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen use oh-my-zsh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen bundle git
</span></span><span class="line"><span class="cl">antigen bundle nvm
</span></span><span class="line"><span class="cl">antigen bundle pyenv
</span></span><span class="line"><span class="cl">antigen bundle rbenv
</span></span><span class="line"><span class="cl">antigen bundle taskwarrior
</span></span><span class="line"><span class="cl">antigen bundle tmux
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen bundle zsh-users/zsh-syntax-highlighting
</span></span><span class="line"><span class="cl">antigen theme gozilla
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen apply
</span></span><span class="line"><span class="cl"><span class="c">#+end_src</span></span></span></code></pre>
</figure><p>Now we update the <code>~/.zshrc</code> block to tangle with <code>:noweb yes</code> and include that new block.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-org" data-lang="org"><span class="line"><span class="cl"><span class="c">#+begin_src </span><span class="cs">shell</span><span class="c"> :tangle ~/.zshrc :noweb yes
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="s">&lt;&lt;antigen&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">source /home/ran</span>dom/.config/broot/launcher/bash/br
</span></span><span class="line"><span class="cl"><span class="c">#+end_src</span></span></span></code></pre>
</figure><p>C-c C-v t again, and there it is!</p>
<p><strong><code>~/.zshrc</code></strong></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nb">source</span> ~/.dotfiles/zsh/antigen.zsh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen use oh-my-zsh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen bundle brew
</span></span><span class="line"><span class="cl">antigen bundle git
</span></span><span class="line"><span class="cl">antigen bundle nvm
</span></span><span class="line"><span class="cl">antigen bundle pyenv
</span></span><span class="line"><span class="cl">antigen bundle rbenv
</span></span><span class="line"><span class="cl">antigen bundle taskwarrior
</span></span><span class="line"><span class="cl">antigen bundle tmux
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen bundle zsh-users/zsh-syntax-highlighting
</span></span><span class="line"><span class="cl">antigen theme gozilla
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">antigen apply
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">source</span> /home/random/.config/broot/launcher/bash/br</span></span></code></pre>
</figure><p>Okay now to finish getting the rest of my zsh config. Oh, and put <code>config.org</code> in version control.</p>
<p><strong>Emacs code extraction key bindings</strong></p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Function</th>
<th>Action</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>C-c C-v t</code></td>
<td><code>org-babel-tangle</code></td>
<td>Extract and write code blocks in the current Org file</td>
</tr>
</tbody>
</table>
]]></content:encoded>
</item>
<item>
  <title>Post: Getting File Info From The Shell</title>
  <link>https://randomgeekery.org/post/2020/04/getting-file-info-from-the-shell/</link>
  <pubDate>Tue, 21 Apr 2020 15:11:17 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/04/getting-file-info-from-the-shell/</guid>
  <description>also, it is time to vacuum my desk again
Use file for everyday summaries. Use ExifTool when you need to know everything.
The problem I am once again puttering around with my site.
I have an image here.
I lived in this basement a few years ago
Do I need to resize it? Should find out how big it is first.
$ exa basement-original.jpg Permissions Size User Date Modified Git Name .</description>
   <category>post</category> 
   <category>post</category> 
   <category>files</category>  <category>shell</category>  <category>exiftool</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>I could right click for properties but the mouse is way over there</h2><p><img src="/post/2020/04/../../../attachments/img/2020/cover-2020-04-21.jpg" alt="attachments/img/2020/cover-2020-04-21.jpg"/>
also, it is time to vacuum my desk again</p>
<p>Use <a href="https://en.wikipedia.org/wiki/File_%28command%29"><code>file</code></a> for everyday summaries. Use <a href="https://exiftool.org/">ExifTool</a> when you need to know <strong>everything</strong>.</p>
<h2 id="the-problem">The problem</h2>
<p>I am once again puttering around with my site.</p>
<p>I have an image here.</p>
<p><img src="/post/2020/04/../../../attachments/img/2020/basement-original.jpg" alt="attachments/img/2020/basement-original.jpg"/>
I lived in this basement <a href="/post/2017/03/geekish-update/">a few years ago</a></p>
<p>Do I need to resize it? Should find out how big it is first.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ exa basement-original.jpg
Permissions Size User   Date Modified Git Name
.rw-rw-r--  131k random 20 Apr  9:04   -- basement-original.jpg</code></pre>
</figure><p>No I don’t mean file size. I mean geometry. How many pixels wide, and how many high? <a href="https://the.exa.website/">exa</a> <em>is</em> nifty though. You should try it out.</p>
<p>I don’t want to leave my shell session to do it either. Sure that’s just stubbornness on my part. I <em>could</em> get the necessary information from my desktop’s file browser, but I type quicker than I click.</p>
<h2 id="file-is-everywhere"><code>file</code> is everywhere</h2>
<p><code>file</code> is a standard utility, which means it’s available on pretty much any Unix or Unix-like system you use. It works by matching a file’s internal details to entries in a <a href="https://linux.die.net/man/5/magic"><code>magic</code></a> database and reporting its findings. <code>magic</code> can be extended, though the details are beyond me for now.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ file basement-original.jpg
basement-original.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 72x72, segment length 16, progressive, precision 8, 800x487, frames 3</code></pre>
</figure><p><code>basement-original.jpg</code> is a jpeg image. Yep, that checks out. Let’s see — 800x487. That looks like a geometry value. 800 pixels wide and 487 pixels high, if I remember the order right.</p>
<p>I want more detail, but this is all I can get from <code>file</code>. That’s what ExifTool is for.</p>
<h2 id="exiftool-knows-everything">ExifTool knows everything</h2>
<p>ExifTool lets me read and edit metadata for images, music, PDF, Word files, videos — a dizzying assortment of files are <a href="https://exiftool.org/#supported">supported</a>.</p>
<p>You can install ExifTool with the downloads listed on <a href="https://exiftool.org/">its site</a> or using your favorite package manager.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ brew install exiftool</code></pre>
</figure><p>Default usage returns every bit of information ExifTool thinks is relevant for the file type.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ exiftool basement-original.jpg
ExifTool Version Number         : 11.85
File Name                       : basement-original.jpg
Directory                       : .
File Size                       : 129 kB
File Modification Date/Time     : 2020:04:20 09:04:28-07:00
File Access Date/Time           : 2020:04:21 10:08:57-07:00
File Inode Change Date/Time     : 2020:04:20 09:04:28-07:00
File Permissions                : rw-rw-r--
File Type                       : JPEG
File Type Extension             : jpg
MIME Type                       : image/jpeg
JFIF Version                    : 1.01
Resolution Unit                 : inches
X Resolution                    : 72
Y Resolution                    : 72
Image Width                     : 800
Image Height                    : 487
Encoding Process                : Progressive DCT, Huffman coding
Bits Per Sample                 : 8
Color Components                : 3
Y Cb Cr Sub Sampling            : YCbCr4:4:4 (1 1)
Image Size                      : 800x487
Megapixels                      : 0.390</code></pre>
</figure><p>800 pixels wide, 487 pixels high. I remembered correctly! While I’m here, let’s look at ways to fine-tune the output.</p>
<p>We could cut down on the noise by specifying the fields or tags we want to see.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ exiftool -ImageWidth -ImageHeight basement-original.jpg
Image Width                     : 800
Image Height                    : 487</code></pre>
</figure><p>We could use <code>-S</code> for more compact output focused less on tabular layout.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ exiftool -S -ImageWidth -ImageHeight basement-original.jpg
ImageWidth: 800
ImageHeight: 487</code></pre>
</figure><p>We could tell ExifTool to format its report for processing by <a href="/card/csv/">CSV</a> or <a href="https://github.com/burningtree/awesome-json">JSON</a> tools.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ exiftool -j basement-original.jpg
[{
  &#34;SourceFile&#34;: &#34;basement-original.jpg&#34;,
  &#34;ExifToolVersion&#34;: 11.85,
  &#34;FileName&#34;: &#34;basement-original.jpg&#34;,
  &#34;Directory&#34;: &#34;.&#34;,
  &#34;FileSize&#34;: &#34;129 kB&#34;,
  &#34;FileModifyDate&#34;: &#34;2020:04:20 09:04:28-07:00&#34;,
  &#34;FileAccessDate&#34;: &#34;2020:04:21 10:08:57-07:00&#34;,
  &#34;FileInodeChangeDate&#34;: &#34;2020:04:20 09:04:28-07:00&#34;,
  &#34;FilePermissions&#34;: &#34;rw-rw-r--&#34;,
  &#34;FileType&#34;: &#34;JPEG&#34;,
  &#34;FileTypeExtension&#34;: &#34;jpg&#34;,
  &#34;MIMEType&#34;: &#34;image/jpeg&#34;,
  &#34;JFIFVersion&#34;: 1.01,
  &#34;ResolutionUnit&#34;: &#34;inches&#34;,
  &#34;XResolution&#34;: 72,
  &#34;YResolution&#34;: 72,
  &#34;ImageWidth&#34;: 800,
  &#34;ImageHeight&#34;: 487,
  &#34;EncodingProcess&#34;: &#34;Progressive DCT, Huffman coding&#34;,
  &#34;BitsPerSample&#34;: 8,
  &#34;ColorComponents&#34;: 3,
  &#34;YCbCrSubSampling&#34;: &#34;YCbCr4:4:4 (1 1)&#34;,
  &#34;ImageSize&#34;: &#34;800x487&#34;,
  &#34;Megapixels&#34;: 0.390
}]</code></pre>
</figure><p>Hang on. I feel compelled to be a bit fancy.</p>
<p><strong>Piping to <a href="https://github.com/BurntSushi/xsv">xsv</a> for aggregate information about site images.</strong></p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ exiftool -csv -r content \
  | xsv search -s MIMEType &#39;image/.&#43;&#39; \
  | xsv select ImageWidth,ImageHeight \
  | xsv stats \
  | xsv select field,min,max,mean \
  | xsv table
  682 directories scanned
  419 image files read
field        min  max   mean
ImageWidth   27   5120  1337.1172248803825
ImageHeight  27   4032  1009.7368421052624</code></pre>
</figure><p>Hm. I must have some icon files in there somewhere.</p>
<p>For more fun, point it at some music files. Heck, it will try to give useful information for text!</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ exiftool index.adoc
ExifTool Version Number         : 11.85
File Name                       : index.adoc
Directory                       : .
File Size                       : 4.8 kB
File Modification Date/Time     : 2020:04:21 12:58:13-07:00
File Access Date/Time           : 2020:04:21 12:58:14-07:00
File Inode Change Date/Time     : 2020:04:21 12:58:13-07:00
File Permissions                : rw-rw-r--
File Type                       : TXT
File Type Extension             : txt
MIME Type                       : text/plain
MIME Encoding                   : us-ascii
Newlines                        : Unix LF
Line Count                      : 189
Word Count                      : 619</code></pre>
</figure><p>Here’s the <code>file</code> output in comparison.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ file index.adoc
index.adoc: ASCII text</code></pre>
</figure><p>I could probably write some <code>magic</code> configuration to get more information. But installing ExifTool was easier.</p>
<h2 id="good-enough">Good enough?</h2>
<p><code>file</code> is universally available and gave me the details I needed today. ExifTool gives me everything I needed and then some. I’ll most likely keep it available on my systems.</p>
<p>And no, I’m not going to worry about resizing that image for now.</p>
]]></content:encoded>
</item>
</channel>
</rss>
