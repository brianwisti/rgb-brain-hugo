<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>mastodononRandom Geekery</title>
    <link>https://randomgeekery.org/tags/mastodon/</link>
    <description>
      Recent contentinmastodon on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 15 Aug 2021 00:00:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/mastodon/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Tooting with Python</title>
  <link>https://randomgeekery.org/post/2021/08/tooting-with-python/</link>
  <pubDate>Sun, 15 Aug 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/08/tooting-with-python/</guid>
  <description>What? Let’s set up a Mastodon application with Python to read and post toots.
How? card/Python is the second best tool for any job in 2021, which makes it an excellent glue language. I’ve been centering my site workflow around it. That means the Mastodon.py library, which I have dabbled with once or twice before.
Why? Because I’ve let the card/IndieWeb social aspects of this site go stale and one step to fixing that is restoring POSSE automation.</description>
   <category>post</category> 
   <category>post</category> 
   <category>python</category>  <category>mastodon</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Spent the day goofing off with Mastodon.py</h2><h2 id="what">What?</h2>
<p>Let&rsquo;s set up a <a href="https://joinmastodon.org">Mastodon</a> application with Python to read and post toots.</p>
<h3 id="how">How?</h3>
<p><a href="/card/python/">card/Python</a> is the <a href="https://twitter.com/glyph/status/1426414435275448324">second best</a> tool for any job in 2021, which makes it an excellent glue language.  I&rsquo;ve been centering my site workflow around it. That means the <a href="https://mastodonpy.readthedocs.io/en/stable/">Mastodon.py</a> library, which I have dabbled with once or twice before.</p>
<h3 id="why">Why?</h3>
<p>Because I&rsquo;ve let the <a href="/card/indieweb/">card/IndieWeb</a> social aspects of this site go stale and one step to fixing that is restoring POSSE automation. The first part of <em>that</em> is making sure I remember how to automate posting to Mastodon.</p>
<h2 id="ok-fine-get-on-with-it">Ok fine; get on with it</h2>
<p>Course, you&rsquo;re going to need an account at a Mastodon instance.  I have my
account on <a href="https://hackers.town/@randomgeek">one</a> of many. You can find one suitable for your tastes at
[Mastodon instances](<a href="https://instances.social">https://instances.social</a>.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>If you don&rsquo;t already know Mastodon, think of it as island versions of <a href="https://twitter.com">Twitter</a>.  Each instance has its own practices and policies depending on who runs it, so it&rsquo;s very much a &ldquo;hanging out at a friend&rsquo;s house&rdquo; experience. Lots more details, but much more than I feel like covering.</p>
<p>It&rsquo;s fun. You should try it out maybe. You can even host your own instance if you&rsquo;re hard-core into DIY.</p>
</blockquote>
<h3 id="registering-your-application">Registering your application</h3>
<p>I have 2FA enabled, so it turned out to be easier for me to set up the application in account preferences (under the &ldquo;Development&rdquo; section).</p>
<p>I entered an application name, added my Website for &ldquo;Application website,&rdquo; and selected the scopes that are important to me for today&rsquo;s explorations.</p>
<dl>
<dt><code>read</code></dt>
<dd>read all your account&rsquo;s data</dd>
<dt><code>write:statuses</code></dt>
<dd>publish statuses</dd>
</dl>
<p>That&rsquo;s enough to cover today&rsquo;s play.  I&rsquo;m not creating my own full-fledged Mastodon client so I don&rsquo;t need every permission.</p>
<h3 id="connecting-your-application">Connecting your application</h3>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Dict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mastodon</span> <span class="kn">import</span> <span class="n">Mastodon</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.pretty</span> <span class="kn">import</span> <span class="n">pprint</span></span></span></code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>Spoiler alert: yes I&rsquo;ll be using <a href="https://rich.readthedocs.io">Rich</a> and <a href="https://docs.python.org/3/library/dataclasses.html">dataclasses</a> along with Mastodon.py.  Nothing fancy planned with Rich today. It&rsquo;s just part of my regular toolkit.</p>
<p>The dataclasses library comes standard with Python these days, but you may need to install the others::</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install --upgrade rich mastodon</span></span></code></pre>
</figure></blockquote>
<p>The Mastodon instance developer panel gives me the details I need to connect. I set them as workspace environment variables with <a href="https://direnv.net">direnv</a> out of habit, but you could just as easily hard-code them in Python or define in a config file of your own.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">API_BASE</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;API_BASE&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">CLIENT_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;CLIENT_KEY&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">CLIENT_SECRET</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;CLIENT_SECRET&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ACCESS_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;ACCESS_TOKEN&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><p>From my first few attempts writing this post, I know I&rsquo;ll want a class to organize views for the connection.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@dataclass</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Provides convenience methods for querying an instance and posting toots.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">mastodon</span><span class="p">:</span> <span class="n">Mastodon</span></span></span></code></pre>
</figure><p>Once I have a connection, I don&rsquo;t care about those application config details. Rather than storing them in the instance, I&rsquo;ll use a class method to handle the work and return my new App with only the details I <em>do</em> care about.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@classmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="bp">cls</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">client_key</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">CLIENT_KEY</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">api_base_url</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">API_BASE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">client_secret</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">CLIENT_SECRET</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">access_token</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">ACCESS_TOKEN</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span> <span class="o">-&gt;</span> <span class="s2">&#34;App&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Return an App connected to a specific Mastodon instance.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">mastodon</span> <span class="o">=</span> <span class="n">Mastodon</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">client_id</span><span class="o">=</span><span class="n">client_key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">api_base_url</span><span class="o">=</span><span class="n">api_base_url</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">client_secret</span><span class="o">=</span><span class="n">client_secret</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">access_token</span><span class="o">=</span><span class="n">access_token</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">cls</span><span class="p">(</span><span class="n">mastodon</span><span class="o">=</span><span class="n">mastodon</span><span class="p">)</span></span></span></code></pre>
</figure><p>Basic setup&rsquo;s done. Let&rsquo;s create an App and see if it worked.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">app</span><span class="p">)</span></span></span></code></pre>
</figure><pre style="font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">App</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">mastodon</span>=<span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">mastodon.Mastodon.Mastodon</span><span style="color: #000000; text-decoration-color: #000000"> object at </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0x7ff14f1e8850</span><span style="font-weight: bold">&gt;)</span>
</pre>
<blockquote>
<p>[!NOTE] Exporting Rich output
My code doesn&rsquo;t look <em>exactly</em> like what I&rsquo;ve shared here. I take advantage of Rich&rsquo;s export features to simplify sharing program output.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">rich</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">rich</span><span class="o">.</span><span class="n">reconfigure</span><span class="p">(</span><span class="n">record</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">rich</span><span class="o">.</span><span class="n">get_console</span><span class="p">()</span><span class="o">.</span><span class="n">save_html</span><span class="p">(</span><span class="s2">&#34;output.html&#34;</span><span class="p">,</span> <span class="n">inline_styles</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span></span></span></code></pre>
</figure><p>The extra bits change two aspects of Rich&rsquo;s default <a href="https://rich.readthedocs.io/en/stable/reference/console.html#rich.console.Console">Console</a> behavior:</p>
<ul>
<li>record output so it can be exported by <code>save_text</code> or <code>save_html</code> and I can add it here in my post</li>
<li>set console width to 80, simplifying display of exported output within the confines of a Web page</li>
</ul>
<p>After <code>app</code> does its thing, I export any output as formatted HTML, where I can edit as needed and insert here.</p>
</blockquote>
<p>So anyways, we verified that our connection works. Let&rsquo;s take a look at what that connection provides.</p>
<h3 id="the-instance">The instance</h3>
<p>Mastodon.py provides methods specifically for <a href="https://mastodonpy.readthedocs.io/en/stable/#reading-data-instances">reading instance details</a>. For example, <a href="https://mastodonpy.readthedocs.io/en/stable/#mastodon.Mastodon.instance_health"><code>instance_health</code></a> tells of if a quick health check succeeded.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">app</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">instance_health</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [green]healthy[/green]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [red][b]not[/b] healthy![/red]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span></span></span></code></pre>
</figure><pre style="font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Connection instance is <span style="color: #008000; text-decoration-color: #008000">healthy</span>
</pre>
<h4 id="instance-details">Instance details</h4>
<p>Most of the querying methods return a dictionary or a list of dictionaries. <a href="https://mastodonpy.readthedocs.io/en/stable/#mastodon.Mastodon.instance"><code>Mastodon.instance</code></a> returns an <a href="https://mastodonpy.readthedocs.io/en/stable/#instance-dicts">instance dict</a>.</p>
<p>I don&rsquo;t feel like showing every item in that dictionary, though. Let&rsquo;s pick a few to make a decent summary. Oh hey, and let&rsquo;s cache that dictionary to disk so I&rsquo;m not making a fresh API query every time I check this post while I&rsquo;m writing it.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Be considerate about server resources for Mastodon. Most instances are run as personal projects. There&rsquo;s no need for us to run up their AWS bill.</p>
</blockquote>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">stored</span><span class="p">(</span><span class="n">func</span><span class="p">:</span> <span class="n">Callable</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">filename</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="si">}</span><span class="s2">.json&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stored.inner for </span><span class="si">{</span><span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Loading data from </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Calling </span><span class="si">{</span><span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Writing data to </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="nb">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">inner</span></span></span></code></pre>
</figure><p>I can do proper memoization later. &ldquo;Look for a file before you hit the server&rdquo; is good enough for writing a blog post.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@stored</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">instance</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Return a dictionary of information about the connected instance.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">instance_summary</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Return a small dictionary of instance information.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">instance</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;uri&#34;</span><span class="p">,</span> <span class="s2">&#34;title&#34;</span><span class="p">,</span> <span class="s2">&#34;short_description&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="n">field</span><span class="p">:</span> <span class="n">instance</span><span class="p">[</span><span class="n">field</span><span class="p">]</span> <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="n">fields</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="p">[</span><span class="s2">&#34;contact_account&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">instance</span><span class="p">[</span><span class="s2">&#34;contact_account&#34;</span><span class="p">][</span><span class="s2">&#34;display_name&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">data</span></span></span></code></pre>
</figure><p>Time to look at that instance summary.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">app</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">instance_health</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [green]healthy[/green]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [red][b]not[/b] healthy![/red]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">instance_summary</span><span class="p">())</span></span></span></code></pre>
</figure><pre style="font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Connection instance is <span style="color: #008000; text-decoration-color: #008000">healthy</span>
stored.inner for instance
Calling instance
Writing data to instance.json
<span style="font-weight: bold">{</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'uri'</span>: <span style="color: #008000; text-decoration-color: #008000">'hackers.town'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'title'</span>: <span style="color: #008000; text-decoration-color: #008000">'hackers.town'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'short_description'</span>: <span style="color: #008000; text-decoration-color: #008000">"A bunch of technomancers in the fediverse. Keep it fairly clean please. This arcology is for all who wash up upon it's digital shore."</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'contact_account'</span>: <span style="color: #008000; text-decoration-color: #008000">'The_Gibson'</span>
<span style="font-weight: bold">}</span>
</pre>
<h3 id="reading-the-timelines">Reading the timelines</h3>
<p>Mastodon&rsquo;s <a href="https://mastodonpy.readthedocs.io/en/stable/#reading-data-timelines">timeline methods</a> provide different views of recent post activity, both public and private.  To simplify demonstration on this public blog post, I&rsquo;ll stick to <a href="https://mastodonpy.readthedocs.io/en/stable/#mastodon.Mastodon.timeline_public"><code>timeline_public</code></a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@stored</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">timeline_public</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">timeline_public</span><span class="p">()</span></span></span></code></pre>
</figure><p>The <a href="https://mastodonpy.readthedocs.io/en/stable/#toot-dicts">toot dict</a> also contains far more information than I need, so let&rsquo;s summarize those like with instances.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"> <span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">timeline_summary</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">timeline</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">timeline_public</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;date&#34;</span><span class="p">:</span> <span class="n">toot</span><span class="p">[</span><span class="s2">&#34;created_at&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;author&#34;</span><span class="p">:</span> <span class="n">toot</span><span class="p">[</span><span class="s2">&#34;account&#34;</span><span class="p">][</span><span class="s2">&#34;display_name&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;content&#34;</span><span class="p">:</span> <span class="n">toot</span><span class="p">[</span><span class="s2">&#34;content&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">toot</span> <span class="ow">in</span> <span class="n">timeline</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span></span></span></code></pre>
</figure><p>Adding <code>app.timeline_summary()</code> to the main block:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">app</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">instance_health</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [green]healthy[/green]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [red][b]not[/b] healthy![/red]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">instance_summary</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">timeline_summary</span><span class="p">(),</span> <span class="n">max_string</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span></span></span></code></pre>
</figure><pre style="font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Connection instance is <span style="color: #008000; text-decoration-color: #008000">healthy</span>
stored.inner for instance
Loading data from instance.json
<span style="font-weight: bold">{</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'uri'</span>: <span style="color: #008000; text-decoration-color: #008000">'hackers.town'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'title'</span>: <span style="color: #008000; text-decoration-color: #008000">'hackers.town'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'short_description'</span>: <span style="color: #008000; text-decoration-color: #008000">"A bunch of technomancers in the fediverse. Keep it fairly clean please. This arcology is for all who wash up upon it's digital shore."</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'contact_account'</span>: <span style="color: #008000; text-decoration-color: #008000">'The_Gibson'</span>
<span style="font-weight: bold">}</span>
stored.inner for timeline_public
Calling timeline_public
Writing data to timeline_public.json
<span style="font-weight: bold">[</span>
<span style="font-style: italic">    .. skipping a few ...</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="font-weight: bold">{</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'date'</span>: <span style="color: #008000; text-decoration-color: #008000">'2021-08-15 22:24:35+00:00'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'author'</span>: <span style="color: #008000; text-decoration-color: #008000">'Endless Screaming'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'content'</span>: <span style="color: #008000; text-decoration-color: #008000">'&lt;p&gt;AAAAAAAAAAAAAAAAAAAAH&lt;/p&gt;'</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="font-weight: bold">}</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="font-weight: bold">{</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'date'</span>: <span style="color: #008000; text-decoration-color: #008000">'2021-08-15 22:24:43.531000+00:00'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'author'</span>: <span style="color: #008000; text-decoration-color: #008000">'Lynne'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'content'</span>: <span style="color: #008000; text-decoration-color: #008000">'&lt;p&gt;This just touched a single topic that I’ve never heard being brought up anywh'</span>+<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">97</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="font-weight: bold">}</span>
<span style="font-weight: bold">]</span>
</pre>
<p>Nice. Looks like <code>content</code> is in HTML format. Need to remember that if I ever make a more interesting Mastodon client.</p>
<p>But I&rsquo;m ready to start tooting.</p>
<h3 id="writing">Writing</h3>
<p>Mastodon <a href="https://mastodonpy.readthedocs.io/en/stable/#writing-data-statuses">write methods</a> let us add toots, polls, replies, reblogs, faves. All that good stuff.</p>
<p>Let&rsquo;s stick with your basic toot for now.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">status_post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">status</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">visibility</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s2">&#34;direct&#34;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Post a toot to our connection, private unless we say otherwise.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">status_post</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">visibility</span><span class="o">=</span><span class="n">visibility</span><span class="p">)</span></span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">app</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">instance_health</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [green]healthy[/green]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [red][b]not[/b] healthy![/red]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">status_text</span> <span class="o">=</span> <span class="s2">&#34;Ignore me, just messing with Mastodon.py&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span><span class="o">.</span><span class="n">status_post</span><span class="p">(</span><span class="n">status_text</span><span class="p">)</span></span></span></code></pre>
</figure><p><figure>
    <img src="/attachments/img/2021/toot.jpg" title="It worked!" alt="toot screenshot"/><figcaption>It worked!</figcaption></figure></p>
<p>Okay my brain is fading. Should probably put away the keyboard soon.</p>
<h2 id="wrap-it-up">Wrap it up</h2>
<p>Am I done?</p>
<p>Well, no. I still need to turn this into a proper command line application that looks for the newest published blog post and posts a toot about it. But that&rsquo;s not going to happen in today&rsquo;s post.</p>
<p>I had fun, and that&rsquo;s the important part.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Got a Working glitch-soc Rails Dev Environment</title>
  <link>https://randomgeekery.org/post/2020/05/got-a-working-glitch-soc-rails-dev-environment/</link>
  <pubDate>Mon, 04 May 2020 23:26:21 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/05/got-a-working-glitch-soc-rails-dev-environment/</guid>
  <description>I wanted to build and test a development instance of glitch-soc, a friendly fork of Mastodon. I succeeded. But I am very tired now. Here are my notes, along with some after-the-fact editorializing.
It’s less tutorial and more confessional. I haven’t used Rails much since 4.0 was shiny. So there’s likely some common practice workflow that I don’t know yet. But I got it to work.
Install glitch-soc locally glitch-soc documentation refers you to Mastodon docs, Mastodon’s installation instructions seem focused on production installations.</description>
   <category>post</category> 
   <category>post</category> 
   <category>rails</category>  <category>mastodon</category>  <category>ruby</category>  <category>sort-of</category>  <category>mostly-rails</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>I remain ambivalent about Rails development</h2><p><figure>
    <img src="/../../../attachments/img/2020/cover-2020-05-04.png" alt="attachments/img/2020/cover-2020-05-04.png"/></figure></p>
<p>I wanted to build and test a development instance of <a href="https://glitch-soc.github.io/docs/"><code>glitch-soc</code></a>, a friendly fork of <a href="https://joinmastodon.org/">Mastodon</a>.  I succeeded.  But I am very tired now.  Here are my notes, along with some after-the-fact editorializing.</p>
<p>It’s less tutorial and more confessional.  I haven’t used Rails much since 4.0 was shiny.  So there’s likely some common practice workflow that I don’t know yet.  But I got it to work.</p>
<h2 id="install-glitch-soc-locally">Install glitch-soc locally</h2>
<p><code>glitch-soc</code> documentation refers you to <a href="https://docs.joinmastodon.org">Mastodon docs</a>, Mastodon’s <a href="https://docs.joinmastodon.org/admin/install/">installation instructions</a> seem focused on production installations.  I bounce back and forth between Mastodon’s <a href="https://github.com/tootsuite/mastodon">README</a> and its <a href="https://docs.joinmastodon.org/dev/setup/">developer documentation</a>.</p>
<p>The README says I need:</p>
<ul>
<li><a href="https://www.postgresql.org/">PostgreSQL</a> 9.5+</li>
<li><a href="https://redis.io/">Redis</a> 4+</li>
<li><a href="/card/ruby/">card/Ruby</a> 2.5+</li>
<li><a href="/card/node.js/">card/Node.js</a> 10.13+</li>
</ul>
<p><a href="https://github.com/rbenv/rbenv">rbenv</a> and <a href="https://github.com/nvm-sh/nvm">nvm</a> help with the language requirements, but this fresh <a href="https://manjaro.org/">Manjaro</a> partition lacks the other requirements.</p>
<h3 id="install-redis">Install Redis</h3>
<p>Used the <a href="https://wiki.archlinux.org/index.php/Redis">Arch wiki</a> as a guide.  Didn’t need to edit config, though.  Instance installed via <a href="https://wiki.manjaro.org/index.php?title=Pamac">Pamac</a> is already configured to only listen to <code>127.0.0.1</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> pamac install redis
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo systemctl start redis
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo systemctl <span class="nb">enable</span> redis
</span></span></code></pre>
</figure><dl>
<dt>Version installed</dt>
<dd>6.0</dd>
</dl>
<h3 id="install-postgresql">Install Postgresql</h3>
<p>Once again, going off the <a href="https://wiki.archlinux.org/index.php/PostgreSQL">Arch wiki entry</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> pamac install postgresql
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo -iu postgres
</span></span><span class="line"><span class="cl"><span class="gp">&gt;</span> initdb -D /var/lib/postgres/data
</span></span><span class="line"><span class="cl"><span class="gp">&gt;</span> <span class="nb">exit</span>
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo systemctl start postgresql.service
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo systemctl <span class="nb">enable</span> postgresql.service
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo -iu postgres
</span></span><span class="line"><span class="cl"><span class="gp">&gt;</span> createuser --interactive
</span></span><span class="line"><span class="cl"><span class="go">Enter name of role to add: random
</span></span></span><span class="line"><span class="cl"><span class="go">Shall the new role be a superuser? (y/n) y
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">&gt;</span> <span class="nb">exit</span>
</span></span><span class="line"><span class="cl"><span class="gp">$</span> createdb random
</span></span></code></pre>
</figure><p>That reminds me.  I want to finish reading <a href="https://theartofpostgresql.com/">The Art of PostgreSQL</a>.</p>
<dl>
<dt>Version installed</dt>
<dd>12.2</dd>
</dl>
<h3 id="clone-project-and-install-dev-dependencies">Clone project and install dev dependencies</h3>
<p>Not the required services.  I just installed those.  Languages and libraries.</p>
<h4 id="fork--clone-repo">fork &amp; clone repo</h4>
<p>Since I hope to contribute bug fixes someday, I’ll fork the <a href="https://github.com/glitch-soc/mastodon">repo</a> rather than just clone it.  I clone my fork instead.</p>
<p>Dev language is weird.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> git clone git@github.com:brianwisti/mastodon.git
</span></span><span class="line"><span class="cl"><span class="gp">$</span> <span class="nb">cd</span> mastodon
</span></span></code></pre>
</figure><p>The project’s <code>.ruby-version</code> file specifies Ruby 2.6.6.  Rbenv immediately
warns me that I lack the correct installed version.  It also doesn’t recognize
the version when I try installing it, so I must refresh <a href="https://github.com/rbenv/ruby-build">ruby-build</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> git -c ~/.rbenv/plugins/ruby-build pull
</span></span><span class="line"><span class="cl"><span class="gp">$</span> rbenv install
</span></span></code></pre>
</figure><p>2.6.6 is a bit more specific than &ldquo;2.5+&rdquo; but no big deal. Got the right Ruby
version. Time to install the gems.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> bundle install
</span></span></code></pre>
</figure><p>Oh hey what’s this? It seems relevant to my <a href="/card/indieweb/">interests</a></p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">⋮
</span></span><span class="line"><span class="cl">Post-install message from microformats:
</span></span><span class="line"><span class="cl">Prior to version 4.0.0, the microformats gem was named &#34;microformats2.&#34;</span></span></code></pre>
</figure><p>Adding a task to look more closely at <a href="https://github.com/microformats/microformats-ruby">microformats-ruby</a>.  It’s more active than <a href="https://github.com/microformats/mf2py">mf2py</a>.</p>
<p><a href="v">Yarn</a> manages the node-specific project dependencies.  Better install that.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> npm install -g yarn
</span></span></code></pre>
</figure><p>Okay now I can install the Node stuff.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> yarn install
</span></span><span class="line"><span class="cl"><span class="go">yarn install v1.22.4
</span></span></span><span class="line"><span class="cl"><span class="go">[1/6] Validating package.json...
</span></span></span><span class="line"><span class="cl"><span class="go">error @tootsuite/mastodon@: The engine &#34;node&#34; is incompatible with this module. Expected version &#34;&gt;=10.13 &lt;13&#34;. Got &#34;13.11.0&#34;
</span></span></span><span class="line"><span class="cl"><span class="go">error Found incompatible module.
</span></span></span><span class="line"><span class="cl"><span class="go">info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.
</span></span></span></code></pre>
</figure><p>At some point I should <a href="https://github.com/nvm-sh/nvm#calling-nvm-use-automatically-in-a-directory-with-a-nvmrc-file">enable</a> automatic <code>nvm use</code>.  Meanwhile I’ll just install.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Or maybe I could play with <a href="/card/volta/">card/Volta</a>.  Not today. Maybe later.</p>
</blockquote>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> nvm install
</span></span><span class="line"><span class="cl"><span class="go">Found &#39;/home/random/Projects/mastodon/.nvmrc&#39; with version &lt;12&gt;
</span></span></span><span class="line"><span class="cl"><span class="go">Downloading and installing node v12.16.3...
</span></span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span><span class="line"><span class="cl"><span class="go">Now using node v12.16.3 (npm v6.14.4)
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> npm install -g yarn
</span></span><span class="line"><span class="cl"><span class="gp">$</span> yarn install
</span></span></code></pre>
</figure><p>No complaints about Node.js versions now.  Good.  Time to actually set up the application?</p>
<p>Dev docs say <code>rails db:setup</code>, so that’s what I type.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> rails db:setup
</span></span><span class="line"><span class="cl"><span class="go">zsh: command not found: rails
</span></span></span></code></pre>
</figure><p>Oh right.  Because I’m not using a fresh Rails app, but an existing project.  I could use <code>bundle exec</code> but for some reason I feel stubborn.  I must make at least one step of my installation process match the documentation.</p>
<p>I use <a href="https://direnv.net">direnv</a>, so I can add the path locally.</p>
<figure class="highlight">
  <figcaption><tt>.envrc</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">PATH_add <span class="s2">&#34;bin&#34;</span></span></span></code></pre>
</figure><p>Then I need to let direnv know this change is acceptable.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> direnv allow
</span></span></code></pre>
</figure><p>There’s probably a better Rails-specific or Zsh-specific approach, but I’m in a hurry.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> rails db:setup
</span></span></code></pre>
</figure><p>Loads of text follows. That’s good, right?</p>
<p>Instructions go straight to running the application, but that’s not my style.</p>
<h2 id="getting-tests-to-pass">Getting tests to pass</h2>
<p>I want to run tests first. Blame <a href="/card/perl/">card/Perl</a>. I have certain expectations after years of watching <code>cpan</code> run tests before declaring something installed.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ rspec
</span></span><span class="line"><span class="cl">⋮
</span></span><span class="line"><span class="cl">332) Auth::ChallengesController POST #create with incorrect password renders challenge
</span></span><span class="line"><span class="cl">       Failure/Error: = javascript_pack_tag &#34;locales&#34;, integrity: true, crossorigin: &#39;anonymous&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       ActionView::Template::Error:
</span></span><span class="line"><span class="cl">         Webpacker can&#39;t find locales in /home/random/Projects/mastodon/public/packs-test/manifest.json. Possible causes:
</span></span><span class="line"><span class="cl">         1. You want to set webpacker.yml value of compile to true for your environment
</span></span><span class="line"><span class="cl">            unless you are using the `webpack -w` or the webpack-dev-server.
</span></span><span class="line"><span class="cl">         2. webpack has not yet re-run to reflect updates.
</span></span><span class="line"><span class="cl">         3. You have misconfigured Webpacker&#39;s config/webpacker.yml file.
</span></span><span class="line"><span class="cl">         4. Your webpack configuration is not creating a manifest.
</span></span><span class="line"><span class="cl">         Your manifest contains:
</span></span><span class="line"><span class="cl">         {
</span></span><span class="line"><span class="cl">         }
</span></span><span class="line"><span class="cl">       # ./app/views/layouts/application.html.haml:23:in `_app_views_layouts_application_html_haml___4376952060303332774_47460103924140&#39;
</span></span><span class="line"><span class="cl">       # ./app/views/layouts/auth.html.haml:13:in `_app_views_layouts_auth_html_haml___1721087443773625754_47460102744080&#39;
</span></span><span class="line"><span class="cl">       # ./app/controllers/concerns/challengable_concern.rb:47:in `render_challenge&#39;
</span></span><span class="line"><span class="cl">       # ./app/controllers/auth/challenges_controller.rb:20:in `create&#39;
</span></span><span class="line"><span class="cl">       # ./app/controllers/concerns/localized.rb:18:in `block in set_locale&#39;
</span></span><span class="line"><span class="cl">       # ./app/controllers/concerns/localized.rb:17:in `set_locale&#39;
</span></span><span class="line"><span class="cl">       # ./spec/controllers/auth/challenges_controller_spec.rb:31:in `block (4 levels) in &lt;top (required)&gt;&#39;
</span></span><span class="line"><span class="cl">       # ------------------
</span></span><span class="line"><span class="cl">       # --- Caused by: ---
</span></span><span class="line"><span class="cl">       # Webpacker::Manifest::MissingEntryError:
</span></span><span class="line"><span class="cl">       #   Webpacker can&#39;t find locales in /home/random/Projects/mastodon/public/packs-test/manifest.json. Possible causes:
</span></span><span class="line"><span class="cl">       #   1. You want to set webpacker.yml value of compile to true for your environment
</span></span><span class="line"><span class="cl">       #      unless you are using the `webpack -w` or the webpack-dev-server.
</span></span><span class="line"><span class="cl">       #   2. webpack has not yet re-run to reflect updates.
</span></span><span class="line"><span class="cl">       #   3. You have misconfigured Webpacker&#39;s config/webpacker.yml file.
</span></span><span class="line"><span class="cl">       #   4. Your webpack configuration is not creating a manifest.
</span></span><span class="line"><span class="cl">       #   Your manifest contains:
</span></span><span class="line"><span class="cl">       #   {
</span></span><span class="line"><span class="cl">       #   }
</span></span><span class="line"><span class="cl">       #   ./app/views/layouts/application.html.haml:23:in `_app_views_layouts_application_html_haml___4376952060303332774_47460103924140&#39;
</span></span><span class="line"><span class="cl">⋮
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Finished in 4 minutes 4.3 seconds (files took 6.07 seconds to load)
</span></span><span class="line"><span class="cl">2680 examples, 332 failures, 23 pending</span></span></code></pre>
</figure><p>Mhm.  That’s what I thought.  I’m going to need to write a post about getting this to work, aren’t I?</p>
<p>Let’s skip the hour or two of flailing and digging into past <code>glitch-soc</code> and Mastodon tickets.</p>
<p>The problem?  <a href="https://github.com/rails/webpacker">Webpacker</a> doesn’t compile assets for the test environment, because <a href="https://circleci.com/">CircleCI</a> already does that.</p>
<figure class="highlight">
  <figcaption><tt>.config/webpacker.yml</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">test</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&lt;&lt;</span><span class="p">:</span><span class="w"> </span><span class="cp">*default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># CircleCI precompiles packs prior to running the tests.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Also avoids race conditions in parallel_tests.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">compile</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Compile test packs to a separate directory</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">public_output_path</span><span class="p">:</span><span class="w"> </span><span class="l">packs-test</span></span></span></code></pre>
</figure><p>Set <code>compile</code> to <code>true</code> and everything passes.  Except they need that as <code>false</code> for CircleCI.  That — does this mean they never run any tests locally in development?  That tests only run after a commit is pushed?</p>
<p>Inconceivable.  The very thought is like fingernails on a chalkboard.  Surely I missed something in the documentation.</p>
<p>Well I’m going to run tests locally one way or another.</p>
<p>Gimme a second.</p>
<p>Okay how about this?</p>
<p>First, clean up the compiled assets from my config experiment.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nv">RAILS_ENV</span><span class="o">=</span><span class="nb">test</span> rake assets:clobber
</span></span></code></pre>
</figure><p>Next, precompile the assets and run tests again.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nv">RAILS_ENV</span><span class="o">=</span><span class="nb">test</span> rake assets:precompile
</span></span><span class="line"><span class="cl"><span class="gp">$</span> rspec
</span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span><span class="line"><span class="cl"><span class="go">Finished in 4 minutes 10.6 seconds (files took 6.04 seconds to load)
</span></span></span><span class="line"><span class="cl"><span class="go">2680 examples, 0 failures, 23 pending
</span></span></span></code></pre>
</figure><p>Huzzah! Aside from that ghastly test time.  I’ve seen worse.  I’ve <em>written</em> worse.</p>
<p>Clearly I need to automate this.  Maybe something to do with Foreman.  Maybe just a shell script that clobbers, precompiles, and runs tests.</p>
<p>A real fix — if one is needed, and I didn’t just miss a vital paragraph of documentation — would be to give CircleCI its own environment distinct from the default test environment.</p>
<h2 id="good-enough">Good enough</h2>
<p>Will I actually do anything with my <code>glitch-soc</code> fork?  No idea.  But I want to share this for other dusty Ruby folks whose Rails applications predate <a href="https://webpack.js.org/">Webpack</a>.</p>
<p>I should at least fiddle with instance settings enough to get a cute screenshot.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Wait No Hold On</title>
  <link>https://randomgeekery.org/post/2019/07/wait-no-hold-on/</link>
  <pubDate>Thu, 11 Jul 2019 21:44:58 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/07/wait-no-hold-on/</guid>
  <description>There was a bug in the “announce” part of my “publish/announce” flow. Let me try that again.
Image via https://joinmastodon.org/</description>
   <category>post</category> 
   <category>note</category> 
   <category>notes</category>  <category>i-fixed-it</category>  <category>mastodon</category>  <category>toot</category>  <category>toot-toot</category> 
  <content:encoded><![CDATA[<p>There was a bug in the &ldquo;announce&rdquo; part of my &ldquo;publish/announce&rdquo; flow. Let me try
that again.</p>
<p><figure>
    <img src="/../../../attachments/img/2019/cover-2019-07-11.png" alt="attachments/img/2019/cover-2019-07-11.png"/></figure>
Image via <a href="https://joinmastodon.org/">https://joinmastodon.org/</a></p>
]]></content:encoded>
</item>
</channel>
</rss>
