<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cssonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/css/</link>
    <description>
      Recent contentincss on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 22 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://randomgeekery.org/tags/css/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: watched Your Colors Suck (it&#39;s not your fault)</title>
  <link>https://randomgeekery.org/post/2023/10/watched-your-colors-suck-its-not-your-fault/</link>
  <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2023/10/watched-your-colors-suck-its-not-your-fault/</guid>
  <description>Hey do you want a 37 minute info dump about digital color? Of course you do.
Topics covered include: Quantization, color banding, dithering, value mapping, palette swapping, radiometry, photometry, how humans perceive color, colorimetry, spectral rendering, the rgb color model, deriving srgb, the hsl color model, gradient mapping, randomly generated color palettes, perceptual color spaces, the lab color model, oklab
tldw: use OKLAB not RGB or HSL. There’s even &#43;oklab()&#43; in CSS now.</description>
   <category>post</category> 
   <category>post</category> 
   <category>watch</category>  <category>css</category>  <category>art</category> 
  <content:encoded><![CDATA[<p>Hey do you want a 37 minute info dump about digital color? Of course you do.</p>
<p><div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe src="https://www.youtube.com/embed/fv-wlo8yVhk"
              style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;"
              allowfullscreen title="YouTube Video"></iframe>
    </div>
  </p>
<blockquote>
<p>Topics covered include: Quantization, color banding, dithering, value mapping, palette swapping, radiometry, photometry, how humans perceive color, colorimetry, spectral rendering, the rgb color model, deriving srgb, the hsl color model, gradient mapping, randomly generated color palettes, perceptual color spaces, the lab color model, oklab</p>
</blockquote>
<p><a href="/card/tldw/">tldw</a>: use <a href="https://bottosson.github.io/posts/oklab/">OKLAB</a> not RGB or HSL. There’s even <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/oklab"><code>+oklab()+</code></a> in CSS now.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Processing Sass in Eleventy</title>
  <link>https://randomgeekery.org/post/2022/01/processing-sass-in-eleventy/</link>
  <pubDate>Mon, 10 Jan 2022 01:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/01/processing-sass-in-eleventy/</guid>
  <description>relevant pictures are overrated; this dog and cat are cute together
card/Eleventy’s 1.0 release includes the ability to add your own custom processing based on file extension. Unsurprisingly, I love this feature.
Lots of big ideas, but let’s start small with the officially documented process for processing Sass.
First things first, let’s update devDependencies in my package.json:
{ &#34;devDependencies&#34;: { &#34;@11ty/eleventy&#34;: &#34;^1.0.0&#34; } } I keep my Sass files under src/assets/style:</description>
   <category>post</category> 
   <category>post</category> 
   <category>eleventy</category>  <category>scss</category>  <category>css</category>  <category>site</category> 
  <content:encoded><![CDATA[<h2>Specifically, building `main.scss` when `_base.scss` changes</h2><p><figure>
    <img src="/../../../attachments/img/2022/cover-2022-01-10.jpg" alt="attachments/img/2022/cover-2022-01-10.jpg"/></figure>
relevant pictures are overrated; this dog and cat are cute together</p>
<p><a href="/card/eleventy/">card/Eleventy</a>’s 1.0 release includes the ability to add your own custom processing based on file extension. Unsurprisingly, I love this feature.</p>
<p>Lots of big ideas, but let’s start small with the officially documented process for processing Sass.</p>
<p>First things first, let&rsquo;s update <code>devDependencies</code> in my <code>package.json</code>:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;devDependencies&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;@11ty/eleventy&#34;</span><span class="p">:</span> <span class="s2">&#34;^1.0.0&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>I keep my Sass files under <code>src/assets/style</code>:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> tree src/assets/style/
</span></span><span class="line"><span class="cl"><span class="go">src/assets/style/
</span></span></span><span class="line"><span class="cl"><span class="go">├── _base.scss
</span></span></span><span class="line"><span class="cl"><span class="go">├── _layout.scss
</span></span></span><span class="line"><span class="cl"><span class="go">├── main.scss
</span></span></span><span class="line"><span class="cl"><span class="go">└── modules
</span></span></span><span class="line"><span class="cl"><span class="go">    └── _shiki.scss
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">1 directory, 4 files
</span></span></span></code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>Generally, I have been following the site organization guidelines described in <a href="https://www.webstoemp.com/blog/eleventy-projects-structure/">Structuring Eleventy Projects</a>. If I have some non-content file I need transformed — Sass, images, whatever — I put it under <code>src/assets</code>.</p>
</blockquote>
<p>Eleventy provides instructions on how to set up <a href="https://www.11ty.dev/docs/languages/custom/">custom templates</a> for dealing with Sass, and even <a href="https://www.11ty.dev/docs/languages/custom/#skipping-a-template-from-inside-of-the-compile-function">skipping a template</a> so it doesn&rsquo;t build <code>_base.scss</code> and so on.</p>
<p>And that&rsquo;s great. It works. <code>src/assets/style/main.scss</code> becomes <code>dist/assets/style/main.css</code>. Course, it&rsquo;s not quite perfect. I still need <code>main.css</code> rebuild if I write to <code>_base.scss</code>.</p>
<p>But I also don&rsquo;t want it randomly rebuilding the stylesheet 20 times because it found 20 support files.</p>
<p>I need to think my way through this one.</p>
<h2 id="add-a-sasshandler">Add a SassHandler</h2>
<p>Keeping with Jérôme Coupé&rsquo;s structural suggestions, I keep my more complex JavaScript logic under <code>src/_11ty/</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> tree src/_11ty/
</span></span><span class="line"><span class="cl"><span class="go">src/_11ty/
</span></span></span><span class="line"><span class="cl"><span class="go">├── collections
</span></span></span><span class="line"><span class="cl"><span class="go">├── filters
</span></span></span><span class="line"><span class="cl"><span class="go">├── handlers
</span></span></span><span class="line"><span class="cl"><span class="go">│   ├── MarkdownHandler.js
</span></span></span><span class="line"><span class="cl"><span class="go">│   └── SassHandler.js
</span></span></span><span class="line"><span class="cl"><span class="go">└── shortcodes
</span></span></span></code></pre>
</figure><p><code>handlers</code> is my own variation — that&rsquo;s where I put code for particular file and content types.</p>
<p>So what needs to go into <code>SassHandler.js</code>? Let&rsquo;s see.</p>
<ul>
<li>ensure only <code>main.scss</code> gets handed off to Sass</li>
<li>ensure the main stylesheet is rebuilt when any of the imports change</li>
<li>avoid unnecessary recompilation — without getting too clever</li>
</ul>
<p>Time to open up the old text editor.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- file:src/_11ty/handlers/SassHandler.js
</span></span></span><span class="line"><span class="cl"><span class="c1">// Handler for my Sass stylesheets
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// ==&gt; Import libraries.
</span></span></span><span class="line"><span class="cl"><span class="c1">// ==&gt; Define input and output paths for sass.
</span></span></span><span class="line"><span class="cl"><span class="c1">// ==&gt; Set build time guard variables.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">outputFileExtension</span><span class="o">:</span> <span class="s2">&#34;css&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">compileOptions</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">permalink</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">compile</span><span class="o">:</span> <span class="kr">async</span> <span class="kd">function</span><span class="p">(</span><span class="nx">inputContent</span><span class="p">,</span> <span class="nx">inputPath</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ==&gt; Ensure we need to build the CSS.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// ==&gt; Remember and log this build.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// ==&gt; Compile the Sass and write the CSS.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre>
</figure><p>With what I&rsquo;ve figured out so far, even though Eleventy can watch and act on the files for me, keeping the paths under tight control will be my job. A
change in <code>_base.scss</code> means a change in <code>main.scss</code> which means a write to <code>main.css</code>. I have not yet learned how to do that in any Eleventy-specific way. So I&rsquo;ll disable the <code>permalink</code> compile option and handle it myself with the appropriate libraries.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Import libraries
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;fs-plus&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;path&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sass</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;sass&#34;</span><span class="p">);</span></span></span></code></pre>
</figure><ul>
<li><a href="http://atom.github.io/fs-plus/"><code>fs-plus</code></a> is a little easier to work with than Node&rsquo;s standard <code>fs</code>   library for file handling</li>
<li><a href="https://nodejs.org/dist/latest-v16.x/docs/api/path.html"><code>path</code></a> is no <a href="https://docs.python.org/3/library/pathlib.html"><code>pathlib</code></a> — heck it&rsquo;s barely even <a href="https://docs.python.org/3/library/os.path.html"><code>os.path</code></a> — but it&rsquo;s better than trusting my own string-splitting and reassembly</li>
<li><a href="https://sass-lang.com"><code>sass</code></a> of course; these <em>are</em> Sass files</li>
</ul>
<p>I know exactly which files I want to read and write. Let&rsquo;s define those as constant.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Define input and output paths for sass
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">curDir</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sassInputPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">cirDir</span><span class="p">,</span> <span class="s2">&#34;src/assets/style/main.scss&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">cssOutputPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">curDir</span><span class="p">,</span> <span class="s2">&#34;dist/assets/style/main.css&#34;</span><span class="p">);</span></span></span></code></pre>
</figure><p>Yes this does look a lot like what Eleventy would do on its own. Since I turned off permalinks for <code>scss</code> files, I need to be careful. I start this with being extremely specific and figuring out what I can relax later — assuming I decide that relaxing is what I want to do.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Common sense sugests these should be defined in a config file somewhere. I&rsquo;m still getting the hang of Eleventy, though. Common sense won&rsquo;t be an option for some time.</p>
</blockquote>
<p>I figure the easiest way to avoid extra recompilation is by watching the clock. If it hasn&rsquo;t been long enough since the last build, skip it. Five seconds is a completely arbitrary value for &ldquo;long enough&rdquo; but it seems to be working.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Set build time guard variables
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">lastSassBuild</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>     <span class="c1">// valueOf last sass build
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">minimumWait</span> <span class="o">=</span> <span class="mi">5_000</span><span class="p">;</span> <span class="c1">// wait this many milliseconds before rebuilding
</span></span></span></code></pre>
</figure><p>And what does a build time check look like? We use <a href="https://developer.mozilla.org/en-US/docs/web/javascript/reference/global_objects/date/valueof"><code>Date.valueOf</code></a> to get the number of milliseconds since 1970-01-01, which is a handy numeric value for simple comparison. If the difference between that and <code>lastSassBuild</code> is less than <code>minimumWait</code> milliseconds, we don&rsquo;t need to build.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Ensure we need to build the CSS
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">valueOf</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">now</span> <span class="o">-</span> <span class="nx">lastSassBuild</span> <span class="o">&lt;=</span> <span class="nx">minimumWait</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>What if we <em>do</em> need to build? Update <code>lastSassBuild</code> and log what&rsquo;s going on, since I enjoy a little feedback.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Remember and log this build
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">lastSassBuild</span> <span class="o">=</span> <span class="nx">now</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">parsed</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">inputPath</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`[</span><span class="si">${</span><span class="nx">now</span><span class="si">}</span><span class="sb">] SassHandler: </span><span class="si">${</span><span class="nx">inputPath</span><span class="si">}</span><span class="sb"> changed`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Building </span><span class="si">${</span><span class="nx">sassFilePath</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span></span></span></code></pre>
</figure><p>I still haven&rsquo;t learned enough JavaScript to know why, but when I use <code>sass.compile</code> instead of the supposedly deprecated <code>renderSync</code> I get an exception. Eventually I&rsquo;ll be forced to revisit that, but today is not that day.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Compile the Sass and write the CSS
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">file</span><span class="o">:</span> <span class="nx">sassFilePath</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">cssText</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s2">&#34;utf8&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">fs</span><span class="p">.</span><span class="nx">makeTreeSync</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">dirname</span><span class="p">(</span><span class="nx">cssOutputPath</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="nx">cssOutputPath</span><span class="p">,</span> <span class="nx">cssText</span><span class="p">);</span></span></span></code></pre>
</figure><p>Again, I&rsquo;ve disabled <code>permalink</code> so it&rsquo;s on me to ensure the output directory exists and to write the generated CSS.</p>
<p>So there it is! Probably not optimal but hey we&rsquo;re all learning something every day.</p>
<h2 id="load-that-sasshandler">Load that SassHandler</h2>
<p>Then the relevant bits of my <code>.eleventy.js</code>:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">SassHandler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;./src/_11ty/handlers/SassHandler.js&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">eleventyConfig</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">eleventyConfig</span><span class="p">.</span><span class="nx">addTemplateFormats</span><span class="p">(</span><span class="s2">&#34;scss&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">eleventyConfig</span><span class="p">.</span><span class="nx">addExtension</span><span class="p">(</span><span class="s2">&#34;scss&#34;</span><span class="p">,</span> <span class="nx">SassHandler</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre>
</figure><p>This site still builds and the styles update as expected, so: yay!</p>
<h2 id="whats-next">What&rsquo;s next?</h2>
<p>I dunno. Knowing me? Probably <a href="https://asciidoctor.org">Asciidoctor</a>.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: New theme for 2021</title>
  <link>https://randomgeekery.org/post/2020/12/new-theme-for-2021/</link>
  <pubDate>Mon, 07 Dec 2020 07:16:55 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/new-theme-for-2021/</guid>
  <description>I don’t care if it’s not 2021 yet. I’m starting now, with Picnic CSS for the foundation.
Funny thing about 20-year old sites. They take more than a weekend to revamp. Still kind of funky, but I’ll fix it eventually.
2022 at the latest.</description>
   <category>post</category> 
   <category>note</category> 
   <category>css</category>  <category>spring-cleaning-for-websites</category>  <category>site</category> 
  <content:encoded><![CDATA[<p><figure>
    <img src="/../../../attachments/img/2020/cover-2020-12-07.png" alt="attachments/img/2020/cover-2020-12-07.png"/></figure></p>
<p>I don&rsquo;t care if it&rsquo;s not 2021 yet. I&rsquo;m starting now, with <a href="https://picnicss.com">Picnic CSS</a> for the foundation.</p>
<p>Funny thing about 20-year old sites. They take more than a weekend to revamp. Still kind of funky, but I&rsquo;ll fix it eventually.</p>
<p>2022 at the latest.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Sort of Tufte CSS</title>
  <link>https://randomgeekery.org/post/2020/02/sort-of-tufte-css/</link>
  <pubDate>Sun, 23 Feb 2020 00:02:03 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/02/sort-of-tufte-css/</guid>
  <description>Thought I’d try something new and bumped into Tufte CSS. That’s a CSS stylesheet and font set aspiring to the style of Edward Tufte. He wrote the The Visual Display of Quantitative Information.
Of course, I had to adjust the original CSS for my own quirks. Added more Fork Awesome icons. Made the card/reStructuredText elements fit. Tips from a David Walsh post helped me show external links.
One of the main goals was to get my site readable on mobile devices.</description>
   <category>post</category> 
   <category>post</category> 
   <category>css</category>  <category>site</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>I tried something new with my site style.</h2><p><figure>
    <img src="/../../../attachments/img/2020/cover-2020-02-23.png" alt="attachments/img/2020/cover-2020-02-23.png"/></figure></p>
<p>Thought I’d try something new and bumped into <a href="https://edwardtufte.github.io/tufte-css/">Tufte CSS</a>. That’s a CSS stylesheet and font set aspiring to the style of Edward Tufte. He wrote the <a href="https://www.edwardtufte.com/tufte/books_vdqi">The Visual Display of Quantitative Information</a>.</p>
<p>Of course, I had to adjust the original CSS for my own quirks. Added more <a href="https://forkaweso.me/">Fork Awesome</a> icons. Made the <a href="/card/restructuredtext/">card/reStructuredText</a> elements fit. Tips from a <a href="https://davidwalsh.name/external-links-css">David Walsh post</a> helped me show external links.</p>
<p>One of the main goals was to get my site readable on mobile devices. Alas, Web design is not my strongest skill.</p>
<p>I’ll let you know if I figure out what my strongest skill <em>is</em>.</p>
<p>And I must say, this is the simplest highlighting theme I ever made:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-scss" data-lang="scss"><span class="line"><span class="cl"><span class="nc">.code</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="na">line-height</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nc">.builtin</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="na">font-weight</span><span class="o">:</span> <span class="ni">bold</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nc">.comment</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="na">color</span><span class="o">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">accent-color</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="na">font-style</span><span class="o">:</span> <span class="ni">italic</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nc">.keyword</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="na">font-weight</span><span class="o">:</span> <span class="ni">bold</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nc">.output</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="na">color</span><span class="o">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">accent-color</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>It doesn’t highlight much. Heck it didn’t highlight <em>anything</em> in that <a href="https://sass-lang.com/">SCSS</a>. Here. Try this:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nb">echo</span> <span class="s2">&#34;Hello world&#34;</span> <span class="c1"># a small demonstration</span>
</span></span><span class="line"><span class="cl"><span class="go">Hello world
</span></span></span></code></pre>
</figure><p>But I’m not sure how long I’ll keep this style. For one thing, some of the bits like footnotes aren’t <em>quite</em> used as the stylesheet recommends. Though I could probably make it work across the site with some shortcodes. And there’s an awful lot of <code>float</code> and <code>clear</code> to get those side notes working. That can be a brittle approach.</p>
<p>Besides, I’ve been itching to play with <a href="https://tailwindcss.com/">Tailwind CSS</a>. I might even see if I can reimplement this theme with Tailwind. Except with more color.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Added dark mode for the site</title>
  <link>https://randomgeekery.org/post/2020/02/added-dark-mode-for-the-site/</link>
  <pubDate>Sun, 02 Feb 2020 19:45:13 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/02/added-dark-mode-for-the-site/</guid>
  <description>Got tired of blowing my eyeballs out during evening work.
How? I used prefers-color-scheme. It tries to respect existing light/dark mode settings. Here’s the stylesheet short version.
:root { --text-color: hsl(0, 0%, 0%); --content-background-color: hsla(0, 0%, 100%, 0.8); } @media (prefers-color-scheme: dark) { :root { --text-color: hsl(0, 0%, 100%); --content-background-color: hsla(0, 0%, 0%, 0.8); } } #page-content { background-color: var(--content-background-color) color: var(--text-color); } </description>
   <category>post</category> 
   <category>note</category> 
   <category>site</category>  <category>css</category> 
  <content:encoded><![CDATA[<p>Got tired of blowing my eyeballs out during evening work.</p>
<p><figure>
    <img src="/../../../attachments/img/2020/cover-2020-02-02.png" alt="attachments/img/2020/cover-2020-02-02.png"/></figure></p>
<p>How? I used <a href="https://developer.mozilla.org/en-US/search?q=prefers-color-scheme">prefers-color-scheme</a>. It tries to respect existing light/dark mode settings. Here’s the stylesheet short version.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-scss" data-lang="scss"><span class="line"><span class="cl"><span class="nd">:root</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="na">--text-color</span><span class="o">:</span>                 <span class="nf">hsl</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="kt">%</span><span class="o">,</span> <span class="mi">0</span><span class="kt">%</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="na">--content-background-color</span><span class="o">:</span>   <span class="nf">hsla</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="kt">%</span><span class="o">,</span> <span class="mi">100</span><span class="kt">%</span><span class="o">,</span> <span class="mi">0</span><span class="mf">.8</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">@media</span> <span class="p">(</span><span class="n">prefers-color-scheme</span><span class="o">:</span> <span class="ni">dark</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nd">:root</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="na">--text-color</span><span class="o">:</span>               <span class="nf">hsl</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="kt">%</span><span class="o">,</span> <span class="mi">100</span><span class="kt">%</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="na">--content-background-color</span><span class="o">:</span> <span class="nf">hsla</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="kt">%</span><span class="o">,</span> <span class="mi">0</span><span class="kt">%</span><span class="o">,</span> <span class="mi">0</span><span class="mf">.8</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nn">#page-content</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="na">background-color</span><span class="o">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="ni">content</span><span class="o">-</span><span class="n">background-color</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="na">color</span><span class="o">:</span>            <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="ni">text</span><span class="o">-</span><span class="ni">color</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Post: Wellington for Sass</title>
  <link>https://randomgeekery.org/post/2017/10/wellington-for-sass/</link>
  <pubDate>Tue, 31 Oct 2017 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/10/wellington-for-sass/</guid>
  <description>I found Wellington, a Sass compiler written in card/Go.
I installed Wellington with Homebrew - actually Linuxbrew but that’s a post for another day maybe, once I’m sure this Linuxbrew experiment worked for me.
$ brew install wellington This is not the night to redesign the whole site, though. Make sure everything works.
$ wt compile assets/scss/main.scss -b static/css 2017/10/31 21:09:54 Compilation took: 28.333622ms Seems to produce the same style output.</description>
   <category>post</category> 
   <category>post</category> 
   <category>site</category>  <category>css</category>  <category>tools</category> 
  <content:encoded><![CDATA[<p>I found <a href="https://getwt.io/">Wellington</a>, a <a href="http://sass-lang.com/">Sass</a> compiler written in <a href="/card/go/">card/Go</a>.</p>
<p>I installed Wellington with <a href="https://brew.sh/">Homebrew</a> - actually Linuxbrew but that’s a post for another day maybe, once I’m sure this Linuxbrew experiment worked for me.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ brew install wellington</code></pre>
</figure><p>This is not the night to redesign the whole site, though. Make sure everything works.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ wt compile assets/scss/main.scss -b static/css
2017/10/31 21:09:54 Compilation took: 28.333622ms</code></pre>
</figure><p>Seems to produce the same style output. I had no complaint about the speed of Ruby’s Sass compiler, but Wellington is certainly quicker.</p>
<p>I guess now I can start thinking about redesigning the site layout.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Bob Ross CSS</title>
  <link>https://randomgeekery.org/post/2015/11/using-bob-ross-css/</link>
  <pubDate>Sun, 29 Nov 2015 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2015/11/using-bob-ross-css/</guid>
  <description>&lt;p&gt;Note to self: use the &lt;a href=&#34;https://gist.github.com/thomaspark/41f381048adcceb6d261&#34;&gt;Bob Ross CSS&lt;/a&gt; that &lt;a href=&#34;http://thomaspark.co/2015/11/bob-ross-color-palette-in-css/&#34;&gt;Thomas Park&lt;/a&gt; conveniently worked out.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>css</category>  <category>tools</category> 
  <content:encoded><![CDATA[<p>Note to self: use the <a href="https://gist.github.com/thomaspark/41f381048adcceb6d261">Bob Ross CSS</a> that <a href="http://thomaspark.co/2015/11/bob-ross-color-palette-in-css/">Thomas Park</a> conveniently worked out.</p>
<p>Here&rsquo;s a nice little clip in case you don&rsquo;t know who Bob Ross is.</p>
<p><div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe src="https://www.youtube.com/embed/IWmgEOxVynU"
              style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;"
              allowfullscreen title="YouTube Video"></iframe>
    </div>
  </p>
<blockquote>
<p>&ldquo;We don&rsquo;t make mistakes. We just have happy accidents&rdquo;</p>
</blockquote>
<p>I like that. And his insistence on sticking to a limited palette was kind of inspiring too. Sometimes we get overloaded by choice. Maybe it&rsquo;s better to get a solid core of colors - or tools - and work with those.</p>
<h2 id="the-bob-ross-css-palette">The Bob Ross CSS Palette</h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">.</span><span class="nc">sap-green</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#0A3410</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">sap-green-text</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#0A3410</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">sap-green-border</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-color</span><span class="p">:</span> <span class="mh">#0A3410</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">alizarin-crimson</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#4E1500</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">alizarin-crimson-text</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#4E1500</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">alizarin-crimson-border</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-color</span><span class="p">:</span> <span class="mh">#4E1500</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">van-dyke-brown</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#221B15</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">van-dyke-brown-text</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#221B15</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">van-dyke-brown-border</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-color</span><span class="p">:</span> <span class="mh">#221B15</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">dark-sienna</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#5F2E1F</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">dark-sienna-text</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#5F2E1F</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">dark-sienna-border</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-color</span><span class="p">:</span> <span class="mh">#5F2E1F</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">midnight-black</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#000000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">midnight-black-text</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#000000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">midnight-black-border</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-color</span><span class="p">:</span> <span class="mh">#000000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">prussian-blue</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#021E44</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">prussian-blue-text</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#021E44</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">prussian-blue-border</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-color</span><span class="p">:</span> <span class="mh">#021E44</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">phthalo-blue</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#0C0040</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">phthalo-blue-text</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#0C0040</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">phthalo-blue-border</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-color</span><span class="p">:</span> <span class="mh">#0C0040</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">phthalo-green</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#102E3C</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">phthalo-green-text</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#102E3C</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">phthalo-green-border</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-color</span><span class="p">:</span> <span class="mh">#102E3C</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">cadmium-yellow</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#FFEC00</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">cadmium-yellow-text</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#FFEC00</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">cadmium-yellow-border</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-color</span><span class="p">:</span> <span class="mh">#FFEC00</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">yellow-ochre</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#C79B00</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">yellow-ochre-text</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#C79B00</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">yellow-ochre-border</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-color</span><span class="p">:</span> <span class="mh">#C79B00</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">indian-yellow</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#FFB800</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">indian-yellow-text</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#FFB800</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">indian-yellow-border</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-color</span><span class="p">:</span> <span class="mh">#FFB800</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">bright-red</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#DB0000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">bright-red-text</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#DB0000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">bright-red-border</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-color</span><span class="p">:</span> <span class="mh">#DB0000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">titanium-white</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#FFFFFF</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">titanium-white-text</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#FFFFFF</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">titanium-white-border</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">border-color</span><span class="p">:</span> <span class="mh">#FFFFFF</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
</channel>
</rss>
