<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>eleventyonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/eleventy/</link>
    <description>
      Recent contentineleventy on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Mon, 10 Jan 2022 01:00:00 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/tags/eleventy/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Processing Sass in Eleventy</title>
  <link>https://randomgeekery.org/post/2022/01/processing-sass-in-eleventy/</link>
  <pubDate>Mon, 10 Jan 2022 01:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/01/processing-sass-in-eleventy/</guid>
  <description>relevant pictures are overrated; this dog and cat are cute together
card/Eleventy’s 1.0 release includes the ability to add your own custom processing based on file extension. Unsurprisingly, I love this feature.
Lots of big ideas, but let’s start small with the officially documented process for processing Sass.
First things first, let’s update devDependencies in my package.json:
{ &#34;devDependencies&#34;: { &#34;@11ty/eleventy&#34;: &#34;^1.0.0&#34; } } I keep my Sass files under src/assets/style:</description>
   <category>post</category> 
   <category>post</category> 
   <category>eleventy</category>  <category>scss</category>  <category>css</category>  <category>site</category> 
  <content:encoded><![CDATA[<h2>Specifically, building `main.scss` when `_base.scss` changes</h2><p><img src="/post/2022/01/../../../attachments/img/2022/cover-2022-01-10.jpg" alt="attachments/img/2022/cover-2022-01-10.jpg"/>
relevant pictures are overrated; this dog and cat are cute together</p>
<p><a href="/card/eleventy/">card/Eleventy</a>’s 1.0 release includes the ability to add your own custom processing based on file extension. Unsurprisingly, I love this feature.</p>
<p>Lots of big ideas, but let’s start small with the officially documented process for processing Sass.</p>
<p>First things first, let&rsquo;s update <code>devDependencies</code> in my <code>package.json</code>:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;devDependencies&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;@11ty/eleventy&#34;</span><span class="p">:</span> <span class="s2">&#34;^1.0.0&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>I keep my Sass files under <code>src/assets/style</code>:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> tree src/assets/style/
</span></span><span class="line"><span class="cl"><span class="go">src/assets/style/
</span></span></span><span class="line"><span class="cl"><span class="go">├── _base.scss
</span></span></span><span class="line"><span class="cl"><span class="go">├── _layout.scss
</span></span></span><span class="line"><span class="cl"><span class="go">├── main.scss
</span></span></span><span class="line"><span class="cl"><span class="go">└── modules
</span></span></span><span class="line"><span class="cl"><span class="go">    └── _shiki.scss
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">1 directory, 4 files
</span></span></span></code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>Generally, I have been following the site organization guidelines described in <a href="https://www.webstoemp.com/blog/eleventy-projects-structure/">Structuring Eleventy Projects</a>. If I have some non-content file I need transformed — Sass, images, whatever — I put it under <code>src/assets</code>.</p>
</blockquote>
<p>Eleventy provides instructions on how to set up <a href="https://www.11ty.dev/docs/languages/custom/">custom templates</a> for dealing with Sass, and even <a href="https://www.11ty.dev/docs/languages/custom/#skipping-a-template-from-inside-of-the-compile-function">skipping a template</a> so it doesn&rsquo;t build <code>_base.scss</code> and so on.</p>
<p>And that&rsquo;s great. It works. <code>src/assets/style/main.scss</code> becomes <code>dist/assets/style/main.css</code>. Course, it&rsquo;s not quite perfect. I still need <code>main.css</code> rebuild if I write to <code>_base.scss</code>.</p>
<p>But I also don&rsquo;t want it randomly rebuilding the stylesheet 20 times because it found 20 support files.</p>
<p>I need to think my way through this one.</p>
<h2 id="add-a-sasshandler">Add a SassHandler</h2>
<p>Keeping with Jérôme Coupé&rsquo;s structural suggestions, I keep my more complex JavaScript logic under <code>src/_11ty/</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> tree src/_11ty/
</span></span><span class="line"><span class="cl"><span class="go">src/_11ty/
</span></span></span><span class="line"><span class="cl"><span class="go">├── collections
</span></span></span><span class="line"><span class="cl"><span class="go">├── filters
</span></span></span><span class="line"><span class="cl"><span class="go">├── handlers
</span></span></span><span class="line"><span class="cl"><span class="go">│   ├── MarkdownHandler.js
</span></span></span><span class="line"><span class="cl"><span class="go">│   └── SassHandler.js
</span></span></span><span class="line"><span class="cl"><span class="go">└── shortcodes
</span></span></span></code></pre>
</figure><p><code>handlers</code> is my own variation — that&rsquo;s where I put code for particular file and content types.</p>
<p>So what needs to go into <code>SassHandler.js</code>? Let&rsquo;s see.</p>
<ul>
<li>ensure only <code>main.scss</code> gets handed off to Sass</li>
<li>ensure the main stylesheet is rebuilt when any of the imports change</li>
<li>avoid unnecessary recompilation — without getting too clever</li>
</ul>
<p>Time to open up the old text editor.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- file:src/_11ty/handlers/SassHandler.js
</span></span></span><span class="line"><span class="cl"><span class="c1">// Handler for my Sass stylesheets
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// ==&gt; Import libraries.
</span></span></span><span class="line"><span class="cl"><span class="c1">// ==&gt; Define input and output paths for sass.
</span></span></span><span class="line"><span class="cl"><span class="c1">// ==&gt; Set build time guard variables.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">outputFileExtension</span><span class="o">:</span> <span class="s2">&#34;css&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">compileOptions</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">permalink</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">compile</span><span class="o">:</span> <span class="kr">async</span> <span class="kd">function</span><span class="p">(</span><span class="nx">inputContent</span><span class="p">,</span> <span class="nx">inputPath</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ==&gt; Ensure we need to build the CSS.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// ==&gt; Remember and log this build.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// ==&gt; Compile the Sass and write the CSS.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre>
</figure><p>With what I&rsquo;ve figured out so far, even though Eleventy can watch and act on the files for me, keeping the paths under tight control will be my job. A
change in <code>_base.scss</code> means a change in <code>main.scss</code> which means a write to <code>main.css</code>. I have not yet learned how to do that in any Eleventy-specific way. So I&rsquo;ll disable the <code>permalink</code> compile option and handle it myself with the appropriate libraries.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Import libraries
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;fs-plus&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;path&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sass</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;sass&#34;</span><span class="p">);</span></span></span></code></pre>
</figure><ul>
<li><a href="http://atom.github.io/fs-plus/"><code>fs-plus</code></a> is a little easier to work with than Node&rsquo;s standard <code>fs</code>   library for file handling</li>
<li><a href="https://nodejs.org/dist/latest-v16.x/docs/api/path.html"><code>path</code></a> is no <a href="https://docs.python.org/3/library/pathlib.html"><code>pathlib</code></a> — heck it&rsquo;s barely even <a href="https://docs.python.org/3/library/os.path.html"><code>os.path</code></a> — but it&rsquo;s better than trusting my own string-splitting and reassembly</li>
<li><a href="https://sass-lang.com"><code>sass</code></a> of course; these <em>are</em> Sass files</li>
</ul>
<p>I know exactly which files I want to read and write. Let&rsquo;s define those as constant.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Define input and output paths for sass
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">curDir</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sassInputPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">cirDir</span><span class="p">,</span> <span class="s2">&#34;src/assets/style/main.scss&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">cssOutputPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">curDir</span><span class="p">,</span> <span class="s2">&#34;dist/assets/style/main.css&#34;</span><span class="p">);</span></span></span></code></pre>
</figure><p>Yes this does look a lot like what Eleventy would do on its own. Since I turned off permalinks for <code>scss</code> files, I need to be careful. I start this with being extremely specific and figuring out what I can relax later — assuming I decide that relaxing is what I want to do.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>Common sense sugests these should be defined in a config file somewhere. I&rsquo;m still getting the hang of Eleventy, though. Common sense won&rsquo;t be an option for some time.</p>
</blockquote>
<p>I figure the easiest way to avoid extra recompilation is by watching the clock. If it hasn&rsquo;t been long enough since the last build, skip it. Five seconds is a completely arbitrary value for &ldquo;long enough&rdquo; but it seems to be working.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Set build time guard variables
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">lastSassBuild</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>     <span class="c1">// valueOf last sass build
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">minimumWait</span> <span class="o">=</span> <span class="mi">5_000</span><span class="p">;</span> <span class="c1">// wait this many milliseconds before rebuilding
</span></span></span></code></pre>
</figure><p>And what does a build time check look like? We use <a href="https://developer.mozilla.org/en-US/docs/web/javascript/reference/global_objects/date/valueof"><code>Date.valueOf</code></a> to get the number of milliseconds since 1970-01-01, which is a handy numeric value for simple comparison. If the difference between that and <code>lastSassBuild</code> is less than <code>minimumWait</code> milliseconds, we don&rsquo;t need to build.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Ensure we need to build the CSS
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">valueOf</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">now</span> <span class="o">-</span> <span class="nx">lastSassBuild</span> <span class="o">&lt;=</span> <span class="nx">minimumWait</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>What if we <em>do</em> need to build? Update <code>lastSassBuild</code> and log what&rsquo;s going on, since I enjoy a little feedback.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Remember and log this build
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">lastSassBuild</span> <span class="o">=</span> <span class="nx">now</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">parsed</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">inputPath</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`[</span><span class="si">${</span><span class="nx">now</span><span class="si">}</span><span class="sb">] SassHandler: </span><span class="si">${</span><span class="nx">inputPath</span><span class="si">}</span><span class="sb"> changed`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Building </span><span class="si">${</span><span class="nx">sassFilePath</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span></span></span></code></pre>
</figure><p>I still haven&rsquo;t learned enough JavaScript to know why, but when I use <code>sass.compile</code> instead of the supposedly deprecated <code>renderSync</code> I get an exception. Eventually I&rsquo;ll be forced to revisit that, but today is not that day.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//- Compile the Sass and write the CSS
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">file</span><span class="o">:</span> <span class="nx">sassFilePath</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">cssText</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s2">&#34;utf8&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">fs</span><span class="p">.</span><span class="nx">makeTreeSync</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">dirname</span><span class="p">(</span><span class="nx">cssOutputPath</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="nx">cssOutputPath</span><span class="p">,</span> <span class="nx">cssText</span><span class="p">);</span></span></span></code></pre>
</figure><p>Again, I&rsquo;ve disabled <code>permalink</code> so it&rsquo;s on me to ensure the output directory exists and to write the generated CSS.</p>
<p>So there it is! Probably not optimal but hey we&rsquo;re all learning something every day.</p>
<h2 id="load-that-sasshandler">Load that SassHandler</h2>
<p>Then the relevant bits of my <code>.eleventy.js</code>:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">SassHandler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;./src/_11ty/handlers/SassHandler.js&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">eleventyConfig</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">eleventyConfig</span><span class="p">.</span><span class="nx">addTemplateFormats</span><span class="p">(</span><span class="s2">&#34;scss&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">eleventyConfig</span><span class="p">.</span><span class="nx">addExtension</span><span class="p">(</span><span class="s2">&#34;scss&#34;</span><span class="p">,</span> <span class="nx">SassHandler</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre>
</figure><p>This site still builds and the styles update as expected, so: yay!</p>
<h2 id="whats-next">What&rsquo;s next?</h2>
<p>I dunno. Knowing me? Probably <a href="https://asciidoctor.org">Asciidoctor</a>.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Eleventy 1.0 beta handles custom templates</title>
  <link>https://randomgeekery.org/post/2022/01/eleventy-beta-handles-custom-templates/</link>
  <pubDate>Thu, 06 Jan 2022 23:44:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/01/eleventy-beta-handles-custom-templates/</guid>
  <description>I got card/Eleventy handing Sass processing more or less per the instructions.
Course, now I’m thinking how I could use that for card/Asciidoctor templates / content.</description>
   <category>post</category> 
   <category>note</category> 
   <category>eleventy</category>  <category>site</category>  <category>good-idea</category>  <category>the-bad-idea-is-up-to-me</category> 
  <content:encoded><![CDATA[<p>I got <a href="/card/eleventy/">card/Eleventy</a> handing Sass processing more or less per the <a href="https://www.11ty.dev/docs/languages/custom/#example-add-sass-support-to-eleventy">instructions</a>.</p>
<p>Course, now I&rsquo;m thinking how I could use that for <a href="/card/asciidoctor/">card/Asciidoctor</a> templates / content.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Building my Eleventy site</title>
  <link>https://randomgeekery.org/post/2022/01/building-my-eleventy-site/</link>
  <pubDate>Mon, 03 Jan 2022 22:30:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/01/building-my-eleventy-site/</guid>
  <description>sometimes the tools break
Not a huge post. I’m using this card/Eleventy incarnation of the site as a way to learn a few card/Node.js topics, and many of those concepts are still sinking in.
So how am I building this thing? We know it’s Eleventy. But what did I find to get a decent web nerd workflow?
Let’s go down the list. You may know better choices. I won’t complain if you share them nicely.</description>
   <category>post</category> 
   <category>note</category> 
   <category>eleventy</category>  <category>node-js</category>  <category>site</category> 
  <content:encoded><![CDATA[<h2>something something "right tool for the right job"</h2><p><img src="/post/2022/01/../../../attachments/img/2022/cover-2022-01-03.jpg" alt="attachments/img/2022/cover-2022-01-03.jpg"/>
sometimes the tools break</p>
<p>Not a huge post. I&rsquo;m using this <a href="/card/eleventy/">card/Eleventy</a> incarnation of the site as a way to learn a few <a href="/card/node.js/">card/Node.js</a> topics, and many of those concepts are still sinking in.</p>
<h2 id="so-how-am-i-building-this-thing">So how am I building this thing?</h2>
<p>We know it&rsquo;s Eleventy. But what did I find to get a decent web nerd workflow?</p>
<p>Let&rsquo;s go down the list. You may know better choices. I won&rsquo;t complain if you share them nicely.</p>
<p>You may <em>not</em> know better choices. If you come wandering in from some search engine, <em>this page is not expert opinion.</em> It&rsquo;s just what I was able to find that could glue everything together long enough to publish a site.</p>
<p>So let&rsquo;s go down the list.</p>
<h3 id="yarn-to-run-everything"><code>yarn</code> to run everything</h3>
<p>I opted to drive this with <a href="https://yarnpkg.com.">Yarn</a> For my beginner brain it looks equivalent to <a href="https://docs.npmjs.com/cli/v8">npm</a> but I find Yarn&rsquo;s usage and invocation more pleasant.</p>
<h3 id="packagejson-to-tell-yarn-what-i-want-it-to-do"><code>package.json</code> to tell Yarn what I want it to do</h3>
<p>Everybody seems to treat the <a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json#scripts"><code>scripts</code></a> block of a <a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json"><code>package.json</code></a> pretty
much the same as the targets of a <code>Makefile</code> so I embraced that.</p>
<p>Here are my core scripts / tasks:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;dev&#34;</span><span class="p">:</span> <span class="s2">&#34;npm-run-all --parallel serve watch:style&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;build:dev&#34;</span><span class="p">:</span> <span class="s2">&#34;npm-run-all --serial site:img site:style site:content&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;build:prod&#34;</span><span class="p">:</span> <span class="s2">&#34;npm-run-all --serial site:img site:style site:content:prod&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;clean&#34;</span><span class="p">:</span> <span class="s2">&#34;rimraf dist&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;push&#34;</span><span class="p">:</span> <span class="s2">&#34;rsync -av dist/ vps:randomgeekery.org&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;serve&#34;</span><span class="p">:</span> <span class="s2">&#34;eleventy --serve --quiet&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;site:img&#34;</span><span class="p">:</span> <span class="s2">&#34;ts-node build_tasks/process_images.ts&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;site:content&#34;</span><span class="p">:</span> <span class="s2">&#34;eleventy --quiet&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;site:content:prod&#34;</span><span class="p">:</span> <span class="s2">&#34;INCLUDE_ANALYTICS=1 eleventy --quiet&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;site:style&#34;</span><span class="p">:</span> <span class="s2">&#34;sass ./src/assets/scss/main.scss ./dist/assets/css/main.css&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;watch:style&#34;</span><span class="p">:</span> <span class="s2">&#34;sass --watch ./src/assets/scss/main.scss ./dist/assets/css/main.css&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>Build, develop, clean, upload. All the basics are there. I don&rsquo;t think <code>package.json</code> <em>really</em> has namespaces, but I use <code>:</code> to pretend.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>I have a few more entries but until I smooth them out a bit they&rsquo;ll just add noise. I left them out for now.</p>
<p><code>site:img</code> is part of that noise to be honest, but it&rsquo;s mentioned prominently in other entries. Basically I preprocess my images with <a href="https://www.11ty.dev/docs/plugins/image/">eleventy-img</a>. We&rsquo;ll talk more about that another day maybe.</p>
</blockquote>
<h3 id="ts-node-to-execute-typescript-code"><code>ts-node</code> to execute TypeScript code</h3>
<p>In the process of learning <a href="/card/typescript/">card/TypeScript</a>, and I&rsquo;m very much a &ldquo;learn by doing&rdquo; sort of person. &ldquo;Doing&rdquo; here means &ldquo;typing the code and making it run.&rdquo; I&rsquo;ll learn the compilation framework of <code>tsc</code> soon enough, but <a href="https://typestrong.org/ts-node/">ts-node</a> lets me execute my TypeScript code immediately.</p>
<p>I like that.</p>
<h3 id="sass-to-make-things-pretty--eventually"><code>sass</code> to make things pretty — eventually</h3>
<p>I&rsquo;m sure I&rsquo;ll get deeper into <a href="https://tailwindcss.com">Tailwind</a> or <a href="https://windicss.org">Windi</a> eventually, but for now it&rsquo;s still easier to write my styles in <a href="https://sass-lang.com">Sass</a>.</p>
<p>And yes I know my styles are rough right now. Decided if I let myself linger and wait for the perfect layout I&rsquo;d never push the update. But I&rsquo;ll get to it.</p>
<h3 id="npm-run-all-so-i-can-do-two-things-with-one-command"><code>npm-run-all</code> so I can do <em>two</em> things with <em>one</em> command</h3>
<p>The only thing I couldn&rsquo;t figure out how to do with <code>package.json</code> was run two tasks with a single command. That&rsquo;s apparently because it doesn&rsquo;t do that on its own. <code>package.json</code> is not a <code>Makefile</code>.</p>
<p>Have no fear. <a href="https://github.com/mysticatea/npm-run-all"><code>npm-run-all</code></a> is here. It&rsquo;s a CLI application focused on letting you run multiple <code>package.json</code> script commands, sequentially or in parallel.</p>
<h3 id="rsync-to-share-it-when-im-ready"><code>rsync</code> to share it when I&rsquo;m ready</h3>
<p>This is a static site served by <a href="https://httpd.apache.org">Apache</a>. It doesn&rsquo;t need some continuous integration / deployment pipeline. I have files. <a href="https://rsync.samba.org">rsync</a> uploads them with a quickness.</p>
<p><code>rsync</code> has been part of my toolkit for years. I&rsquo;ll replace it when I don&rsquo;t need it anymore.</p>
<h3 id="rimraf-to-clean-up-after-myself"><code>rimraf</code> to clean up after myself</h3>
<p>Everyone else is using <a href="https://github.com/isaacs/rimraf"><code>rimraf</code></a> to clean build and intermediate files. I don&rsquo;t know enough to choose any different.</p>
<h2 id="thats-all-the-important-stuff-anyways">That&rsquo;s all the important stuff anyways</h2>
<p>I wanted to go over everything, but there&rsquo;s just too much. A lot of the ideas are still cooking. Expect more on every blogger&rsquo;s favorite topic: &ldquo;how I built my blog.&rdquo;</p>
<p>I&rsquo;m having fun though!</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Starting 2022 With Eleventy</title>
  <link>https://randomgeekery.org/post/2022/01/starting-2022-with-eleventy/</link>
  <pubDate>Sat, 01 Jan 2022 21:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/01/starting-2022-with-eleventy/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;https://randomgeekery.org/post/2022/01/../../../attachments/img/2022/cover-2022-01-01.jpg&#34; alt=&#34;attachments/img/2022/cover-2022-01-01.jpg&#34;/&gt;
A baby possum!&lt;/p&gt;
&lt;p&gt;Finally ported enough of my site to &lt;a href=&#34;https://randomgeekery.org/card/eleventy/&#34;&gt;card/Eleventy&lt;/a&gt; that I feel like making it live. It’s only been two and a half years since I started &lt;a href=&#34;https://randomgeekery.org/post/2019/04/eleventy/&#34;&gt;thinking&lt;/a&gt; about this. Why rush into things, right?&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>eleventy</category>  <category>ssg</category>  <category>site</category> 
  <content:encoded><![CDATA[<h2>It's not done, but it's done enough</h2><p><img src="/post/2022/01/../../../attachments/img/2022/cover-2022-01-01.jpg" alt="attachments/img/2022/cover-2022-01-01.jpg"/>
A baby possum!</p>
<p>Finally ported enough of my site to <a href="/card/eleventy/">card/Eleventy</a> that I feel like making it live. It&rsquo;s only been two and a half years since I started <a href="/post/2019/04/eleventy/">thinking</a> about this. Why rush into things, right?</p>
<h2 id="but-why">But why?</h2>
<p>Well, Eleventy&rsquo;s got <a href="https://mozilla.github.io/nunjucks/">Nunjucks</a> support, for starters. For the Pythonistas out there, Nunjucks is basically <a href="https://jinja2docs.readthedocs.io/en/stable/">Jinja</a> for Node.js.</p>
<p>Beyond that, the Node.js ecosystem is pretty lively, with plenty to keep the dedicated <a href="/post/2020/09/ssg-is-for-putterers/">putterer</a> occupied for a bit. Eleventy can hook into enough of that without going overboard on the <a href="https://jamstack.com">Jamstack</a> application side of things. A gentle transition.</p>
<h2 id="this-isnt-even-my-final-form">This isn&rsquo;t even my final form</h2>
<p>Nowhere near what I&rsquo;d call &ldquo;done.&rdquo; There&rsquo;s still things to touch up with the Eleventy site. Layout, workflow, architecture.</p>
<p>And naturally I&rsquo;m already casting glances at other SSGs like <a href="https://lumeland.github.io">Lume</a>. I haven&rsquo;t abandoned the <a href="/card/astro/">card/Astro</a> experiment either. I&rsquo;m just waiting for Astro to be a little quicker at assembling a site like mine.</p>
<p>I just really really wanted to stop complaining about <a href="/card/hugo/">card/Hugo</a>. It&rsquo;s great. It really is. It just hasn&rsquo;t felt like a good fit for my particular flow in the last couple years.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Work Break with Eleventy</title>
  <link>https://randomgeekery.org/post/2020/09/work-break-with-eleventy/</link>
  <pubDate>Sat, 19 Sep 2020 13:10:16 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/09/work-break-with-eleventy/</guid>
  <description>cover images work!
Forced myself to take a couple hours out of a ridiculous work schedule to putter on the site. Trying out something with card/Eleventy and the eleventy-base-blog starter.</description>
   <category>post</category> 
   <category>note</category> 
   <category>eleventy</category>  <category>site</category> 
  <content:encoded><![CDATA[<p><img src="/post/2020/09/../../../attachments/img/2020/cover-2020-09-19.png" alt="attachments/img/2020/cover-2020-09-19.png"/>
cover images work!</p>
<p>Forced myself to take a couple hours out of a ridiculous work schedule to putter on the site. Trying out something with <a href="/card/eleventy/">card/Eleventy</a> and the <a href="https://github.com/11ty/eleventy-base-blog">eleventy-base-blog</a> starter.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Eleventy 0.10.0 is out and I am distracted again</title>
  <link>https://randomgeekery.org/post/2020/01/eleventy-010-is-out-and-i-am-distracted-again/</link>
  <pubDate>Tue, 07 Jan 2020 21:19:30 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/01/eleventy-010-is-out-and-i-am-distracted-again/</guid>
  <description>Making note of this tweet for later:
{{&lt; tweet user=“eleven_ty” id=“1214681563507699713” &gt;}}
I love that there are so many great static site generators out. I hate that I don’t have enough time to try all of them.
But card/Eleventy has the possum logo. Hard to argue with that. Maybe I’ll revisit with the base blog template, or one of the other starter kits. The deep dive idea was a little ambitious, anyways.</description>
   <category>post</category> 
   <category>note</category> 
   <category>eleventy</category>  <category>shiny</category>  <category>possum</category>  <category>the-logo-makes-the-project</category> 
  <content:encoded><![CDATA[<p>Making note of this <a href="https://twitter.com/eleven_ty/status/1214681563507699713">tweet</a> for later:</p>
<p>{{&lt; tweet user=&ldquo;eleven_ty&rdquo; id=&ldquo;1214681563507699713&rdquo; &gt;}}</p>
<p>I love that there are so many great static site generators out. I hate that I don’t have enough time to try <em>all</em> of them.</p>
<p>But <a href="/card/eleventy/">card/Eleventy</a> has the possum logo. Hard to argue with that. Maybe I’ll revisit with the <a href="https://github.com/11ty/eleventy-base-blog">base blog</a> template, or one of the other <a href="https://www.11ty.dev/docs/starter/">starter kits</a>. The <a href="/post/2019/04/eleventy/">deep dive</a> idea was a little ambitious, anyways.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Eleventy</title>
  <link>https://randomgeekery.org/post/2019/04/eleventy/</link>
  <pubDate>Sat, 06 Apr 2019 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/04/eleventy/</guid>
  <description>&lt;p&gt;Spring has sprung, and with it comes thoughts of new tools to build a Web site. Okay no the picture has nothing to do with Web sites but isn’t it pretty?&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>node-js</category>  <category>eleventy</category>  <category>tools</category> 
  <content:encoded><![CDATA[<p>Spring has sprung, and with it comes thoughts of new tools to build a Web site. Okay no the picture has nothing to do with Web sites but isn&rsquo;t it pretty?</p>
<p><img src="/post/2019/04/../../../attachments/img/2019/cover-2019-04-06.jpg" alt="attachments/img/2019/cover-2019-04-06.jpg"/></p>
<p>I use <a href="/card/hugo/">card/Hugo</a> to build this site, and have for <a href="/post/2015/09/next-hugo/">a while</a> now. Hugo builds fast, includes loads of features, and by now has the added benefit of being familiar. It&rsquo;s still fun to see what else people use for their sites, though.</p>
<p><a href="/card/eleventy/">card/Eleventy</a> caught my eye with its claims at being a simpler static site generator. <a href="/card/node.js/">card/Node.js</a> powers Eleventy. That caught my attention because of how much I&rsquo;ve been using the platform at work recently.</p>
<p>Aided by the <a href="https://www.11ty.io/docs/">core documentation</a>, I&rsquo;ll make a single page site with a stylesheet. To my mind, that&rsquo;s the <a href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program">&ldquo;Hello World&rdquo;</a> of static site generators. It covers the three core elements: content, layouts, and including files outside of the content/layout flow (stylesheets, images, etc).</p>
<blockquote>
<p>[!NOTE] What if you just want to blog?
Use one of the <a href="https://www.11ty.io/docs/starter/">starter projects</a>, packaged with the configuration and plugins needed for blogging in Eleventy. I don&rsquo;t know enough about Eleventy or Node.js to tell you which one to use though!</p>
</blockquote>
<h2 id="starting-fresh-with-packagejson">Starting fresh with <code>package.json</code></h2>
<p>I&rsquo;ll follow the <a href="https://www.11ty.io/docs/local-installation/">suggestion</a> from docs and install Eleventy locally to the site project.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> mkdir rgb-eleventy
</span></span><span class="line"><span class="cl"><span class="gp">$</span> <span class="nb">cd</span> rgb-eleventy
</span></span><span class="line"><span class="cl"><span class="gp">$</span> npm init
</span></span><span class="line"><span class="cl"><span class="gp">$</span> npm install --save-dev @11ty/eleventy
</span></span><span class="line"><span class="cl"><span class="gp">$</span> npx eleventy
</span></span><span class="line"><span class="cl"><span class="go">Processed 0 files in 0.03 seconds
</span></span></span></code></pre>
</figure><p>Yay, the process works! Now I need content.</p>
<h2 id="content-read-markdown-write-html">Content: Read Markdown, write HTML</h2>
<p>I can stick with familiar <a href="/card/markdown/">card/Markdown</a> content, since Eleventy supports it through <a href="https://markdown-it.github.io/">markdown-it</a>. Throw a couple sentences in <code>index.md</code>:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="gh"># Random Geekery Blog
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>
</span></span><span class="line"><span class="cl">But in [Eleventy][].
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[Eleventy]: https://www.11ty.io/</span></span></code></pre>
</figure><p>And rebuild the site.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ npx eleventy
</span></span><span class="line"><span class="cl">Writing _site/index.html from ./index.md.
</span></span><span class="line"><span class="cl">Processed <span class="m">1</span> file in 0.07 seconds</span></span></code></pre>
</figure><p>So what&rsquo;s in <code>_site/index.html</code>?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Random Geekery Blog<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>But in <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://www.11ty.io/&#34;</span><span class="p">&gt;</span>Eleventy<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>That&rsquo;s HTML, all right. But I need a full HTML page. Rather than make my content file more complex, I&rsquo;ll use a layout template.</p>
<h2 id="templates">Templates</h2>
<p>Eleventy <a href="https://www.11ty.io/docs/layouts/">layouts</a> are similar to layouts in other site generators. They provide a skeletal HTML file along with special directives. These files get combined with your content files, creating complete pages that have a consistent layout and design.</p>
<p>Rather than focus on all the templating languages Eleventy supports, I&rsquo;ll use
<a href="https://mozilla.github.io/nunjucks/">Nunjucks</a>. I don&rsquo;t want to spend time looking at all the templating languages supported by Eleventy. I&rsquo;ll just use Nunjucks since it appears frequently in the docs.</p>
<p>My <code>_includes/layout.njk</code> is pretty much your basic minimal HTML 5 skeleton.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>{{title}}<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>{{title}}<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    {{ content | safe }}
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p><code>content</code> comes from the body of the content file, while <code>title</code> is in <code>index.md</code>&rsquo;s <a href="https://www.11ty.io/docs/data-frontmatter/">front matter</a>. That&rsquo;s also where I specify layout.</p>
<p>So yeah. I should probably add some front matter.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">layout: layout.njk
</span></span><span class="line"><span class="cl">title: Random Geekery Blog
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">But in [Eleventy][].
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[Eleventy]: https://www.11ty.io/</span></span></code></pre>
</figure><p>Rebuild, and now <code>_site/index.html</code> looks like a Web page.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Random Geekery Blog<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Random Geekery Blog<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>But in <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://www.11ty.io/&#34;</span><span class="p">&gt;</span>Eleventy<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span></span></span></code></pre>
</figure><h2 id="use-pass-through-file-copy-for-static-content">Use Pass-through File Copy for static content</h2>
<p>Finally, I want to put in some CSS. I could just insert it in the template, but I prefer to keep styles in their own file.</p>
<p>Eleventy&rsquo;s default behavior is minimal. It knows content. It knows templates. Going beyond that requires special instructions. In order to add static content like stylesheets, we must <a href="https://www.11ty.io/docs/config/">configure</a> Eleventy to recognize them.</p>
<p>My <code>.eleventy.js</code> tells Eleventy that everything in the folder <code>static/css</code> gets copied into site output unmodified.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">eleventyConfig</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">eleventyConfig</span><span class="p">.</span><span class="nx">addPassthroughCopy</span><span class="p">(</span><span class="s2">&#34;static/css&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">passthroughFileCopy</span><span class="o">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
</channel>
</rss>
