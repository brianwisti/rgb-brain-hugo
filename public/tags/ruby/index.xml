<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>rubyonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/ruby/</link>
    <description>
      Recent contentinruby on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 25 Dec 2022 11:00:00 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/tags/ruby/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Nanoc builds sites faster with 3.2.0</title>
  <link>https://randomgeekery.org/post/2022/12/nanoc-builds-faster-with-3-2-0/</link>
  <pubDate>Sun, 25 Dec 2022 11:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/12/nanoc-builds-faster-with-3-2-0/</guid>
  <description>just the numbers
Today is Christmas, which means version 3.2.0 of Ruby has been released. I read Peter Solnica’s post about Benchmarking Ruby 3.2 with YJIT. One bit of feedback he got was that YJIT — the now official Just In Time compiler — kicks in for frequently called methods:
{% quote( from=“Noah Gibbs” cite=&#34;https://ruby.social/@codefolio/109573860732354569&#34; ) %} By default, YJIT optimizes a method on the 30th time you call it.</description>
   <category>post</category> 
   <category>post</category> 
   <category>ruby</category>  <category>nanoc</category> 
  <content:encoded><![CDATA[<h2>Ain't no benchmark like an unscientific ad hoc benchmark</h2><p><img src="/post/2022/12/../../../attachments/img/2022/cover-2022-12-25.png" alt="attachments/img/2022/cover-2022-12-25.png"/>
just the numbers</p>
<p>Today is Christmas, which means version <a href="https://www.ruby-lang.org/en/news/2022/12/25/ruby-3-2-0-released/">3.2.0</a> of <a href="/card/ruby/">Ruby</a> has been released. I read Peter Solnica&rsquo;s post about <a href="https://www.solnic.dev/p/benchmarking-ruby-32-with-yjit">Benchmarking Ruby 3.2 with YJIT</a>. One bit of feedback he got was that YJIT — the now official Just In Time compiler — kicks in for frequently called methods:</p>
<p>{% quote(
from=&ldquo;Noah Gibbs&rdquo;
cite=&quot;<a href="https://ruby.social/@codefolio/109573860732354569">https://ruby.social/@codefolio/109573860732354569</a>&quot;
) %}
By default, YJIT optimizes a method on the 30th time you call it.
{% end %}</p>
<p>Well hey. The <a href="https://nanoc.app">Nanoc</a> iteration of my site has a few hundred pages. Nanoc probably calls some of its methods 30 or more times for that. Let&rsquo;s find out if 3.2.0 makes a difference.</p>
<h2 id="i-should-probably-install-320">I should probably install 3.2.0</h2>
<p>This is in my Windows 11 + WSL2 workspace. I wouldn&rsquo;t be surprised if Linux and macOS tests went faster.</p>
<p>Installed 3.2.0 on my system using <code>rbenv</code>. Worth mentioning that I had to <code>export CC=/home/linuxbrew/.linuxbrew/bin/gcc-12</code> for <code>rbenv install</code> to work at all. For some reason I had a <code>brew</code>-installed Ruby floating around, too. Removed that with <code>brew uninstall ruby</code> so <code>rbenv install 3.2.0</code> would work.</p>
<p>I have a very fiddly system.</p>
<h2 id="the-test">The &ldquo;test&rdquo;</h2>
<ol>
<li>Switch to the right version</li>
<li>Install dependencies for that version</li>
<li>Build the site</li>
<li>Build it again, to see how long things take when nothing&rsquo;s changed</li>
<li>Remove the build folder and move on to the next case</li>
</ol>
<p>First in 3.1.3 to set a baseline of sorts.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> rbenv <span class="nb">local</span> 3.1.3
</span></span><span class="line"><span class="cl"><span class="gp">$</span> bundle
</span></span><span class="line"><span class="cl"><span class="gp">$</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 50.39s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">Site compiled in 43.87s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> rm -r output/
</span></span></code></pre></div><p>Don&rsquo;t judge those numbers too harshly. Nanoc site configuration is Ruby code, and mine was very sloppy Ruby code. Regardless, it&rsquo;s way slower than <a href="https://gohugo.io">Hugo</a>.</p>
<p>Now in 3.2.0 without enabling YJIT, to see if just the plain old upgrade is quicker.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> rbenv <span class="nb">local</span> 3.2.0
</span></span><span class="line"><span class="cl"><span class="gp">$</span> bundle
</span></span><span class="line"><span class="cl"><span class="gp">$</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 43.58s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 37.30s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> rm -r output/
</span></span></code></pre></div><p>There&rsquo;s variation from one invocation to the next in 3.1.3, but 3.2.0&rsquo;s first build is consistently a sliver faster than 3.1.3&rsquo;s second build.</p>
<p>Finally with YJIT.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nv">RUBY_YJIT_ENABLE</span><span class="o">=</span><span class="m">1</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 29.51s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> <span class="nv">RUBY_YJIT_ENABLE</span><span class="o">=</span><span class="m">1</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 23.28s.
</span></span></span></code></pre></div><p>That is an impressive difference. We&rsquo;re still not talking Hugo numbers, of course.
But under 30 seconds means I might be able to pay attention long enough to fix
my terrible site configuration code.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: [2022-05-24 Tue 08:54]</title>
  <link>https://randomgeekery.org/post/2022/05/2022-05-24-tue-0854/</link>
  <pubDate>Tue, 24 May 2022 08:54:51 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/05/2022-05-24-tue-0854/</guid>
  <description>&lt;p&gt;Brain insists on a CLI flow for this tumblelog. So of course I have to mess up my perfectly functional flow.&lt;/p&gt;</description>
   <category>post</category> 
   <category>note</category> 
   <category>now</category>  <category>workflow</category>  <category>ruby</category> 
  <content:encoded><![CDATA[<p>Brain insists on a CLI flow for this tumblelog. So of course I have to mess up my perfectly functional flow.</p>
<p>I know I&rsquo;ll fiddle with it more later, but here&rsquo;s what I got at the moment.</p>
<p>I consider the Org inactive timestamps title core to the tumblelog flow. Better let <a href="https://gohugo.io/functions/dateformat/"><code>time.Format</code></a> produce something plausible in my <code>posts.md</code> Hugo archetype.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-md" data-lang="md"><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">title: &#34;[{{ time.Format &#34;2006-01-02 Mon 15:04&#34; .Date }}]&#34;
</span></span><span class="line"><span class="cl">author:
</span></span><span class="line"><span class="cl"><span class="k">-</span> Brian Wisti
</span></span><span class="line"><span class="cl">date: {{ .Date }}
</span></span><span class="line"><span class="cl">tags: []
</span></span><span class="line"><span class="cl">draft: false
</span></span><span class="line"><span class="cl">---
</span></span></code></pre></div><p>The archetype uses <a href="/card/yaml/">card/YAML</a> frontmatter instead of <a href="https://ox-hugo.scripter.co">ox-hugo</a>&rsquo;s default <a href="/card/toml/">card/TOML</a>. I find manually managing the tags is easier that way.</p>
<p>My brain picked <a href="/card/ruby/">Ruby</a> for the script to generate and open a new post, thanks mainly to the convenience of Piotr Murach&rsquo;s <a href="https://ttytoolkit.org">TTY toolkit</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env ruby</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s2">&#34;tty-command&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s2">&#34;tty-editor&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">POST_PATH</span> <span class="o">=</span> <span class="s2">&#34;content/posts/%Y/%m/%s.md&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">post_path</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span> <span class="no">POST_PATH</span>
</span></span><span class="line"><span class="cl"><span class="n">cmd</span> <span class="o">=</span> <span class="no">TTY</span><span class="o">::</span><span class="no">Command</span><span class="o">.</span><span class="n">new</span>
</span></span><span class="line"><span class="cl"><span class="n">cmd</span><span class="o">.</span><span class="n">run</span> <span class="s2">&#34;hugo new </span><span class="si">#{</span><span class="n">post_path</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">TTY</span><span class="o">::</span><span class="no">Editor</span><span class="o">.</span><span class="n">open</span> <span class="n">post_path</span>
</span></span></code></pre></div><p>All it does is ask Hugo to create a new post based on the archetype, and then open that post file in my <code>$EDITOR</code>.</p>
<p>I&rsquo;ll get to more later. I know from past experience I can use <code>tty-command</code> to manage the git bits after I&rsquo;m done writing.</p>
<p>But apparently if I want to pay rent I need to <em>work</em>.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Tweaking my tools</title>
  <link>https://randomgeekery.org/post/2021/02/tweaking-my-tools/</link>
  <pubDate>Tue, 16 Feb 2021 14:40:03 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/02/tweaking-my-tools/</guid>
  <description>Playing a little more with card/TTY Toolkit for the site workflow. I wanted to say I’m tightening focus, but with a require list like this for one tool?
require &#39;pastel&#39; require &#39;ruby-slugify&#39; require &#39;tty-editor&#39; require &#39;tty-exit&#39; require &#39;tty-logger&#39; require &#39;tty-option&#39; require &#39;tty-prompt&#39; require &#39;tty-screen&#39; “Tightening focus” would be a lie.
Anyways, it seems to function correctly. Huzzah! Now back to work.</description>
   <category>post</category> 
   <category>note</category> 
   <category>ruby</category>  <category>site</category> 
  <content:encoded><![CDATA[<p>Playing a little more with <a href="/card/tty-toolkit/">card/TTY Toolkit</a> for the site workflow. I wanted to say I&rsquo;m tightening focus, but with a <code>require</code> list like this for one tool?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;pastel&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;ruby-slugify&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;tty-editor&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;tty-exit&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;tty-logger&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;tty-option&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;tty-prompt&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;tty-screen&#39;</span>
</span></span></code></pre></div><p>&ldquo;Tightening focus&rdquo; would be a lie.</p>
<p>Anyways, it seems to function correctly. Huzzah! Now back to work.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Letting Ruby build Asciidoctor files for Hugo</title>
  <link>https://randomgeekery.org/post/2020/05/letting-ruby-build-asciidoctor-files-for-hugo/</link>
  <pubDate>Mon, 18 May 2020 14:15:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/05/letting-ruby-build-asciidoctor-files-for-hugo/</guid>
  <description>actually really proud of myself but this post needs all the disclaimers
[!WARNING] Normal people: don’t do any of this. The whole post is me compensating for making Hugo do things it’s not good at.
Stick with [Markdown][markdown] if you use [Hugo][hugo]. Use shortcodes or render hooks if you want to make things interesting. Experiment with card/reStructuredText or card/Asciidoctor — but anything past a few pages slows builds dramatically. Move away from Hugo if you prefer those formats.</description>
   <category>post</category> 
   <category>post</category> 
   <category>ruby</category>  <category>hugo</category>  <category>asciidoctor</category>  <category>site</category>  <category>don-t-try-this-at-home</category>  <category>fine-go-ahead</category>  <category>but-i-warned-you</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Stuff like this is why i don't advertise my site repo</h2><p><img src="/post/2020/05/../../../attachments/img/2020/cover-2020-05-18.jpg" alt="attachments/img/2020/cover-2020-05-18.jpg"/>
actually really proud of myself but this post needs all the disclaimers</p>
<blockquote>
<p>[!WARNING]
Normal people: don&rsquo;t do any of this.  The whole post is me compensating for making Hugo do things it&rsquo;s not good at.</p>
<p>Stick with [Markdown][markdown] if you use [Hugo][hugo].  Use <a href="https://gohugo.io/content-management/shortcodes/">shortcodes</a> or <a href="https://gohugo.io/getting-started/configuration-markup#markdown-render-hooks">render hooks</a> if you want to make things interesting. Experiment with <a href="/card/restructuredtext/">card/reStructuredText</a> or <a href="/card/asciidoctor/">card/Asciidoctor</a> — but anything past a few pages slows builds dramatically.  Move <em>away</em> from Hugo if you prefer those formats.  Try [Nikola][nikola] for <code>rst</code> blogs.  [Gatsby][gatsby] has a <a href="https://www.gatsbyjs.org/packages/gatsby-transformer-asciidoc/?=asciidoctor">plugin</a> to directly transform <code>adoc</code> content.  You have options!</p>
</blockquote>
<h2 id="asciidoctor">Asciidoctor?</h2>
<p>Asciidoctor is yet another lightweight formatting language, with official implementations in Ruby, JavaScript, and Java.  Processing tools transform it into HTML, PDF, and other formats.  Like Markdown, I find it easy to read and write the format.  Like reStructuredText and [Org][org], it provides structures suited for technical and long form writing.  Oh, and clearly labeled hooks for extending if the built-in structures don’t quite meet your needs.</p>
<h2 id="whats-this-got-to-do-with-hugo">What’s this got to do with Hugo?</h2>
<p>Hugo shines with Markdown, but you can use other <a href="https://gohugo.io/content-management/formats/">content formats</a> as well.  It supports Org files directly through <a href="https://github.com/niklasfasching/go-org">go-org</a>.  reStructuredText is supported if you have <code>rst2html.py</code> installed. Asciidoc and Asciidoctor are supported if you have their processors installed. And like [Jekyll][jekyll], Hugo supports HTML as an HTML authoring language if you tack some front matter onto it.</p>
<p>I enjoy the flexibility.  And that bit about supporting HTML as an authoring language is about to come in real handy.</p>
<blockquote>
<p>[!TIP]
go-org is nice, but <a href="https://ox-hugo.scripter.co/"><code>ox-hugo</code></a> excels if you want Hugo support tightly integrated with Org mode.</p>
</blockquote>
<h2 id="so-whats-the-problem">So what’s the problem?</h2>
<p>What’s up with this?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ hugo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                   |  EN
</span></span><span class="line"><span class="cl">-------------------+-------
</span></span><span class="line"><span class="cl">  Pages            | 1353
</span></span><span class="line"><span class="cl">  Paginator pages  |  128
</span></span><span class="line"><span class="cl">  Non-page files   |  442
</span></span><span class="line"><span class="cl">  Static files     |   31
</span></span><span class="line"><span class="cl">  Processed images | 1195
</span></span><span class="line"><span class="cl">  Aliases          | 1261
</span></span><span class="line"><span class="cl">  Sitemaps         |    1
</span></span><span class="line"><span class="cl">  Cleaned          |    0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total in 15929 ms
</span></span></code></pre></div><p>Sixteen seconds might look impressive compared to Jekyll.  It’s more alarming if you know Hugo’s reputation for speed.</p>
<p>I think my Asciidoctor files might be causing this slowdown.  I do have quite a few of them.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> make formats
</span></span><span class="line"><span class="cl"><span class="go">hugo list all | raku -e &#39;bag(lines[1..*].map({ .split(&#34;,&#34;)[0].IO.extension })).say&#39;
</span></span></span><span class="line"><span class="cl"><span class="go">Bag(adoc(206), html, md(424))
</span></span></span></code></pre></div><p>How to confirm this?  Well, I could run <code>hugo</code> in debug mode and scan the output.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> hugo --debug &gt; debug.log
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Building sites … INFO 2020/05/14 21:44:50 syncing static files to /home/random/Sites/rgb-hugo/randomgeekery.org/
</span></span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span><span class="line"><span class="cl"><span class="go">INFO 2020/05/14 21:44:50 Rendering contact.adoc with /home/random/Sites/rgb-hugo/scripts/asciidoctor ...
</span></span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span><span class="line"><span class="cl"><span class="go">INFO 2020/05/14 21:45:07 Rendering post/2020/05/querying-hugo-content-with-python/index.adoc with /home/random/Sites/rgb-hugo/scripts/asciidoctor ...
</span></span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span><span class="line"><span class="cl"><span class="go">Total in 17235 ms
</span></span></span></code></pre></div><p>Interesting.  I only updated a single <code>.adoc</code> file — this one — but Hugo rebuilds <em>all</em> of them.  It also spends about 17 seconds doing so.  17,000 of the 17,235 milliseconds spent in this build go to rebuilding mostly unchanged Asciidoctor files.</p>
<p>Okay.</p>
<h2 id="fine-ill-do-it-myself">Fine I’ll do it myself</h2>
<p>I could always build the <code>adoc</code> files myself instead of making Hugo do it.</p>
<h3 id="hang-onis-that-even-worth-it">Hang on — is that even worth it?</h3>
<p>How long does it take for a single process to build HTML from all the <code>adoc</code> files in my site?  Not much point in this idea if Asciidoctor takes 17 seconds on its own.</p>
<p>All right.  Let’s try this with roughly the same arguments Hugo does with <a href="https://gohugo.io/content-management/formats/#external-helpers">external helpers</a>.</p>
<div class="highlight" title="build-adoc"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="nb">require</span> <span class="s2">&#34;fileutils&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s2">&#34;asciidoctor&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">SRC_DIR</span> <span class="o">=</span> <span class="s2">&#34;content&#34;</span>
</span></span><span class="line"><span class="cl"><span class="no">BUILD_DIR</span> <span class="o">=</span> <span class="s2">&#34;adoc-out&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span> <span class="no">BUILD_DIR</span>
</span></span><span class="line"><span class="cl">  <span class="no">FileUtils</span><span class="o">.</span><span class="n">rm_r</span> <span class="no">BUILD_DIR</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">Dir</span><span class="o">[</span><span class="s2">&#34;</span><span class="si">#{</span><span class="no">SRC_DIR</span><span class="si">}</span><span class="s2">/**/*.adoc&#34;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">filename</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Mirror the nested folder structure where I found the `adoc` file</span>
</span></span><span class="line"><span class="cl">  <span class="n">dirname</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">branch</span> <span class="o">=</span> <span class="n">dirname</span><span class="o">.</span><span class="n">sub</span> <span class="sr">%r[^</span><span class="si">#{</span><span class="no">SRC_DIR</span><span class="si">}</span><span class="sr">/?]</span><span class="p">,</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">target_dir</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="no">BUILD_DIR</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">branch</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">target_base</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">sub</span> <span class="sr">%r{adoc$}</span><span class="p">,</span> <span class="s2">&#34;html&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">target_file</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">target_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">target_base</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="no">Asciidoctor</span><span class="o">.</span><span class="n">convert_file</span> <span class="n">filename</span><span class="p">,</span> <span class="ss">to_file</span><span class="p">:</span> <span class="n">target_file</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="ss">header_footer</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">safe</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">mkdirs</span><span class="p">:</span> <span class="kp">true</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>This fills a temporary folder with Asciidoctor’s generated HTML, keeping it out of Hugo’s way.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nb">time</span> ruby scripts/build-adoc
</span></span><span class="line"><span class="cl"><span class="go">0.61user 0.03system 0:00.65elapsed 98%CPU (0avgtext+0avgdata 20584maxresident)k
</span></span></span><span class="line"><span class="cl"><span class="go">0inputs+3680outputs (0major+7188minor)pagefaults 0swaps
</span></span></span></code></pre></div><p>0.65 seconds to build all the <code>.adoc</code> files.</p>
<p>So yes.  Building them fresh myself is quicker than 17 seconds.  That’s about what I figured, since Hugo apparently starts a fresh Ruby process for each <code>adoc</code> file.  I used a single process for all of them.</p>
<p>This experiment is worth pursuing further.</p>
<h2 id="give-it-a-shot">Give it a shot</h2>
<p>It will be fiddly, though.  I’m going to end up adding a build step, and complicating Hugo’s normally straightforward site generation process.</p>
<h3 id="keep-the-front-matter">Keep the front matter</h3>
<p>Asciidoctor has its own <a href="https://asciidoctor.org/docs/asciidoc-syntax-quick-reference/#document-header">document header</a> rules, but I don’t have to think too much about that.  To better support <a href="https://asciidoctor.org/docs/user-manual/#static-website-generators">static site generators</a>, Asciidoctor can be told what to do with YAML front matter.  I want front matter glued back to output before saving to Hugo’s <code>content</code> folder.</p>
<p>You can <a href="https://asciidoctor.org/docs/user-manual/#extensions">extend</a> Asciidoctor at multiple points in the conversion pipeline, with code blocks or full classes.  I’ll register a block extension for the postprocessor stage: after the document has been converted, but before it gets saved.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s2">&#34;asciidoctor&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s2">&#34;asciidoctor/extensions&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">Asciidoctor</span><span class="o">::</span><span class="no">Extensions</span><span class="o">.</span><span class="n">register</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># reinsert &#34;front-matter&#34; attribute</span>
</span></span><span class="line"><span class="cl">  <span class="n">postprocessor</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Create a YAML front matter + HTML content document that Hugo can work with</span>
</span></span><span class="line"><span class="cl">    <span class="n">process</span> <span class="k">do</span> <span class="o">|</span><span class="n">document</span><span class="p">,</span> <span class="n">output</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">      <span class="n">front_matter</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">attr</span> <span class="s2">&#34;front-matter&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="n">output</span> <span class="o">=</span> <span class="s2">&#34;---</span><span class="se">\n</span><span class="si">#{</span><span class="n">front_matter</span><span class="si">}</span><span class="se">\n</span><span class="s2">---</span><span class="se">\n\n</span><span class="si">#{</span><span class="n">output</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">Dir</span><span class="o">[</span><span class="s2">&#34;</span><span class="si">#{</span><span class="no">SRC_DIR</span><span class="si">}</span><span class="s2">/**/*.adoc&#34;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">filename</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">  <span class="no">Asciidoctor</span><span class="o">.</span><span class="n">convert_file</span> <span class="n">filename</span><span class="p">,</span> <span class="ss">to_file</span><span class="p">:</span> <span class="n">target</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="ss">header_footer</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">safe</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">mkdirs</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># extract front matter into a `front-matter` document attribute.</span>
</span></span><span class="line"><span class="cl">    <span class="ss">attributes</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;skip-front-matter&#34;</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><h3 id="what-about-page-resources">What about page resources?</h3>
<p>For adoc files, I’ll treat the Asciidoctor content folder as the source of truth.  Cover images and other <a href="https://gohugo.io/content-management/page-bundles/">page bundle</a> files go with the <code>adoc</code>.  <code>build-adoc</code> will copy them over when converting files.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="no">Dir</span><span class="o">[</span><span class="s2">&#34;</span><span class="si">#{</span><span class="no">SRC_DIR</span><span class="si">}</span><span class="s2">/**/*.adoc&#34;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">filename</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">  <span class="no">Dir</span><span class="o">[</span><span class="s2">&#34;</span><span class="si">#{</span><span class="n">dirname</span><span class="si">}</span><span class="s2">/*&#34;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">supplemental</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># We&#39;re just looking for resource bundle files</span>
</span></span><span class="line"><span class="cl">    <span class="k">next</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span> <span class="n">supplemental</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># We already grabbed the adoc file(s)</span>
</span></span><span class="line"><span class="cl">    <span class="k">next</span> <span class="k">if</span> <span class="n">supplemental</span> <span class="o">=~</span> <span class="sr">%r{adoc$}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="no">FileUtils</span><span class="o">.</span><span class="n">cp</span> <span class="n">supplemental</span><span class="p">,</span> <span class="n">target_dir</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><h3 id="only-rebuild-new-stuff">Only rebuild new stuff</h3>
<p>I might save a little more time — and disk writes — by limiting my build to updated adoc and supplemental files.</p>
<p>Course, it helps to stop deleting <code>BUILD_DIR</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="no">Dir</span><span class="o">[</span><span class="s2">&#34;</span><span class="si">#{</span><span class="n">dirname</span><span class="si">}</span><span class="s2">/*&#34;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">supplemental</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># We&#39;re just looking for resource bundle files</span>
</span></span><span class="line"><span class="cl">  <span class="k">next</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span> <span class="n">supplemental</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># We already grabbed the adoc file(s)</span>
</span></span><span class="line"><span class="cl">  <span class="k">next</span> <span class="k">if</span> <span class="n">supplemental</span> <span class="o">=~</span> <span class="sr">%r{adoc$}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">supplemental_base</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span> <span class="n">supplemental</span>
</span></span><span class="line"><span class="cl">  <span class="n">target_file</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">target_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">supplemental_base</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">copy_needed</span> <span class="o">=</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span> <span class="n">target_file</span>
</span></span><span class="line"><span class="cl">                  <span class="no">File</span><span class="o">.</span><span class="n">mtime</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="o">&gt;</span> <span class="no">File</span><span class="o">.</span><span class="n">mtime</span><span class="p">(</span><span class="n">target_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span>
</span></span><span class="line"><span class="cl">                  <span class="kp">true</span>
</span></span><span class="line"><span class="cl">                <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="n">copy_needed</span>
</span></span><span class="line"><span class="cl">    <span class="nb">puts</span> <span class="s2">&#34;Converting </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="no">FileUtils</span><span class="o">.</span><span class="n">copy</span> <span class="n">supplemental</span><span class="p">,</span> <span class="n">target_file</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span></code></pre></div><p>If processing a single file was more expensive, I’d use something more careful than a timestamp check.</p>
<h3 id="make-it-official">Make it official</h3>
<p>Let’s skip the gory details, but I eventually moved all the <code>adoc</code> posts, notes, and drafts to their own folder.  Now <code>build-adoc</code> officially generates HTML content with YAML front matter for Hugo.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="no">SRC_DIR</span> <span class="o">=</span> <span class="s2">&#34;adoc&#34;</span>
</span></span><span class="line"><span class="cl"><span class="no">BUILD_DIR</span> <span class="o">=</span> <span class="s2">&#34;content&#34;</span>
</span></span></code></pre></div><p>Since Asciidoctor finishes so promptly, I’ll run it every time I build the site.</p>
<div class="highlight" title="Makefile"><pre tabindex="0" class="chroma"><code class="language-Makefile" data-lang="Makefile"><span class="line"><span class="cl"><span class="nf">.PHONY</span><span class="o">:</span> <span class="n">adoc</span> <span class="n">build</span>
</span></span><span class="line"><span class="cl"><span class="nf">adoc</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    ruby scripts/build-adoc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">build</span><span class="o">:</span> <span class="n">adoc</span> <span class="c">## Build live version of site
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="nv">INCLUDE_ANALYTICS</span><span class="o">=</span><span class="m">1</span> hugo
</span></span><span class="line"><span class="cl">    cp etc/robots.txt randomgeekery.org/
</span></span><span class="line"><span class="cl">    cp etc/htaccess randomgeekery.org
</span></span></code></pre></div><h3 id="what-do-we-have-now">What do we have now?</h3>
<p>I finished my basic Asciidoctor + Hugo flow. How long does it take to build the site now? Let’s find out.</p>
<p>Every <code>adoc</code> file gets processed in the first run.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time make build
</span></span><span class="line"><span class="cl"># every adoc file is converted
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">done
</span></span><span class="line"><span class="cl">INCLUDE_ANALYTICS=1 hugo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                   |  EN
</span></span><span class="line"><span class="cl">-------------------+-------
</span></span><span class="line"><span class="cl">  Pages            | 1353
</span></span><span class="line"><span class="cl">  Paginator pages  |  128
</span></span><span class="line"><span class="cl">  Non-page files   |  431
</span></span><span class="line"><span class="cl">  Static files     |   31
</span></span><span class="line"><span class="cl">  Processed images | 1188
</span></span><span class="line"><span class="cl">  Aliases          | 1261
</span></span><span class="line"><span class="cl">  Sitemaps         |    1
</span></span><span class="line"><span class="cl">  Cleaned          |    0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total in 1416 ms
</span></span><span class="line"><span class="cl">cp etc/robots.txt randomgeekery.org/
</span></span><span class="line"><span class="cl">cp etc/htaccess randomgeekery.org
</span></span><span class="line"><span class="cl">3.80user 0.78system 0:02.87elapsed 159%CPU (0avgtext+0avgdata 198236maxresident)k
</span></span><span class="line"><span class="cl">24inputs+505056outputs (0major+19157minor)pagefaults 0swaps
</span></span></code></pre></div><p>Less than three seconds. I like that time more than 15-18 seconds.</p>
<p>I went to a bit of trouble to only process updated <code>adoc</code> files. Does it help?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time make build
</span></span><span class="line"><span class="cl">ruby scripts/build-adoc
</span></span><span class="line"><span class="cl">Converting adoc/draft/letting-ruby-build-asciidoctor-files-for-hugo/index.adoc
</span></span><span class="line"><span class="cl">done
</span></span><span class="line"><span class="cl">INCLUDE_ANALYTICS=1 hugo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                   |  EN
</span></span><span class="line"><span class="cl">-------------------+-------
</span></span><span class="line"><span class="cl">  Pages            | 1354
</span></span><span class="line"><span class="cl">  Paginator pages  |  128
</span></span><span class="line"><span class="cl">  Non-page files   |  432
</span></span><span class="line"><span class="cl">  Static files     |   31
</span></span><span class="line"><span class="cl">  Processed images | 1189
</span></span><span class="line"><span class="cl">  Aliases          | 1271
</span></span><span class="line"><span class="cl">  Sitemaps         |    1
</span></span><span class="line"><span class="cl">  Cleaned          |    0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total in 1458 ms
</span></span><span class="line"><span class="cl">cp etc/robots.txt randomgeekery.org/
</span></span><span class="line"><span class="cl">cp etc/htaccess randomgeekery.org
</span></span><span class="line"><span class="cl">3.11user 0.72system 0:01.90elapsed 200%CPU (0avgtext+0avgdata 212324maxresident)k
</span></span><span class="line"><span class="cl">64inputs+500976outputs (0major+61675minor)pagefaults 0swaps
</span></span></code></pre></div><p>Less than two seconds.  Then again, load from other system processes can add a second — or more, if I opened a browser tab to some JavaScript-intensive URL.</p>
<p>But it appears to help somewhat.  And again, I get happy when there are fewer disk writes.</p>
<h2 id="highlighting-code-samples">Highlighting code samples</h2>
<p>So at first, Asciidoctor wasn’t highlighting code samples. I had <code>:source-highlighter: rouge</code> in my document header, but it was being ignored. Rather than add preprocessor logic to ensure that the document header gets processed, I specified the same attributes for <em>every</em> file converted:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="no">Asciidoctor</span><span class="o">.</span><span class="n">convert_file</span> <span class="n">filename</span><span class="p">,</span> <span class="ss">to_file</span><span class="p">:</span> <span class="n">target_file</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="ss">header_footer</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">safe</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">mkdirs</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="ss">attributes</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;icons&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;font&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;source-highlighter&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;rouge&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;skip-front-matter&#34;</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div><p>All good now, right?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Rebuild failed:
</span></span><span class="line"><span class="cl">&#34;/home/random/Sites/rgb-hugo/content/post/2015/07/making-a-jekyll-collection/index.html:223:53&#34;: got closing shortcode, but none is open
</span></span></code></pre></div><p>Uh oh.</p>
<p>That’s not good.</p>
<p>When Hugo sees <code>{{ … }}</code> in my new HTML content files, it thinks that’s a shortcode!  That’s great if I <em>want</em> to invoke a shortcode.  Not so great in a <a href="/post/2015/07/making-a-jekyll-collection/">post with code samples</a> for working with templates.  Those aren’t supposed to get processed.</p>
<p>No problem.  <a href="http://rouge.jneen.net/">Rouge</a> handles syntax highlighting for my <code>adoc</code> files.  I need to take tokens that have already been transformed and make sure paired double curly braces are replaced with appropriate <a href="https://dev.w3.org/html5/html-author/charref">HTML entities</a>.  All I need is a slight  adjustment to <code>Rouge::Formatters::HTML#safe_span</code>.</p>
<p>I’d prefer to subclass <code>Rouge::Formatter::HTML</code>, but Asciidoctor chooses and creates formatters right in the middle of a <a href="https://github.com/asciidoctor/asciidoctor/blob/master/lib/asciidoctor/syntax_highlighter/rouge.rb#L15">highlight</a> method.  I would also need to create a new Asciidoctor adapter for syntax highlighting and update all my <code>adoc</code> content to use that adapter.  Great idea for later, but I don’t have that kind of time today.</p>
<p>I’ll <a href="https://en.wikipedia.org/wiki/Monkey_patch">monkey patch</a>  Rouge::Formatters::HTML<code>directly, redefining</code>safe_span` to perform the needed transformation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s2">&#34;asciidoctor/extensions&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s2">&#34;rouge&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Make Rouge output safe for Hugo</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Rouge</span><span class="o">::</span><span class="no">Formatters</span><span class="o">::</span><span class="no">HTML</span>
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="nf">safe_span</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="n">safe_val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">safe_val</span> <span class="o">=</span> <span class="n">safe_val</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\{\{/</span><span class="p">,</span> <span class="s2">&#34;&amp;#123;&amp;#123;&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\}\}/</span><span class="p">,</span> <span class="s2">&#34;&amp;#125;&amp;#125;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">tok</span> <span class="o">==</span> <span class="no">Rouge</span><span class="o">::</span><span class="no">Token</span><span class="o">::</span><span class="no">Tokens</span><span class="o">::</span><span class="no">Text</span>
</span></span><span class="line"><span class="cl">      <span class="n">safe_val</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">      <span class="n">shortname</span> <span class="o">=</span> <span class="n">tok</span><span class="o">.</span><span class="n">shortname</span> <span class="p">\</span>
</span></span><span class="line"><span class="cl">        <span class="ow">or</span> <span class="k">raise</span> <span class="s2">&#34;unknown token: </span><span class="si">#{</span><span class="n">tok</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2"> for </span><span class="si">#{</span><span class="n">safe_val</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;&lt;span class=</span><span class="se">\&#34;</span><span class="si">#{</span><span class="n">shortname</span><span class="si">}</span><span class="se">\&#34;</span><span class="s2">&gt;</span><span class="si">#{</span><span class="n">safe_val</span><span class="si">}</span><span class="s2">&lt;/span&gt;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><blockquote>
<p>[!NOTE] What about shortcodes I want to keep?
This is just general advice to make Asciidoctor and Hugo play nice with each other. You don’t need to rebuild your entire site flow to use this information.</p>
<p>Say I’ve got a shortcode for displaying images as figures.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">{{​&lt; show-figure image=&#34;cover.png&#34; description=&#34;Taskwarrior edit view&#34; &gt;}}
</span></span></code></pre></div><p>Asciidoctor transforms unsafe characters into HTML entities.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{​<span class="p">&lt;</span> <span class="nt">show-figure</span> <span class="na">image</span><span class="o">=</span><span class="s">&#34;cover.png&#34;</span> <span class="na">description</span><span class="o">=</span><span class="s">&#34;Taskwarrior edit view&#34;</span> <span class="p">&gt;</span>}}
</span></span></code></pre></div><p>And it looks kind of embarrassing.</p>
<p><img src="/post/2020/05/attachments/img/2020/escaped-shortcode.png" title="my shortcode got escaped" alt="screenshot showing image shortcode instead of an image"/></p>
<p>The solution? Wrap that shortcode in a <a href="https://asciidoctor.org/docs/user-manual/#pass-macros">passthrough macro</a>.</p>
<pre tabindex="0"><code class="language-adoc" data-lang="adoc">pass:[{{​&lt; show-figure image=&#34;cover.png&#34; description=&#34;Taskwarrior edit view&#34; &gt;}}]
</code></pre><p><img src="/post/2020/05/attachments/img/2020/correct-shortcode.png" title="using a passthrough macro" alt="correct shortcode"/></p>
<p>Much better.</p>
</blockquote>
<h3 id="now-what-do-we-have"><em>Now</em> what do we have?</h3>
<p>I’m not sure. Let’s find out with a typical <code>build all</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time make all
</span></span><span class="line"><span class="cl">ruby scripts/build-adoc
</span></span><span class="line"><span class="cl">Converting adoc/draft/letting-ruby-build-asciidoctor-files-for-hugo/index.adoc
</span></span><span class="line"><span class="cl">done
</span></span><span class="line"><span class="cl">INCLUDE_ANALYTICS=1 hugo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                   |  EN
</span></span><span class="line"><span class="cl">-------------------+-------
</span></span><span class="line"><span class="cl">  Pages            | 1354
</span></span><span class="line"><span class="cl">  Paginator pages  |  128
</span></span><span class="line"><span class="cl">  Non-page files   |  432
</span></span><span class="line"><span class="cl">  Static files     |   31
</span></span><span class="line"><span class="cl">  Processed images | 1189
</span></span><span class="line"><span class="cl">  Aliases          | 1271
</span></span><span class="line"><span class="cl">  Sitemaps         |    1
</span></span><span class="line"><span class="cl">  Cleaned          |    0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total in 1447 ms
</span></span><span class="line"><span class="cl">cp etc/robots.txt randomgeekery.org/
</span></span><span class="line"><span class="cl">cp etc/htaccess randomgeekery.org
</span></span><span class="line"><span class="cl">perl scripts/generate-archives
</span></span><span class="line"><span class="cl">prove -r
</span></span><span class="line"><span class="cl">./t/site/test_archive.t .... ok
</span></span><span class="line"><span class="cl">./t/site/test_links.t ......
</span></span><span class="line"><span class="cl"># [mailto:brianwisti@pobox.com] is an email link, friend
</span></span><span class="line"><span class="cl">./t/site/test_links.t ...... ok
</span></span><span class="line"><span class="cl">./t/test_db.t .............. ok
</span></span><span class="line"><span class="cl">./t/test_db_persistence.t .. ok
</span></span><span class="line"><span class="cl">./t/test_pod.t ............. ok
</span></span><span class="line"><span class="cl">All tests successful.
</span></span><span class="line"><span class="cl">Files=5, Tests=10,  7 wallclock secs ( 0.26 usr  0.05 sys +  6.65 cusr  0.29 csys =  7.25 CPU)
</span></span><span class="line"><span class="cl">Result: PASS
</span></span><span class="line"><span class="cl">make all  10.44s user 1.15s system 114% cpu 10.108 total
</span></span></code></pre></div><p>Yeah there’s a lot of stuff there I still need to write about.  Long story short: by directly using Ruby to convert Asciidoctor files into HTML for Asciidoctor, build and test <em>combined</em> take noticeably less time than build alone when Hugo had to manage the whole thing.  And it’s not that different from how <code>ox-hugo</code> manages Org content.  A similar approach would probably work for <code>rst</code> files.</p>
<p>I like it for now. Keeps me from getting bored.</p>
<p>But — and this is a big but — I couldn’t recommend this approach for normal  people with things to do. Site generation now has more moving parts, which I must test and maintain if I want to share the least little note_.</p>
<h2 id="what-now">What now?</h2>
<p>Yay, everything works!</p>
<p>What’s next?  I’m not sure.  Hugo is an ever-smaller piece of my site-building workflow.  That’s <em>somewhat</em> intentional.  Still <a href="/post/2019/12/removing-mmark-has-me-grumbly/">grumbly</a> about having to fiddle with all my Markdown files last year.  But still.</p>
<ul>
<li>Probably explore some AsciiDoctor extensions. If most of the work happens  when I write a file, I won’t care much if that file takes a second to turn into HTML. And there are so many to choose from, from <a href="https://asciidoctor.org/docs/asciidoctor-diagram">Asciidoctor Diagram</a> to the <a href="https://github.com/asciidoctor/asciidoctor-extensions-lab">Extensions Lab</a> and beyond.</li>
<li>Maybe turn my shortcodes into macros? Write some of my <em>own</em> extension classes?</li>
<li>Keep exploring site generators. I love to putter. A framework that encourages puttering might suit me better than Hugo.  <a href="/card/eleventy/">Eleventy</a>, for example.</li>
</ul>
]]></content:encoded>
</item>
<item>
  <title>Post: Got a Working glitch-soc Rails Dev Environment</title>
  <link>https://randomgeekery.org/post/2020/05/got-a-working-glitch-soc-rails-dev-environment/</link>
  <pubDate>Mon, 04 May 2020 23:26:21 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/05/got-a-working-glitch-soc-rails-dev-environment/</guid>
  <description>I wanted to build and test a development instance of glitch-soc, a friendly fork of Mastodon. I succeeded. But I am very tired now. Here are my notes, along with some after-the-fact editorializing.
It’s less tutorial and more confessional. I haven’t used Rails much since 4.0 was shiny. So there’s likely some common practice workflow that I don’t know yet. But I got it to work.
Install glitch-soc locally glitch-soc documentation refers you to Mastodon docs, Mastodon’s installation instructions seem focused on production installations.</description>
   <category>post</category> 
   <category>post</category> 
   <category>rails</category>  <category>mastodon</category>  <category>ruby</category>  <category>sort-of</category>  <category>mostly-rails</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>I remain ambivalent about Rails development</h2><p><img src="/post/2020/05/../../../attachments/img/2020/cover-2020-05-04.png" alt="attachments/img/2020/cover-2020-05-04.png"/></p>
<p>I wanted to build and test a development instance of <a href="https://glitch-soc.github.io/docs/"><code>glitch-soc</code></a>, a friendly fork of <a href="https://joinmastodon.org/">Mastodon</a>.  I succeeded.  But I am very tired now.  Here are my notes, along with some after-the-fact editorializing.</p>
<p>It’s less tutorial and more confessional.  I haven’t used Rails much since 4.0 was shiny.  So there’s likely some common practice workflow that I don’t know yet.  But I got it to work.</p>
<h2 id="install-glitch-soc-locally">Install glitch-soc locally</h2>
<p><code>glitch-soc</code> documentation refers you to <a href="https://docs.joinmastodon.org">Mastodon docs</a>, Mastodon’s <a href="https://docs.joinmastodon.org/admin/install/">installation instructions</a> seem focused on production installations.  I bounce back and forth between Mastodon’s <a href="https://github.com/tootsuite/mastodon">README</a> and its <a href="https://docs.joinmastodon.org/dev/setup/">developer documentation</a>.</p>
<p>The README says I need:</p>
<ul>
<li><a href="https://www.postgresql.org/">PostgreSQL</a> 9.5+</li>
<li><a href="https://redis.io/">Redis</a> 4+</li>
<li><a href="/card/ruby/">card/Ruby</a> 2.5+</li>
<li><a href="/card/node.js/">card/Node.js</a> 10.13+</li>
</ul>
<p><a href="https://github.com/rbenv/rbenv">rbenv</a> and <a href="https://github.com/nvm-sh/nvm">nvm</a> help with the language requirements, but this fresh <a href="https://manjaro.org/">Manjaro</a> partition lacks the other requirements.</p>
<h3 id="install-redis">Install Redis</h3>
<p>Used the <a href="https://wiki.archlinux.org/index.php/Redis">Arch wiki</a> as a guide.  Didn’t need to edit config, though.  Instance installed via <a href="https://wiki.manjaro.org/index.php?title=Pamac">Pamac</a> is already configured to only listen to <code>127.0.0.1</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> pamac install redis
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo systemctl start redis
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo systemctl <span class="nb">enable</span> redis
</span></span></code></pre></div><dl>
<dt>Version installed</dt>
<dd>6.0</dd>
</dl>
<h3 id="install-postgresql">Install Postgresql</h3>
<p>Once again, going off the <a href="https://wiki.archlinux.org/index.php/PostgreSQL">Arch wiki entry</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> pamac install postgresql
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo -iu postgres
</span></span><span class="line"><span class="cl"><span class="gp">&gt;</span> initdb -D /var/lib/postgres/data
</span></span><span class="line"><span class="cl"><span class="gp">&gt;</span> <span class="nb">exit</span>
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo systemctl start postgresql.service
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo systemctl <span class="nb">enable</span> postgresql.service
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo -iu postgres
</span></span><span class="line"><span class="cl"><span class="gp">&gt;</span> createuser --interactive
</span></span><span class="line"><span class="cl"><span class="go">Enter name of role to add: random
</span></span></span><span class="line"><span class="cl"><span class="go">Shall the new role be a superuser? (y/n) y
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">&gt;</span> <span class="nb">exit</span>
</span></span><span class="line"><span class="cl"><span class="gp">$</span> createdb random
</span></span></code></pre></div><p>That reminds me.  I want to finish reading <a href="https://theartofpostgresql.com/">The Art of PostgreSQL</a>.</p>
<dl>
<dt>Version installed</dt>
<dd>12.2</dd>
</dl>
<h3 id="clone-project-and-install-dev-dependencies">Clone project and install dev dependencies</h3>
<p>Not the required services.  I just installed those.  Languages and libraries.</p>
<h4 id="fork--clone-repo">fork &amp; clone repo</h4>
<p>Since I hope to contribute bug fixes someday, I’ll fork the <a href="https://github.com/glitch-soc/mastodon">repo</a> rather than just clone it.  I clone my fork instead.</p>
<p>Dev language is weird.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> git clone git@github.com:brianwisti/mastodon.git
</span></span><span class="line"><span class="cl"><span class="gp">$</span> <span class="nb">cd</span> mastodon
</span></span></code></pre></div><p>The project’s <code>.ruby-version</code> file specifies Ruby 2.6.6.  Rbenv immediately
warns me that I lack the correct installed version.  It also doesn’t recognize
the version when I try installing it, so I must refresh <a href="https://github.com/rbenv/ruby-build">ruby-build</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> git -c ~/.rbenv/plugins/ruby-build pull
</span></span><span class="line"><span class="cl"><span class="gp">$</span> rbenv install
</span></span></code></pre></div><p>2.6.6 is a bit more specific than &ldquo;2.5+&rdquo; but no big deal. Got the right Ruby
version. Time to install the gems.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> bundle install
</span></span></code></pre></div><p>Oh hey what’s this? It seems relevant to my <a href="/card/indieweb/">interests</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">⋮
</span></span><span class="line"><span class="cl">Post-install message from microformats:
</span></span><span class="line"><span class="cl">Prior to version 4.0.0, the microformats gem was named &#34;microformats2.&#34;
</span></span></code></pre></div><p>Adding a task to look more closely at <a href="https://github.com/microformats/microformats-ruby">microformats-ruby</a>.  It’s more active than <a href="https://github.com/microformats/mf2py">mf2py</a>.</p>
<p><a href="v">Yarn</a> manages the node-specific project dependencies.  Better install that.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> npm install -g yarn
</span></span></code></pre></div><p>Okay now I can install the Node stuff.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> yarn install
</span></span><span class="line"><span class="cl"><span class="go">yarn install v1.22.4
</span></span></span><span class="line"><span class="cl"><span class="go">[1/6] Validating package.json...
</span></span></span><span class="line"><span class="cl"><span class="go">error @tootsuite/mastodon@: The engine &#34;node&#34; is incompatible with this module. Expected version &#34;&gt;=10.13 &lt;13&#34;. Got &#34;13.11.0&#34;
</span></span></span><span class="line"><span class="cl"><span class="go">error Found incompatible module.
</span></span></span><span class="line"><span class="cl"><span class="go">info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.
</span></span></span></code></pre></div><p>At some point I should <a href="https://github.com/nvm-sh/nvm#calling-nvm-use-automatically-in-a-directory-with-a-nvmrc-file">enable</a> automatic <code>nvm use</code>.  Meanwhile I’ll just install.</p>
<blockquote>
<p>[!NOTE]
Or maybe I could play with <a href="/card/volta/">card/Volta</a>.  Not today. Maybe later.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> nvm install
</span></span><span class="line"><span class="cl"><span class="go">Found &#39;/home/random/Projects/mastodon/.nvmrc&#39; with version &lt;12&gt;
</span></span></span><span class="line"><span class="cl"><span class="go">Downloading and installing node v12.16.3...
</span></span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span><span class="line"><span class="cl"><span class="go">Now using node v12.16.3 (npm v6.14.4)
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> npm install -g yarn
</span></span><span class="line"><span class="cl"><span class="gp">$</span> yarn install
</span></span></code></pre></div><p>No complaints about Node.js versions now.  Good.  Time to actually set up the application?</p>
<p>Dev docs say <code>rails db:setup</code>, so that’s what I type.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> rails db:setup
</span></span><span class="line"><span class="cl"><span class="go">zsh: command not found: rails
</span></span></span></code></pre></div><p>Oh right.  Because I’m not using a fresh Rails app, but an existing project.  I could use <code>bundle exec</code> but for some reason I feel stubborn.  I must make at least one step of my installation process match the documentation.</p>
<p>I use <a href="https://direnv.net">direnv</a>, so I can add the path locally.</p>
<div class="highlight" title=".envrc"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">PATH_add <span class="s2">&#34;bin&#34;</span>
</span></span></code></pre></div><p>Then I need to let direnv know this change is acceptable.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> direnv allow
</span></span></code></pre></div><p>There’s probably a better Rails-specific or Zsh-specific approach, but I’m in a hurry.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> rails db:setup
</span></span></code></pre></div><p>Loads of text follows. That’s good, right?</p>
<p>Instructions go straight to running the application, but that’s not my style.</p>
<h2 id="getting-tests-to-pass">Getting tests to pass</h2>
<p>I want to run tests first. Blame <a href="/card/perl/">card/Perl</a>. I have certain expectations after years of watching <code>cpan</code> run tests before declaring something installed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ rspec
</span></span><span class="line"><span class="cl">⋮
</span></span><span class="line"><span class="cl">332) Auth::ChallengesController POST #create with incorrect password renders challenge
</span></span><span class="line"><span class="cl">       Failure/Error: = javascript_pack_tag &#34;locales&#34;, integrity: true, crossorigin: &#39;anonymous&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       ActionView::Template::Error:
</span></span><span class="line"><span class="cl">         Webpacker can&#39;t find locales in /home/random/Projects/mastodon/public/packs-test/manifest.json. Possible causes:
</span></span><span class="line"><span class="cl">         1. You want to set webpacker.yml value of compile to true for your environment
</span></span><span class="line"><span class="cl">            unless you are using the `webpack -w` or the webpack-dev-server.
</span></span><span class="line"><span class="cl">         2. webpack has not yet re-run to reflect updates.
</span></span><span class="line"><span class="cl">         3. You have misconfigured Webpacker&#39;s config/webpacker.yml file.
</span></span><span class="line"><span class="cl">         4. Your webpack configuration is not creating a manifest.
</span></span><span class="line"><span class="cl">         Your manifest contains:
</span></span><span class="line"><span class="cl">         {
</span></span><span class="line"><span class="cl">         }
</span></span><span class="line"><span class="cl">       # ./app/views/layouts/application.html.haml:23:in `_app_views_layouts_application_html_haml___4376952060303332774_47460103924140&#39;
</span></span><span class="line"><span class="cl">       # ./app/views/layouts/auth.html.haml:13:in `_app_views_layouts_auth_html_haml___1721087443773625754_47460102744080&#39;
</span></span><span class="line"><span class="cl">       # ./app/controllers/concerns/challengable_concern.rb:47:in `render_challenge&#39;
</span></span><span class="line"><span class="cl">       # ./app/controllers/auth/challenges_controller.rb:20:in `create&#39;
</span></span><span class="line"><span class="cl">       # ./app/controllers/concerns/localized.rb:18:in `block in set_locale&#39;
</span></span><span class="line"><span class="cl">       # ./app/controllers/concerns/localized.rb:17:in `set_locale&#39;
</span></span><span class="line"><span class="cl">       # ./spec/controllers/auth/challenges_controller_spec.rb:31:in `block (4 levels) in &lt;top (required)&gt;&#39;
</span></span><span class="line"><span class="cl">       # ------------------
</span></span><span class="line"><span class="cl">       # --- Caused by: ---
</span></span><span class="line"><span class="cl">       # Webpacker::Manifest::MissingEntryError:
</span></span><span class="line"><span class="cl">       #   Webpacker can&#39;t find locales in /home/random/Projects/mastodon/public/packs-test/manifest.json. Possible causes:
</span></span><span class="line"><span class="cl">       #   1. You want to set webpacker.yml value of compile to true for your environment
</span></span><span class="line"><span class="cl">       #      unless you are using the `webpack -w` or the webpack-dev-server.
</span></span><span class="line"><span class="cl">       #   2. webpack has not yet re-run to reflect updates.
</span></span><span class="line"><span class="cl">       #   3. You have misconfigured Webpacker&#39;s config/webpacker.yml file.
</span></span><span class="line"><span class="cl">       #   4. Your webpack configuration is not creating a manifest.
</span></span><span class="line"><span class="cl">       #   Your manifest contains:
</span></span><span class="line"><span class="cl">       #   {
</span></span><span class="line"><span class="cl">       #   }
</span></span><span class="line"><span class="cl">       #   ./app/views/layouts/application.html.haml:23:in `_app_views_layouts_application_html_haml___4376952060303332774_47460103924140&#39;
</span></span><span class="line"><span class="cl">⋮
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Finished in 4 minutes 4.3 seconds (files took 6.07 seconds to load)
</span></span><span class="line"><span class="cl">2680 examples, 332 failures, 23 pending
</span></span></code></pre></div><p>Mhm.  That’s what I thought.  I’m going to need to write a post about getting this to work, aren’t I?</p>
<p>Let’s skip the hour or two of flailing and digging into past <code>glitch-soc</code> and Mastodon tickets.</p>
<p>The problem?  <a href="https://github.com/rails/webpacker">Webpacker</a> doesn’t compile assets for the test environment, because <a href="https://circleci.com/">CircleCI</a> already does that.</p>
<div class="highlight" title=".config/webpacker.yml"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">test</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&lt;&lt;</span><span class="p">:</span><span class="w"> </span><span class="cp">*default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># CircleCI precompiles packs prior to running the tests.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Also avoids race conditions in parallel_tests.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">compile</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Compile test packs to a separate directory</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">public_output_path</span><span class="p">:</span><span class="w"> </span><span class="l">packs-test</span><span class="w">
</span></span></span></code></pre></div><p>Set <code>compile</code> to <code>true</code> and everything passes.  Except they need that as <code>false</code> for CircleCI.  That — does this mean they never run any tests locally in development?  That tests only run after a commit is pushed?</p>
<p>Inconceivable.  The very thought is like fingernails on a chalkboard.  Surely I missed something in the documentation.</p>
<p>Well I’m going to run tests locally one way or another.</p>
<p>Gimme a second.</p>
<p>Okay how about this?</p>
<p>First, clean up the compiled assets from my config experiment.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nv">RAILS_ENV</span><span class="o">=</span><span class="nb">test</span> rake assets:clobber
</span></span></code></pre></div><p>Next, precompile the assets and run tests again.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nv">RAILS_ENV</span><span class="o">=</span><span class="nb">test</span> rake assets:precompile
</span></span><span class="line"><span class="cl"><span class="gp">$</span> rspec
</span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span><span class="line"><span class="cl"><span class="go">Finished in 4 minutes 10.6 seconds (files took 6.04 seconds to load)
</span></span></span><span class="line"><span class="cl"><span class="go">2680 examples, 0 failures, 23 pending
</span></span></span></code></pre></div><p>Huzzah! Aside from that ghastly test time.  I’ve seen worse.  I’ve <em>written</em> worse.</p>
<p>Clearly I need to automate this.  Maybe something to do with Foreman.  Maybe just a shell script that clobbers, precompiles, and runs tests.</p>
<p>A real fix — if one is needed, and I didn’t just miss a vital paragraph of documentation — would be to give CircleCI its own environment distinct from the default test environment.</p>
<h2 id="good-enough">Good enough</h2>
<p>Will I actually do anything with my <code>glitch-soc</code> fork?  No idea.  But I want to share this for other dusty Ruby folks whose Rails applications predate <a href="https://webpack.js.org/">Webpack</a>.</p>
<p>I should at least fiddle with instance settings enough to get a cute screenshot.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Crafts Are Now Posts</title>
  <link>https://randomgeekery.org/post/2018/05/crafts-are-now-posts/</link>
  <pubDate>Sat, 26 May 2018 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2018/05/crafts-are-now-posts/</guid>
  <description>&lt;p&gt;I turned the craft section into a Craft category — then a tag years later. Drawing, Knitting, and Crochet became tags. The rest of this post is just notes about that.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>site</category>  <category>ruby</category>  <category>hugo</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p>I turned the craft section into a Craft category — then a tag years later. Drawing, Knitting, and Crochet became tags. The rest of this post is just notes about that.</p>
<h2 id="why">Why?</h2>
<p>I want to improve the organization of my site content.</p>
<p>I created the <em>inbox/Crafting</em> pages in 2015 as a <a href="/post/2015/07/making-a-jekyll-collection/">Jekyll collection</a>. This kept them out of the site RSS feed, which made sense to me at the time. Craft pages were nothing like posts.</p>
<p><a href="/post/2015/09/next-hugo/">Switching to Hugo</a> resulted in turning the Jekyll collection into its own section, with a layout that prominently featured an image of the finished project. I liked the layout so much that I incorporated it into posts. The only differences between craft and post content were their URLs and the folders I saved them in.</p>
<p>During my attempts to get Disqus working here, I changed the <a href="http://gohugo.io/content-management/urls/#permalinks">permalink</a> configuration to something more blog-like — <code>/:year/:month/:day/:title</code> — scrubbing section out of the permalink as I slowly admitted to myself there was little to distinguish crafts and posts.</p>
<p>I finally abandoned Disqus — and Google Analytics — to prevent anyone tracking my site visitors. I was GDPR compliant before it was cool!</p>
<p>I complete the last step of this process today: transforming craft content into post content, and updating site configuration to handle this change.</p>
<h2 id="how">How?</h2>
<p>How much craft content will I need to migrate?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> find content/craft/ -name <span class="s1">&#39;*.md&#39;</span> <span class="p">|</span> wc -l
</span></span><span class="line"><span class="cl"><span class="go">51
</span></span></span></code></pre></div><p>51 items is not bad, but it is more than I want to update manually. Time for a little code. Today I choose <a href="/card/ruby/">card/Ruby</a>.</p>
<h3 id="transform-front-matter-in-craft-content">Transform front matter in Craft content</h3>
<p>The plan is to transform craft content <a href="http://gohugo.io/content-management/front-matter/">front matter</a> for craft content, then manually move everything into <code>content/post</code>.</p>
<p>Here are the basic changes I need to make:</p>
<p>For every markdown file in <code>content/craft</code>:</p>
<ul>
<li>Category becomes &ldquo;craft&rdquo;</li>
<li>Former category (&ldquo;knitting&rdquo;, &ldquo;drawing&rdquo;, &ldquo;crochet&rdquo;) becomes first tag.</li>
<li>Oops I have some word case inconsistencies (&ldquo;Knitting&rdquo;, &ldquo;knitting&rdquo;). Fix those.</li>
<li>Rewrite the file with the new front matter.</li>
</ul>
<p>I use <a href="/card/yaml/">card/YAML</a> for front matter. Ruby includes a <a href="http://ruby-doc.org/stdlib-2.5.1/libdoc/yaml/rdoc/YAML.html">core library</a> for handling YAML. <a href="http://ruby-doc.org/stdlib-2.5.1/libdoc/find/rdoc/Find.html#method-c-find">Find.find</a> helps me find the markdown content files. This means I do not need to install extra libraries!</p>
<div class="highlight" title="migrate-craft.rb"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;find&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;yaml&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">CRAFT_DIR</span> <span class="o">=</span> <span class="s1">&#39;content/craft&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">Find</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="no">CRAFT_DIR</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Rule out everything but markdown files</span>
</span></span><span class="line"><span class="cl">  <span class="k">next</span> <span class="k">unless</span> <span class="no">FileTest</span><span class="o">.</span><span class="n">file?</span> <span class="n">path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">next</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">extname</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&#34;.md&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Load front matter and content</span>
</span></span><span class="line"><span class="cl">  <span class="n">fence_count</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="n">front_matter_text</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="n">content_text</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">chomp</span> <span class="o">==</span> <span class="s1">&#39;---&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="n">fence_count</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">fence_count</span> <span class="o">==</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">      <span class="n">front_matter_text</span> <span class="o">+=</span> <span class="n">line</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">      <span class="n">content_text</span> <span class="o">+=</span> <span class="n">line</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">front_matter</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load</span> <span class="n">front_matter_text</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># category becomes a tag</span>
</span></span><span class="line"><span class="cl">  <span class="n">old_category</span> <span class="o">=</span> <span class="n">front_matter</span><span class="o">[</span><span class="s1">&#39;categories&#39;</span><span class="o">][</span><span class="mi">0</span><span class="o">].</span><span class="n">downcase</span>
</span></span><span class="line"><span class="cl">  <span class="n">front_matter</span><span class="o">[</span><span class="s1">&#39;tags&#39;</span><span class="o">].</span><span class="n">prepend</span> <span class="n">old_category</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># craft becomes the new category</span>
</span></span><span class="line"><span class="cl">  <span class="n">front_matter</span><span class="o">[</span><span class="s1">&#39;categories&#39;</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;craft&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="n">front_matter</span><span class="o">.</span><span class="n">to_yaml</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="n">content_text</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>I run it and add changes with <code>-p</code> to double check the output. It worked!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> ruby migrate-craft.rb
</span></span><span class="line"><span class="cl"><span class="gp">$</span> git add -p
</span></span><span class="line"><span class="cl"><span class="gp">$</span> git commit -m <span class="s1">&#39;Craft section front matter shift to craft category&#39;</span>
</span></span></code></pre></div><p>Really, that&rsquo;s all the Ruby we need. The rest is dealing with git and other details manually.</p>
<p>I must specify that &ldquo;craft&rdquo; is an active category, since some categories represent archives that I do not want on the main navigation menu.</p>
<div class="highlight" title="config.json"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl">  <span class="s2">&#34;Params&#34;</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;activeCategories&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;craft&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;marginalia&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;programming&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;tools&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div><h3 id="move-page-bundles-to-contentpost">Move page bundles to content/post</h3>
<p>Next I want to move content files from <code>content/craft</code> to <code>content/post</code>. You could do this sort of thing from the command line, but I just used <a href="https://wiki.gnome.org/Apps/Files">GNOME Files</a>.</p>
<p>I tell Git to delete the missing files with <code>git rm -r content/craft</code> then add the moved files under <code>content/post</code>.</p>
<p>Right. Let&rsquo;s see how this builds.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> hugo server -D
</span></span><span class="line"><span class="cl"><span class="go">Building sites … ERROR 2018/05/25 20:31:05 error processing shortcode &#34;_internal/shortcodes/ref.html&#34; for page
</span></span></span><span class="line"><span class="cl"><span class="go">&#34;post/2018/interviewed-about-facebook/index.md&#34;: template: _internal/shortcodes/ref.html:1:73: executing
</span></span></span><span class="line"><span class="cl"><span class="go">&#34;_internal/shortcodes/ref.html&#34; at &lt;ref .Page (.Get 0)&gt;: error calling ref: No page found with path or logical
</span></span></span><span class="line"><span class="cl"><span class="go">name &#34;craft/2018/my-new-boy-beanie/index.md&#34;.
</span></span></span><span class="line"><span class="cl"><span class="go">ERROR 2018/05/25 20:31:05 error processing shortcode &#34;_internal/shortcodes/ref.html&#34; for page
</span></span></span><span class="line"><span class="cl"><span class="go">&#34;post/2018/my-new-boy-beanie/index.md&#34;: template: _internal/shortcodes/ref.html:1:73: executing
</span></span></span><span class="line"><span class="cl"><span class="go">&#34;_internal/shortcodes/ref.html&#34; at &lt;ref .Page (.Get 0)&gt;: error calling ref: No page found with path or logical
</span></span></span><span class="line"><span class="cl"><span class="go">name &#34;craft/2018/a-couple-crochet-hats/index.md&#34;.
</span></span></span><span class="line"><span class="cl"><span class="go">Total in 1039 ms
</span></span></span><span class="line"><span class="cl"><span class="go">Error: Error building site: logged 2 error(s)
</span></span></span></code></pre></div><p>Oops. Fix the <a href="http://gohugo.io/content-management/shortcodes/#ref-and-relref"><code>ref</code></a> shortcodes in my content.</p>
<h3 id="handle-section-category-and-tag-details">Handle section, category, and tag details</h3>
<p>Anyways, the last little bit is just tidying. Move the old knitting, crochet, and drawing category branch bundles to corresponding tag folders.</p>
<h2 id="done">Done?</h2>
<p>I probably forgot something, but everything seems to work correctly.</p>]]></content:encoded>
</item>
<item>
  <title>Post: iTunes to Rhythmbox</title>
  <link>https://randomgeekery.org/post/2015/07/itunes-to-rhythmbox/</link>
  <pubDate>Mon, 27 Jul 2015 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2015/07/itunes-to-rhythmbox/</guid>
  <description>I nearly wrote a script that transfers my 2015-03-16-ruby-itunes-ratings-fun|iTunes ratings to Rhythmbox. Instead I used Edgar Salgado’s version of iTunesToRhythm.
See, I have been spending most of my time lately in GNOME 3 on openSUSE Linux. All of my music is copied over and loaded into Rhythmbox, but I wanted to continue my quest to rate all of my music. I spent roughly an hour starting my own solution before realizing that this was probably a solved problem.</description>
   <category>post</category> 
   <category>post</category> 
   <category>itunes</category>  <category>ruby</category>  <category>music</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>I nearly wrote a script that transfers my iTunes ratings to Rhythmbox. Instead I used Edgar Salgado's version of iTunesToRhythm.
</h2><p>I nearly wrote a script that transfers my <a href="/post/2015/03/ruby-itunes-ratings-fun/">2015-03-16-ruby-itunes-ratings-fun|iTunes ratings</a> to <a href="https://wiki.gnome.org/Apps/Rhythmbox">Rhythmbox</a>. Instead I used Edgar Salgado’s version of <a href="https://github.com/esalgado/iTunesToRhythm">iTunesToRhythm</a>.</p>
<p>See, I have been spending most of my time lately in <a href="https://www.gnome.org/gnome-3/">GNOME 3</a> on <a href="https://www.opensuse.org">openSUSE</a> Linux. All of my music is copied over and loaded into <a href="https://wiki.gnome.org/Apps/Rhythmbox">Rhythmbox</a>, but I wanted to continue my quest to rate all of my music. I spent roughly an hour starting my own solution before realizing that this was probably a solved problem.</p>
<p>Salgado’s code is a fork of <a href="https://github.com/esanbock/ITunesToRhythm">another project</a>, but he won my heart because he wrote how to use his version.</p>
<pre tabindex="0"><code>$ git clone git@github.com:esalgado/iTunesToRhythm.git
$ cd iTunesToRhythm
$ python iTunesToRhythm.py -w ~/Sync/iTunes\ Music\ Library.xml \
  ~/.local/share/rhythmbox/rhythmdb.xml
</code></pre><p>Some things about the process annoyed me. For some strange reason, not every iTunes entry included a file location. I manually fixed those. More annoying: the iTunes XML showed roughly 7,000 tracks as rated even though the iTunes application showed over 10,000 as rated. I chose to live with that. It’s only 3,000 tracks that I need to rate again.</p>
<p><em>sigh</em></p>
<p>Hey, let’s make a pretty picture.</p>
<p><strong><code>graph-ratings.rb</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;gruff&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">SOURCE</span> <span class="o">=</span> <span class="s2">&#34;/home/brian/.local/share/rhythmbox/rhythmdb.xml&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">rhythmdb</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">XML</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span> <span class="no">SOURCE</span>
</span></span><span class="line"><span class="cl"><span class="n">songs</span> <span class="o">=</span> <span class="n">rhythmdb</span><span class="o">.</span><span class="n">xpath</span> <span class="s2">&#34;/rhythmdb/entry[@type=&#39;song&#39;]&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">ratings</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Group the songs by rating.</span>
</span></span><span class="line"><span class="cl"><span class="n">songs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">rating</span> <span class="o">=</span> <span class="n">song</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s2">&#34;rating&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">to_i</span> <span class="o">||</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="n">total_time</span> <span class="o">=</span> <span class="n">song</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s2">&#34;duration&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">to_i</span> <span class="o">||</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{</span> <span class="ss">songs</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">time</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:songs</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:time</span><span class="o">]</span> <span class="o">+=</span> <span class="n">total_time</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Print it.</span>
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="s1">&#39;Rating Songs Percent Duration&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ratings</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">rating</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">song_count</span> <span class="o">=</span> <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:songs</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">  <span class="n">total_seconds</span> <span class="o">=</span> <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:time</span><span class="o">]</span> <span class="c1">#Rhythmbox uses seconds</span>
</span></span><span class="line"><span class="cl">  <span class="n">seconds</span> <span class="o">=</span> <span class="n">total_seconds</span> <span class="o">%</span> <span class="mi">60</span>
</span></span><span class="line"><span class="cl">  <span class="n">minutes</span> <span class="o">=</span> <span class="p">(</span><span class="n">total_seconds</span> <span class="o">/</span> <span class="mi">60</span><span class="p">)</span> <span class="o">%</span> <span class="mi">60</span>
</span></span><span class="line"><span class="cl">  <span class="n">hours</span> <span class="o">=</span> <span class="p">(</span><span class="n">total_seconds</span> <span class="o">/</span> <span class="p">(</span><span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">))</span> <span class="o">%</span> <span class="mi">24</span>
</span></span><span class="line"><span class="cl">  <span class="n">days</span> <span class="o">=</span> <span class="n">total_seconds</span> <span class="o">/</span> <span class="p">(</span><span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">24</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">percentage</span> <span class="o">=</span> <span class="n">song_count</span><span class="o">.</span><span class="n">to_f</span><span class="p">()</span> <span class="o">/</span> <span class="n">songs</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">to_f</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span><span class="o">.</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="n">duration</span> <span class="o">=</span> <span class="nb">format</span> <span class="s1">&#39;%02d:%02d:%02d:%02d&#39;</span><span class="p">,</span> <span class="n">days</span><span class="p">,</span> <span class="n">hours</span><span class="p">,</span> <span class="n">minutes</span><span class="p">,</span> <span class="n">seconds</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="nb">format</span> <span class="s1">&#39;%6d %5d %6.1f%% %s&#39;</span><span class="p">,</span> <span class="n">rating</span><span class="p">,</span> <span class="n">song_count</span><span class="p">,</span> <span class="n">percentage</span><span class="p">,</span> <span class="n">duration</span>
</span></span><span class="line"><span class="cl">  <span class="nb">puts</span> <span class="n">description</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Graph it.</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">ratings</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">rating</span><span class="p">,</span> <span class="n">info</span><span class="o">|</span> <span class="o">[</span> <span class="n">rating</span><span class="p">,</span> <span class="o">[</span> <span class="n">info</span><span class="o">[</span><span class="ss">:songs</span><span class="o">]]]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">graph</span> <span class="o">=</span> <span class="no">Gruff</span><span class="o">::</span><span class="no">Pie</span><span class="o">.</span><span class="n">new</span>
</span></span><span class="line"><span class="cl"><span class="n">graph</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Songs Grouped By Rating&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ratings</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">rating</span><span class="o">|</span> <span class="n">graph</span><span class="o">.</span><span class="n">data</span> <span class="n">rating</span><span class="p">,</span> <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:songs</span><span class="o">]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">graph</span><span class="o">.</span><span class="n">write</span> <span class="s2">&#34;song-pie.png&#34;</span>
</span></span></code></pre></div><p>This calls for Nokogiri instead of <a href="https://github.com/bleything/plist">plist</a>, which gives me the opportunity to flex my amazing <a href="http://www.nokogiri.org/tutorials/searching_a_xml_html_document.html">XPath</a> skills. Nothing too complex. Thank goodness.</p>
<pre tabindex="0"><code>$ ruby graph-ratings.rb
Rating Songs Percent Duration
     0  8926   55.2% 24:13:00:24
     1   254    1.6% 00:19:49:30
     2   984    6.1% 02:21:42:54
     3  3932   24.3% 10:08:49:09
     4  1716   10.6% 04:10:50:01
     5   370    2.3% 00:23:16:01
</code></pre><p>How about that pretty picture?</p>
<p><img src="/post/2015/07/attachments/img/2015/july-rhythmbox-song-pie.png" alt="The song pie for July"/></p>
<p>I’ve made progress since March. It looks less like Pac Man now.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Ruby iTunes Ratings Fun</title>
  <link>https://randomgeekery.org/post/2015/03/ruby-itunes-ratings-fun/</link>
  <pubDate>Mon, 16 Mar 2015 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2015/03/ruby-itunes-ratings-fun/</guid>
  <description>I use the plist and gruff gems to summarize my iTunes music ratings with Ruby
Introduction Earlier this year I did a fresh operating system install on my laptop. Part of that install involved moving all my music from an older machine. I moved the music, but not the iTunes details. My tastes changed over the years. Why not start with a fresh listen and fresh ratings for all?
A few months passed.</description>
   <category>post</category> 
   <category>post</category> 
   <category>ruby</category>  <category>itunes</category>  <category>graphing</category>  <category>music</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Using Ruby to summarize my iTunes music ratings</h2><p>I use the <a href="https://github.com/bleything/plist">plist</a> and <a href="https://github.com/topfunky/gruff">gruff</a> gems to summarize my iTunes music ratings with <a href="/card/ruby/">Ruby</a></p>
<h2 id="introduction">Introduction</h2>
<p>Earlier this year I did a fresh operating system install on my laptop. Part of that install involved moving all my music from an older machine. I moved the music, but not the iTunes details. My tastes changed over the years. Why not start with a fresh listen and fresh ratings for all?</p>
<p>A few months passed. How much progress have I made?</p>
<p>First off let me roll 1d100 and check the Random Language Chart. I rolled a 73, and that means I write this in Ruby.</p>
<p>I decided to look at the XML file that gets exported by iTunes whenever a library detail changes. <a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man5/plist.5.html">Property List XML</a> frustrates quickly if you attack it with naive XML parsing. Fortunately, Ben Bleything wrote a <a href="https://github.com/bleything/plist">plist</a> gem that simplifies the task in Ruby.</p>
<p>Since I like pretty pictures, I may as well use Geoffrey Grosenbach’s <a href="https://github.com/topfunky/gruff">gruff</a> to make a pretty pie chart.</p>
<pre tabindex="0"><code>$ ruby --version
ruby 2.2.0p0 (2014-12-25 revision 49005) [x86_64-darwin14]
$ gem install plist
$ gem install gruff
</code></pre><h2 id="here-it-is">Here It Is</h2>
<p>No big code explanation this time around. My last few attempts at that have gone stale in my drafts folder. Plus, I’m worn out. I <em>tried</em> the naive XML parsing thing, and it frustrated me quickly. Thank goodness for <a href="https://github.com/bleything/plist">plist</a>.</p>
<p><strong><code>graph-ratings.rb</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;plist&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;gruff&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">SOURCE</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;HOME&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/Music/iTunes/iTunes Music Library.xml&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plist</span> <span class="o">=</span> <span class="no">Plist</span><span class="o">.</span><span class="n">parse_xml</span> <span class="no">SOURCE</span>
</span></span><span class="line"><span class="cl"><span class="n">tracks</span> <span class="o">=</span> <span class="n">plist</span><span class="o">[</span><span class="s1">&#39;Tracks&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">songs</span> <span class="o">=</span> <span class="n">tracks</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">reject</span> <span class="k">do</span> <span class="o">|</span><span class="n">track</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">track</span><span class="o">[</span><span class="s1">&#39;Kind&#39;</span><span class="o">]</span> <span class="o">!~</span> <span class="sr">/audio file$/</span> <span class="o">||</span> <span class="n">track</span><span class="o">[</span><span class="s1">&#39;Genre&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;Podcast&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ratings</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Group the songs by rating.</span>
</span></span><span class="line"><span class="cl"><span class="n">songs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">rating</span> <span class="o">=</span> <span class="n">song</span><span class="o">[</span><span class="s1">&#39;Rating&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="n">total_time</span> <span class="o">=</span> <span class="n">song</span><span class="o">[</span><span class="s1">&#39;Total Time&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{</span> <span class="ss">songs</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">time</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:songs</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:time</span><span class="o">]</span> <span class="o">+=</span> <span class="n">total_time</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Print it.</span>
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="s1">&#39;Rating Songs Percent Duration&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ratings</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">rating</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">song_count</span> <span class="o">=</span> <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:songs</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">  <span class="n">total_seconds</span> <span class="o">=</span> <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:time</span><span class="o">]</span> <span class="o">/</span> <span class="mi">1000</span><span class="o">.</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="n">seconds</span> <span class="o">=</span> <span class="n">total_seconds</span> <span class="o">%</span> <span class="mi">60</span>
</span></span><span class="line"><span class="cl">  <span class="n">minutes</span> <span class="o">=</span> <span class="p">(</span><span class="n">total_seconds</span> <span class="o">/</span> <span class="mi">60</span><span class="p">)</span> <span class="o">%</span> <span class="mi">60</span>
</span></span><span class="line"><span class="cl">  <span class="n">hours</span> <span class="o">=</span> <span class="p">(</span><span class="n">total_seconds</span> <span class="o">/</span> <span class="p">(</span><span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">))</span> <span class="o">%</span> <span class="mi">24</span>
</span></span><span class="line"><span class="cl">  <span class="n">days</span> <span class="o">=</span> <span class="n">total_seconds</span> <span class="o">/</span> <span class="p">(</span><span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">24</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">percentage</span> <span class="o">=</span> <span class="n">song_count</span><span class="o">.</span><span class="n">to_f</span><span class="p">()</span> <span class="o">/</span> <span class="n">songs</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">to_f</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span><span class="o">.</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="n">duration</span> <span class="o">=</span> <span class="nb">format</span> <span class="s1">&#39;%02d:%02d:%02d:%02d&#39;</span><span class="p">,</span> <span class="n">days</span><span class="p">,</span> <span class="n">hours</span><span class="p">,</span> <span class="n">minutes</span><span class="p">,</span> <span class="n">seconds</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="nb">format</span> <span class="s1">&#39;%6d %5d %6.1f%% %s&#39;</span><span class="p">,</span> <span class="n">rating</span><span class="p">,</span> <span class="n">song_count</span><span class="p">,</span> <span class="n">percentage</span><span class="p">,</span> <span class="n">duration</span>
</span></span><span class="line"><span class="cl">  <span class="nb">puts</span> <span class="n">description</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Graph it.</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">ratings</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">rating</span><span class="p">,</span> <span class="n">info</span><span class="o">|</span> <span class="o">[</span> <span class="n">rating</span><span class="p">,</span> <span class="o">[</span> <span class="n">info</span><span class="o">[</span><span class="ss">:songs</span><span class="o">]]]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">graph</span> <span class="o">=</span> <span class="no">Gruff</span><span class="o">::</span><span class="no">Pie</span><span class="o">.</span><span class="n">new</span>
</span></span><span class="line"><span class="cl"><span class="n">graph</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s2">&#34;Songs Grouped By Rating&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ratings</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">rating</span><span class="o">|</span> <span class="n">graph</span><span class="o">.</span><span class="n">data</span> <span class="n">rating</span><span class="p">,</span> <span class="n">ratings</span><span class="o">[</span><span class="n">rating</span><span class="o">][</span><span class="ss">:songs</span><span class="o">]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">graph</span><span class="o">.</span><span class="n">write</span> <span class="s2">&#34;song-pie.png&#34;</span>
</span></span></code></pre></div><p>Running it shows me that I have more than a month of music to rate, and only if I can rate music in my sleep.</p>
<pre tabindex="0"><code>Rating Songs Percent Duration
     0 13907   83.0% 38:05:56:14
    20    60    0.4% 00:03:41:48
    40   179    1.1% 00:12:28:46
    60  1351    8.1% 03:16:21:32
    80   984    5.9% 02:14:57:47
   100   273    1.6% 00:17:44:35
</code></pre><p>It seems I still like most of the music I own at least a little bit. Many former favorites have drifted to the 60 rating (3 stars), though. Time does change tastes a little bit.</p>
<p>The graph. Let’s look at that pretty picture.</p>
<p><img src="/post/2015/03/attachments/img/2015/song-pie.png" alt="Ratings pie chart"/></p>
<p>Yes. I have much music listening ahead of me.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Counting Words in Blog Posts</title>
  <link>https://randomgeekery.org/post/2014/10/counting-words-in-blog-posts/</link>
  <pubDate>Thu, 02 Oct 2014 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2014/10/counting-words-in-blog-posts/</guid>
  <description>&lt;p&gt;I want to write at least 250 words per day. This is not a 30 day challenge. It is just something I want to do. I write more than 250 words daily when you count social network posts and chat text. Wouldn’t it be nice if some of those words were organized around a single idea?&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>ruby</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Using Ruby to track my verbosity</h2><p>I want to write at least 250 words per day. This is not a 30 day challenge. It is just something I want to do. I write more than 250 words daily when you count social network posts and chat text. Wouldn&rsquo;t it be nice if some of those words were organized around a single idea?</p>
<p>I need some way to count those words, of course. The obvious solution is [wc](<a href="http://en.wikipedia.org/wiki/Wc">http://en.wikipedia.org/wiki/Wc</a>_(Unix).</p>
<pre tabindex="0"><code>$ wc counting-words.markdown
     106     464    3108 counting-words.markdown
</code></pre><p>The documentation tells me that the first column is the number of lines, the second column is the number of words, and the third column is the number of characters. I can train my brain to remember this, but instead I use the <code>-w</code> flag to get <em>only</em> the word count.</p>
<pre tabindex="0"><code>$ wc -w counting-words.markdown
     464 post.markdown
</code></pre><p>That is better, but it is not an accurate word count. I am currently using <a href="/card/jekyll/">Jekyll</a> for blogging, and every blog post file includes a section of <a href="http://jekyllrb.com/docs/frontmatter/">front matter</a> a section of <a href="/card/markdown/">Markdown</a> content. My goal is 250 words of prose, not 250 total words. I do not want to count the front matter.</p>
<p>I could use assorted shell tools to accomplish this, but I would rather make a <a href="/card/ruby/">Ruby</a> one-liner.</p>
<p>First I get the basic information I was already getting from <code>wc</code>.</p>
<pre tabindex="0"><code>$ ruby -e &#39;puts ARGF.read.split.count&#39; counting-words.markdown
464
</code></pre><p>How do I separate the head from the body of the post? I could do some fiddly bits using <a href="http://ruby-doc.org/core-2.1.3/ARGF.html#method-i-readlines">ARGF.readlines</a> with a separator argument, but I will keep going with what I have.</p>
<pre tabindex="0"><code>$ ruby -e &#39;puts ARGF.read.split(/^---$/).inspect&#39; counting-words.markdown
[&#34;&#34;, &#34;\nlayout: post\ntitle: Counting Words in Blog Posts\ndescription: Using Ruby to track my verbosity\ncategory: Programming\ndate: 2014-10-02\ntags: ruby\n&#34;, &#34;\nI want to write at least 250 words per day. ...&#34;]
</code></pre><p>How many words are in the body?</p>
<pre tabindex="0"><code>$ ruby -e &#39;puts ARGF.read.split(/^---$/)[-1].split.count&#39; counting-words.markdown
317
</code></pre><p>I did say that I wanted my word count to be prose. I should exclude code blocks. That calls for a multi-line regular expression, stripping out the fenced code blocks in my post.</p>
<pre tabindex="0"><code>$ ruby -e &#39;puts ARGF.read.split(/^---$/)[-1].gsub(/^~~~ .+?^~~~ $/m, &#34;&#34;).split.count&#39; counting-words.markdown
357
</code></pre><p>I do not want to count link definitions either.</p>
<pre tabindex="0"><code>$ ruby -e &#39;puts ARGF.read.split(/^---$/)[-1].gsub(/^~~~ .+?^~~~ |\[.+?\]:.+?$/m, &#34;&#34;).split.count&#39; counting-words.markdown
341
</code></pre><p>This is good enough. Now I turn it into a bash alias.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># words in post / work in progress</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">wip</span><span class="o">=</span><span class="s1">&#39;ruby -e &#39;</span><span class="s2">&#34;&#39;&#34;</span><span class="s1">&#39;puts ARGF.read.split(/^---$/)[-1].gsub(/^(~~~ .+?^~~~ |\[.+?\]:.+?)$/m, &#34;&#34;).split.count&#39;</span><span class="s2">&#34;&#39;&#34;</span>
</span></span></code></pre></div><p>Oh jeez those quotes hurt my brain. It was the first solution I came across to handle <a href="http://stackoverflow.com/a/1250279/285810">shell quoting</a>, though. I may come up with something prettier. Perhaps a full script or looking for an existing tool. This will do for now.</p>
<pre tabindex="0"><code>$ wip counting-words.markdown
341
</code></pre><p>My one-liner ended up choking on some Markdown combinations, so I
turned it into a tiny script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env ruby</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ignored_blocks</span> <span class="o">=</span> <span class="sr">%r{
</span></span></span><span class="line"><span class="cl"><span class="sr">  (?: ^~~~ .+?^~~~ $)       # fenced code blocks
</span></span></span><span class="line"><span class="cl"><span class="sr">  |                         # or
</span></span></span><span class="line"><span class="cl"><span class="sr">  (?: ^\[ [^\]]+? \]: .+?$) # link definitions
</span></span></span><span class="line"><span class="cl"><span class="sr">}mx</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="no">ARGF</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/^---$/</span><span class="p">)</span><span class="o">[-</span><span class="mi">1</span><span class="o">].</span><span class="n">gsub</span><span class="p">(</span><span class="n">ignored_blocks</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">count</span>
</span></span></code></pre></div><p>I needed that <code>/x</code> flag to make sense of my regular expressions.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Welcome to Jekyll!</title>
  <link>https://randomgeekery.org/post/2014/07/welcome-to-jekyll/</link>
  <pubDate>Sat, 26 Jul 2014 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2014/07/welcome-to-jekyll/</guid>
  <description>&lt;p&gt;Just don’t even ask. I am in a highly fickle phase with the Web site.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>site</category>  <category>jekyll</category>  <category>ruby</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p>Just don&rsquo;t even ask. I am in a highly fickle phase with the Web site.</p>
<p>Despite an excellent suggestion from <a href="http://blog.miguelgrinberg.com/">Miguel Grinberg</a> to try <a href="http://pythonhosted.org/Frozen-Flask/">Frozen Flask</a>, I am too far along in this week of <a href="/card/jekyll/">Jekyll</a> to change  my mind now.</p>
<p>Maybe next week.</p>
<p>It is tempting to write a lengthy blog post describing everything I did to  integrate the old <a href="/card/coolnamehere/">coolnamehere</a> pages, get a breadcrumb trail on every page, set up tags, and the rest. I am not in the mood. There are other things I want to write about. Heck, I may have this site published via  yet another tool next week. I will just list the resources that made it  easier to assemble the site in its current form with Jekyll.</p>
<ul>
<li>This <a href="https://truongtx.me/2012/12/27/jekyll-create-a-list-of-lastest-posts">Trường TX blog post</a> helped me list the latest posts on every page</li>
<li>I put the <a href="http://jekyllrb.com/docs/variables/">Jekyll variables</a> documentation to extensive use.</li>
<li>Over on the <a href="http://biosphere.cc/software-engineering/jekyll-breadcrumbs-navigation-plugin/">Biosphere blog</a> was a post for building a basic breadcrumb trail.</li>
<li><a href="http://charliepark.org/tags-in-jekyll/">Charlie Park</a> wrote about making tag indexes in Jekyll. That was handy.</li>
<li>a <a href="https://gist.github.com/nimbupani/1421828">gist by nimbupani</a> showed how to put the latest post contents on the blog index.</li>
</ul>]]></content:encoded>
</item>
</channel>
</rss>
