<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>raku-langonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/raku-lang/</link>
    <description>
      Recent contentinraku-lang on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 14 Aug 2022 13:00:31 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/raku-lang/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Emoji Breakdowns With Raku</title>
  <link>https://randomgeekery.org/post/2022/08/emoji-breakdowns-with-raku/</link>
  <pubDate>Sun, 14 Aug 2022 13:00:31 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/08/emoji-breakdowns-with-raku/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;https://randomgeekery.org/post/2022/08/../../../attachments/img/2022/cover-2022-08-14.png&#34; alt=&#34;attachments/img/2022/cover-2022-08-14.png&#34;/&gt;
If you think that‚Äôs weird, you should see what all these emoji have done to my neovim session.&lt;/p&gt;
&lt;p&gt;Had to share, but gotta make this quick because I am about three tangents removed from the stuff I planned to do today. This Raku script prints out code points for emoji characters with a little help from &lt;a href=&#34;https://raku.land/cpan:ANTONOV/Pretty::Table&#34;&gt;Pretty::Table&lt;/a&gt;.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>raku-lang</category> 
  <content:encoded><![CDATA[<h2>In which I write a Raku emoji reverse lookup tool.</h2><p><img src="/post/2022/08/../../../attachments/img/2022/cover-2022-08-14.png" alt="attachments/img/2022/cover-2022-08-14.png"/>
If you think that&rsquo;s weird, you should see what all these emoji have done to my neovim session.</p>
<p>Had to share, but gotta make this quick because I am about three tangents removed from the stuff I planned to do today. This Raku script prints out code points for emoji characters with a little help from <a href="https://raku.land/cpan:ANTONOV/Pretty::Table">Pretty::Table</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env raku</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Pretty::Table</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">emoji-table</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$emoji</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$table</span> <span class="o">=</span> <span class="n">Pretty::Table</span><span class="o">.</span><span class="nb">new</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="s">title</span> <span class="o">=&gt;</span> <span class="p">&#34;</span><span class="s2">Emoji Breakdown</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">field-names</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">&#34;</span><span class="s2">Name</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">&#34;</span><span class="s2">Code</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">&#34;</span><span class="s2">Hex Code</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">&#34;</span><span class="s2">Emoji</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="o">],</span>
</span></span><span class="line"><span class="cl">    <span class="s">border</span> <span class="o">=&gt;</span> <span class="kt">False</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">align</span> <span class="o">=&gt;</span> <span class="nv">%</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="s">Code</span> <span class="o">=&gt;</span> <span class="p">&#34;</span><span class="s2">r</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">&#34;</span><span class="s2">Hex Code</span><span class="p">&#34;</span> <span class="o">=&gt;</span> <span class="p">&#34;</span><span class="s2">r</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="nv">$emoji</span><span class="o">.</span><span class="nb">ords</span> <span class="k">-&gt;</span> <span class="nv">$ord</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="nv">$chr</span> <span class="o">=</span> <span class="nv">$ord</span><span class="o">.</span><span class="nb">chr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$table</span><span class="o">.</span><span class="nf">add-row</span><span class="o">:</span> <span class="o">[</span>
</span></span><span class="line"><span class="cl">      <span class="nv">$chr</span><span class="o">.</span><span class="nb">uniname</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="nv">$ord</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="nv">$ord</span><span class="o">.</span><span class="nb">base</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="nv">$chr</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="o">]</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nv">$table</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$emoji</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">say</span> <span class="p">&#34;&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">say</span> <span class="nf">emoji-table</span><span class="p">(</span><span class="nv">$emoji</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>And here&rsquo;s what it looks like in action:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">bsh ‚ùØ rakumoji ü¶ã
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">| Emoji Breakdown |
</span></span><span class="line"><span class="cl">    Name      Code  Hex Code  Emoji
</span></span><span class="line"><span class="cl"> BUTTERFLY  129419     1F98B    ü¶ã
</span></span></code></pre></div><h2 id="why">Why?</h2>
<p>So I&rsquo;m doing a thing with a CSS stylesheet involving display of emojis. You don&rsquo;t want the emoji in a stylesheet though. More portable to use code points, the numeric value or values a computer uses to identify the character.</p>
<p>The problem: I don&rsquo;t know the code point. I use a convenient emoji picker. All it gives me is a character.</p>
<p>I&rsquo;ve had some luck looking this stuff up online. But why spend 10 seconds <a href="https://unicode-table.com/en/1F98B/">looking it up</a> when I could spend half an hour writing code and another hour rationalizing my decision in a blog post?</p>
<p><a href="https://docs.raku.org/type/Str#%28Cool%29_routine_ord"><code>Str.ord</code></a> gets me the ordinal for a single character. That&rsquo;s not always what I need though. What looks like a single character could be composed of several codepoints.</p>
<p>Unicode is weird.</p>
<p><a href="https://docs.raku.org/type/Str#%28Cool%29_routine_ords"><code>Str.ords</code></a> gives me a list of all code points in the string, whether one or several. I get the name of the emoji as well with <a href="https://docs.raku.org/type/Str#%28Cool%29_routine_uniname"><code>str.uniname</code></a>. I can use that name with <a href="https://docs.raku.org/type/Str#routine_uniparse"><code>Str.uniparse</code></a> to get the emoji again.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">bsh ‚ùØ raku -e &#39;say &#34;butterfly&#34;.uniparse;&#39;
</span></span><span class="line"><span class="cl">ü¶ã
</span></span></code></pre></div><p>Pretty::Table makes it look nice ‚Äî or as nice as my terminal can manage ‚Äî no matter how many code points are in the emoji.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">bsh ‚ùØ rakumoji üèÑ‚Äç‚ôÄÔ∏è
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">| Emoji Breakdown |
</span></span><span class="line"><span class="cl">          Name            Code  Hex Code  Emoji
</span></span><span class="line"><span class="cl">         SURFER         127940     1F3C4    üèÑ
</span></span><span class="line"><span class="cl">   ZERO WIDTH JOINER      8205      200D    ‚Äç
</span></span><span class="line"><span class="cl">      FEMALE SIGN         9792      2640    ‚ôÄ
</span></span><span class="line"><span class="cl"> VARIATION SELECTOR-16   65039      FE0F    Ô∏è
</span></span></code></pre></div><p>I helped the terminal out by putting the emoji character at the end of each line. Otherwise the pretty table layouts get offset weird.</p>
<p>Anyways I had fun. And now I&rsquo;m only two tangents away from the day&rsquo;s intended tasks.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Joplin CLI Batch Processing With Raku</title>
  <link>https://randomgeekery.org/post/2021/05/joplin-cli-batch-processing-with-raku/</link>
  <pubDate>Mon, 24 May 2021 20:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/05/joplin-cli-batch-processing-with-raku/</guid>
  <description>don‚Äôt get excited; these are the only notes I took
[!NOTE] This sidetracks enough for three blog posts, mostly about card/Raku. Sorry about that. No time to make it shorter. You know how it is. There‚Äôs a little card/Joplin stuff in here.
This is embarrassing. I fired up the Joplin desktop app this morning and it told me there was an update. Makes sense. I haven‚Äôt loaded the desktop app in a couple months.</description>
   <category>post</category> 
   <category>post</category> 
   <category>tools</category>  <category>joplin</category>  <category>raku-lang</category>  <category>regular-expressions</category>  <category>shell</category>  <category>oops</category>  <category>i-fixed-it</category> 
  <content:encoded><![CDATA[<h2>In which a minor update veers off on a Raku regex tangent</h2><p><img src="/post/2021/05/../../../attachments/img/2021/cover-2021-05-24.jpg" alt="attachments/img/2021/cover-2021-05-24.jpg"/>
don&rsquo;t get excited; these are the only notes I took</p>
<blockquote>
<p>[!NOTE]
This sidetracks enough for three blog posts, mostly about <a href="/card/raku/">card/Raku</a>.  Sorry about that.  No time to make it shorter.  You know how it is.  There&rsquo;s a little <a href="/card/joplin/">card/Joplin</a> stuff in here.</p>
</blockquote>
<p>This is embarrassing.  I fired up the Joplin <a href="https://joplinapp.org/desktop/">desktop app</a> this morning and it told me there was an update.  Makes sense.  I haven&rsquo;t loaded the desktop app in a couple months.</p>
<p>Oh hang on.  What about the <a href="https://joplinapp.org/terminal/">terminal app</a> which I was just writing about over the last couple posts?</p>
<p>Yep.  The <a href="https://joplinapp.org/changelog_cli">Changelog</a> shows updates, one of which includes batch processing.  Batch processing sounds like exactly the thing to address my many complaints about performance.</p>
<h2 id="update-joplin-with-volta">Update Joplin with Volta</h2>
<p>I use <a href="https://volta.sh">Volta</a> to manage my<a href="/card/node.js/">card/Node.js</a> resources.  Volta treats installing and updating as the same action.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">volta install joplin
</span></span></code></pre></div><p>This is what I have now:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> joplin version
</span></span><span class="line"><span class="cl"><span class="go">joplin 1.8.1 (prod)
</span></span></span></code></pre></div><p>Now I&rsquo;m up to date.  Let&rsquo;s see what changes I can make to my journaling code.</p>
<h2 id="fix-the-one-liners">Fix the one-liners</h2>
<p>The one-liner for adding journal entries works fine as-is.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="o">&amp;&amp;</span> joplin edit <span class="k">$(</span>date --iso<span class="o">=</span>minute<span class="k">)</span>
</span></span></code></pre></div><p>Reading the entries needs improvement.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">raku -e <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">  qqx{joplin cat $_}.subst(/^(&lt;[\dT:\-]&gt;+)/, { &#34;# $0&#34; }).say for qx{ joplin ls }.lines.sort
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="p">|</span> python -m rich.markdown -
</span></span></code></pre></div><p>Joplin CLI v1.8.1 added a <code>batch</code> command, which executes commands from a text file.  My challenge: <code>joplin batch</code> does not appear to have an option for standard input.  This means I can&rsquo;t casually pipe output from another process.  Here&rsquo;s what I came up with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin batch &lt;<span class="o">(</span>raku -e <span class="s1">&#39;qx{joplin ls}.lines.sort.map({ &#34;cat $_&#34; }).join(&#34;\n&#34;).say&#39;</span><span class="o">)</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> raku -ne <span class="s1">&#39;.subst(/^(&lt;[\dT:\-]&gt;+)$/, { &#34;# $0&#34; }).say&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> python -m rich.markdown -
</span></span></code></pre></div><p>We take advantage of a little shell magic to treat the output of another process as a file.</p>
<p>Don&rsquo;t ask me to understand the shell magic.  In <a href="https://www.gnu.org/software/bash/">GNU Bash</a>, <code>command &lt;(stuff)</code> means something along the lines of &ldquo;evaluate <em>stuff</em> and hand the output of that evaluation to <code>command</code> as if it was a file.&rdquo;</p>
<p>It&rsquo;s all a little inside-out and twisty.  It might help if we break up the chunks.</p>
<table>
<thead>
<tr>
<th>Chunk</th>
<th>What it does</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>qx{joplin ls}.lines.sort</code></td>
<td>collect the sorted entry list from this notebook</td>
</tr>
<tr>
<td><code>.map{ &quot;cat $_&quot; }</code></td>
<td>create a Joplin command to display this entry</td>
</tr>
<tr>
<td><code>.join(&quot;\n&quot;).say</code></td>
<td>print those commands as one multi-line string</td>
</tr>
<tr>
<td><code>joplin batch &lt;(...)</code></td>
<td>send <code>raku</code>&rsquo;s output to <code>joplin batch</code></td>
</tr>
<tr>
<td><code>... | .subst(...)</code></td>
<td>turn timestamp lines from output into Markdown headers</td>
</tr>
<tr>
<td><code>... | python -m rich.markdown -</code></td>
<td>format the output for terminal display</td>
</tr>
</tbody>
</table>
<p>We pull Raku in twice: once to build the command and again to parse the output. On the other hand we&rsquo;re only calling Joplin twice instead of forty or so times.</p>
<p>That makes the one-liner downright zippy, all things considered.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time joplin batch &lt;(raku -e &#39;qx{joplin ls}.lines.sort.map({ &#34;cat $_&#34; }).join(&#34;\n&#34;).say&#39;) \
</span></span><span class="line"><span class="cl">  | raku -ne &#39;.subst(/^(&lt;[\dT:\-]&gt;+)$/, { &#34;# $0&#34; }).say&#39; \
</span></span><span class="line"><span class="cl">  | python -m rich.markdown -
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m1.407s
</span></span><span class="line"><span class="cl">user    0m1.608s
</span></span><span class="line"><span class="cl">sys     0m0.140s
</span></span></code></pre></div><p>One and a half seconds for a formatted display of every journal entry.  Not bad, considering that I&rsquo;m running on <a href="https://docs.microsoft.com/en-us/windows/wsl/">WSL</a>.  Plus I don&rsquo;t really know one-liners, Raku, or Joplin.</p>
<blockquote>
<p>[!NOTE]
The documentation for <code>joplin ls</code> mentions a <code>--sort</code> flag, but as of v1.8.1 I got no difference when using <code>joplin ls --sort title</code>. Didn&rsquo;t see a mention of the specific issue, so I overcame my shyness and filed <a href="https://github.com/laurent22/joplin/issues/5004">#5004</a>.</p>
</blockquote>
<h2 id="fix-the-script">Fix the script</h2>
<p>Splitting up the Raku script into logical pieces the other day means that today I only need to fix a single function.  Thank goodness.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>How much does this function need to improve?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time jj today
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m3.001s
</span></span><span class="line"><span class="cl">user    0m3.281s
</span></span><span class="line"><span class="cl">sys     0m0.390s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ time jj all
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m31.253s
</span></span><span class="line"><span class="cl">user    0m31.779s
</span></span><span class="line"><span class="cl">sys     0m4.616s
</span></span></code></pre></div><p>Lots.  This function needs to be lots quicker.  It took three seconds to display today&rsquo;s lone entry, and over 30 seconds to display all 40 journal entries.  Every new entry slows the whole thing down, because every new entry means a new call to <code>joplin</code>.</p>
<blockquote>
<p>[!NOTE]
I don&rsquo;t jot <em>that</em> many notes in a day. Some of that&rsquo;s from reorganizing my Joplin notebooks, putting daily journals in with the quick entries.</p>
</blockquote>
<p>I tried mimicking the shell magic but couldn&rsquo;t figure out how in the time I allowed myself.  This isn&rsquo;t work code where you have to get things just so. This is a fun little utility for my own amusement.</p>
<p><code>joplin batch</code> expects a file?  Let&rsquo;s give it a file.  But I want that file to go away when I&rsquo;m done, so let&rsquo;s find a module to handle temporary files.</p>
<p>Poking through the directory of <a href="https://modules.raku.org">Raku modules</a> quickly showed me two possibilities:</p>
<dl>
<dt><a href="https://modules.raku.org/dist/Temp::Path:cpan:UFOBAT"><code>Temp::Path</code></a></dt>
<dd>gives you a friendly object you can write to or stringify when you need a filename</dd>
<dt><a href="https://modules.raku.org/dist/File::Temp:cpan:RBT"><code>File::Temp</code></a></dt>
<dd>presents a more utilitarian interface, providing filename and filehandle as separate variables</dd>
</dl>
<p>The end result is the same: a file that goes away when you no longer need it.</p>
<p>I like friendly. Let&rsquo;s see how <code>Temp::Path</code> does.</p>
<h3 id="try-temppath">Try <code>Temp::Path</code></h3>
<p>Need to install it, of course.  <a href="https://github.com/ugexe/zef"><code>zef</code></a> handles Raku modules.  I set that up a while back with [[post/2020/05/setting-up-raku-with-rakubrew|<code>rakubrew</code>]].</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">zef install Temp::Path
</span></span></code></pre></div><p>Then we let Raku know we&rsquo;re using the module.  That traditionally goes near the top of our script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Temp::Path</span><span class="p">;</span>
</span></span></code></pre></div><p>More or less following along Temp::Path&rsquo;s sample usage.  <a href="https://docs.raku.org/language/control#index-entry-control_flow_with"><code>with</code></a> creates a block for our temporary file.  It even sets the <a href="https://docs.raku.org/language/variables#The_$__variable">topic variable</a> <code>$_</code>.  Don&rsquo;t need to come up with a temporary variable name for our temporary file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">with</span> <span class="n">make-temp-path</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="nb">spurt</span><span class="p">(</span><span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="p">&#34;</span><span class="s2">cat </span><span class="nv">$_</span><span class="p">&#34;</span> <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="se">\n</span><span class="p">&#34;));</span>
</span></span><span class="line"><span class="cl">    <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin batch </span><span class="nv">$_</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span> <span class="p">/</span><span class="ni">^^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)</span><span class="ni">$$</span><span class="p">/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The regular expression is starting to look interesting.  <code>joplin batch</code> hands everything to us as one string.  We need to adjust the entry-oriented logic we had before.  Now we find any <em>line</em> containing a lone ISO-8601 timestamp, and convert it to a top-level Markdown header.  The <code>:g</code> flag tells <code>.subst</code> to replace every occurrence.</p>
<blockquote>
<p>[!NOTE] <code>^..$</code> vs <code>^^..$$</code>
Regular expressions in other languages treat <code>^</code> and <code>$</code> differently depending on whether you&rsquo;re applying the expression in a single-line or multiple-line context. Raku&rsquo;s <a href="https://docs.raku.org/language/regexes#Anchors">anchors</a> treat every expression as multi-line.</p>
<p>That&rsquo;s a nice consistency point in Raku&rsquo;s favor. Instead of memorizing more flags and contexts, and more special anchors for when the flags and context make things unclear, we get these two paired anchors.</p>
<table>
<thead>
<tr>
<th>Anchor</th>
<th>Where it matches</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>beginning of the string</td>
</tr>
<tr>
<td><code>$</code></td>
<td>end of the string</td>
</tr>
<tr>
<td><code>^^</code></td>
<td>beginning of a line</td>
</tr>
<tr>
<td><code>$$</code></td>
<td>end of a line</td>
</tr>
</tbody>
</table>
<p>There are plenty of other things for us to memorize, of course.</p>
<p>If you&rsquo;re more of a visual person, here&rsquo;s a quality page from my extensive notebook.</p>
<p><img src="/post/2021/05/attachments/img/2021/cover-2021-05-24.jpg" alt="diagram of multi-line string showing where these anchors match"/></p>
<p>So what if my Raku notebook only has this one page with this one diagram. It&rsquo;s a good diagram.  Very professional.  High quality learning aid.</p>
</blockquote>
<p>Those few lines don&rsquo;t change anything for me as a user.  Maybe the speed?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time jj today
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m2.969s
</span></span><span class="line"><span class="cl">user    0m3.385s
</span></span><span class="line"><span class="cl">sys     0m0.303s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ time jj all
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m3.034s
</span></span><span class="line"><span class="cl">user    0m3.328s
</span></span><span class="line"><span class="cl">sys     0m0.505s
</span></span></code></pre></div><p>Huh. It&rsquo;s not any faster than the best case for the initial script, with a single entry taking roughly the same amount of time to load and display.  Then again, <code>batch</code> is clearly doing its job.  One entry takes almost exactly the same amount of time as 40.  Since most days I&rsquo;ll have multiple entries, that is an effective optimization for the common case.</p>
<p>But why is my one-liner twice as fast?  Is it Temp::Path?  Raku?  Joplin? Something to do with file I/O on WSL 2?  No idea.</p>
<p>Let&rsquo;s find out if File::Temp does any better.</p>
<h3 id="try-filetemp">Try File::Temp</h3>
<p>Out comes <code>zef</code>‚Ä¶</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">zef install File::Temp
</span></span></code></pre></div><p>‚Ä¶then use File::Temp instead of Temp::Path‚Ä¶</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Temp</span><span class="p">;</span>
</span></span></code></pre></div><p>‚Ä¶then rewrite <code>read-entries</code> one more time‚Ä¶</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="p">(</span><span class="nv">$filename</span><span class="o">,</span> <span class="nv">$filehandle</span><span class="p">)</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$filehandle</span><span class="o">.</span><span class="nb">spurt</span><span class="p">(</span> <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="p">&#34;</span><span class="s2">cat </span><span class="nv">$_</span><span class="p">&#34;</span> <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="se">\n</span><span class="p">&#34;)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin batch </span><span class="nv">$filename</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^^</span><span class="sr"> </span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)</span><span class="sr"> </span><span class="ni">$$</span><span class="p">/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><blockquote>
<p>[!NOTE] Space is insignificant in regular expressions
Did you catch that?  Raku ignores whitespace in regular expressions unless you say otherwise with <a href="https://docs.raku.org/language/regexes#Sigspace"><code>:sigspace</code></a>.  Means you can make a regex easier to read.  This wasn&rsquo;t <em>much</em> easier to read, but at least we can tell where the anchors are and what I hope to find between those anchors.</p>
<p>For Perl folks, this plus the multi-line thing is like giving every regex <code>/mx</code>.  For  Python folks, like <code>re.MULTILINE</code> and <code>re.VERBOSE</code>.  For JavaScript folks ‚Äî um ‚Äî it&rsquo;s like having useful regular expressions.  Okay, it&rsquo;s like having <a href="https://xregexp.com">XRegExp</a> installed and using <code>'x'</code>.</p>
</blockquote>
<p>‚Ä¶and try it out.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time jj today
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m2.502s
</span></span><span class="line"><span class="cl">user    0m2.771s
</span></span><span class="line"><span class="cl">sys     0m0.326s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ time jj all
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m2.611s
</span></span><span class="line"><span class="cl">user    0m2.911s
</span></span><span class="line"><span class="cl">sys     0m0.381s
</span></span></code></pre></div><p>Ran each version a few times, just to be sure.  The version with File::Temp consistently finished a noticeable fraction of a section quicker than using Temp::Path.  Still nowhere near the one-liner&rsquo;s performance, but good enough
that I&rsquo;ll stick with File::Temp until I come up with something better.</p>
<p>Do I care enough to reboot into Linux and see how much of a difference that makes?</p>
<p>Not really.</p>
<p>I can probably optimize this, but it&rsquo;s not urgent or important.  So far I only skim my entries when I already have a few moments to spare.  Besides, the real optimizations almost definitely lie with using the Joplin API.</p>
<p>What I&rsquo;m saying is don&rsquo;t get hung up on trivia.</p>
<p>Speaking of trivia‚Ä¶</p>
<h2 id="about-that-regular-expression">About that regular expression</h2>
<p>I need to do something about this.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> ... </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^^</span><span class="sr"> </span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)</span><span class="sr"> </span><span class="ni">$$</span><span class="p">/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">);</span>
</span></span></code></pre></div><p>We already know that regular expressions are their own little language embedded in whatever programming language we happen to be getting work done in.  With Raku, we can treat regular expressions as part of the Raku language itself.</p>
<p>Let&rsquo;s tackle this backwards.  Top-down.  Whatever it is the fancy people say. I&rsquo;m going to split it out into its own function.  Makes it easier to think of this transformation in isolation.</p>
<h3 id="hide-it-in-a-function">Hide it in a function</h3>
<p>What do I want this function to do?  I want it to give me my <em>journal text</em>, but with <em>formatted headers</em> in the right places.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">format-headers</span><span class="p">(</span><span class="nv">$journal-text</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$journal-text</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">/</span><span class="ni">^^</span><span class="sr"> </span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)</span><span class="sr"> </span><span class="ni">$$</span><span class="p">/</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="use-a-named-capture">Use a named capture</h3>
<p>Do I want to format every <code>$0</code>? No. I want to format every <em>entry title</em>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">format-journal</span><span class="p">(</span><span class="nv">$journal-text</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$journal-text</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="o">...,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># $&lt;entry-title&gt;</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Of course Raku supports <a href="https://docs.raku.org/language/regexes#Named_captures">named captures</a>.  The part we care about is stored in the match object.  Behind the scenes, <code>$&lt;entry-title&gt;</code> is getting the value stored under the key <code>&quot;entry-title&quot;</code>.</p>
<h2 id="an-rx-block-for-legibility">An <code>rx{}</code> block for legibility</h2>
<p>How do I know the <em>entry title</em>?  I know the <em>entry title</em> because I found a
<em>lone timestamp</em>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">format-journal</span><span class="p">(</span><span class="nv">$journal-text</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$journal-text</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">rx</span><span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      </span><span class="nv">$&lt;entry-title&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="p">(</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">lone-timestamp</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">)</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="p">}</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># $&lt;entry-title&gt;</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>rx{ ... }</code> indicates an <a href="https://docs.raku.org/language/regexes#Anonymous_regex_definition_syntax">anonymous regex</a>.  &ldquo;Anonymous&rdquo; as opposed to what exactly?  I&rsquo;m getting there.  As our expressions get more complex, take advantage of all useful quoting mechanisms.</p>
<p>Notice that instead of a <code>(?&lt;name&gt; pattern)</code> approach to named captures, in Raku it looks a lot more like assigning a pattern to a variable.  Okay fine. Assigning a pattern to the match object&rsquo;s hash, under the key <code>&quot;entry-title&quot;</code>.  But still.  It looks like a more familiar programming language assignment.</p>
<p>But rather than the expected elaborate chain of metacharacters, the pattern we store is ‚Äî another identifier?</p>
<p>I told you I was getting there.</p>
<h3 id="name-your-regex-not-just-your-capture">Name your regex, not just your capture</h3>
<p>What&rsquo;s a <em>lone timestamp</em>? It&rsquo;s a <em>timestamp</em> on a line by itself.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">lone-timestamp</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="ni">^^</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">timestamp</span><span class="p">&gt;</span><span class="sr"> </span><span class="ni">$$</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span></code></pre></div><p>Now we have a regular expression as its own scoped code object.  The <a href="https://docs.raku.org/language/regexes#Named_regex_definition_syntax">regex</a> is the rawest component of a family that includes tokens, rules, and entire <a href="https://docs.raku.org/language/grammar_tutorial">grammars</a>.  I&rsquo;m not ready to get into grammars yet, but I am absolutely getting closer.</p>
<h3 id="its-not-an-expression-its-a-composition">It&rsquo;s not an expression; it&rsquo;s a composition</h3>
<p>What does a <em>timestamp</em> look like?  Well, a <a href="https://docs.raku.org/type/DateTime#method_Str">DateTime String</a> holds an <em>ISO 8601 date</em>, a <em>clock time</em>, and and <em>offset</em>, with a <code>'T'</code> between the date and the clock time.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">timestamp</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">iso8601-date</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">T</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">clock-time</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">offset</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span></code></pre></div><p>If we&rsquo;re looking for a literal string, it&rsquo;s okay to use a string literal.</p>
<p>Now we have a few regex patterns to define.  An <em>ISO 8601 date</em> includes a <em>year</em>, a <em>month</em>, and a <em>day of the month</em>, separated by <code>'-'</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">iso8601-date</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">year</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">month</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">day-of-month</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span></code></pre></div><p>Playing more with a language gives me a feel for how to use it based on what it makes easy.  Raku makes it easy to create a program by composing it from small pieces.  Tiny pieces, even.</p>
<p>Mind you, I have no idea if that&rsquo;s what <code>raku</code> the <em>compiler</em> likes.  But the <em>syntax</em> loves it.</p>
<p>A <em>year</em> is four digits, a <em>month</em> is two digits, and the <em>day of the month</em> is two digits.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">year</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">4</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">month</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">day-of-month</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span></code></pre></div><p>The <a href="https://docs.raku.org/language/regexes#General_quantifier:_**_min..max">general quantifier</a> <code>**</code> indicates how many times you expect a chunk to appear.  To this day I can&rsquo;t remember the exact syntax for quantifiers in old-school regular expressions.  But I can remember the number 4.</p>
<blockquote>
<p>[!NOTE]
This regex is wrong for verifying real dates. It&rsquo;s not wrong enough to worry about today. I&rsquo;m identifying header lines, not validating forms. But if some day I decide to enforce zero-padded months from <code>01</code> to <code>12</code>, I know exactly which block to edit.</p>
</blockquote>
<p>Looks like <em>clock time</em> gets saved as <em>hours</em>, <em>minutes</em>, and <em>seconds</em>.  In the interest of time, we&rsquo;ll oversimplify those too.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">hours</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">minutes</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">seconds</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">clock-time</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">hours</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">minutes</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">seconds</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span></code></pre></div><p>And my offset holds an indicator, some <em>hours</em>, and some <em>minutes</em>.  Hey, I can reuse my existing regex definitions for those!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">offset</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;[</span><span class="sr">+-</span><span class="p">]&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">hours</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">minutes</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span></code></pre></div><p>All right.  I think that covers it.  I enjoyed reusing my expressions for <em>hours</em> and <em>minutes</em> like that.  Actual code reuse, in a regular expression. Who would&rsquo;ve thought?</p>
<p>When I take this <code>lone-timestamp</code> regex and match it against <code>&quot;2021-05-24T08:11:00-07:00&quot;</code> we can see those named expressions at work. The potential really starts to sink in for me.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">ÔΩ¢2021-05-24T08:11:00-07:00ÔΩ£
</span></span><span class="line"><span class="cl"> lone-timestamp =&gt; ÔΩ¢2021-05-24T08:11:00-07:00ÔΩ£
</span></span><span class="line"><span class="cl">  timestamp =&gt; ÔΩ¢2021-05-24T08:11:00-07:00ÔΩ£
</span></span><span class="line"><span class="cl">   iso8601-date =&gt; ÔΩ¢2021-05-24ÔΩ£
</span></span><span class="line"><span class="cl">    year =&gt; ÔΩ¢2021ÔΩ£
</span></span><span class="line"><span class="cl">    month =&gt; ÔΩ¢05ÔΩ£
</span></span><span class="line"><span class="cl">    day-of-month =&gt; ÔΩ¢24ÔΩ£
</span></span><span class="line"><span class="cl">   clock-time =&gt; ÔΩ¢08:11:00ÔΩ£
</span></span><span class="line"><span class="cl">    hours =&gt; ÔΩ¢08ÔΩ£
</span></span><span class="line"><span class="cl">    minutes =&gt; ÔΩ¢11ÔΩ£
</span></span><span class="line"><span class="cl">    seconds =&gt; ÔΩ¢00ÔΩ£
</span></span><span class="line"><span class="cl">   offset =&gt; ÔΩ¢-07:00ÔΩ£
</span></span><span class="line"><span class="cl">    hours =&gt; ÔΩ¢07ÔΩ£
</span></span><span class="line"><span class="cl">    minutes =&gt; ÔΩ¢00ÔΩ£
</span></span></code></pre></div><p>And this is just me composing regex objects.  Eventually I&rsquo;m going to try grammars and then look out world!</p>
<blockquote>
<p>[!NOTE] but why?
This may all seem a little ridiculous, and for this use case ‚Äî parsing my own entry titles ‚Äî it is.  So why am I going through all this work? Aside from it being fun, of course.</p>
<p>Raku&rsquo;s sibling language Perl got a bad reputation for being dense and unreadable. Regular expressions factored heavily into that density. By providing language-level structures for defining our expressions, Raku gives us an opportunity to use their full power for handling text without resorting to the infamous density of 1990s regexen.</p>
<p>We should absolutely use that opportunity and encourage new languages to steal <em>these</em> regular expressions rather than the stuff that impressed us twenty years ago.</p>
</blockquote>
<h3 id="ship-it">Ship it!</h3>
<p>What am I doing on this soapbox? Time to step down.</p>
<p>My script works. It&rsquo;s still not fast, but at least it&rsquo;s never slow. It&rsquo;s readable. And most important of all, I had fun.</p>
<h2 id="the-complete-script">The complete script</h2>
<p>Includes a couple more steps into composition that I didn&rsquo;t feel merited extra blog post paragraphs.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env raku</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$notebook</span>     <span class="o">=</span> <span class="p">&#34;</span><span class="s2">Journal</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$entry-window</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">minute</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">digit</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">two-digits</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">digit</span><span class="p">&gt;</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">year</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">digit</span><span class="p">&gt;</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">4</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">month</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">day-of-month</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">hours</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">minutes</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">seconds</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">iso8601-date</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">year</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">month</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">day-of-month</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">clock-time</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">hours</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">minutes</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">seconds</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">offset</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;[</span><span class="sr">+-</span><span class="p">]&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">hours</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">minutes</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">timestamp</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">iso8601-date</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">T</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">clock-time</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">offset</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">lone-timestamp</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="ni">^^</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">timestamp</span><span class="p">&gt;</span><span class="sr"> </span><span class="ni">$$</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">add-entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$timestamp</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">truncated-to</span><span class="p">(</span><span class="nv">$entry-window</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$command</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin edit </span><span class="nv">$timestamp</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">shell</span><span class="p">(</span> <span class="nv">$command</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">all-entries</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin ls</span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">filtered-entries</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">all-entries</span><span class="o">.</span><span class="nb">grep</span><span class="p">({</span> <span class="o">.</span><span class="nb">starts-with</span><span class="p">(</span><span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-today</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-yesterday</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$yesterday</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">earlier</span><span class="p">(</span><span class="s">days</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1"># or :1day for the terse</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="nv">$yesterday</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="p">(</span><span class="nv">$filename</span><span class="o">,</span> <span class="nv">$filehandle</span><span class="p">)</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$filehandle</span><span class="o">.</span><span class="nb">spurt</span><span class="p">(</span> <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="p">&#34;</span><span class="s2">cat </span><span class="nv">$_</span><span class="p">&#34;</span> <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="se">\n</span><span class="p">&#34;)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">format-headers</span><span class="p">(</span> <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin batch </span><span class="nv">$filename</span><span class="s2"> </span><span class="p">}</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">format-headers</span><span class="p">(</span><span class="nv">$journal-text</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nv">$journal-text</span> <span class="o">~~</span> <span class="p">/&lt;</span><span class="nf">lone-timestamp</span><span class="p">&gt;/</span> <span class="p">{</span> <span class="nv">$/</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nv">$journal-text</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">rx</span><span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      </span><span class="nv">$&lt;entry-title&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="p">[</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">lone-timestamp</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">]</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="p">}</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># $&lt;entry-title&gt;</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">add</span><span class="p">&#34;)</span> <span class="p">{</span>   <span class="k">#= </span><span class="sd">Add an entry
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="n">add-entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">today</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read today&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-today</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">yesterday</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read yesterday&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-yesterday</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">all</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read all entries (SLOW!)
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">all-entries</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
</item>
<item>
  <title>Post: My Raku script for Journaling in Joplin</title>
  <link>https://randomgeekery.org/post/2021/05/my-raku-script-for-journaling-in-joplin/</link>
  <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/05/my-raku-script-for-journaling-in-joplin/</guid>
  <description>Setting the scene So yesterday I wrote a couple of one-liners for managing journal entries in the card/Joplin note-taking application, with help from card/Raku.
I made one for writing:
joplin use Journal &amp;&amp; joplin edit $(date --iso=minute) I made one for reading:
joplin use Journal \ &amp;&amp; raku -e &#39; for qx{ joplin ls }.lines.sort { qqx{ joplin cat $_ }.subst( /^(&lt;[\dT:\-]&gt;&#43;)/, { &#34;# $0&#34; } ).say }&#39; \ | python -m rich.</description>
   <category>post</category> 
   <category>post</category> 
   <category>programming</category>  <category>raku-lang</category>  <category>joplin</category>  <category>shell</category> 
  <content:encoded><![CDATA[<h2>Why mess with getopt when I can just use multi-dispatch?</h2><p><img src="/post/2021/05/../../../attachments/img/2021/cover-2021-05-22.png" alt="attachments/img/2021/cover-2021-05-22.png"/></p>
<h2 id="setting-the-scene">Setting the scene</h2>
<p>So yesterday I wrote a couple of <a href="/post/2021/05/cli-journaling-in-joplin-with-raku/">one-liners</a> for managing journal entries in the <a href="/card/joplin/">card/Joplin</a> note-taking application, with help from <a href="/card/raku/">card/Raku</a>.</p>
<p>I made one for writing:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="o">&amp;&amp;</span> joplin edit <span class="k">$(</span>date --iso<span class="o">=</span>minute<span class="k">)</span>
</span></span></code></pre></div><p>I made one for reading:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="o">&amp;&amp;</span> raku -e <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    for qx{ joplin ls }.lines.sort {
</span></span></span><span class="line"><span class="cl"><span class="s1">      qqx{ joplin cat $_ }.subst(
</span></span></span><span class="line"><span class="cl"><span class="s1">        /^(&lt;[\dT:\-]&gt;+)/, { &#34;# $0&#34; }
</span></span></span><span class="line"><span class="cl"><span class="s1">      ).say
</span></span></span><span class="line"><span class="cl"><span class="s1">    }&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> python -m rich.markdown -
</span></span></code></pre></div><p>They work.  That&rsquo;s great.</p>
<p>They don&rsquo;t work great, though.  Mainly the one-liner for reading.  It dumps every journal entry, which is both overwhelming and slow.  Overwhelming because I only want to see today&rsquo;s journal entries most of the time.  Slow because every one of those entries requires a separate call to <code>joplin</code>.  Joplin is lovely, but it expects to be used as a persistent application.  The command line functionality is optimized for convenience.  It is <em>not</em> optimized for being hammered repeatedly by an overenthusiastic command line script.</p>
<p>I can fix the overwhelming.  I can&rsquo;t properly fix the slow until I learn more about the <a href="https://joplinapp.org/api/overview/">Joplin API</a>.  At least I can make the experience less awful.</p>
<h2 id="make-it-less-awful">Make it less awful</h2>
<h3 id="less-hard-coding-please">Less hard-coding please</h3>
<p>First things first.  I might change the name of my journal notebook.  You might want a daily diary rather than a giant stack of entries.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$notebook</span>     <span class="o">=</span> <span class="p">&#34;</span><span class="s2">Journal</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$entry-window</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">minute</span><span class="p">&#34;;</span>
</span></span></code></pre></div><p>Focusing on daily journals? Set <code>$entry-window</code> to <code>&quot;day&quot;</code>.</p>
<h3 id="adding-an-entry">Adding an entry</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">add-entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$timestamp</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">truncated-to</span><span class="p">(</span><span class="nv">$entry-window</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$command</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin edit </span><span class="nv">$timestamp</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">shell</span><span class="p">(</span> <span class="nv">$command</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Raku&rsquo;s <a href="https://docs.raku.org/type/DateTime">DateTime</a> classes provide the gist of what we got with GNU Date. <a href="https://docs.raku.org/type/DateTime#method_truncated-to"><code>truncated-to</code></a> rounds our current timestamp ‚Äî <a href="https://docs.raku.org/type/DateTime#method_now"><code>now</code></a> ‚Äî down to the minute.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku -e <span class="s1">&#39;DateTime.now.say&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go">2021-05-22T11:52:28.380996-07:00
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">$</span> raku -e <span class="s1">&#39;DateTime.now.truncated-to(&#34;minute&#34;).say&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go">2021-05-22T11:52:00-07:00
</span></span></span></code></pre></div><p>It doesn&rsquo;t print exactly the same as <code>date</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> date --iso<span class="o">=</span>minute
</span></span><span class="line"><span class="cl"><span class="go">2021-05-22T11:52-07:00
</span></span></span></code></pre></div><p>It wouldn&rsquo;t take excessive effort to make them match, but I&rsquo;m just not concerned about it at the moment.</p>
<h4 id="use-a-main-sub">Use a <code>MAIN</code> sub</h4>
<p>Well, we went and put the logic for adding an entry into a function.  We want to call that function at some point, right?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">add-entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>We don&rsquo;t need <a href="https://docs.raku.org/routine/MAIN"><code>MAIN</code></a> yet.  If present, it&rsquo;s your Raku script&rsquo;s official entry point.  If not, you have a plain old script.  You&rsquo;re good either way.  Having that entry point will make things easier to manage in a minute, though.</p>
<p>If we run this as-is, it adds a new entry.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku journal
</span></span><span class="line"><span class="cl"><span class="go">Note does not exist: &#34;2021-05-22T12:18:00-07:00&#34;. Create it? (Y/n) y
</span></span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Note has been saved.
</span></span></span></code></pre></div><p>Okay, fine.  It works.  So far it&rsquo;s neither tidier nor more readable than the initial one-liner.  But writing an entry was never the problem.</p>
<p>The problem was reading the entries.</p>
<h3 id="read-all-the-entries">Read all the entries?</h3>
<p>Back in our one-liner, collecting entries and reading them got smushed together.  They&rsquo;re two distinct actions, though.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">all-entries</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin ls</span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Right.  Now we have subs for writing, and subs for reading.  How do we want to get at them?  Maybe a callback table with action keywords? Maybe a fancy <a href="https://modules.raku.org">module</a>?</p>
<p>Nope!  Well ‚Äî we <em>could</em>.  But we don&rsquo;t need to.  Raku has <a href="https://docs.raku.org/language/functions#Multi-dispatch">multi-dispatch</a>!</p>
<h4 id="use-multiple-main-subs">Use multiple <code>MAIN</code> subs!</h4>
<p>We replace the initial <code>MAIN</code> definition with these:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">add</span><span class="p">&#34;)</span> <span class="p">{</span>   <span class="k">#= </span><span class="sd">Add an entry
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="n">add-entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">read</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read all entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span><span class="n">all-entries</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>multi</code> tells Raku to expect multiple definitions for this sub.  Without it, the compiler gets annoyed.</p>
<p><a href="https://en.wikipedia.org/wiki/Multiple_dispatch">Multiple dispatch</a> means a few things depending on which language you&rsquo;re using ‚Äî or which computer scientist you&rsquo;re asking.  Basically it lets you avoid having one giant glob of a function with all sorts of special logic.  You do that by having a different version of the function for different situations.</p>
<p>Where I got surprised?  Most of the tiny amount I&rsquo;ve read out there for multiple dispatch talks about basing on types or pattern matching against variables.  You could absolutely do that with Raku.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$action</span> <span class="k">where</span> <span class="p">{</span> <span class="nv">$action</span> <span class="o">==</span> <span class="p">&#34;</span><span class="s2">add</span><span class="p">&#34;</span> <span class="p">})</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$action</span> <span class="k">where</span> <span class="p">{</span> <span class="nv">$action</span> <span class="o">==</span> <span class="p">&#34;</span><span class="s2">read</span><span class="p">&#34;</span> <span class="p">})</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</span></span></code></pre></div><p>Thing is, we&rsquo;re not doing anything with <code>$action</code>.  We <em>read</em> if the first command line argument is <code>read</code>.  We <em>add</em> if it&rsquo;s <code>add</code>.  Raku is happy enough matching that first argument against literal strings.  I assume other multi-dispatch languages can to the same, but nobody&rsquo;s been uncouth enough to bring it up in polite company.  It&rsquo;s always &ldquo;this type&rdquo; and &ldquo;that pattern&rdquo; or &ldquo;this enum.&rdquo;</p>
<p>What happens if we try to run the script with no arguments?  Well, if we didn&rsquo;t remove that initial version of <code>MAIN</code> we get a compiler error about redefining the sub.  But once that&rsquo;s out of the way, we no longer have a default path into the application!</p>
<p>No worries.  Raku&rsquo;s special handling of the entry point sub shows us the accepted usage.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku journal.raku
</span></span><span class="line"><span class="cl"><span class="go">Usage:
</span></span></span><span class="line"><span class="cl"><span class="go">  journal.raku add -- Add an entry
</span></span></span><span class="line"><span class="cl"><span class="go">  journal.raku read -- Read all entries
</span></span></span></code></pre></div><p>And that&rsquo;s where those <code>#=</code> comments come in.  They provide extra detail for the usage message displayed.</p>
<p>Let&rsquo;s try them out.  We&rsquo;ll <code>add</code> an entry and then make sure it shows up when we <code>read</code> them.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku journal.raku add
</span></span><span class="line"><span class="cl"><span class="go">Note does not exist: &#34;2021-05-22T12:55:00-07:00&#34;. Create it? (Y/n)
</span></span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Note has been saved.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> raku journal.raku <span class="nb">read</span>
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">#</span> 2021-05-22T12:55:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">[multi-dispatch]: https://docs.raku.org/language/functions#Multi-dispatch
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Raku Joplin journaling script, now with [multi-dispatch][]!
</span></span></span></code></pre></div><p>Nice.  Of course, at this point I&rsquo;m being handed 142 lines of text, and it&rsquo;s taking about 12 seconds to do it.  All that work and we finally reached the full &ldquo;overwhelming and slow&rdquo; point we were at this morning.</p>
<p>Things are about to improve!</p>
<h3 id="i-just-want-today">I just want today</h3>
<p>I&rsquo;ve been carefully using <em>inbox/ISO 8601</em> format for my entries.  That means I can filter to a specific date ‚Äî or year, month, hour, etc ‚Äî by constructing a date fragment and grabbing each entry that starts with the fragment.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">filtered-entries</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">all-entries</span><span class="o">.</span><span class="nb">grep</span><span class="p">({</span> <span class="o">.</span><span class="nb">starts-with</span><span class="p">(</span><span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Getting today&rsquo;s entries then becomes a matter of extracting a <code>yyyy-mm-dd</code> string from the ever-so-helpful DateTime.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-today</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><blockquote>
<p>[!NOTE] 2021-05-24
<a href="https://twitter.com/b2gills">@b2gills</a> mentioned that I could also use <a href="https://docs.raku.org/type/Date#method_today[Date.today]"><code>Date.today</code></a>
here!</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Why didn&#39;t you use Date.‚Äãtoday?<br><br>If you had a coercive parameter, you wouldn&#39;t even need to do anything more than Date.‚Äãtoday.<br><br> sub filtered-entries(Str(Date) $‚Äãdate-funnel) {‚Ä¶}<br><br> sub entries-for-today() {<br> filtered-entries Date.‚Äãtoday<br> }</p>&mdash; Brad Gilbert (@b2gills) <a href="https://twitter.com/b2gills/status/1397038905405452296?ref_src=twsrc%5Etfw">May 25, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</blockquote>
<p>I haven&rsquo;t messed with <a href="https://docs.raku.org/syntax/Coercion%20type">parameter coercion</a> yet, but that looks like it will come in handy.</p>
<p>Need to touch up my reading <code>MAIN</code> definition, though.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">read</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read today&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-today</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Does it work?  Is it fast?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nb">time</span> raku journal.raku <span class="nb">read</span>
</span></span><span class="line"><span class="cl"><span class="gp">#</span> 2021-05-22T08:12:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Millie let me sleep in until 7:54. How gracious.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">[@liztormato]: https://twitter.com/liztormato
</span></span></span><span class="line"><span class="cl"><span class="go">[Reddit]: https://www.reddit.com/r/rakulang/comments/nif2sf/cli_journaling_in_joplin_with_raku_brian_wisti/
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Oh and last night&#39;s Joplin / Raku post got some legs. [@liztormato][] even
</span></span></span><span class="line"><span class="cl"><span class="go">shared it on [Reddit][]. That&#39;s cool. I always hope they like it when I post
</span></span></span><span class="line"><span class="cl"><span class="go">something about #RakuLang.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">#</span> 2021-05-22T10:43:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">My note script needs an option for &#34;read yesterday&#39;s notes.&#34;
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">#</span> 2021-05-22T12:18:00-07:00 Making sure that my Raku Joplin journaling script lets me add an entry.
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">#</span> 2021-05-22T12:55:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">[multi-dispatch]: https://docs.raku.org/language/functions#Multi-dispatch
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Raku Joplin journaling script, now with [multi-dispatch][]!
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">real    0m3.815s
</span></span></span><span class="line"><span class="cl"><span class="go">user    0m3.966s
</span></span></span><span class="line"><span class="cl"><span class="go">sys     0m0.502s
</span></span></span></code></pre></div><p>It works.  It&rsquo;s ‚Äî it&rsquo;s not <em>fast</em> by any means, but 3.8 seconds is much faster than 12.  Again, there&rsquo;s an API waiting for when I&rsquo;m bored of abusing Joplin&rsquo;s command line conveniences.</p>
<h3 id="and-maybe-yesterday">And maybe yesterday</h3>
<p>Most of my deep dives into the journal will be from inside the Joplin app.  A quick glance at yesterday&rsquo;s notes could still be useful.</p>
<p>Of course a DateTime lets me ask for an <a href="https://docs.raku.org/type/DateTime#%28Dateish%29_method_earlier"><code>earlier</code></a> DateTime.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-yesterday</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$yesterday</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">earlier</span><span class="p">(</span><span class="s">days</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1"># or :1day for the terse</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="nv">$yesterday</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>For <code>MAIN</code> I <em>could</em> add and match against a subcommand.  I think instead I will adjust my top-level commands to reflect the most common cases.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">today</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read today&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-today</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">yesterday</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read yesterday&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-yesterday</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>And it works!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku journal.raku yesterday
</span></span><span class="line"><span class="cl"><span class="gp">#</span> 2021-05-21T09:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Alarm 07:00, stayed in bed as long as I could. Thanks to the dogs, that was 15
</span></span></span><span class="line"><span class="cl"><span class="go">minutes. Oh well.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">[Homebrew]: https://brew.sh
</span></span></span><span class="line"><span class="cl"><span class="go">[Nix]: https://nixos.org/
</span></span></span><span class="line"><span class="cl"><span class="go">[using Nix on Debian]: https://ariya.io/2020/05/nix-package-manager-on-ubuntu-or-debian
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Got the Raspberry Pi 4 set up with Raspbian, and the 500GB external drive
</span></span></span><span class="line"><span class="cl"><span class="go">attached. Thinking about package managers. I know [Homebrew][] but I could
</span></span></span><span class="line"><span class="cl"><span class="go">maybe try [Nix][]. There&#39;s a post about [using Nix on Debian][].
</span></span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">#</span> 2021-05-21T21:29:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Just about to post my Raku Joplin Journaling One-liners, but maybe a couple
</span></span></span><span class="line"><span class="cl"><span class="go">screenshots? People love screenshots.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Maybe they do. Maybe they don&#39;t. *I* love screenshots.
</span></span></span></code></pre></div><h3 id="what-about-formatting">What about formatting?</h3>
<p>Honestly?  I&rsquo;m not going to worry about it right now.  Piping to <a href="/card/rich/">card/Rich</a>
or <a href="/card/glow/">card/Glow</a> suffices when I want it pretty.</p>
<pre class="rich">‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                          <span style="font-weight: bold">2021-05-22T08:12:00-07:00</span>                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Millie let me sleep in until 7:54. How gracious.

Oh and last night's Joplin / Raku post got some legs. <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://twitter.com/liztormato">@liztormato</a></span> even shared it
on <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://www.reddit.com/r/rakulang/comments/nif2sf/cli_journaling_in_joplin_with_raku_brian_wisti/">Reddit</a></span>. That's cool. I always hope they like it when I post something about
#RakuLang.

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                          <span style="font-weight: bold">2021-05-22T10:43:00-07:00</span>                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

My note script needs an option for "read yesterday's notes."

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                          <span style="font-weight: bold">2021-05-22T12:18:00-07:00</span>                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Making sure that my Raku Joplin journaling script lets me add an entry.

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                          <span style="font-weight: bold">2021-05-22T12:55:00-07:00</span>                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Raku Joplin journaling script, now with <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://docs.raku.org/language/functions#Multi-dispatch">multi-dispatch</a></span>!

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                          <span style="font-weight: bold">2021-05-22T14:05:00-07:00</span>                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Guess I'm about ready to post the second Raku Joplin journaling post. Ah, the
joys of hyperfocus.

Better stretch my legs and get back to the official task list after.
</pre>
<h2 id="the-complete-script">The complete script</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env raku</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$notebook</span>     <span class="o">=</span> <span class="p">&#34;</span><span class="s2">Journal</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$entry-window</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">minute</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">add-entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$timestamp</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">truncated-to</span><span class="p">(</span><span class="nv">$entry-window</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$command</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin edit </span><span class="nv">$timestamp</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">shell</span><span class="p">(</span> <span class="nv">$command</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">all-entries</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin ls</span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">filtered-entries</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">all-entries</span><span class="o">.</span><span class="nb">grep</span><span class="p">({</span> <span class="o">.</span><span class="nb">starts-with</span><span class="p">(</span><span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-today</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-yesterday</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$yesterday</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">earlier</span><span class="p">(</span><span class="s">days</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1"># or :1day for the terse</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="nv">$yesterday</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">add</span><span class="p">&#34;)</span> <span class="p">{</span>   <span class="k">#= </span><span class="sd">Add an entry
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="n">add-entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">today</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read today&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-today</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">yesterday</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read yesterday&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-yesterday</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">all</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read all entries (SLOW!)
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">all-entries</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
</item>
<item>
  <title>Post: CLI Journaling in Joplin with Raku</title>
  <link>https://randomgeekery.org/post/2021/05/cli-journaling-in-joplin-with-raku/</link>
  <pubDate>Fri, 21 May 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/05/cli-journaling-in-joplin-with-raku/</guid>
  <description>the formatted output of my journal-reading one-liner
Let‚Äôs write a couple one-liners so I can journal in card/Joplin from the command line!
But why? Journaling is great. Now I‚Äôm not talking about big name Bujo bullet journaling process. I mean getting a thought down quick before I lose it. Even better if I can get that thought down in a place where I can find it later.
I know there are loads of great journaling applications.</description>
   <category>post</category> 
   <category>post</category> 
   <category>shell</category>  <category>joplin</category>  <category>raku-lang</category>  <category>second-brain</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>I sure do use a lot of words to justify my one-liners</h2><p><img src="/post/2021/05/../../../attachments/img/2021/cover-2021-05-21.png" alt="attachments/img/2021/cover-2021-05-21.png"/>
the formatted output of my journal-reading one-liner</p>
<p>Let&rsquo;s write a couple one-liners so I can journal in <a href="/card/joplin/">card/Joplin</a> from the command line!</p>
<h2 id="but-why">But why?</h2>
<p>Journaling is great.  Now I&rsquo;m not talking about big name <a href="https://bulletjournal.com/">Bujo</a> bullet journaling process.  I mean getting a thought down quick before I lose it. Even better if I can get that thought down in a place where I can find it later.</p>
<p>I know there are loads of great journaling applications.  And lots of great applications that support journaling generally.  But I love my command line. Too many distractions in those apps.</p>
<p>Command line options exist.  I could use one of the bazillion command line journaling tools.  Okay.  Maybe not a bazillion.  A couple dozen, at least.</p>
<p>Those apps and tools are yet another interface, another set of rules.  I already have Joplin handy.  Besides desktop, mobile, and terminal applications, Joplin has a CLI.  And an API, but I suspect I&rsquo;ll get to that later.</p>
<p>With uncharacteristic restraint, today I choose to get better at the tools I have rather than installing a new one.</p>
<h2 id="adding-a-journal-entry">Adding a journal entry</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="o">&amp;&amp;</span> joplin edit <span class="k">$(</span>date --iso<span class="o">=</span>minute<span class="k">)</span>
</span></span></code></pre></div><p><a href="https://www.gnu.org/software/coreutils/manual/html_node/date-invocation.html#date-invocation">GNU Date</a> ‚Äî from GNU Coreutils ‚Äî gets us consistent timestamps, which simplify searching and filtering.  <code>--iso</code> produces an <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> timestamp.  Very handy.  By default it prints the <code>YYYY-MM-DD</code> version of today&rsquo;s date, but you can opt for more granularity.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> date --iso<span class="o">=</span>minute
</span></span><span class="line"><span class="cl"><span class="go">2021-05-20T08:26-07:00
</span></span></span></code></pre></div><p>I plan to make frequent small notes, so <code>minute</code> feels like a good choice.</p>
<blockquote>
<p>[!NOTE] <code>use Journal</code>?
Yes, this came up.  Had the Joplin terminal app open in one terminal while I added a journal entry in another terminal.  Terminal app did some sort of state maintenance thing.  Next thing I know I&rsquo;m adding journal entries to &ldquo;Nerd Notes.&rdquo;</p>
</blockquote>
<p>Since it doesn&rsquo;t exist, <code>joplin</code> will ask for confirmation before creating it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> joplin use Journal <span class="o">&amp;&amp;</span> joplin edit <span class="k">$(</span>date --iso<span class="o">=</span>minute<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="go">Note does not exist: &#34;2021-05-20T08:26-07:00&#34;. Create it? (Y/n)
</span></span></span></code></pre></div><p>I&rsquo;m okay with the confirmation request for now. That way I have fewer moments of accidentally creating entries.</p>
<p><img src="/post/2021/05/attachments/img/2021/editing-note.png" alt="Editing a journal entry"/></p>
<h3 id="what-about-more-of-a-diary">What about more of a diary?</h3>
<p>Leave <code>minute</code> off the <code>--iso</code> argument if you prefer a tidy collection of daily pages to my big stack of notes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin edit <span class="k">$(</span>date --iso<span class="k">)</span>
</span></span></code></pre></div><p>Now you&rsquo;ll be editing the single entry for today&rsquo;s date.</p>
<h2 id="reading-journal-entries">Reading journal entries</h2>
<p>The best review path will be via the Joplin app itself.  That way you can tag and edit.</p>
<p><em>But</em> ‚Äì if you just want a quick view of recent thoughts?  That is something we can do from the command line.</p>
<p>This next bit gets a little fancy.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="o">&amp;&amp;</span> raku -e <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    for qx{ joplin ls }.lines.sort {
</span></span></span><span class="line"><span class="cl"><span class="s1">      qqx{ joplin cat $_ }.subst(
</span></span></span><span class="line"><span class="cl"><span class="s1">        /^(&lt;[\dT:\-]&gt;+)/, { &#34;# $0&#34; }
</span></span></span><span class="line"><span class="cl"><span class="s1">      ).say
</span></span></span><span class="line"><span class="cl"><span class="s1">    }&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> python -m rich.markdown -
</span></span></code></pre></div><p>Let me stall for a second.</p>
<h3 id="pretty-print-with-rich">Pretty print with Rich</h3>
<p>We already talked about <code>joplin use Journal</code>. <a href="https://rich.readthedocs.io/en/stable/markdown.html">Rich Markdown</a> formats Markdown ‚Äî Joplin&rsquo;s default format ‚Äî for rich display in a terminal.  It can even run as a standalone application.  I take advantage of that here to get a pretty view of my Joplin entries:</p>
<pre class="rich">‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                            <span style="font-weight: bold">2021-05-20T08:26-07:00</span>                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù


Getting an idea for a CLI journaling tool using Joplin as the backend

The logic would look something like this:

<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ</span> <span style="color: #f8f8f2; text-decoration-color: #f8f8f2; background-color: #272822">joplin use Journal</span><span style="background-color: #272822">                                                          </span> <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ</span> <span style="color: #f8f8f2; text-decoration-color: #f8f8f2; background-color: #272822">joplin edit </span><span style="color: #66d9ef; text-decoration-color: #66d9ef; background-color: #272822">$(</span><span style="color: #f8f8f2; text-decoration-color: #f8f8f2; background-color: #272822">date --iso</span><span style="color: #66d9ef; text-decoration-color: #66d9ef; background-color: #272822">)</span><span style="background-color: #272822">                                                   </span> <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ</span> <span style="color: #75715e; text-decoration-color: #75715e; background-color: #272822"># append "## $(date --iso=minute)"</span><span style="background-color: #272822">                                          </span> <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò</span>

That's it, basically. There could be more functionality, such as reviewing the
log.

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                            <span style="font-weight: bold">2021-05-21T09:00-07:00</span>                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Alarm 07:00, stayed in bed as long as I could. Thanks to the dogs, that was 15
minutes. Oh well.

Got the Raspberry Pi 4 set up with Raspbian, and the 500GB external drive
attached. Thinking about package managers. I know <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://brew.sh">Homebrew</a></span> but I could maybe try
<span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://nixos.org/">Nix</a></span>. There's a post about <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://ariya.io/2020/05/nix-package-manager-on-ubuntu-or-debian">using Nix on Debian</a></span>.

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                          <span style="font-weight: bold">2021-05-21T14:01:00-07:00</span>                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Resuming productivity, or something like it.

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                          <span style="font-weight: bold">2021-05-21T20:20:00-07:00</span>                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

I keep forgetting <span style="color: #ffffff; text-decoration-color: #ffffff; background-color: #000000">-sel clip</span> when using xclip. Without that it doesn't go into
the easy copy buffer.

<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ</span> <span style="color: #f92672; text-decoration-color: #f92672; background-color: #272822; font-weight: bold">$ </span><span style="color: #f8f8f2; text-decoration-color: #f8f8f2; background-color: #272822">my-command | xclip -sel clip</span><span style="background-color: #272822">                                              </span> <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ</span>
<span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò</span>
</pre>
<p>You can also use <a href="https://github.com/charmbracelet/glow">Glow</a> if you want a standalone Markdown pretty printer. It works.  Rich is already part of my toolkit, so I&rsquo;ll keep using it.</p>
<h3 id="am-i-ready-to-explain-myself">Am I ready to explain myself?</h3>
<p>Okay, I think I&rsquo;ve stalled enough.  That middle bit.  That&rsquo;s <a href="/card/raku/">card/Raku</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">for</span> <span class="k">q</span><span class="sa">x</span><span class="p">{</span><span class="s"> joplin ls </span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span><span class="o">.</span><span class="nb">say</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>I don&rsquo;t often do one-liners. We&rsquo;ll have to break it down into tiny pieces.</p>
<p>First, we need a sorted list of journal entries.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">q</span><span class="sa">x</span><span class="p">{</span><span class="s"> joplin ls </span><span class="p">}</span>  <span class="c1"># ask `joplin` to print note titles, saving the output</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="nb">lines</span>         <span class="c1"># Split that output into lines, one per note</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="nb">sort</span>          <span class="c1"># Sort those lines by note title</span>
</span></span></code></pre></div><p>Things get unpredictable if I don&rsquo;t sort notes myself.  Joplin tends to sort notes by last activity.  Thank goodness for ISO 8601, which is easily sorted:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">2021-05-20T08:26-07:00
</span></span><span class="line"><span class="cl">2021-05-21T09:00-07:00
</span></span><span class="line"><span class="cl">2021-05-21T14:01-07:00
</span></span><span class="line"><span class="cl">2021-05-21T20:20-07:00
</span></span></code></pre></div><p>Next, we need to do something with each of those note titles.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">for</span> <span class="k">q</span><span class="sa">x</span><span class="p">{</span><span class="s"> joplin ls </span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</span></span></code></pre></div><p>Well? The content of each note is important.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="s2"> </span><span class="p">}</span>
</span></span></code></pre></div><p><code>qqx</code> interpolates variables before asking the system to run your command. The variable being interpolated is our old friend <code>$_</code>, this time around standing in for whichever of those sorted lines we reached.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">2021-05-20T08:26-07:00
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Getting an idea for a CLI journaling tool using Joplin as the backend
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The logic would look something like this:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s">```bash
</span></span></span><span class="line"><span class="cl"><span class="s"></span>joplin use Journal
</span></span><span class="line"><span class="cl">joplin edit <span class="k">$(</span>date --iso<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># append &#34;## $(date --iso=minute)&#34;</span>
</span></span><span class="line"><span class="cl"><span class="s">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">That&#39;s it, basically. There could be more functionality, such as reviewing
</span></span><span class="line"><span class="cl">the log.
</span></span></code></pre></div><p>I want to print this out in the terminal.  I need to massage it a little first. Even though the file is Markdown, the first line is the note&rsquo;s unformatted title.  It makes quick one-line notes easier.</p>
<p>But it also means if <em>I</em> want that first line to look significant, I need to do something with this:</p>
<pre tabindex="0"><code class="language-language" data-lang="language">2021-05-20T08:26-07:00
</code></pre><p>The most obvious fix to me? Turn it into a level one Markdown header.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="gh"># 2021-05-20T08:26-07:00
</span></span></span></code></pre></div><p>That&rsquo;s a single <a href="https://docs.raku.org/routine/subst"><code>.subst</code></a> transformation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>  <span class="c1"># in printed note</span>
</span></span><span class="line"><span class="cl">  <span class="p">/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span>          <span class="c1"># find the first line that looks like a timestamp</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span>                 <span class="c1"># and turn it into a Markdown header</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>Okay, I got a little lazy with the regular expression.  But my brain was in one-liner mode.  For a full script I&rsquo;d probably spell it out more clearly.</p>
<p>The last step is to display the transformed note contents.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span><span class="o">...</span><span class="p">)</span><span class="o">.</span><span class="nb">say</span>
</span></span></code></pre></div><p>Or ask them to display themselves.  However you want to think of it.</p>
<p>This whole thing would be rather clunky as a shell alias.  I could add it as a function to my <code>.bashrc</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">jread<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  joplin use Journal <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> raku -e <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">      qqx{joplin cat $_}.subst(/^(&lt;[\dT:\-]&gt;+)/, { &#34;# $0&#34; }).say for qx{ joplin ls }.lines.sort
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="p">|</span> python -m rich.markdown -
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Then again, maybe not.  This should probably be a script.  Check back in a few days.</p>
<blockquote>
<p>[!NOTE] Oooh a cliffhanger!
I have a working script already.  What I don&rsquo;t have much of is unallocated
time.  But hopefully yes!  Soon.  I did some cool stuff with <code>multi MAIN</code>
in Raku that I&rsquo;m desperate to show off.</p>
</blockquote>
]]></content:encoded>
</item>
<item>
  <title>Post: Tangling code from Hugo content with Raku</title>
  <link>https://randomgeekery.org/post/2020/07/tangling-code-from-hugo-content-with-raku/</link>
  <pubDate>Wed, 08 Jul 2020 21:45:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/07/tangling-code-from-hugo-content-with-raku/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;https://randomgeekery.org/post/2020/07/../../../attachments/img/2020/cover-2020-07-08.jpg&#34; alt=&#34;attachments/img/2020/cover-2020-07-08.jpg&#34;/&gt;
You know what else I can tangle? Yarn!&lt;/p&gt;
&lt;p&gt;I spend a while using &lt;a href=&#34;https://randomgeekery.org/card/raku/&#34;&gt;card/Raku&lt;/a&gt; to extract code from a &lt;a href=&#34;https://randomgeekery.org/card/hugo/&#34;&gt;card/Hugo&lt;/a&gt; post.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>raku-lang</category>  <category>literateprogramming</category>  <category>files</category>  <category>hugo</category>  <category>sortof</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>I could just use Org mode, but noo that's too easy</h2><p><img src="/post/2020/07/../../../attachments/img/2020/cover-2020-07-08.jpg" alt="attachments/img/2020/cover-2020-07-08.jpg"/>
You know what else I can tangle? Yarn!</p>
<p>I spend a while using <a href="/card/raku/">card/Raku</a> to extract code from a <a href="/card/hugo/">card/Hugo</a> post.</p>
<blockquote>
<p>[!NOTE] 2020-09-03
<a href="https://fosstodon.org/@codesections">@codesections@fosstodon.org</a> found a typo! I forgot to <em>show</em> the target file name once command line arguments are in place. It should go <code>raku tangle-fragments.raku index.md</code>.</p>
</blockquote>
<p>Let&rsquo;s say I have a file.  The one you&rsquo;re reading, perhaps.  Well, its original Markdown content.</p>
<p>It has a <a href="/card/hugo/">card/Hugo</a> shortcode in it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">code</span> <span class="na">file</span><span class="o">=</span><span class="s">&#34;hello.py&#34;</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">print(&#34;Hello&#34;)
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">code</span> <span class="p">&gt;</span>}}
</span></span></code></pre></div><p>I based <code>{{&lt; code &gt;}}</code> here on a shortcode from the <a href="https://github.com/gohugoio/hugoDocs/blob/master/layouts/shortcodes/code.html">Hugo docs</a>. It presents highlighted code with additional context.</p>
<div class="highlight" title="hello.py"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"> <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>Really handy when you&rsquo;re writing about code.  Thing is, now I have two copies. There&rsquo;s one here in the shortcode, and another in a <code>hello.py</code> file that I&rsquo;m writing about.  I&rsquo;d prefer there was only a single copy.  That way they don&rsquo;t get out of sync.</p>
<p>I <em>could</em> use Hugo&rsquo;s <a href="https://gohugo.io/functions/readfile/">readFile</a> function in a new shortcode, including the contents of <code>hello.py</code> in this Markdown file.  Something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">include</span> <span class="na">file</span><span class="o">=</span><span class="s">&#34;hello.py&#34;</span> <span class="p">&gt;</span>}}
</span></span></code></pre></div><blockquote>
<p>[!NOTE]
Actual shortcode logic left as an exercise for the reader.</p>
</blockquote>
<p>But that still breaks up the writing flow a little bit.  I&rsquo;m writing the code over here, and writing <em>about</em> it over there.  It&rsquo;s a tiny complaint, but working with <a href="/card/org/">card/Org</a> has spoiled me.  I get to write the code in the same document that I&rsquo;m writing about it in.  Everything stays in sync, more or less.</p>
<p>What I want is to write about <code>hello.py</code> here, and with a command have <code>hello.py</code> appear on my filesystem, containing the Python code I&rsquo;ve been describing.</p>
<p>And I want to do it without disturbing Hugo. Let it turn Markdown into HTML.</p>
<h2 id="tangling">Tangling</h2>
<p>This process is called &ldquo;tangling,&rdquo; and it&rsquo;s popular in the admittedly small
world of <a href="http://literateprogramming.com/">Literate Programming</a>.  The code is interleaved
throughout some kind of document.  A tool like <a href="https://www.cs.tufts.edu/~nr/noweb/">noweb</a> or <a href="https://orgmode.org/worg/org-contrib/babel/intro.html">Babel</a>
parses the document to create code files.  Could be any kind of file, really.
The process can get fancy.</p>
<p>But the start is not fancy: given a text file containing a <code>{{&lt; code file=&quot;(something)&quot; &gt;}}</code>, write the contents of that shortcode to the named file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">index.md</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{&lt; </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> &gt;}}</span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="k">regex</span> <span class="nf">shortcode</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="nv">$opener</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      code </span><span class="se">\s</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      </span><span class="p">&#39;</span><span class="s1">file=&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;filename&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">  </span><span class="c1"># Remember the filename
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">      </span><span class="ni">.</span><span class="o">*?</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="nv">$&lt;content&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr">  </span><span class="c1"># Remember everything else in the block
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="nv">$opener</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">/code</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$markdown</span> <span class="o">=</span> <span class="nb">slurp</span> <span class="nv">$filename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nv">$markdown</span><span class="o">.</span><span class="nb">match</span><span class="p">(/</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">shortcode</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">/)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="nv">$tangle-file</span> <span class="o">=</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">filename</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="nv">$tangle-content</span> <span class="o">=</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">content</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">spurt</span> <span class="nv">$tangle-file</span><span class="o">,</span> <span class="nv">$tangle-content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Tangled to </span><span class="nv">$tangle-file</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>I love Raku&rsquo;s approach to <a href="https://docs.raku.org/language/regexes">regular expressions</a>.  For starters, the syntax looks a bit more like describing a grammar.  I can break the funny regex characters up with spaces, and clarify them with comments.  In fact, I could someday build this up to a real <a href="https://docs.raku.org/language/grammars">grammar</a>.</p>
<p>Secondly, it addresses the fact that most text we look at these days contains multiple lines.  I didn&rsquo;t have to worry about any special multiline flags to get this working.</p>
<p>Finally, getting at the named captures was ‚Äî I wouldn&rsquo;t say &ldquo;obvious,&rdquo; but at least &ldquo;coherent.&rdquo; I can treat the match variable <code>$/</code> as a nested <a href="https://docs.raku.org/language/hashmap">Hash</a>. The important bits look something like this::</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">shortcode =&gt;
</span></span><span class="line"><span class="cl">  filename =&gt; ÔΩ¢hello.pyÔΩ£
</span></span><span class="line"><span class="cl">  content =&gt; ÔΩ¢print(&#34;Hello&#34;)ÔΩ£
</span></span></code></pre></div><p>I can grab the named capture <code>filename</code> of my matched <code>shortcode</code> regex with <code>$/&lt;shortcode&gt;&lt;filename&gt;</code> ‚Äî or <code>~$&lt;shortcode&gt;&lt;filename&gt;</code>, depending on your preferred syntax.</p>
<p>This is all possible in languages like Perl with assorted flags, but I haven&rsquo;t seen parsing treated so well by default since maybe <a href="/card/rebol/">card/REBOL</a>.</p>
<p>Anyways, let&rsquo;s run this thing.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku tangle.raku
</span></span><span class="line"><span class="cl"><span class="go">Tangled to hello.py
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> bat hello.py
</span></span><span class="line"><span class="cl"><span class="go">‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
</span></span></span><span class="line"><span class="cl"><span class="go">       ‚îÇ File: hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
</span></span></span><span class="line"><span class="cl"><span class="go">   1   ‚îÇ print(&#34;Hello&#34;)
</span></span></span><span class="line"><span class="cl"><span class="go">‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
</span></span></span></code></pre></div><p>Sweet.</p>
<p>Except ‚Äî this Markdown file I&rsquo;m writing.  It has <em>two</em> file code blocks now.  I want to tangle both of them.</p>
<h2 id="multiple-output-files">Multiple output files</h2>
<p>This requires a couple changes, since I&rsquo;m writing code about Hugo shortcodes in a Hugo post.</p>
<p>To show shortcode directives without Hugo evaluating them, they need to look like shortcode comments.  Their contents will get passed straight through as part of your post.  To show <code>{{&lt; shortcode &gt;}}</code> in a post, your Hugo content needs <code>{{&lt;/* shortcode */&gt;}}</code>.</p>
<p>So that&rsquo;s lovely and all, but can be a headache of its own for this specific situation of extracting code from a blog post.</p>
<p>I need to remember this commented shortcode syntax.</p>
<div class="highlight" title="define-commented-shortcodes"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"> <span class="k">my</span> <span class="nv">$commented-opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{</span><span class="p">&#39;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">&lt;/* </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl"> <span class="k">my</span> <span class="nv">$commented-closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> */&gt;</span><span class="p">&#39;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">}}</span><span class="p">&#39;;</span>
</span></span></code></pre></div><blockquote>
<p>[!NOTE]
Goodness, that looks silly.  Well, I&rsquo;m writing this blog post as a test case
for the code.  I couldn&rsquo;t figure out how to cleanly present the  commented shortcode delimiters without Hugo and my code getting into a fierce argument.</p>
<p>If I wasn&rsquo;t writing the code <em>in</em> this post, I could use something simpler, like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$commented-opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{‚Äã&lt;/* </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$commented-closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> */&gt;}}</span><span class="p">&#39;;</span>
</span></span></code></pre></div><p>But that&rsquo;s not the path I chose.  It&rsquo;s not easy to write programs that write themselves.  Sometimes you must help them along.</p>
</blockquote>
<p>That way I can replace those commented shortcode delimiters with their normal counterparts when I tangle later.</p>
<div class="highlight" title="define-commented-shortcodes"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$tangle-content</span> <span class="o">=</span> <span class="nv">$block</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">content</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="nb">subst</span><span class="p">(:</span><span class="s">global</span><span class="o">,</span> <span class="p">/</span><span class="sr"> </span><span class="nv">$commented-opener</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="nv">$opener</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="nb">subst</span><span class="p">(:</span><span class="s">global</span><span class="o">,</span> <span class="p">/</span><span class="sr"> </span><span class="nv">$commented-closer</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="nv">$closer</span><span class="p">);</span>
</span></span></code></pre></div><p>Now that I have that particular detail out of the way, tangle every block? Sure!  Make a regular expression match <code>:global</code> and it returns a list containing every match.</p>
<div class="highlight" title="tangle-every-block"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$markdown</span>  <span class="o">=</span> <span class="nb">slurp</span> <span class="nv">$filename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@fragments</span> <span class="o">=</span> <span class="nv">$markdown</span><span class="o">.</span><span class="nb">match</span><span class="p">(/&lt;</span><span class="nf">shortcode</span><span class="p">&gt;/</span><span class="o">,</span> <span class="p">:</span><span class="s">global</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nv">@fragments</span> <span class="k">-&gt;</span> <span class="nv">$block</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$tangle-file</span> <span class="o">=</span> <span class="nv">$block</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">filename</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">  <span class="p">¬´</span><span class="s2">replace-commented-shortcodes</span><span class="p">¬ª</span>
</span></span><span class="line"><span class="cl">  <span class="nb">spurt</span> <span class="nv">$tangle-file</span><span class="o">,</span> <span class="nv">$tangle-content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Tangled to </span><span class="nv">$tangle-file</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>I think that about covers it.  The shortcode recognition logic can stay the same.</p>
<div class="highlight" title="tangle-multi.raku"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">index.md</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{&lt; </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> &gt;}}</span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="k">regex</span> <span class="nf">shortcode</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="nv">$opener</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      code </span><span class="se">\h</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      </span><span class="p">&#39;</span><span class="s1">file=&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;filename&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">  </span><span class="c1"># Remember the filename
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">      </span><span class="ni">.</span><span class="o">*?</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="nv">$&lt;content&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr">  </span><span class="c1"># Remember everything else in the block
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore trailing newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="nv">$opener</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">/code</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="o">¬´</span><span class="n">define-commented-shortcodes</span><span class="o">¬ª</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">¬´</span><span class="s2">tangle-every-block</span><span class="p">¬ª</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>And it works!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku tangle-multi.raku
</span></span><span class="line"><span class="cl"><span class="go">Tangled to hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to tangle.raku
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> bat tangle.raku
</span></span><span class="line"><span class="cl"><span class="go">‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
</span></span></span><span class="line"><span class="cl"><span class="go">       ‚îÇ File: tangle.raku
</span></span></span><span class="line"><span class="cl"><span class="go">‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
</span></span></span><span class="line"><span class="cl"><span class="go">   1   ‚îÇ sub MAIN() {
</span></span></span><span class="line"><span class="cl"><span class="go">   2   ‚îÇ   my $filename = &#34;index.md&#34;;
</span></span></span><span class="line"><span class="cl"><span class="go">   3   ‚îÇ   my $opener = &#39;{{&lt; &#39;;
</span></span></span><span class="line"><span class="cl"><span class="go">   4   ‚îÇ   my $closer = &#39; &gt;}}&#39;;
</span></span></span><span class="line"><span class="cl"><span class="go">   5   ‚îÇ   my regex shortcode {
</span></span></span><span class="line"><span class="cl"><span class="go">   6   ‚îÇ     $opener
</span></span></span><span class="line"><span class="cl"><span class="go">   7   ‚îÇ       code \s
</span></span></span><span class="line"><span class="cl"><span class="go">   8   ‚îÇ       &#39;file=&#34;&#39; $&lt;filename&gt; = .+? &#39;&#34;&#39;  # Remember the filename
</span></span></span><span class="line"><span class="cl"><span class="go">   9   ‚îÇ       .*?
</span></span></span><span class="line"><span class="cl"><span class="go">  10   ‚îÇ     $closer
</span></span></span><span class="line"><span class="cl"><span class="go">  11   ‚îÇ     \n                # Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="go">  12   ‚îÇ     $&lt;content&gt; = .+?  # Remember everything else in the block
</span></span></span><span class="line"><span class="cl"><span class="go">  13   ‚îÇ     \n                # Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="go">  14   ‚îÇ     $opener &#39;/code&#39; $closer
</span></span></span><span class="line"><span class="cl"><span class="go">  15   ‚îÇ   }
</span></span></span><span class="line"><span class="cl"><span class="go">  16   ‚îÇ
</span></span></span><span class="line"><span class="cl"><span class="go">  17   ‚îÇ   my $markdown = slurp $filename;
</span></span></span><span class="line"><span class="cl"><span class="go">  18   ‚îÇ
</span></span></span><span class="line"><span class="cl"><span class="go">  19   ‚îÇ   if $markdown.match(/ &lt;shortcode&gt; /) {
</span></span></span><span class="line"><span class="cl"><span class="go">  20   ‚îÇ     my $tangle-file = $/&lt;shortcode&gt;&lt;filename&gt;;
</span></span></span><span class="line"><span class="cl"><span class="go">  21   ‚îÇ     my $tangle-content = $/&lt;shortcode&gt;&lt;content&gt;;
</span></span></span><span class="line"><span class="cl"><span class="go">  22   ‚îÇ     spurt $tangle-file, $tangle-content;
</span></span></span><span class="line"><span class="cl"><span class="go">  23   ‚îÇ     say &#34;Tangled to $tangle-file&#34;;
</span></span></span><span class="line"><span class="cl"><span class="go">  24   ‚îÇ   }
</span></span></span><span class="line"><span class="cl"><span class="go">  25   ‚îÇ }
</span></span></span><span class="line"><span class="cl"><span class="go">  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
</span></span></span></code></pre></div><p>Unfortunately, I&rsquo;m not quite done yet.</p>
<h2 id="multiple-fragments">Multiple fragments</h2>
<p>I&rsquo;m not done yet because I don&rsquo;t like to describe my code a full file at a time.  I&rsquo;d rather talk about this bit here, explain that bit over there, then mash it all up in the end.</p>
<p>Consistency counts, so I need to pick a syntax.  Well ‚Äî you&rsquo;ve been reading along.  You can see that I already made my choice.  I got used to <code>&lt;&lt;fragment-name&gt;&gt;</code> in Babel, where the attribute is called <code>name</code>. Might as well keep doing that over here.  Oh but hang on. I want it to stand out a bit.  I&rsquo;ll use angle quotes <code>¬´‚Ä•¬ª</code>.</p>
<blockquote>
<p>[!NOTE]
On a US keyboard using <a href="/card/vim/">card/Vim</a> or <a href="/card/neovim/">card/Neovim</a>, <code>¬´</code> is a <a href="https://vimhelp.org/digraph.txt.html#digraph.txt">digraph</a> which can be entered via <kbd>Control-k</kbd> followed by <kbd>&lt;&lt;</kbd>.  Or if you&rsquo;ve set up a <a href="https://en.wikipedia.org/wiki/Compose_key">Compose</a> key, it&rsquo;s <kbd>Compose</kbd> followed by <kbd>&lt;&lt;</kbd> in any editor.</p>
<p><code>¬ª</code> is the same, but <kbd>&gt;&gt;</kbd> instead.</p>
<p><em>Or</em> you can use <code>&lt;&lt;‚Ä¶&gt;&gt;</code> in your code and ignore my recent obsession with fancy characters.</p>
<p>Yes, I know I could practically write it <em>all</em> with fancy characters in Raku. One step at a time.</p>
</blockquote>
<p>Let&rsquo;s go back to the Python code because it&rsquo;s still so small.</p>
<p>Say I want to demonstrate the delightful <a href="/card/rich/">card/Rich</a> terminal library for Python.</p>
<div class="highlight" title="import-libraries"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"> <span class="kn">from</span> <span class="nn">rich</span> <span class="kn">import</span> <span class="nb">print</span>
</span></span><span class="line"><span class="cl"> <span class="kn">from</span> <span class="nn">rich.panel</span> <span class="kn">import</span> <span class="n">Panel</span>
</span></span><span class="line"><span class="cl"> <span class="kn">from</span> <span class="nn">rich.markdown</span> <span class="kn">import</span> <span class="n">Markdown</span>
</span></span></code></pre></div><p>But before I really use it in my code, I spend 1,500 words singing its praises.</p>
<p>It&rsquo;s nice.  I like it.</p>
<p>Okay, done singing.  Time to write the rest of the program.</p>
<div class="highlight" title="rich-hello.py"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="err">¬´</span><span class="n">import</span><span class="o">-</span><span class="n">libraries</span><span class="err">¬ª</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">md</span> <span class="o">=</span> <span class="n">Markdown</span><span class="p">(</span><span class="s2">&#34;**Hello**, *World*.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">Panel</span><span class="p">(</span><span class="n">md</span><span class="p">))</span>
</span></span></code></pre></div><p>I identify the fragment with a <code>name</code> attribute:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">code</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;import-libraries&#34;</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;python&#34;</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">from rich import print
</span></span><span class="line"><span class="cl">from rich.panel import Panel
</span></span><span class="line"><span class="cl">from rich.markdown import Markdown
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">code</span> <span class="p">&gt;</span>}}
</span></span></code></pre></div><p>My <code>code</code> block references the <code>import-libraries</code> fragment by name when I&rsquo;m ready for it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">code</span> <span class="na">file</span><span class="o">=</span><span class="s">&#34;rich-hello.py&#34;</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">¬´import-libraries¬ª
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">md = Markdown(&#34;**Hello**, *World*.&#34;)
</span></span><span class="line"><span class="cl">print(Panel(md))
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">code</span> <span class="p">&gt;</span>}}
</span></span></code></pre></div><p>I <em>might</em> spend some time talking about the <code>code</code> shortcode in another post, but I dislike Go&rsquo;s templating enough that this does not sound like fun.</p>
<h3 id="rounding-up-fragments-to-tangle">Rounding up fragments to tangle</h3>
<p>Recognizing an additional parameter doesn&rsquo;t make my regular expression <em>that</em> much more complicated, but I can see things getting  ore complex.  I could even find a better pattern later.  Let&rsquo;s give the params their own named regex for some encapsulation.</p>
<div class="highlight" title="shortcode-params-regex"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">params</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">   </span><span class="p">&#39;</span><span class="s1">file=&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;filename&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">   </span><span class="o">||</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">   </span><span class="p">&#39;</span><span class="s1">name=&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;fragment&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span></code></pre></div><p>That way I can drop it in <code>shortcode</code> to say &ldquo;oh and look for <code>params</code> while you&rsquo;re at it please.&rdquo;</p>
<div class="highlight" title="nested-shortcode-regex"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="p">¬´</span><span class="s2">shortcode-params-regex</span><span class="p">¬ª</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{&lt; </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> &gt;}}</span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">shortcode</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="nv">$opener</span><span class="sr"> code </span><span class="se">\s</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">params</span><span class="p">&gt;</span><span class="sr"> </span><span class="ni">.</span><span class="o">*?</span><span class="sr"> </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">  </span><span class="nv">$&lt;content&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr">  </span><span class="c1"># Remember everything else in the block
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">  </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore trailing newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">  </span><span class="nv">$opener</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">/code</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span></code></pre></div><p>Okay, we recognize <code>file</code> and <code>name</code> parameters.  What do we do with them? We gather them!</p>
<div class="highlight" title="gather-fragments-and-files"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">%fragment-for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@filenames</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$markdown</span> <span class="o">=</span> <span class="nb">slurp</span> <span class="nv">$filename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nv">$markdown</span><span class="o">.</span><span class="nb">match</span><span class="p">(/&lt;</span><span class="nf">shortcode</span><span class="p">&gt;/</span><span class="o">,</span> <span class="p">:</span><span class="s">global</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nv">$block</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$tangle-content</span> <span class="o">=</span> <span class="nv">$block</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">content</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$params</span> <span class="o">=</span> <span class="nv">$block</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">params</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$fragment</span> <span class="o">=</span> <span class="nv">$params</span><span class="p">&lt;</span><span class="s">fragment</span><span class="p">&gt;</span> <span class="o">||</span> <span class="nv">$params</span><span class="p">&lt;</span><span class="s">filename</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nv">$fragment</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">fragment: </span><span class="nv">$fragment</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%fragment-for</span><span class="p">{</span> <span class="nv">$fragment</span><span class="o">.</span><span class="kt">Str</span> <span class="p">}</span> <span class="o">=</span> <span class="nv">$tangle-content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$params</span><span class="p">&lt;</span><span class="s">filename</span><span class="p">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">@filenames</span><span class="o">.</span><span class="nb">push</span><span class="p">(</span><span class="nv">$filename</span><span class="o">.</span><span class="kt">Str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="tangling-my-fragments">Tangling my fragments</h3>
<p>Let&rsquo;s see here.  I know before I can write any files, I need to make sure everything&rsquo;s tangled Trying to keep fragments easy to identify.  They sit on a line by themselves, possibly with some leading whitespace.</p>
<div class="highlight" title="tangle-fragments"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">fragment</span> <span class="p">{</span><span class="sr"> </span><span class="ni">^^</span><span class="sr"> </span><span class="se">\h</span><span class="o">*?</span><span class="sr"> </span><span class="p">&#34;</span><span class="s2">¬´</span><span class="p">&#34;</span><span class="sr"> </span><span class="nv">$&lt;name&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#34;</span><span class="s2">¬ª</span><span class="p">&#34;</span><span class="sr"> </span><span class="ni">$$</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">%tangle-for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">¬´</span><span class="s2">tangle-function</span><span class="p">¬ª</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nv">%fragment-for</span><span class="o">.</span><span class="nb">keys</span> <span class="k">-&gt;</span> <span class="nv">$name</span> <span class="p">{</span> <span class="nf">tangle</span><span class="p">(</span><span class="nv">$name</span><span class="p">);</span> <span class="p">}</span>
</span></span></code></pre></div><p>Raku functions are lexically scoped, which means it&rsquo;s perfectly okay to declare a function inside another function.  Though next time I revisit  his, I may want to think about a <a href="https://docs.raku.org/language/classtut">class</a> or something to hold the  complexity.</p>
<p>But what does that function need to look like?  I&rsquo;m still not sure I got it quite right.  I mean I know the <em>basic</em> shape of it.</p>
<div class="highlight" title="tangle-function"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">tangle</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">¬´</span><span class="s2">tangle-error-checking</span><span class="p">¬ª</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">¬´</span><span class="s2">tangle-text</span><span class="p">¬ª</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>It needs some error checking.  I know that much.  Oh, and if it&rsquo;s already been tangled I should avoid going through it again.</p>
<div class="highlight" title="tangle-error-checking"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl">   <span class="k">return</span> <span class="p">&#34;&#34;</span> <span class="k">unless</span> <span class="nv">$name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nv">%tangle-for</span><span class="p">{</span> <span class="nv">$name</span> <span class="p">}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="nv">%tangle-for</span><span class="p">{</span> <span class="nv">$name</span> <span class="p">}</span><span class="o">.</span><span class="kt">Str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">my</span> <span class="nv">$content</span> <span class="o">=</span> <span class="nv">%fragment-for</span><span class="p">{</span> <span class="nv">$name</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">   <span class="k">unless</span> <span class="nv">$content</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nb">die</span> <span class="p">&#34;</span><span class="s2">¬´</span><span class="nv">$name</span><span class="s2">¬ª is not a valid fragment</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span></code></pre></div><p>The idea of the thing is clear enough.  Find and recursively <code>tangle</code> each fragment found in this text, replacing the fragment references with their tangled text.  Once that&rsquo;s all done, cache and return the tangled text.</p>
<div class="highlight" title="tangle-text"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl">   <span class="k">for</span> <span class="nv">$content</span><span class="o">.</span><span class="nb">match</span><span class="p">(/</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">fragment</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="p">:</span><span class="s">global</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nv">$match</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">my</span> <span class="nv">$fragment-ref</span> <span class="o">=</span> <span class="nv">$match</span><span class="o">.</span><span class="kt">Str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="k">my</span> <span class="nv">$fragment-name</span> <span class="o">=</span> <span class="nv">$match</span><span class="p">&lt;</span><span class="s">fragment</span><span class="p">&gt;&lt;</span><span class="s">name</span><span class="p">&gt;</span><span class="o">.</span><span class="kt">Str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$name</span><span class="s2"> ‚Üê ¬´</span><span class="nv">$fragment-name</span><span class="s2">¬ª</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">     <span class="nv">$content</span><span class="o">.</span><span class="nb">subst-mutate</span><span class="p">(/</span><span class="nv">$fragment-ref</span><span class="p">/</span><span class="o">,</span> <span class="nf">tangle</span><span class="p">(</span> <span class="nv">$fragment-name</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nv">%tangle-for</span><span class="p">{</span> <span class="nv">$name</span> <span class="p">}</span> <span class="o">=</span> <span class="nv">$content</span><span class="p">;</span>
</span></span></code></pre></div><p>I flailed while tangling fragments.  Lots of complaints from Raku about the difference between a <code>Match</code> and a <code>String</code>.  There <em>must</em> be better ways. But the most important thing?  I got it to work eventually.</p>
<h3 id="writing-tangled-files">Writing tangled files</h3>
<p>After all that, writing the tangled files felt easy.</p>
<div class="highlight" title="write-tangled-fragments"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl">   <span class="p">¬´</span><span class="s2">define-commented-shortcodes</span><span class="p">¬ª</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="nv">@filenames</span> <span class="k">-&gt;</span> <span class="nv">$tangle-file</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">my</span> <span class="nv">$tangle-content</span> <span class="o">=</span> <span class="nv">%tangle-for</span><span class="p">{</span> <span class="nv">$tangle-file</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="o">.</span><span class="nb">subst</span><span class="p">(:</span><span class="s">global</span><span class="o">,</span> <span class="p">/</span><span class="sr"> </span><span class="nv">$commented-opener</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="nv">$opener</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="o">.</span><span class="nb">subst</span><span class="p">(:</span><span class="s">global</span><span class="o">,</span> <span class="p">/</span><span class="sr"> </span><span class="nv">$commented-closer</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="nv">$closer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="nb">spurt</span> <span class="nv">$tangle-file</span><span class="o">,</span> <span class="nv">$tangle-content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Tangled to </span><span class="nv">$tangle-file</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span></code></pre></div><p>Then ‚Äî theoretically ‚Äî all these fragments I wrote will make a useful code tangler!</p>
<p>Might as well make it so this script can look at more than just the file I&rsquo;m editing right now.</p>
<div class="highlight" title="tangle-fragments.raku"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$filename</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">¬´</span><span class="s2">nested-shortcode-regex</span><span class="p">¬ª</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">¬´</span><span class="s2">gather-fragments-and-files</span><span class="p">¬ª</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">¬´</span><span class="s2">tangle-fragments</span><span class="p">¬ª</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">¬´</span><span class="s2">write-tangled-files</span><span class="p">¬ª</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Easiest <a href="https://docs.raku.org/language/create-cli">CLI</a> I ever wrote, by the way.  See?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku tangle-fragments.raku
</span></span><span class="line"><span class="cl"><span class="go">Usage:
</span></span></span><span class="line"><span class="cl"><span class="go">  tangle-fragments.raku &lt;filename&gt;
</span></span></span></code></pre></div><p>Time for the real thing.  I&rsquo;m nervous.  I shouldn&rsquo;t be nervous.  I know how this story ends.  Then again I keep rewriting the middle.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku tangle-fragments.raku index.md
</span></span><span class="line"><span class="cl"><span class="go">fragment: hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle.raku
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: define-commented-shortcodes
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: replace-commented-shortcodes
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-every-block
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-multi.raku
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: import-libraries
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: rich-hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: shortcode-params-regex
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: nested-shortcode-regex
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: gather-fragments-and-files
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-fragments
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-function
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-error-checking
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-text
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: write-tangled-files
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-fragments.raku
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-function &lt;-- (tangle-error-checking)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-function &lt;-- (tangle-text)
</span></span></span><span class="line"><span class="cl"><span class="go">nested-shortcode-regex &lt;-- (shortcode-params-regex)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-every-block &lt;-- (replace-commented-shortcodes)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments &lt;-- (tangle-function)
</span></span></span><span class="line"><span class="cl"><span class="go">write-tangled-files &lt;-- (define-commented-shortcodes)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments.raku &lt;-- (nested-shortcode-regex)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments.raku &lt;-- (gather-fragments-and-files)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments.raku &lt;-- (tangle-fragments)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments.raku &lt;-- (write-tangled-files)
</span></span></span><span class="line"><span class="cl"><span class="go">rich-hello.py &lt;-- (import-libraries)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-multi.raku &lt;-- (define-commented-shortcodes)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-multi.raku &lt;-- (tangle-every-block)
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to tangle.raku
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to tangle-multi.raku
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to rich-hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to tangle-fragments.raku
</span></span></span></code></pre></div><p>That overwrote my test version of <code>tangle-fragments.raku</code>.  Scary.  Ran the new version to keep myself honest.  It produced the same output, and appears to have correctly tangled my fragments!</p>
<div class="highlight" title="Generated rich-hello.py" verbatim="false"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich</span> <span class="kn">import</span> <span class="nb">print</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.panel</span> <span class="kn">import</span> <span class="n">Panel</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.markdown</span> <span class="kn">import</span> <span class="n">Markdown</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">md</span> <span class="o">=</span> <span class="n">Markdown</span><span class="p">(</span><span class="s2">&#34;**Hello**, *World*.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">Panel</span><span class="p">(</span><span class="n">md</span><span class="p">))</span>
</span></span></code></pre></div><p>Running <code>rich-hello.py</code> looks more interesting with a screenshot than a text block:</p>
<p><img src="/post/2020/07/attachments/img/2020/rich-panel.png" alt="Formatted output using Rich"/></p>
<p>Okay.  Now I&rsquo;m done.</p>
<p>I <em>could</em> have done this in Python.  There are decent parsing libraries out there.  But Raku did this on its own, without pulling in any extra ‚Äî without pulling in <em>any</em> libraries.</p>
<h2 id="done-you-barely-started">Done? You barely started!</h2>
<p>My tangle script is no competition for Org mode&rsquo;s Babel.</p>
<ul>
<li>it needs more error checking
<ul>
<li>circular fragment references</li>
<li>unreachable files (path, permissions)</li>
</ul>
</li>
<li>smart handling of whitespace and indentation to keep Python from becoming a chore</li>
<li>rendering fragment names in such a way that syntax highlighters can do something pretty with them
<ul>
<li>especially when writing code in a language that <a href="https://github.com/alecthomas/chroma">Chroma</a> has heard of</li>
</ul>
</li>
<li>hidden blocks</li>
<li>code evaluation and display of results</li>
</ul>
<p>But it&rsquo;ll do for now.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Setting up Raku with Rakubrew</title>
  <link>https://randomgeekery.org/post/2020/05/setting-up-raku-with-rakubrew/</link>
  <pubDate>Tue, 19 May 2020 16:38:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/05/setting-up-raku-with-rakubrew/</guid>
  <description>I was avoiding Rakudobrew for some now-forgotten technical reason. Probably couldn‚Äôt get a particular Perl 6 release to build. But I‚Äôm tired of one-off scripts or distribution packages that don‚Äôt quite match my expectations. What‚Äôs new in the Perl 6 language manager world?
For starters, names have changed. Perl 6 has been [Raku][raku] for a little bit, and Rakudobrew is now Rakubrew.
I don‚Äôt recall enough about Rakudobrew to make a better or worse comparison.</description>
   <category>post</category> 
   <category>post</category> 
   <category>raku-lang</category>  <category>version-manager</category>  <category>rakubrew</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>Rakudobrew changed its name since last I looked</h2><p>I was avoiding Rakudobrew for some now-forgotten technical reason.  Probably couldn‚Äôt get a particular Perl 6 release to build.  But I‚Äôm tired of one-off scripts or distribution packages that don‚Äôt quite match my expectations. What‚Äôs new in the Perl 6 language manager world?</p>
<p>For starters, names have changed.  Perl 6 has been [Raku][raku] for a little bit, and Rakudobrew is now <a href="https://rakubrew.org/">Rakubrew</a>.</p>
<p>I don‚Äôt recall enough about Rakudobrew to make a better or worse comparison. Let‚Äôs just install it and see how it works.</p>
<p>Unfortunately <code>curl</code> doesn‚Äôt like the rakubrew site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ curl https://rakubrew.org/install-on-perl.sh | sh
</span></span><span class="line"><span class="cl">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span></span><span class="line"><span class="cl">                                 Dload  Upload   Total   Spent    Left  Speed
</span></span><span class="line"><span class="cl">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
</span></span><span class="line"><span class="cl">curl: (60) SSL certificate problem: certificate has expired
</span></span><span class="line"><span class="cl">More details here: https://curl.haxx.se/docs/sslcerts.html
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">curl failed to verify the legitimacy of the server and therefore could not
</span></span><span class="line"><span class="cl">establish a secure connection to it. To learn more about this situation and
</span></span><span class="line"><span class="cl">how to fix it, please visit the web page mentioned above.
</span></span></code></pre></div><p>Firefox thinks the site‚Äôs fine, though.  I‚Äôll download <code>install-on-perl.sh</code> and run it locally.  Oh nice, shell initialization instructions specific to the shell I‚Äôm running.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ sh ~/Downloads/install-on-perl.sh
</span></span><span class="line"><span class="cl">Downloading rakubrew...
</span></span><span class="line"><span class="cl">Installing rakubrew to /home/random/.rakubrew ...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Load rakubrew automatically in `zsh` by adding
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  eval &#34;$(/home/random/.rakubrew/bin/rakubrew init Zsh)&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">to ~/.zshrc.
</span></span><span class="line"><span class="cl">This can be easily done using:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  echo &#39;eval &#34;$(/home/random/.rakubrew/bin/rakubrew init Zsh)&#34;&#39; &gt;&gt; ~/.zshrc
</span></span></code></pre></div><p>I do not yet have rakubrew on all my machines, but I <em>do</em> have nearly the same config everywhere.  The logic I want looks a little more like this.</p>
<p><strong><code>~/.zshenv</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">RAKUBREW_HOME</span><span class="o">=</span><span class="sb">``</span><span class="nv">$HOME</span>/.rakubrew<span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$RAKUBREW_HOME</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span><span class="nv">$RAKUBREW_HOME</span>/bin/rakubrew init Zsh<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></div><p>Time to reload my shell and see if it worked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ rakubrew --help
</span></span><span class="line"><span class="cl">Usage:
</span></span><span class="line"><span class="cl">     rakubrew version          # or rakubrew current
</span></span><span class="line"><span class="cl">     rakubrew versions         # or rakubrew list
</span></span><span class="line"><span class="cl">     rakubrew global [version] # or rakubrew switch [&lt;version&gt;]
</span></span><span class="line"><span class="cl">     rakubrew shell [--unset|&lt;version&gt;]
</span></span><span class="line"><span class="cl">     rakubrew local [&lt;version&gt;]
</span></span><span class="line"><span class="cl">     rakubrew nuke [&lt;version&gt;] # or rakubrew unregister [&lt;version&gt;]
</span></span><span class="line"><span class="cl">     rakubrew rehash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     rakubrew available        # or rakubrew list-available
</span></span><span class="line"><span class="cl">     rakubrew build [&lt;backend&gt;] [&lt;tag&gt;|&lt;branch&gt;|&lt;sha-1&gt;] [--configure-opts=&lt;options&gt;]
</span></span><span class="line"><span class="cl">     rakubrew triple [&lt;rakudo-version&gt; [&lt;nqp-version&gt; [&lt;moar-version&gt;]]]
</span></span><span class="line"><span class="cl">     rakubrew register &lt;name&gt; &lt;path&gt;
</span></span><span class="line"><span class="cl">     rakubrew build-zef
</span></span><span class="line"><span class="cl">     rakubrew download [&lt;backend&gt;] [&lt;rakudo-version&gt;]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     rakubrew exec &lt;executable&gt; [&lt;executable-args&gt;]
</span></span><span class="line"><span class="cl">     rakubrew which &lt;executable&gt;
</span></span><span class="line"><span class="cl">     rakubrew whence [--path] &lt;executable&gt;
</span></span><span class="line"><span class="cl">     rakubrew mode [env|shim]
</span></span><span class="line"><span class="cl">     rakubrew self-upgrade
</span></span><span class="line"><span class="cl">     rakubrew init
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     rakubrew test [&lt;version&gt;|all]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     rakubrew help [--verbose|&lt;command&gt;]
</span></span><span class="line"><span class="cl">     rakubrew home
</span></span><span class="line"><span class="cl">     rakubrew rakubrew-version
</span></span></code></pre></div><p>Apparently!  Can I install a fresh version of <a href="https://rakudo.org">Rakudo</a>?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ rakubrew download
</span></span><span class="line"><span class="cl">Downloading https://rakudo.org/dl/rakudo/rakudo-moar-2020.05.1-01-linux-x86_64.tar.gz
</span></span><span class="line"><span class="cl">Extracting
</span></span><span class="line"><span class="cl">Done, moar-2020.05.1 installed
</span></span></code></pre></div><p>Yes indeed.  Pretty quick, too.  Looks like I no longer need to do a full build every time there‚Äôs a release.  Nice.</p>
<p>Now make <code>moar-2020.05.01</code> the default.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ rakubrew switch moar-2020.05.1
</span></span><span class="line"><span class="cl">Switching to moar-2020.05.1
</span></span></code></pre></div><p>And what can Raku tell me about itself?  I‚Äôll recycle my one-liner from <a href="/post/2019/11/building-rakudo-and-moarvim-on-linux/">a little bit ago</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ raku -e &#39;say &#34;Yo, World! This is $*PERL - specifically: { ($*PERL, $*VM, $*DISTRO).map({ $_.gist })}&#34;&#39;
</span></span><span class="line"><span class="cl">Yo, World! This is Raku - specifically: Raku (6.d) moar (2020.05) manjaro (3.10.0.514.10.2.el.7.x.86._.64)
</span></span></code></pre></div><p>Now the real test.  Can I install <a href="https://github.com/drforr/perl6-readline">perl6-readline</a> via <a href="https://github.com/ugexe/zef">zef</a> for the Raku REPL?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ zef install Readline
</span></span><span class="line"><span class="cl">===&gt; Searching for: Readline
</span></span><span class="line"><span class="cl">===&gt; Updating cpan mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan1.json
</span></span><span class="line"><span class="cl">===&gt; Updating p6c mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/p6c1.json
</span></span><span class="line"><span class="cl">===&gt; Updated p6c mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/p6c1.json
</span></span><span class="line"><span class="cl">===&gt; Updated cpan mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan1.json
</span></span><span class="line"><span class="cl">===&gt; Searching for missing dependencies: LibraryCheck
</span></span><span class="line"><span class="cl">===&gt; Testing: LibraryCheck:ver&lt;0.0.9&gt;:auth&lt;github:jonathanstowe&gt;:api&lt;1.0&gt;
</span></span><span class="line"><span class="cl">===&gt; Testing [OK] for LibraryCheck:ver&lt;0.0.9&gt;:auth&lt;github:jonathanstowe&gt;:api&lt;1.0&gt;
</span></span><span class="line"><span class="cl">===&gt; Testing: Readline:ver&lt;0.1.5&gt;:auth&lt;github:drforr&gt;
</span></span><span class="line"><span class="cl">[Readline]
</span></span><span class="line"><span class="cl">===&gt; Testing [OK] for Readline:ver&lt;0.1.5&gt;:auth&lt;github:drforr&gt;
</span></span><span class="line"><span class="cl">===&gt; Installing: LibraryCheck:ver&lt;0.0.9&gt;:auth&lt;github:jonathanstowe&gt;:api&lt;1.0&gt;
</span></span><span class="line"><span class="cl">===&gt; Installing: Readline:ver&lt;0.1.5&gt;:auth&lt;github:drforr&gt;
</span></span></code></pre></div><p>Aw man. <a href="https://news.perlfoundation.org/post/remembering-jeff-goff">drforr</a> sure has cast a long shadow.  We‚Äôll be missing him for a while.</p>
<p>And with that, I think I‚Äôll sign off on this post.  Everything I needed installed cleanly, including <a href="https://github.com/Raku/doc">p6doc</a> and a few other <a href="https://modules.raku.org">modules</a> for puttering with the site.</p>
<p>Rakubrew worked!</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Listing Hugo Content Extensions With Raku</title>
  <link>https://randomgeekery.org/post/2020/03/listing-hugo-content-extensions-with-raku/</link>
  <pubDate>Tue, 31 Mar 2020 14:33:29 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/03/listing-hugo-content-extensions-with-raku/</guid>
  <description>We like quick answers to important questions
How many text formatting languages have I used for my Hugo site? For that matter, how many content files were written in each?
$ hugo list all | raku -e &#39;bag(lines[1..*].map({ .split(&#34;,&#34;)[0].IO.extension })).say&#39; Bag(adoc(4), html, md(327), rst(109)) Mostly Markdown, with a fair chunk of reStructuredText and a little bit of Asciidoctor. Oh and one HTML source file, originally an Org-Jekyll experiment.
Okay that‚Äôs it.</description>
   <category>post</category> 
   <category>post</category> 
   <category>hugo</category>  <category>raku-lang</category>  <category>csv</category>  <category>site</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Twenty seconds to write a one-liner, and two days to think about it</h2><p><img src="/post/2020/03/../../../attachments/img/2020/cover-2020-03-31.jpg" alt="attachments/img/2020/cover-2020-03-31.jpg"/>
We like quick answers to important questions</p>
<p>How many text formatting languages have I used for my <a href="/card/hugo/">Hugo</a> site? For that matter, how many content files were written in each?</p>
<pre tabindex="0"><code>$ hugo list all | raku -e &#39;bag(lines[1..*].map({ .split(&#34;,&#34;)[0].IO.extension })).say&#39;
Bag(adoc(4), html, md(327), rst(109))
</code></pre><p>Mostly <a href="/card/markdown/">Markdown</a>, with a fair chunk of <a href="/card/restructuredtext/">reStructuredText</a> and a little bit of <a href="/card/asciidoctor/">Asciidoctor</a>. Oh and one HTML source file, originally an <a href="/post/2014/10/blog-writing-in-org-mode/">Org-Jekyll experiment</a>.</p>
<p>Okay that‚Äôs it. That‚Äôs the post, everyone. Time to go home!</p>
<h2 id="breaking-it-down">Breaking it down</h2>
<p>It helps me to understand the pieces I smash together in my one-liners. Read along if you like, or move on to more interesting topics. I don‚Äôt judge.</p>
<h3 id="first-off-why">First off: why?</h3>
<p>The <a href="https://gohugo.io">Hugo</a> static site generator supports multiple <a href="https://gohugo.io/content-management/formats/">content formats</a>. I use a few of them, which complicates my occasional urge to rebuild the whole site with something else.</p>
<p>If I know how my content formats are distributed, it will help me understand how much work I have cut out for me in The Eventual Inevitable Rebuild.</p>
<h3 id="hugo-list"><code>hugo list</code></h3>
<p>Hugo‚Äôs <a href="https://gohugo.io/commands/hugo_list">list</a> commands print a <a href="/card/csv/">CSV</a> list of your site‚Äôs content files. The content listed depends on which subcommand you use:</p>
<dl>
<dt><code>list all</code></dt>
<dd>Everything! Well, except section indexes.</dd>
<dt><code>list draft</code></dt>
<dd>Content with <code>draft: true</code></dd>
<dt><code>list expired</code></dt>
<dd>Content with <code>expiryDate</code> in the past</dd>
<dt><code>list future</code></dt>
<dd>Content with <code>date</code> in the future</dd>
</dl>
<p>What does that output look like?</p>
<pre tabindex="0"><code>$ hugo list all
path,slug,title,date,expiryDate,publishDate,draft,permalink
content/draft/listing-hugo-content-extensions-with-raku/index.adoc,,Listing Hugo Content Extensions With Raku,2020-03-27T22:36:13-07:00,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,true,https://randomgeekery.org/draft/listing-hugo-content-extensions-with-raku/
content/draft/managing-music-with-beets/index.adoc,,Managing My Music With Beets,2020-03-27T10:31:41-07:00,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,true,https://randomgeekery.org/draft/managing-music-with-beets/
content/post/2020/03/stdu-viewer/index.rst,,STDU Viewer,2020-03-26T23:42:16-07:00,0001-01-01T00:00:00Z,2020-03-26T23:42:16-07:00,false,https://randomgeekery.org/2020/03/26/stdu-viewer/
content/note/2020/03/every-post-has-a-uuid/index.rst,,Every Post Has a UUID,2020-03-21T19:06:00-07:00,0001-01-01T00:00:00Z,2020-03-21T19:06:00-07:00,false,https://randomgeekery.org/note/2020/81/every-post-has-a-uuid/
</code></pre><p>I could feed that to any language with a nice library for handling CSV
files‚Äâ‚Äî‚Äâwhich is most of them. Heck, I could feed it to Excel!</p>
<p>Now that I think to look, there‚Äôs the <a href="https://github.com/secretGeek/awesomecsv">Awesome CSV</a> list of tools and resources.</p>
<p>But no. Today I handed it off to the first tool that came to mind.</p>
<h3 id="raku--e"><code>raku -e</code></h3>
<p>Look, we‚Äôve all been stuck at home for a bit. I need a break from Python. How about <a href="/card/perl/">Perl</a>&rsquo;s sister language, <a href="/card/raku/">Raku</a>?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="nb">bag</span><span class="p">(</span><span class="nb">lines</span><span class="o">[</span><span class="mi">1</span><span class="o">..*].</span><span class="nb">map</span><span class="p">({</span> <span class="o">.</span><span class="nb">split</span><span class="p">(&#34;</span><span class="s2">,</span><span class="p">&#34;)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="kt">IO</span><span class="o">.</span><span class="nb">extension</span> <span class="p">}))</span><span class="o">.</span><span class="nb">say</span>
</span></span></code></pre></div><h4 id="bagsay"><code>bag(‚Ä¶).say</code></h4>
<p><a href="https://docs.raku.org/routine/bag"><code>bag</code></a> uses its arguments to create a <a href="https://docs.raku.org/type/Bag">Bag</a>‚Äâ‚Äî‚Äâbasically, a set that gives each member a &ldquo;weight&rdquo; based on integer values. <a href="https://docs.raku.org/type/Mu#method_say"><code>say</code></a> prints the <a href="https://docs.raku.org/routine/gist"><code>gist</code></a> of the Bag, telling me what I need to know. The highest level view of this one-liner is &ldquo;make a Bag and give me a general idea what it looks like.&rdquo;</p>
<h4 id="lines1map--"><code>lines[1..*].map({ ‚Ä¶ })</code></h4>
<p>Now I need to create that bag from <code>hugo list all</code>. <a href="https://docs.raku.org/type/IO::Handle#routine_lines"><code>lines</code></a> called as
a routine creates a list of lines from <a href="https://docs.raku.org/language/variables#$*ARGFILES"><code>$*ARGFILES</code></a>, which currently holds the piped output from my Hugo invocation. I don‚Äôt need the header line, so I use a
<a href="https://docs.raku.org/type/Range">Range</a> to <a href="https://docs.raku.org/language/subscripts#Slices">slice</a> the remaining lines.</p>
<p><a href="https://docs.raku.org/routine/map#class_Any"><code>map</code></a> applies a block to each of those lines, returning a new list to create our Bag. What‚Äôs going on in that map?</p>
<h4 id="split0ioextension"><code>.split(&quot;,&quot;)[0].IO.extension</code></h4>
<p>That leading dot? It‚Äôs an <a href="https://docs.raku.org/language/contexts#Item_context">item context</a> view of the <a href="https://docs.raku.org/language/variables#The_$__variable">topic variable</a> handed to the block by <code>map</code>. Yes, for folks who don‚Äôt feel like clicking: <em>topic variable</em> is Raku‚Äôs name for <code>$_</code>, an easily abused blessing of Perl languages.</p>
<p>So the line of comma-delimited values is <a href="https://docs.raku.org/type/Str#routine_split"><code>split</code></a> into values. Each line from Hugo‚Äôs CSV gets <code>split</code> into a list of values, but I only care about the first one. The first value is the path to the content file itself.</p>
<p>Coercing that to an <a href="https://docs.raku.org/type/IO::Path">IO::Path</a> object lets me ask for an <a href="https://docs.raku.org/type/IO::Path#method_extension"><code>extension</code></a>.</p>
<p>The block returns that extension, so when <code>map</code> is all done it has a list of file extensions:</p>
<pre tabindex="0"><code>(adoc adoc rst rst md md md rst ...)
</code></pre><p>During initialization, the Bag counts how many times each extension appears in the list. Since the result of that tally is all I care about, I print it out.</p>
<pre tabindex="0"><code>$ hugo list all | raku -e &#39;bag(lines[1..*].map({ .split(&#34;,&#34;)[0].IO.extension })).say&#39;
Bag(adoc(4), html, md(327), rst(109))
</code></pre><h2 id="alternate-versions">Alternate versions</h2>
<p>While I was learning more about my impulsive little invocation, I wondered about other ways to get the same information from Raku.</p>
<h3 id="a-bit-more-perlish">A bit more Perlish</h3>
<p>All those method dots bother you? No problem. We can use them like plain old subroutines too. Course, we have to reach for <a href="https://docs.raku.org/language/variables#$*SPEC"><code>$*SPEC</code></a>. This lower-level <a href="https://docs.raku.org/type/IO::Spec">IO::Spec</a> object understands file extensions on our platform.</p>
<pre tabindex="0"><code>$ hugo list all | raku -e &#39;say bag(map({ $*SPEC.extension(split(&#34;,&#34;, $_)[0]) }, lines[1..*]))&#39;
Bag(adoc(4), html, md(327), rst(109))
</code></pre><h3 id="using-textcsv">Using Text::CSV</h3>
<p>I know what to expect from Hugo‚Äôs CSV output, but what if I didn‚Äôt? I‚Äôd feed the standard input handle <code>$*IN</code> to H. Merijn Brand‚Äôs <a href="https://github.com/Tux/CSV">Text::CSV</a> module.</p>
<pre tabindex="0"><code>$ zef install Text::CSV
$ hugo list all | raku -MText::CSV -e \
  &#39;bag(csv(in =&gt; $*IN, headers=&gt;&#34;skip&#34;, fragment=&gt;&#34;col=1&#34;).map({ .IO.extension })).say&#39;
Bag(adoc(4), html, md(327), rst(109))
</code></pre><p>Though if I was being <em>this</em> careful, I‚Äôd probably also move away from a one-liner. But that takes us a long ways away from my original goal of getting a quick answer to an idle question.</p>
<p>Well, I satisfied my curiosity and understood a little more Raku. That was fun!</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Building Rakudo and Moarvm on Linux</title>
  <link>https://randomgeekery.org/post/2019/11/building-rakudo-and-moarvim-on-linux/</link>
  <pubDate>Sun, 03 Nov 2019 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/11/building-rakudo-and-moarvim-on-linux/</guid>
  <description>[!NOTE] 2021-08-21 Skip all this and use Rakubrew to manage card/Raku installations.
Not instructions, but a brain dump of compiling and checking a Rakudo installation.
Windows? No problem.
&gt; choco install rakudo macOS? No problem.
$ brew install rakudo Linux?
$ brew install rakudo Well‚Ä¶
==&gt; Installing dependencies for rakudo: moarvm and nqp ==&gt; Installing rakudo dependency: moarvm ==&gt; Downloading https://github.com/MoarVM/MoarVM/releases/download/2019.07.1/MoarVM-2019.07.1.tar.gz Already downloaded: /home/randomgeek/.cache/Homebrew/downloads/2c331d2b583c39890ed5fd765cea551c9e171136038a6a400217c7725ae60a9d--MoarVM-2019.07.1.tar.gz ==&gt; perl Configure.pl --has-libatomic_ops --has-libffi --has-libtommath --has-libuv --optimize --prefix=/home/linuxbrew/.</description>
   <category>post</category> 
   <category>post</category> 
   <category>raku-lang</category>  <category>perl6</category>  <category>linux</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>In which I rediscover `make && make test && make install`</h2><blockquote>
<p>[!NOTE] 2021-08-21
Skip all this and use <a href="/post/2020/05/setting-up-raku-with-rakubrew/">Rakubrew</a> to manage <a href="/card/raku/">card/Raku</a> installations.</p>
</blockquote>
<p>Not instructions, but a brain dump of compiling and checking a <a href="https://rakudo.org">Rakudo</a> installation.</p>
<p>Windows? No problem.</p>
<pre tabindex="0"><code>&gt; choco install rakudo
</code></pre><p>macOS? No problem.</p>
<pre tabindex="0"><code>$ brew install rakudo
</code></pre><p><em>Linux</em>?</p>
<pre tabindex="0"><code>$ brew install rakudo
</code></pre><p>Well‚Ä¶</p>
<pre tabindex="0"><code>==&gt; Installing dependencies for rakudo: moarvm and nqp
==&gt; Installing rakudo dependency: moarvm
==&gt; Downloading https://github.com/MoarVM/MoarVM/releases/download/2019.07.1/MoarVM-2019.07.1.tar.gz
Already downloaded: /home/randomgeek/.cache/Homebrew/downloads/2c331d2b583c39890ed5fd765cea551c9e171136038a6a400217c7725ae60a9d--MoarVM-2019.07.1.tar.gz
==&gt; perl Configure.pl --has-libatomic_ops --has-libffi --has-libtommath --has-libuv --optimize --prefix=/home/linuxbrew/.linuxbrew/Cellar/moarvm/2019.07.1
==&gt; make realclean
==&gt; make
Last 15 lines from /home/randomgeek/.cache/Homebrew/Logs/moarvm/03.make:
compiling src/jit/x64/emit.o
linking libmoar.so
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_exptmod_fast.o): relocation R_X86_64_32S against symbol `mp_reduce_2k&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_prime_is_prime.o): relocation R_X86_64_32 against symbol `ltm_prime_tab&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_rand.o): relocation R_X86_64_32 against `.rodata.str1.1&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_read_radix.o): relocation R_X86_64_32S against symbol `mp_s_rmap_reverse&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_s_mp_exptmod.o): relocation R_X86_64_32 against symbol `mp_reduce&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_cnt_lsb.o): relocation R_X86_64_32S against `.rodata&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_is_square.o): relocation R_X86_64_32S against `.rodata&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_kronecker.o): relocation R_X86_64_32S against `.rodata&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_prime_is_divisible.o): relocation R_X86_64_32 against symbol `ltm_prime_tab&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: /home/linuxbrew/.linuxbrew/lib/libtommath.a(bn_mp_abs.o): relocation R_X86_64_PC32 against symbol `mp_copy&#39; can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: final link failed: bad value
collect2: error: ld returned 1 exit status
</code></pre><p>Awkward.</p>
<p>I don‚Äôt want the <code>apt</code> version, because it‚Äôs from last year. Maybe I want <a href="https://github.com/tadzik/rakudobrew">rakudobrew</a>?</p>
<p>Well‚Äâ‚Äî‚Äâmaybe later. At the moment I just want to see if Rakudo builds at all.</p>
<p>Let‚Äôs break down the big shell alias from Zoffix‚Äôs <a href="https://github.com/zoffixznet/r">Instructions to build rakudo from source</a> into discrete steps.</p>
<pre tabindex="0"><code>$ git clone https://github.com/rakudo/rakudo/ ~/rakudo
$ echo &#39;export PATH=&#34;$HOME/rakudo/install/bin:$HOME/rakudo/install/share/perl6/site/bin:$PATH&#34;&#39; &gt;&gt; ~/.bashrc
$ cd ~/rakudo
$ git checkout master
$ git pull
$ git checkout $(git describe --abbrev=0 --tags)
$ perl Configure.pl --gen-moar --gen-nqp --backends=moar
$ make
</code></pre><p>And just to be on the safe side:</p>
<pre tabindex="0"><code>$ make test
Test Summary Report
-------------------
t/09-moar/Line_Break__LineBreak.t                             (Wstat: 0 Tests: 2 Failed: 0)
  TODO passed:   1
t/09-moar/General_Category__extracted-DerivedGeneralCategory.t (Wstat: 0 Tests: 1 Failed: 0)
  TODO passed:   1
Files=98, Tests=1760, 36 wallclock secs ( 0.34 usr  0.08 sys + 130.23 cusr  9.24 csys = 139.89 CPU)
Result: PASS
</code></pre><p>Great!</p>
<pre tabindex="0"><code>$ make install
$ source ~/.bashrc
</code></pre><p>Now, a little Raku one-liner test.</p>
<pre tabindex="0"><code>$ perl6 -e &#39;say &#34;Yo, World! This is $*PERL - specifically: { ($*PERL, $*VM, $*DISTRO).map({ $_.gist })}&#34;&#39;
Yo, World! This is Perl 6 - specifically: Perl 6 (6.d) moar (2019.07.1) ubuntu (19.10)
</code></pre><p>Using <code>gist</code> instead of normal stringification because I wanted all the details. You can see with <code>$*PERL</code> inside the string that <code>Str</code> is not for the gory details.</p>
<p>It‚Äôs a bit like <code>str</code> versus <code>repr</code> in the <a href="/card/python/">card/Python</a> world.</p>
<p>Anyways yay, it worked! If I ever get enough free time, I might investigate the <code>brew</code> bug. But it took me three days to finish <em>this</em> post.</p>
<p><a href="https://raku.online/">Andrew Shitov</a> already prepared for the ‚ÄúPerl 6‚Äù ‚Üí ‚ÄúRaku‚Äù name transition with a shell alias:</p>
<pre tabindex="0"><code>$ alias raku=&#39;perl6&#39;
</code></pre><p>Not the worst way to keep the new name in mind.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: A good day for books</title>
  <link>https://randomgeekery.org/post/2019/10/a-good-day-for-books/</link>
  <pubDate>Sat, 12 Oct 2019 14:37:45 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/10/a-good-day-for-books/</guid>
  <description>Decided I wanted a copy of ‚ÄúLearning Perl 6‚Äù before it becomes ‚ÄúLearning Raku‚Äù. I give my bookshelf room for nostalgia, though the name shift to card/Raku is understandable.
And of course I needed a physical copy of the 20th Anniversary Pragmatic Programmer.</description>
   <category>post</category> 
   <category>note</category> 
   <category>toread</category>  <category>pragprog</category>  <category>raku-lang</category>  <category>perl6</category>  <category>i-need-to-read-faster</category> 
  <content:encoded><![CDATA[<p><img src="/post/2019/10/../../../attachments/img/2019/cover-2019-10-12.jpg" alt="attachments/img/2019/cover-2019-10-12.jpg"/></p>
<p>Decided I wanted a copy of &ldquo;<a href="https://www.learningperl6.com/">Learning Perl 6</a>&rdquo; before it becomes &ldquo;Learning <a href="http://blogs.perl.org/users/ovid/2019/10/larry-has-approved-renaming-perl-6-to-raku.html">Raku</a>&rdquo;. I give my bookshelf room for nostalgia, though the name shift to <a href="/card/raku/">card/Raku</a> is understandable.</p>
<p>And of <em>course</em> I needed a physical copy of the 20th Anniversary <a href="https://pragprog.com/book/tpp20/the-pragmatic-programmer-20th-anniversary-edition">Pragmatic Programmer</a>.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Converting OGG To MP3</title>
  <link>https://randomgeekery.org/post/2017/02/converting-ogg-to-mp3/</link>
  <pubDate>Sat, 25 Feb 2017 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/02/converting-ogg-to-mp3/</guid>
  <description>I have ignored my MacBook Pro for a few months. Now my iTunes and Rhythmbox music libraries are out of sync. The Rhythmbox library includes a handful of Ogg Vorbis files. Because iTunes does not support Ogg by default, I will use FFmpeg to convert those files to MP3. For the sake of novelty, card/Raku is the glue language for the task.
I know. I could go digging in the box at the bottom of the back of the closet and re-rip those CDs.</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>raku-lang</category>  <category>perl-6</category>  <category>music</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p>I have ignored my MacBook Pro for a few months. Now my iTunes and   Rhythmbox music libraries are out of sync. The Rhythmbox library includes a handful of <a href="http://vorbis.com/">Ogg Vorbis</a> files. Because iTunes does not support Ogg by default, I will use <a href="http://ffmpeg.org/">FFmpeg</a> to convert those files to MP3. For the sake of novelty, <a href="/card/raku/">card/Raku</a> is the glue language for the task.</p>
<p>I know. I could go digging in the box at the bottom of the back of the closet
and re-rip those CDs. But the closet is all the way over there. I‚Äôm right here. I
don‚Äôt feel like getting up, and I do feel like using Perl 6 for something.</p>
<p>Don‚Äôt you judge me.</p>
<p>This is a quick journey into Raku for my own amusement, and not a tutorial. I linger on the stuff that caught my attention rather than explain all the details. Still &ndash; hopefully it‚Äôs useful to you!</p>
<h2 id="perl-6-star-notes">Perl 6 Star Notes</h2>
<p>I installed <a href="http://rakudo.org/downloads/star/">Rakudo Star</a> 2017.01 from source. Some of this information may be useful to others poking at a new <a href="http://rakudo.org/">Rakudo</a> installation.</p>
<h3 id="did-i-set-up-my-path-correctly">Did I Set Up My Path Correctly?</h3>
<p>I misread the path setup instructions after <code>make</code> finished, and ended up flailing in confusion for several minutes before I double-checked the Makefile. You can skip the flailing by reading correctly or by rerunning the &ldquo;welcome message.&rdquo;</p>
<pre tabindex="0"><code>$ make welcome-message

Rakudo Star has been built and installed successfully.
Please make sure that the following directories are in PATH:
  /home/random/src/rakudo-star-2017.01/install/bin
  /home/random/src/rakudo-star-2017.01/install/share/perl6/site/bin
</code></pre><h3 id="what-version-of-perl-6-do-i-have">What Version Of Perl 6 Do I Have?</h3>
<p>Just throwing it in so you can see what I‚Äôm working with.</p>
<pre tabindex="0"><code>$ perl6 --version
This is Rakudo version 2017.01 built on MoarVM version 2017.01
implementing Perl 6.c.
</code></pre><h3 id="what-modules-do-i-have">What Modules Do I Have?</h3>
<p>As of version 2017.01, Rakudo includes <a href="https://github.com/ugexe/zef">zef</a> as its default package manager. See its <a href="https://github.com/ugexe/zef#usage">usage summary</a> for details of finding and installing modules. For the moment I want to know what came with my Rakudo Star installation.</p>
<pre tabindex="0"><code>$ zef list --installed
===&gt; Found via /home/random/src/rakudo-star-2017.01/install/share/perl6
CORE:ver(&#39;6.c&#39;):auth(&#39;perl&#39;)
===&gt; Found via /home/random/src/rakudo-star-2017.01/install/share/perl6/site
Test::Mock:ver(&#39;1.3&#39;)
LWP::Simple:ver(&#39;0.090&#39;):auth(&#39;Cosimo Streppone&#39;)
Pod::To::HTML:ver(&#39;0.3.7&#39;)
panda:ver(&#39;2016.02&#39;)
NativeHelpers::Blob:ver(&#39;0.1.10&#39;):auth(&#39;github:salortiz&#39;)
SVG
JSON::Tiny
Grammar::Debugger
zef:auth(&#39;github:ugexe&#39;)
HTTP::Easy:ver(&#39;1.1.0&#39;)
XML::Writer
Template::Mojo:ver(&#39;0.1&#39;)
File::Which
File::Temp
File::Directory::Tree:auth(&#39;labster&#39;)
TAP::Harness::Prove6:ver(&#39;0.0.1&#39;):auth(&#39;Leon Timmermans&#39;)
Terminal::ANSIColor:ver(&#39;0.2&#39;)
DBIish:ver(&#39;0.5.9&#39;)
SVG::Plot
Template::Mustache:auth(&#39;github:softmoth&#39;)
File::Find:ver(&#39;0.1&#39;)
Debugger::UI::CommandLine
Grammar::Profiler::Simple:ver(&#39;0.01&#39;):auth(&#39;Jonathan Scott Duff&#39;)
Pod::To::BigPage:ver(&#39;0.2.1&#39;):auth(&#39;Wenzel P. P. Peppmeyer&#39;)
PSGI:ver(&#39;1.2.0&#39;)
p6doc
HTTP::Status
Linenoise:ver(&#39;0.1.1&#39;):auth(&#39;Rob Hoelz&#39;)
JSON::Fast:ver(&#39;0.7&#39;)
Native::Resources:ver(&#39;0.1.0&#39;):auth(&#39;Rob Hoelz&#39;)
Shell::Command
LibraryMake:ver(&#39;1.0.0&#39;):auth(&#39;github:retupmoca&#39;)
MIME::Base64:ver(&#39;1.2&#39;):auth(&#39;github:retupmoca&#39;)
Digest::MD5:ver(&#39;0.05&#39;):auth(&#39;Cosimo Streppone&#39;)
URI:ver(&#39;0.1.2&#39;)
JSON::RPC:ver(&#39;0.17.1&#39;):auth(&#39;Pawel Pabian&#39;)
</code></pre><p>It would be nice if the output had a sort option. I can sort myself, though I‚Äôd lose information about where the modules were found.</p>
<pre tabindex="0"><code>$ zef list --installed | sort
</code></pre><p>I‚Äôm sure pull requests are welcome.</p>
<h3 id="how-do-i-get-at-the-documentation">How Do I Get At The Documentation?</h3>
<p>Once you stop flailing with your setup and know what modules are installed, use <a href="https://github.com/perl6/doc">p6doc</a> to read module documentation.</p>
<pre tabindex="0"><code>$ p6doc File::Find
</code></pre><p>Okay I have my Rakudo Star installation sorted out. Time for the task at hand.</p>
<h2 id="quick-question-how-many">Quick question: How many?</h2>
<p>How many Ogg files do I have, anyways?</p>
<pre tabindex="0"><code>$ find ~/Music/ -name &#39;*.ogg&#39; | wc -l
212
</code></pre><p>More than a handful, but still - that‚Äôs not too bad. Let‚Äôs take a minute to look at the Perl 6 I used.</p>
<h3 id="count-the-files-from-perl-6">Count The Files From Perl 6</h3>
<p>In order to get a feel for what I‚Äôm doing in Perl 6, I‚Äôm going to use Perl 6 to count the Ogg files. This task relies on <a href="https://github.com/tadzik/File-Find">File::Find</a>, which comes with Rakudo Star. Perl 6 File::Find works like Perl 5‚Äôs <a href="https://metacpan.org/pod/File::Find::Rule">File::Find::Rule</a>. You describe characteristics of the files you‚Äôre looking for, and it hands you back a <a href="https://docs.perl6.org/language/list.html#Lazy_Lists">lazy list</a> of files that match.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="k">v</span><span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Find</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$music_dir</span> <span class="o">=</span> <span class="vg">%*ENV</span><span class="p">&lt;</span><span class="s">HOME</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#34;</span><span class="s2">/Music</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@ogg_files</span> <span class="o">=</span> <span class="nb">find</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">dir</span>  <span class="o">=&gt;</span> <span class="nv">$music_dir</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">name</span> <span class="o">=&gt;</span> <span class="p">/</span><span class="se">\</span><span class="sr">.ogg</span><span class="ni">$</span><span class="p">/</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$count</span> <span class="o">=</span> <span class="nv">@ogg_files</span><span class="o">.</span><span class="nb">elems</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nb">say</span> <span class="p">&#34;</span><span class="s2">I see </span><span class="nv">$count</span><span class="s2"> Ogg files</span><span class="p">&#34;;</span>
</span></span></code></pre></div><p>This does the same as the one-liner: look in <code>$HOME/Music</code> for and files suffixed with <code>.ogg</code>, and tell me how many matches it found.</p>
<pre tabindex="0"><code>$ perl6 ogg-to-mp3.p6
I see 212 Ogg files
</code></pre><p>Yay I get exactly the same number of files that <code>find</code> found! Okay now I‚Äôm going to convert them to MP3. I‚Äôll put them in a working directory so that I don‚Äôt confuse Rhythmbox.</p>
<p>FFmpeg can handle conversion, but my string starts looking a bit funky thanks to funky Perl quoting rules. Anyways.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="k">v</span><span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Find</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Audio::Taglib::Simple</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$music_dir</span> <span class="o">=</span> <span class="vg">%*ENV</span><span class="p">&lt;</span><span class="s">HOME</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#34;</span><span class="s2">/Music</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@ogg_files</span> <span class="o">=</span> <span class="nb">find</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="s">dir</span>  <span class="o">=&gt;</span> <span class="nv">$music_dir</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">  <span class="s">name</span> <span class="o">=&gt;</span> <span class="p">/</span><span class="se">\</span><span class="sr">.ogg</span><span class="ni">$</span><span class="p">/</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nv">@ogg_files</span> <span class="k">-&gt;</span> <span class="nv">$ogg_file</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$path</span> <span class="o">=</span> <span class="kt">IO::Path</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span><span class="nv">$ogg_file</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Where will the converted file go?</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$working_dir</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">converted</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$new_dir</span> <span class="o">=</span> <span class="nv">$path</span><span class="o">.</span><span class="nb">dirname</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span><span class="nv">$music_dir</span><span class="o">,</span> <span class="nv">$working_dir</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$new_file</span> <span class="o">=</span> <span class="nv">$path</span><span class="o">.</span><span class="nb">basename</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span><span class="nv">$path</span><span class="o">.</span><span class="nb">extension</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">mp3</span><span class="p">&#34;);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$mp3_file</span> <span class="o">=</span> <span class="p">&#34;</span><span class="nv">$new_dir</span><span class="s2">/</span><span class="nv">$new_file</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Create the directory path if needed</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># (still returns True if $new_dir already exists)</span>
</span></span><span class="line"><span class="cl">  <span class="nb">mkdir</span> <span class="nv">$new_dir</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Ask ffmpeg to convert.</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   -y                    &lt;- overwrite if $mp3_file exists</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   -v warning            &lt;- report warnings &amp; errors but not general info</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   -i &#34;$ogg_file&#34;        &lt;- Read from here (quoted for spaces)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   -map_metadata &#34;0:s:0&#34; &lt;- include title, artist, etc (quoted for P6 interpolation oddness)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   &#34;$mp3_file&#34;           &lt;- write to here (quoted for spaces)</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$captured</span> <span class="o">=</span> <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2">ffmpeg -y -v warning -i &#34;</span><span class="nv">$ogg_file</span><span class="s2">&#34; -map_metadata &#34;0:s:0&#34; &#34;</span><span class="nv">$mp3_file</span><span class="s2">&#34;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span> <span class="nv">$captured</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span> <span class="p">&#34;</span><span class="s2">.</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">say</span> <span class="p">&#34;</span><span class="s2">DONE</span><span class="p">&#34;;</span>
</span></span></code></pre></div><p><a href="https://docs.perl6.org/type/IO::Path">IO::Path</a> objects understand how file and directory paths work. Constructing the <code>$mp3_file</code> filename was easy enough thanks to a little string substitution on the Path components.</p>
<p><a href="https://docs.perl6.org/language/quoting#Shell_quoting_with_interpolation:_qqx"><code>qqx</code></a> shell quoting allows variable interpolation, though Perl 6 saw <code>0:s:0</code> as a thing it needed to interpolate until I wrapped it in quotes. It took me a while to figure out the correct FFmpeg invocation, so breaking it down in the comments made sense. Oh and if there‚Äôs any output from the conversion I print it.</p>
<blockquote>
<p>[!NOTE]
I need to remind myself that I‚Äôm putting down notes here and not writing a  tutorial, but I suggest newcomers to Perl 6 explore the <a href="https://docs.perl6.org/type.html">types</a> and <a href="https://docs.perl6.org/routine.html">routines</a>.</p>
<p>Yes, Perl 6 syntax can be strange and intimidating. You don‚Äôt need to learn all the syntax to get stuff done. The types and routines hold most of what you need for daily work. Can‚Äôt find it there? Look at the <a href="https://modules.perl6.org/">modules</a>. Easy stuff should still be easy. This is Perl, after all.</p>
</blockquote>
<h3 id="quality-control">Quality Control</h3>
<p>I used <a href="https://github.com/zoffixznet/perl6-audio-taglib-simple">Audio::Taglib::Simple</a> to double-check my work while figuring out the correct <code>ffmpeg</code> incantaion.</p>
<pre tabindex="0"><code>$ sudo apt-get install libtagc0
$ zef install Audio::Taglib::Simple
</code></pre><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="k">v</span><span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Audio::Taglib::Simple</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="vg">@*ARGS</span> <span class="k">-&gt;</span> <span class="nv">$mp3_file</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$mp3_tags</span> <span class="o">=</span> <span class="n">Audio::Taglib::Simple</span><span class="o">.</span><span class="nb">new</span><span class="p">(&#34;</span><span class="nv">$mp3_file</span><span class="p">&#34;);</span>
</span></span><span class="line"><span class="cl">  <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$mp3_file:</span><span class="s2"> </span><span class="p">{</span><span class="nv">$mp3_tags</span><span class="o">.</span><span class="nf">title</span><span class="p">}</span><span class="s2"> - </span><span class="p">{</span><span class="nv">$mp3_tags</span><span class="o">.</span><span class="nf">album</span><span class="p">}</span><span class="s2"> - </span><span class="p">{</span><span class="nv">$mp3_tags</span><span class="o">.</span><span class="nf">artist</span><span class="p">}&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$mp3_tags</span><span class="o">.</span><span class="nf">free</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>This takes any command line arguments and presents a summary of track information for each argument. It will choke if I hand it anything that‚Äôs not an MP3 file, but for an idle weekend thing on my own machine it‚Äôs fine.</p>
<pre tabindex="0"><code>$ perl6 check-mp3.p6 converted/Melvins/Houdini/*
converted/Melvins/Houdini/01 - Hooch.mp3
Hooch - Houdini - Melvins
converted/Melvins/Houdini/02 - Night Goat.mp3
Night Goat - Houdini - Melvins
converted/Melvins/Houdini/03 - Lizzy.mp3
Lizzy - Houdini - Melvins
converted/Melvins/Houdini/04 - Going Blind.mp3
Going Blind - Houdini - Melvins
converted/Melvins/Houdini/05 - Honey Bucket.mp3
Honey Bucket - Houdini - Melvins
converted/Melvins/Houdini/06 - Hag Me.mp3
Hag Me - Houdini - Melvins
converted/Melvins/Houdini/07 - Set Me Straight.mp3
Set Me Straight - Houdini - Melvins
converted/Melvins/Houdini/08 - Sky Pup.mp3
Sky Pup - Houdini - Melvins
converted/Melvins/Houdini/09 - Joan of Arc.mp3
Joan of Arc - Houdini - Melvins
converted/Melvins/Houdini/10 - Teet.mp3
Teet - Houdini - Melvins
converted/Melvins/Houdini/11 - Copache.mp3
Copache - Houdini - Melvins
converted/Melvins/Houdini/12 - Pearl Bomb.mp3
Pearl Bomb - Houdini - Melvins
converted/Melvins/Houdini/13 - Spread Eagle Beagle.mp3
Spread Eagle Beagle - Houdini - Melvins
</code></pre><p>Cool. It worked.</p>
<h3 id="what-now">What Now?</h3>
<p>I move the converted files to my <code>~/Sync</code> folder and let <a href="https://syncthing.net/">Syncthing</a> handle copying them to the Mac. They import into iTunes and I‚Äôm all done!</p>
<p>Wait. I still have to sync the files that were imported to Rhythmbox as MP3 but aren‚Äôt on iTunes yet.</p>
<p>Not today, though.</p>
]]></content:encoded>
</item>
</channel>
</rss>
