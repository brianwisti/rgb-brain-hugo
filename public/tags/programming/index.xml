<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>programmingonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/programming/</link>
    <description>
      Recent contentinprogramming on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Thu, 23 Sep 2021 00:00:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/programming/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Creating a reStructuredText kbd Role</title>
  <link>https://randomgeekery.org/post/2021/09/creating-a-restructuredtext-kbd-role/</link>
  <pubDate>Thu, 23 Sep 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/09/creating-a-restructuredtext-kbd-role/</guid>
  <description>Today’s the day I learn how to create custom roles in card/reStructuredText. There’s already documentation on how to do this. I’m just applying it for my specific case.
Prologue: Setup Install some stuff if you want to play along.
pip install -U docutils invoke Some of the requirements are specific to my writing flow.
pip install python-frontmatter For experimentation, I copied the build code from my Neovim rst plugin into the site’s Invoke task file.</description>
   <category>post</category> 
   <category>post</category> 
   <category>rst</category>  <category>python</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>But first a couple others as I figure this out</h2><p>Today&rsquo;s the day I learn how to create custom roles in <a href="/card/restructuredtext/">card/reStructuredText</a>. There&rsquo;s already <a href="https://docutils.sourceforge.io/docs/howto/rst-roles.html">documentation</a> on how to do this. I&rsquo;m just applying it for my specific case.</p>
<h2 id="prologue-setup">Prologue: Setup</h2>
<p>Install some stuff if you want to play along.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install -U docutils invoke
</span></span></code></pre></div><p>Some of the requirements are specific to my writing flow.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install python-frontmatter
</span></span></code></pre></div><p>For experimentation, I copied the build code from my <a href="/post/2021/08/trying-a-thing-with-neovim/">Neovim rst plugin</a> into the site&rsquo;s <a href="https://www.pyinvoke.org">Invoke</a> task file. Easier than updating remote plugins and restarting the editor with every change.</p>
<div class="highlight" title="tasks.py"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;Site generation tasks for randomgeekery.org&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">locale</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">frontmatter</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">rich</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">docutils.core</span> <span class="kn">import</span> <span class="n">publish_parts</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">invoke</span> <span class="kn">import</span> <span class="n">task</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">locale</span><span class="o">.</span><span class="n">setlocale</span><span class="p">(</span><span class="n">locale</span><span class="o">.</span><span class="n">LC_ALL</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">convert_rst_file_for_hugo</span><span class="p">(</span><span class="n">source_filename</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Transform a single reStructuredText file so Hugo can handle it.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">target_filename</span> <span class="o">=</span> <span class="n">determine_target</span><span class="p">(</span><span class="n">source_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span> <span class="o">=</span> <span class="n">frontmatter</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">source_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parts</span> <span class="o">=</span> <span class="n">publish_parts</span><span class="p">(</span><span class="n">source</span><span class="o">=</span><span class="n">post</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="n">writer_name</span><span class="o">=</span><span class="s2">&#34;html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="s2">&#34;body&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span><span class="o">.</span><span class="n">metadata</span><span class="p">[</span><span class="s2">&#34;format&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;rst&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">target_filename</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">out</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">out</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">frontmatter</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">post</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;:crayon: </span><span class="si">{</span><span class="n">target_filename</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">determine_target</span><span class="p">(</span><span class="n">source</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return the filename that rst transformations should write to.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Using an odd suffix so Hugo doesn&#39;t try to build the rst itself</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">source</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s2">&#34;.rst.txt&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Look at </span><span class="si">{</span><span class="n">source</span><span class="si">}</span><span class="s2"> more closely before transforming it.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">source</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;.rst.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;.html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@task</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">rst</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Transform a single reStructuredText file.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">convert_rst_file_for_hugo</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span></code></pre></div><p>Then I use Invoke to do the transform:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> inv content/draft/creating-a-restructuredtext-kbd-role/index.rst.txt
</span></span><span class="line"><span class="cl"><span class="go">🖍 content/draft/creating-a-restructuredtext-kbd-role/index.html
</span></span></span></code></pre></div><p>Some variation of this is bound to work for you.</p>
<p>Let&rsquo;s get started!</p>
<h2 id="what-even-is-a-role">What even is a role?</h2>
<p>First, we need the background. There&rsquo;s this thing called <em>interpreted text</em>. It&rsquo;s a reserved bit of functionality for specially marked text. Folks coming to reStructuredText from Markdown mostly know it as the weird reason they have to use double backticks for <code>code</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="nv">`interpreted text`</span><span class="err">
</span></span></span></code></pre></div><p>Interpreted text has all sorts of fancy potential. I mainly know it for the fact that rst links use it. Unless told otherwise, <a href="https://docutils.sourceforge.io/">Docutils</a> treats interpreted text as a citation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">cite</span><span class="p">&gt;</span>interpreted text<span class="p">&lt;/</span><span class="nt">cite</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>It assumes any interpreted text is <code>:title-reference:</code> — that is, it references the title of a book, movie, song, or other publication.  The <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite"><code>cite</code></a> element is a perfectly reasonable choice for that.</p>
<p>But what if you aren&rsquo;t specifically talking about a title? <em>Roles</em> provide an explicit label for your interpreted text.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="na">:term:</span><span class="nv">`Roles`</span><span class="err">
</span></span></span></code></pre></div><p>What&rsquo;s a <code>:term:</code> in rst? Nothing. I made it up. Seems like a good role for when I introduce a new name and I want it to stand out.</p>
<p>I need to define the role to use it. Otherwise?</p>
<p><img src="/post/2021/09/../../../attachments/img/2021/docutils-unknown-role.png" alt="attachments/img/2021/docutils-unknown-role.png"/>
Docutils embeds an error message below the offending block</p>
<p>So up at the top of my document use the <a href="https://docutils.sourceforge.io/docs/ref/rst/directives.html#custom-interpreted-text-roles">role directive</a> to create <code>:term:</code> and register it with the parser.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="p">..</span> <span class="ow">role</span><span class="p">::</span> term<span class="err">
</span></span></span></code></pre></div><p>Now that Docutils knows about the role, it can turn it into HTML.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;term&#34;</span><span class="p">&gt;</span>Roles<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>It still doesn&rsquo;t have any inherent <em>meaning</em>, but I can put some style rules on it so that anything I label with the <code>:term:</code> role shows up a little differently.</p>
<h2 id="inline-roles-in-your-document">Inline roles in your document</h2>
<p>If I want the term to stand out a little more, I can adjust my role definition.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="p">..</span> <span class="ow">role</span><span class="p">::</span> term(strong)<span class="err">
</span></span></span></code></pre></div><p>Now it inherits from the <code>:strong:</code> role, keeping the <code>&quot;term&quot;</code> CSS class.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">strong</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;term&#34;</span><span class="p">&gt;</span>Roles<span class="p">&lt;/</span><span class="nt">strong</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>You can inherit from any role. That makes it a nice way to create aliases or slight variations to existing roles.</p>
<p>But I want to get fancy. Let&rsquo;s look at defining reStructuredText roles in Python.</p>
<h2 id="defining-roles-in-your-code">Defining roles in your code</h2>
<p>Defining a role has two main steps. Okay, three. Because first we need to import some libraries.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">docutils</span> <span class="kn">import</span> <span class="n">nodes</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">docutils.parsers.rst</span> <span class="kn">import</span> <span class="n">roles</span>
</span></span></code></pre></div><p><em>Now</em> we create a function that knows what to do when given a role and some preprocessed parameters.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">role_term</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">lineno</span><span class="p">,</span> <span class="n">inliner</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{},</span> <span class="n">content</span><span class="o">=</span><span class="p">[]):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return text marked as domain terminology.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span></code></pre></div><p>That&rsquo;s quite a function signature to take in without context, so here&rsquo;s a breakdown of what got sent when Docutils saw my first <code>:term:`Roles</code>:</p>
<table>
<thead>
<tr>
<th>parameter</th>
<th>value</th>
<th>explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>name</code></td>
<td><code>term</code></td>
<td>the role name</td>
</tr>
<tr>
<td><code>rawtext</code></td>
<td><code>:term:`Roles</code></td>
<td>all text input including role and markup</td>
</tr>
<tr>
<td><code>text</code></td>
<td><code>Roles</code></td>
<td>the interpreted text content</td>
</tr>
<tr>
<td><code>lineno</code></td>
<td><code>103</code></td>
<td>the interpreted text starts on this line</td>
</tr>
<tr>
<td><code>inliner</code></td>
<td><code>&lt;docutils…Inliner object at …&gt;</code></td>
<td>the object that called this function</td>
</tr>
<tr>
<td><code>options</code></td>
<td><code>{}</code></td>
<td>a dictionary of customization options</td>
</tr>
<tr>
<td><code>content</code></td>
<td><code>[]</code></td>
<td>a list of strings containing text content</td>
</tr>
</tbody>
</table>
<p>I won&rsquo;t pretend I know how to use all these yet. That&rsquo;s okay. <code>role_term</code> only cares about three:</p>
<ul>
<li><code>rawtext</code></li>
<li><code>text</code></li>
<li><code>options</code> — just in case</li>
</ul>
<p>I chose to mirror the inline directive I made earlier, creating a <code>strong</code> node with a class of <code>&quot;term&quot;</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">term_node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">strong</span><span class="p">(</span><span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">term_node</span><span class="o">.</span><span class="n">set_class</span><span class="p">(</span><span class="s2">&#34;term&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>Anyone calling <code>role_term</code> expects a tuple with two node lists: one for content, and another holding any error nodes I may need to create. In this case the content list has my term node and the error list is empty.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">return</span> <span class="p">[</span><span class="n">term_node</span><span class="p">],</span> <span class="p">[]</span>
</span></span></code></pre></div><p>With our role implementation defined, we register it and the name associated with it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">role_term</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">lineno</span><span class="p">,</span> <span class="n">inliner</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{},</span> <span class="n">content</span><span class="o">=</span><span class="p">[]):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return text marked as domain terminology.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">term_node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">strong</span><span class="p">(</span><span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">term_node</span><span class="o">.</span><span class="n">set_class</span><span class="p">(</span><span class="s2">&#34;term&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">term_node</span><span class="p">],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">roles</span><span class="o">.</span><span class="n">register_canonical_role</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">,</span> <span class="n">role_term</span><span class="p">)</span>
</span></span></code></pre></div><p>I don&rsquo;t need my inline <code>role</code> directive anymore, so I remove it. Registering <code>role_term</code> makes it available to every document processed by this particular Python script.</p>
<p>Okay, now I basically know how to implement a reStructuredText role. Let&rsquo;s keep going.</p>
<h3 id="tag-references"><code>:tag:</code> references</h3>
<p>I link to tags on this site frequently. Since I&rsquo;m the main audience for this site, it&rsquo;s mostly to give me a shortcut to related content. But hey it may help <em>you</em> find related content to if you happen to click through.</p>
<p>Couple of problems with those tag links, though. First off, they look exactly like every other link in my published HTML. It would be nice for them to stand out a bit when I&rsquo;m reading. Second, they look like every other link in my post source. It would be nice for them to stand out a bit when I&rsquo;m <em>writing</em>.</p>
<p>So let&rsquo;s make a <code>:tag:</code> reference role.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">role_reference_tag</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span><span class="p">,</span> <span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">lineno</span><span class="p">,</span> <span class="n">inliner</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{},</span> <span class="n">content</span><span class="o">=</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return a reference to a site tag.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">tag_ref</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;/tags/</span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag_node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">reference</span><span class="p">(</span><span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">refuri</span><span class="o">=</span><span class="n">tag_ref</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag_node</span><span class="o">.</span><span class="n">set_class</span><span class="p">(</span><span class="s2">&#34;p-category&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">tag_node</span><span class="p">],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">roles</span><span class="o">.</span><span class="n">register_canonical_role</span><span class="p">(</span><span class="s1">&#39;tag&#39;</span><span class="p">,</span> <span class="n">role_reference_tag</span><span class="p">)</span>
</span></span></code></pre></div><p>I thought about putting the <code>#</code> in CSS, but not every <code>p-category</code> is a tag. I can always change my mind later, maybe make a distinct <code>tag</code> CSS class.</p>
<p>It looks similar to <code>:term:</code>, except because I&rsquo;m referencing something I use a <code>reference</code> node and give it a link to that tag&rsquo;s page as <code>refuri</code>.  The <code>p-category</code> class is a <a href="/card/microformats/">card/microformats</a> thing for <a href="/card/indieweb/">card/IndieWeb</a>. I also decided to prefix my tag text with the traditional octothorpe used to mark tags out in the wild.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="na">:tag:</span><span class="nv">`microformats`</span><span class="err">
</span></span></span></code></pre></div><p>Oh yes that is <em>much</em> nicer to read than a standard reStructuredText link.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;p-category reference external&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/tags/microformats&#34;</span><span class="p">&gt;</span>#microformats<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>There&rsquo;s my <code>p-category</code> class, along with an unsurprising <code>reference</code> — since it&rsquo;s a clear way to indicate the reference node I used — and a slightly confusing <code>external</code> class. Pretty sure that means &ldquo;external to the document.&rdquo;</p>
<h3 id="a-kbd-role">A <code>:kbd:</code> role</h3>
<p>Something I need rather often is a way to indicate keyboard input. <kbd>Control</kbd> <kbd>c</kbd>, stuff like that.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">role_kbd</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">lineno</span><span class="p">,</span> <span class="n">inliner</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{},</span> <span class="n">content</span><span class="o">=</span><span class="p">[]):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return literal text marked as keyboard input.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">kbd_node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">literal</span><span class="p">(</span><span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">kbd_node</span><span class="o">.</span><span class="n">set_class</span><span class="p">(</span><span class="s2">&#34;keyboard&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">kbd_node</span><span class="p">],</span> <span class="p">[]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="na">:kbd:</span><span class="nv">`Control c`</span><span class="err">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">tt</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;keyboard docutils literal&#34;</span><span class="p">&gt;</span>Control c<span class="p">&lt;/</span><span class="nt">tt</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>Well that was easy. A bit verbose, but okay. That&rsquo;s not the real problem though.</p>
<h3 id="theres-a-perfectly-good-kbd-element">There&rsquo;s a perfectly good <code>&lt;kbd&gt;</code> element</h3>
<p>This blog is HTML, right? Can&rsquo;t I just use the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd"><code>kbd</code></a> element in my role?</p>
<p>Yes, but kind of no. It&rsquo;s considered poor form to put raw HTML in your output nodes. Docutils writes all sorts of content, and a <code>&lt;kbd&gt;</code> would be pretty ungainly sitting in a PDF. Ideally you&rsquo;d take care of writing HTML in an HTML Writer. Unfortunately, I have no idea how to work an HTML Writer yet.</p>
<p>But we <em>can</em> output raw HTML in a role implementation. It would be frowned on slightly less if we flagged it as a raw role.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">html</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">role_raw_kbd</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">rawtext</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">lineno</span><span class="p">,</span> <span class="n">inliner</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{},</span> <span class="n">content</span><span class="o">=</span><span class="p">[]):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return literal text marked as keyboard input.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">escaped_text</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">kbd_html</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;&lt;kbd&gt;</span><span class="si">{</span><span class="n">escaped_text</span><span class="si">}</span><span class="s2">&lt;/kbd&gt;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">options</span><span class="p">[</span><span class="s2">&#34;format&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;html&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">kbd_node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">raw</span><span class="p">(</span><span class="n">rawtext</span><span class="p">,</span> <span class="n">kbd_html</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">kbd_node</span><span class="p">],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">roles</span><span class="o">.</span><span class="n">register_canonical_role</span><span class="p">(</span><span class="s1">&#39;raw-kbd&#39;</span><span class="p">,</span> <span class="n">role_raw_kbd</span><span class="p">)</span>
</span></span></code></pre></div><p>Better pull in the <a href="https://docs.python.org/3/library/html.html">html</a> standard library and escape that text. Otherwise I&rsquo;d feel awful silly when talking about indenting with <code>&gt;&gt;</code> in <a href="/card/vim/">card/Vim</a> or something and it breaks the whole page.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="na">:raw-kbd:</span><span class="nv">`&gt;&gt;`</span><span class="err">
</span></span></span></code></pre></div><p>Yeah, that works. It&rsquo;s not too bad to look at while writing.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">kbd</span><span class="p">&gt;</span><span class="ni">&amp;lt;&amp;lt;</span><span class="p">&lt;/</span><span class="nt">kbd</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>And there we go. An honest to goodness <code>&lt;kbd&gt;</code> element. And <code>:raw-kbd:</code> will be easier to search for if and when I get around to custom HTML Writers.</p>
<p>Figuring out a role for keyboard input was the reason I started writing this post — though my favorite new role is <code>:tag:</code>. Anyways, I think this is a good spot to stop writing and start editing.</p>
<h2 id="wrap-it-up">Wrap it up</h2>
<p>…pardon me while I copy those role functions back into my Neovim plugin…</p>
<p>Well that was fun. I wanted a role for keyboard input, and I got it. Plus, my tags are a little easier to find in the page. <em>And</em> I have a <code>:term:</code> role for when I&rsquo;m feeling pedagogical.</p>
<p>Cool.</p>
<p>Roles are just a first step in customizing Docutils output. No idea when I&rsquo;ll get to the rest. You can learn more for yourself with Docutils and heavily customized publishing environments like <a href="https://www.sphinx-doc.org/en/master/">Sphinx</a>.</p>
<p>Me, I&rsquo;m just having a grand time embedding this whole authoring flow in the middle of my <a href="/card/hugo/">card/Hugo</a> site. May want to think about a new theme though if I&rsquo;m going to continue with Hugo. Perhaps borrow from Alexander Carlton&rsquo;s <a href="https://www.fisodd.com/code/b-side/">Hugo B-side</a>.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Wrote a Node.js version of my content format counter</title>
  <link>https://randomgeekery.org/post/2021/09/wrote-a-node-js-version-of-my-content-format-counter/</link>
  <pubDate>Sat, 04 Sep 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/09/wrote-a-node-js-version-of-my-content-format-counter/</guid>
  <description>That’s a fair number of files
I’ve been haphazardly attempting to organize my site files for a while. One thing I routinely need to know is what sort of content I’m working with.
I started with a Raku one-liner:
hugo list all \ | raku -e &#39;say bag(map({ $*SPEC.extension(split(&#34;,&#34;, $_)[0]) }, lines[1..*]))&#39; Not pretty, but quick and effective.
Bag(html(39) md(542)) Unfortunately, it didn’t cover all the content extension once I figured out that Hugo can ignore *.</description>
   <category>post</category> 
   <category>post</category> 
   <category>node-js</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>I only golfed it the tiniest bit</h2><p><img src="/post/2021/09/../../../attachments/img/2021/cover-2021-09-04.png" alt="attachments/img/2021/cover-2021-09-04.png"/>
That&rsquo;s a fair number of files</p>
<p>I&rsquo;ve been haphazardly attempting to organize my site files for a while. One thing I routinely need to know is what sort of content I&rsquo;m working with.</p>
<p>I started with a Raku <a href="/post/2020/03/listing-hugo-content-extensions-with-raku/">one-liner</a>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo list all <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> raku -e <span class="s1">&#39;say bag(map({ $*SPEC.extension(split(&#34;,&#34;, $_)[0]) }, lines[1..*]))&#39;</span>
</span></span></code></pre></div><p>Not pretty, but quick and effective.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Bag(html(39) md(542))
</span></span></code></pre></div><p>Unfortunately, it didn&rsquo;t cover all the content extension once I figured out that Hugo can ignore <code>*.txt</code> files, allowing me to try all sorts of <a href="/post/2021/08/trying-a-thing-with-neovim/">tricks</a> with content generation.</p>
<p>So I&rsquo;ve had this <a href="/card/ruby/">card/Ruby</a> code embedded in my <a href="/card/just/">justfile</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env ruby</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;tty-table&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">content_exts</span> <span class="o">=</span> <span class="sx">%w{.md .md.txt .rst .rst.txt .adoc .org}</span>
</span></span><span class="line"><span class="cl"><span class="n">ext_glob</span> <span class="o">=</span> <span class="s2">&#34;*\{</span><span class="si">#{</span><span class="n">content_exts</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">\}&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">format_glob</span> <span class="o">=</span> <span class="s2">&#34;content/**/</span><span class="si">#{</span><span class="n">ext_glob</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="n">format_glob</span>
</span></span><span class="line"><span class="cl"><span class="n">t</span> <span class="o">=</span> <span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="n">format_glob</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="no">File</span><span class="o">.</span><span class="n">file?</span> <span class="n">f</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">content_exts</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">end_with?</span> <span class="n">e</span> <span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="o">.</span><span class="n">tally</span>
</span></span><span class="line"><span class="cl"> <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="o">[</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">puts</span> <span class="no">TTY</span><span class="o">::</span><span class="no">Table</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="s2">&#34;Format&#34;</span><span class="p">,</span> <span class="s2">&#34;Count&#34;</span><span class="o">]</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="ss">:unicode</span><span class="p">)</span>
</span></span></code></pre></div><p>More verbose than the Raku solution for sure, but much of that is making sure it looks nice in a <a href="https://github.com/piotrmurach/tty-table">TTY Table</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">❯ just formats
</span></span><span class="line"><span class="cl">content/**/*{.md,.md.txt,.rst,.rst.txt,.adoc,.org}
</span></span><span class="line"><span class="cl">┌────────┬─────┐
</span></span><span class="line"><span class="cl">│Format  │Count│
</span></span><span class="line"><span class="cl">├────────┼─────┤
</span></span><span class="line"><span class="cl">│.md     │590  │
</span></span><span class="line"><span class="cl">│.md.txt │22   │
</span></span><span class="line"><span class="cl">│.rst.txt│19   │
</span></span><span class="line"><span class="cl">└────────┴─────┘
</span></span></code></pre></div><p>It works! It&rsquo;s great. Nothin wrong with it whatsoever.</p>
<p>But I&rsquo;ve been looking at <a href="/card/node.js/">card/Node.js</a> recently for assorted reasons, including the possibility of porting this site to one of the many Node-based static site generators.</p>
<p>So why not try the task in Node.js?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">glob</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;glob&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">contentExts</span> <span class="o">=</span> <span class="s2">&#34;md md.txt rst rst.txt adoc adoc.txt org&#34;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">contentGlob</span> <span class="o">=</span> <span class="sb">`content/**/*.{</span><span class="si">${</span><span class="nx">contentExts</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">)</span><span class="si">}</span><span class="sb">}`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">glob</span><span class="p">(</span><span class="nx">contentGlob</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">paths</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Path.extname would be fine here if not for my BASE.FORMAT.txt habit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kd">let</span> <span class="nx">countedExts</span> <span class="o">=</span> <span class="nx">contentExts</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">extCounts</span><span class="p">,</span> <span class="nx">ext</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">extMatchCount</span> <span class="o">=</span> <span class="nx">paths</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">matchCount</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">path</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="nx">ext</span><span class="p">)</span> <span class="o">?</span> <span class="o">++</span><span class="nx">matchCount</span> <span class="o">:</span> <span class="nx">matchCount</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">extMatchCount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">extCounts</span><span class="p">[</span><span class="nx">ext</span><span class="p">]</span> <span class="o">=</span> <span class="nx">extMatchCount</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">extCounts</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span> <span class="p">{});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">table</span><span class="p">(</span><span class="nx">countedExts</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>I&rsquo;m only now attempting to use the platform with any kind of seriousness, so I apologize if there&rsquo;s anything in there that&rsquo;s not quite idiomatic.</p>
<p>I grabbed <a href="https://github.com/isaacs/node-glob">glob</a> to simplify the task of recursively drilling down into <code>content/</code>. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"><code>Array.reduce</code></a> helps me count files matching each of my content extensions, then construct an object with those tallies. Since <a href="https://nodejs.org/dist/latest-v14.x/docs/api/console.html#console_console_table_tabulardata_properties"><code>Console.table</code></a> comes standard, I didn&rsquo;t need to dig for any formatting libraries today.</p>
<p>Though I might later for a little more control over display.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">┌─────────┬────────┐
</span></span><span class="line"><span class="cl">│ (index) │ Values │
</span></span><span class="line"><span class="cl">├─────────┼────────┤
</span></span><span class="line"><span class="cl">│   md    │  590   │
</span></span><span class="line"><span class="cl">│ md.txt  │   22   │
</span></span><span class="line"><span class="cl">│ rst.txt │   19   │
</span></span><span class="line"><span class="cl">└─────────┴────────┘
</span></span></code></pre></div><p>But hey it works.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Tooting with Python</title>
  <link>https://randomgeekery.org/post/2021/08/tooting-with-python/</link>
  <pubDate>Sun, 15 Aug 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/08/tooting-with-python/</guid>
  <description>What? Let’s set up a Mastodon application with Python to read and post toots.
How? card/Python is the second best tool for any job in 2021, which makes it an excellent glue language. I’ve been centering my site workflow around it. That means the Mastodon.py library, which I have dabbled with once or twice before.
Why? Because I’ve let the card/IndieWeb social aspects of this site go stale and one step to fixing that is restoring POSSE automation.</description>
   <category>post</category> 
   <category>post</category> 
   <category>python</category>  <category>mastodon</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Spent the day goofing off with Mastodon.py</h2><h2 id="what">What?</h2>
<p>Let&rsquo;s set up a <a href="https://joinmastodon.org">Mastodon</a> application with Python to read and post toots.</p>
<h3 id="how">How?</h3>
<p><a href="/card/python/">card/Python</a> is the <a href="https://twitter.com/glyph/status/1426414435275448324">second best</a> tool for any job in 2021, which makes it an excellent glue language.  I&rsquo;ve been centering my site workflow around it. That means the <a href="https://mastodonpy.readthedocs.io/en/stable/">Mastodon.py</a> library, which I have dabbled with once or twice before.</p>
<h3 id="why">Why?</h3>
<p>Because I&rsquo;ve let the <a href="/card/indieweb/">card/IndieWeb</a> social aspects of this site go stale and one step to fixing that is restoring POSSE automation. The first part of <em>that</em> is making sure I remember how to automate posting to Mastodon.</p>
<h2 id="ok-fine-get-on-with-it">Ok fine; get on with it</h2>
<p>Course, you&rsquo;re going to need an account at a Mastodon instance.  I have my
account on <a href="https://hackers.town/@randomgeek">one</a> of many. You can find one suitable for your tastes at
[Mastodon instances](<a href="https://instances.social">https://instances.social</a>.</p>
<blockquote>
<p>[!NOTE]
If you don&rsquo;t already know Mastodon, think of it as island versions of <a href="https://twitter.com">Twitter</a>.  Each instance has its own practices and policies depending on who runs it, so it&rsquo;s very much a &ldquo;hanging out at a friend&rsquo;s house&rdquo; experience. Lots more details, but much more than I feel like covering.</p>
<p>It&rsquo;s fun. You should try it out maybe. You can even host your own instance if you&rsquo;re hard-core into DIY.</p>
</blockquote>
<h3 id="registering-your-application">Registering your application</h3>
<p>I have 2FA enabled, so it turned out to be easier for me to set up the application in account preferences (under the &ldquo;Development&rdquo; section).</p>
<p>I entered an application name, added my Website for &ldquo;Application website,&rdquo; and selected the scopes that are important to me for today&rsquo;s explorations.</p>
<dl>
<dt><code>read</code></dt>
<dd>read all your account&rsquo;s data</dd>
<dt><code>write:statuses</code></dt>
<dd>publish statuses</dd>
</dl>
<p>That&rsquo;s enough to cover today&rsquo;s play.  I&rsquo;m not creating my own full-fledged Mastodon client so I don&rsquo;t need every permission.</p>
<h3 id="connecting-your-application">Connecting your application</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Dict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mastodon</span> <span class="kn">import</span> <span class="n">Mastodon</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.pretty</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span></code></pre></div><blockquote>
<p>[!NOTE]
Spoiler alert: yes I&rsquo;ll be using <a href="https://rich.readthedocs.io">Rich</a> and <a href="https://docs.python.org/3/library/dataclasses.html">dataclasses</a> along with Mastodon.py.  Nothing fancy planned with Rich today. It&rsquo;s just part of my regular toolkit.</p>
<p>The dataclasses library comes standard with Python these days, but you may need to install the others::</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install --upgrade rich mastodon
</span></span></code></pre></div></blockquote>
<p>The Mastodon instance developer panel gives me the details I need to connect. I set them as workspace environment variables with <a href="https://direnv.net">direnv</a> out of habit, but you could just as easily hard-code them in Python or define in a config file of your own.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">API_BASE</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;API_BASE&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">CLIENT_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;CLIENT_KEY&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">CLIENT_SECRET</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;CLIENT_SECRET&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ACCESS_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;ACCESS_TOKEN&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>From my first few attempts writing this post, I know I&rsquo;ll want a class to organize views for the connection.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@dataclass</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Provides convenience methods for querying an instance and posting toots.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">mastodon</span><span class="p">:</span> <span class="n">Mastodon</span>
</span></span></code></pre></div><p>Once I have a connection, I don&rsquo;t care about those application config details. Rather than storing them in the instance, I&rsquo;ll use a class method to handle the work and return my new App with only the details I <em>do</em> care about.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@classmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="bp">cls</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">client_key</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">CLIENT_KEY</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">api_base_url</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">API_BASE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">client_secret</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">CLIENT_SECRET</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">access_token</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">ACCESS_TOKEN</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span> <span class="o">-&gt;</span> <span class="s2">&#34;App&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Return an App connected to a specific Mastodon instance.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">mastodon</span> <span class="o">=</span> <span class="n">Mastodon</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">client_id</span><span class="o">=</span><span class="n">client_key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">api_base_url</span><span class="o">=</span><span class="n">api_base_url</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">client_secret</span><span class="o">=</span><span class="n">client_secret</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">access_token</span><span class="o">=</span><span class="n">access_token</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">cls</span><span class="p">(</span><span class="n">mastodon</span><span class="o">=</span><span class="n">mastodon</span><span class="p">)</span>
</span></span></code></pre></div><p>Basic setup&rsquo;s done. Let&rsquo;s create an App and see if it worked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span></span></code></pre></div><pre style="font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800080; text-decoration-color: #800080; font-weight: bold">App</span><span style="font-weight: bold">(</span><span style="color: #808000; text-decoration-color: #808000">mastodon</span>=<span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">mastodon.Mastodon.Mastodon</span><span style="color: #000000; text-decoration-color: #000000"> object at </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0x7ff14f1e8850</span><span style="font-weight: bold">&gt;)</span>
</pre>
<blockquote>
<p>[!NOTE] Exporting Rich output
My code doesn&rsquo;t look <em>exactly</em> like what I&rsquo;ve shared here. I take advantage of Rich&rsquo;s export features to simplify sharing program output.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">rich</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">rich</span><span class="o">.</span><span class="n">reconfigure</span><span class="p">(</span><span class="n">record</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">rich</span><span class="o">.</span><span class="n">get_console</span><span class="p">()</span><span class="o">.</span><span class="n">save_html</span><span class="p">(</span><span class="s2">&#34;output.html&#34;</span><span class="p">,</span> <span class="n">inline_styles</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><p>The extra bits change two aspects of Rich&rsquo;s default <a href="https://rich.readthedocs.io/en/stable/reference/console.html#rich.console.Console">Console</a> behavior:</p>
<ul>
<li>record output so it can be exported by <code>save_text</code> or <code>save_html</code> and I can add it here in my post</li>
<li>set console width to 80, simplifying display of exported output within the confines of a Web page</li>
</ul>
<p>After <code>app</code> does its thing, I export any output as formatted HTML, where I can edit as needed and insert here.</p>
</blockquote>
<p>So anyways, we verified that our connection works. Let&rsquo;s take a look at what that connection provides.</p>
<h3 id="the-instance">The instance</h3>
<p>Mastodon.py provides methods specifically for <a href="https://mastodonpy.readthedocs.io/en/stable/#reading-data-instances">reading instance details</a>. For example, <a href="https://mastodonpy.readthedocs.io/en/stable/#mastodon.Mastodon.instance_health"><code>instance_health</code></a> tells of if a quick health check succeeded.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">app</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">instance_health</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [green]healthy[/green]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [red][b]not[/b] healthy![/red]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></div><pre style="font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Connection instance is <span style="color: #008000; text-decoration-color: #008000">healthy</span>
</pre>
<h4 id="instance-details">Instance details</h4>
<p>Most of the querying methods return a dictionary or a list of dictionaries. <a href="https://mastodonpy.readthedocs.io/en/stable/#mastodon.Mastodon.instance"><code>Mastodon.instance</code></a> returns an <a href="https://mastodonpy.readthedocs.io/en/stable/#instance-dicts">instance dict</a>.</p>
<p>I don&rsquo;t feel like showing every item in that dictionary, though. Let&rsquo;s pick a few to make a decent summary. Oh hey, and let&rsquo;s cache that dictionary to disk so I&rsquo;m not making a fresh API query every time I check this post while I&rsquo;m writing it.</p>
<blockquote>
<p>[!NOTE]
Be considerate about server resources for Mastodon. Most instances are run as personal projects. There&rsquo;s no need for us to run up their AWS bill.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">stored</span><span class="p">(</span><span class="n">func</span><span class="p">:</span> <span class="n">Callable</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">filename</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="si">}</span><span class="s2">.json&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stored.inner for </span><span class="si">{</span><span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Loading data from </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Calling </span><span class="si">{</span><span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Writing data to </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="nb">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">inner</span>
</span></span></code></pre></div><p>I can do proper memoization later. &ldquo;Look for a file before you hit the server&rdquo; is good enough for writing a blog post.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@stored</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">instance</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Return a dictionary of information about the connected instance.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">instance_summary</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Return a small dictionary of instance information.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">instance</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;uri&#34;</span><span class="p">,</span> <span class="s2">&#34;title&#34;</span><span class="p">,</span> <span class="s2">&#34;short_description&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="n">field</span><span class="p">:</span> <span class="n">instance</span><span class="p">[</span><span class="n">field</span><span class="p">]</span> <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="n">fields</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="p">[</span><span class="s2">&#34;contact_account&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">instance</span><span class="p">[</span><span class="s2">&#34;contact_account&#34;</span><span class="p">][</span><span class="s2">&#34;display_name&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">data</span>
</span></span></code></pre></div><p>Time to look at that instance summary.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">app</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">instance_health</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [green]healthy[/green]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [red][b]not[/b] healthy![/red]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">instance_summary</span><span class="p">())</span>
</span></span></code></pre></div><pre style="font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Connection instance is <span style="color: #008000; text-decoration-color: #008000">healthy</span>
stored.inner for instance
Calling instance
Writing data to instance.json
<span style="font-weight: bold">{</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'uri'</span>: <span style="color: #008000; text-decoration-color: #008000">'hackers.town'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'title'</span>: <span style="color: #008000; text-decoration-color: #008000">'hackers.town'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'short_description'</span>: <span style="color: #008000; text-decoration-color: #008000">"A bunch of technomancers in the fediverse. Keep it fairly clean please. This arcology is for all who wash up upon it's digital shore."</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'contact_account'</span>: <span style="color: #008000; text-decoration-color: #008000">'The_Gibson'</span>
<span style="font-weight: bold">}</span>
</pre>
<h3 id="reading-the-timelines">Reading the timelines</h3>
<p>Mastodon&rsquo;s <a href="https://mastodonpy.readthedocs.io/en/stable/#reading-data-timelines">timeline methods</a> provide different views of recent post activity, both public and private.  To simplify demonstration on this public blog post, I&rsquo;ll stick to <a href="https://mastodonpy.readthedocs.io/en/stable/#mastodon.Mastodon.timeline_public"><code>timeline_public</code></a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@stored</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">timeline_public</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">timeline_public</span><span class="p">()</span>
</span></span></code></pre></div><p>The <a href="https://mastodonpy.readthedocs.io/en/stable/#toot-dicts">toot dict</a> also contains far more information than I need, so let&rsquo;s summarize those like with instances.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"> <span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">timeline_summary</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">timeline</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">timeline_public</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;date&#34;</span><span class="p">:</span> <span class="n">toot</span><span class="p">[</span><span class="s2">&#34;created_at&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;author&#34;</span><span class="p">:</span> <span class="n">toot</span><span class="p">[</span><span class="s2">&#34;account&#34;</span><span class="p">][</span><span class="s2">&#34;display_name&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;content&#34;</span><span class="p">:</span> <span class="n">toot</span><span class="p">[</span><span class="s2">&#34;content&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">toot</span> <span class="ow">in</span> <span class="n">timeline</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span></code></pre></div><p>Adding <code>app.timeline_summary()</code> to the main block:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">app</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">instance_health</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [green]healthy[/green]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [red][b]not[/b] healthy![/red]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">instance_summary</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">timeline_summary</span><span class="p">(),</span> <span class="n">max_string</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span>
</span></span></code></pre></div><pre style="font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Connection instance is <span style="color: #008000; text-decoration-color: #008000">healthy</span>
stored.inner for instance
Loading data from instance.json
<span style="font-weight: bold">{</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'uri'</span>: <span style="color: #008000; text-decoration-color: #008000">'hackers.town'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'title'</span>: <span style="color: #008000; text-decoration-color: #008000">'hackers.town'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'short_description'</span>: <span style="color: #008000; text-decoration-color: #008000">"A bunch of technomancers in the fediverse. Keep it fairly clean please. This arcology is for all who wash up upon it's digital shore."</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="color: #008000; text-decoration-color: #008000">'contact_account'</span>: <span style="color: #008000; text-decoration-color: #008000">'The_Gibson'</span>
<span style="font-weight: bold">}</span>
stored.inner for timeline_public
Calling timeline_public
Writing data to timeline_public.json
<span style="font-weight: bold">[</span>
<span style="font-style: italic">    .. skipping a few ...</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="font-weight: bold">{</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'date'</span>: <span style="color: #008000; text-decoration-color: #008000">'2021-08-15 22:24:35+00:00'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'author'</span>: <span style="color: #008000; text-decoration-color: #008000">'Endless Screaming'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'content'</span>: <span style="color: #008000; text-decoration-color: #008000">'&lt;p&gt;AAAAAAAAAAAAAAAAAAAAH&lt;/p&gt;'</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="font-weight: bold">}</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="font-weight: bold">{</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'date'</span>: <span style="color: #008000; text-decoration-color: #008000">'2021-08-15 22:24:43.531000+00:00'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'author'</span>: <span style="color: #008000; text-decoration-color: #008000">'Lynne'</span>,
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   │   </span><span style="color: #008000; text-decoration-color: #008000">'content'</span>: <span style="color: #008000; text-decoration-color: #008000">'&lt;p&gt;This just touched a single topic that I’ve never heard being brought up anywh'</span>+<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">97</span>
<span style="color: #7fbf7f; text-decoration-color: #7fbf7f">│   </span><span style="font-weight: bold">}</span>
<span style="font-weight: bold">]</span>
</pre>
<p>Nice. Looks like <code>content</code> is in HTML format. Need to remember that if I ever make a more interesting Mastodon client.</p>
<p>But I&rsquo;m ready to start tooting.</p>
<h3 id="writing">Writing</h3>
<p>Mastodon <a href="https://mastodonpy.readthedocs.io/en/stable/#writing-data-statuses">write methods</a> let us add toots, polls, replies, reblogs, faves. All that good stuff.</p>
<p>Let&rsquo;s stick with your basic toot for now.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">def</span> <span class="nf">status_post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">status</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">visibility</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s2">&#34;direct&#34;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">       <span class="s2">&#34;&#34;&#34;Post a toot to our connection, private unless we say otherwise.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">status_post</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">visibility</span><span class="o">=</span><span class="n">visibility</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">app</span><span class="o">.</span><span class="n">mastodon</span><span class="o">.</span><span class="n">instance_health</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [green]healthy[/green]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rich</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="s2">&#34;Connection instance is [red][b]not[/b] healthy![/red]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">status_text</span> <span class="o">=</span> <span class="s2">&#34;Ignore me, just messing with Mastodon.py&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span><span class="o">.</span><span class="n">status_post</span><span class="p">(</span><span class="n">status_text</span><span class="p">)</span>
</span></span></code></pre></div><p><img src="/post/2021/08/attachments/img/2021/toot.jpg" title="It worked!" alt="toot screenshot"/></p>
<p>Okay my brain is fading. Should probably put away the keyboard soon.</p>
<h2 id="wrap-it-up">Wrap it up</h2>
<p>Am I done?</p>
<p>Well, no. I still need to turn this into a proper command line application that looks for the newest published blog post and posts a toot about it. But that&rsquo;s not going to happen in today&rsquo;s post.</p>
<p>I had fun, and that&rsquo;s the important part.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: My Raku script for Journaling in Joplin</title>
  <link>https://randomgeekery.org/post/2021/05/my-raku-script-for-journaling-in-joplin/</link>
  <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/05/my-raku-script-for-journaling-in-joplin/</guid>
  <description>Setting the scene So yesterday I wrote a couple of one-liners for managing journal entries in the card/Joplin note-taking application, with help from card/Raku.
I made one for writing:
joplin use Journal &amp;&amp; joplin edit $(date --iso=minute) I made one for reading:
joplin use Journal \ &amp;&amp; raku -e &#39; for qx{ joplin ls }.lines.sort { qqx{ joplin cat $_ }.subst( /^(&lt;[\dT:\-]&gt;&#43;)/, { &#34;# $0&#34; } ).say }&#39; \ | python -m rich.</description>
   <category>post</category> 
   <category>post</category> 
   <category>programming</category>  <category>raku-lang</category>  <category>joplin</category>  <category>shell</category> 
  <content:encoded><![CDATA[<h2>Why mess with getopt when I can just use multi-dispatch?</h2><p><img src="/post/2021/05/../../../attachments/img/2021/cover-2021-05-22.png" alt="attachments/img/2021/cover-2021-05-22.png"/></p>
<h2 id="setting-the-scene">Setting the scene</h2>
<p>So yesterday I wrote a couple of <a href="/post/2021/05/cli-journaling-in-joplin-with-raku/">one-liners</a> for managing journal entries in the <a href="/card/joplin/">card/Joplin</a> note-taking application, with help from <a href="/card/raku/">card/Raku</a>.</p>
<p>I made one for writing:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="o">&amp;&amp;</span> joplin edit <span class="k">$(</span>date --iso<span class="o">=</span>minute<span class="k">)</span>
</span></span></code></pre></div><p>I made one for reading:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="o">&amp;&amp;</span> raku -e <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    for qx{ joplin ls }.lines.sort {
</span></span></span><span class="line"><span class="cl"><span class="s1">      qqx{ joplin cat $_ }.subst(
</span></span></span><span class="line"><span class="cl"><span class="s1">        /^(&lt;[\dT:\-]&gt;+)/, { &#34;# $0&#34; }
</span></span></span><span class="line"><span class="cl"><span class="s1">      ).say
</span></span></span><span class="line"><span class="cl"><span class="s1">    }&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> python -m rich.markdown -
</span></span></code></pre></div><p>They work.  That&rsquo;s great.</p>
<p>They don&rsquo;t work great, though.  Mainly the one-liner for reading.  It dumps every journal entry, which is both overwhelming and slow.  Overwhelming because I only want to see today&rsquo;s journal entries most of the time.  Slow because every one of those entries requires a separate call to <code>joplin</code>.  Joplin is lovely, but it expects to be used as a persistent application.  The command line functionality is optimized for convenience.  It is <em>not</em> optimized for being hammered repeatedly by an overenthusiastic command line script.</p>
<p>I can fix the overwhelming.  I can&rsquo;t properly fix the slow until I learn more about the <a href="https://joplinapp.org/api/overview/">Joplin API</a>.  At least I can make the experience less awful.</p>
<h2 id="make-it-less-awful">Make it less awful</h2>
<h3 id="less-hard-coding-please">Less hard-coding please</h3>
<p>First things first.  I might change the name of my journal notebook.  You might want a daily diary rather than a giant stack of entries.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$notebook</span>     <span class="o">=</span> <span class="p">&#34;</span><span class="s2">Journal</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$entry-window</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">minute</span><span class="p">&#34;;</span>
</span></span></code></pre></div><p>Focusing on daily journals? Set <code>$entry-window</code> to <code>&quot;day&quot;</code>.</p>
<h3 id="adding-an-entry">Adding an entry</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">add-entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$timestamp</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">truncated-to</span><span class="p">(</span><span class="nv">$entry-window</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$command</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin edit </span><span class="nv">$timestamp</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">shell</span><span class="p">(</span> <span class="nv">$command</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Raku&rsquo;s <a href="https://docs.raku.org/type/DateTime">DateTime</a> classes provide the gist of what we got with GNU Date. <a href="https://docs.raku.org/type/DateTime#method_truncated-to"><code>truncated-to</code></a> rounds our current timestamp — <a href="https://docs.raku.org/type/DateTime#method_now"><code>now</code></a> — down to the minute.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku -e <span class="s1">&#39;DateTime.now.say&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go">2021-05-22T11:52:28.380996-07:00
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">$</span> raku -e <span class="s1">&#39;DateTime.now.truncated-to(&#34;minute&#34;).say&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go">2021-05-22T11:52:00-07:00
</span></span></span></code></pre></div><p>It doesn&rsquo;t print exactly the same as <code>date</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> date --iso<span class="o">=</span>minute
</span></span><span class="line"><span class="cl"><span class="go">2021-05-22T11:52-07:00
</span></span></span></code></pre></div><p>It wouldn&rsquo;t take excessive effort to make them match, but I&rsquo;m just not concerned about it at the moment.</p>
<h4 id="use-a-main-sub">Use a <code>MAIN</code> sub</h4>
<p>Well, we went and put the logic for adding an entry into a function.  We want to call that function at some point, right?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">add-entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>We don&rsquo;t need <a href="https://docs.raku.org/routine/MAIN"><code>MAIN</code></a> yet.  If present, it&rsquo;s your Raku script&rsquo;s official entry point.  If not, you have a plain old script.  You&rsquo;re good either way.  Having that entry point will make things easier to manage in a minute, though.</p>
<p>If we run this as-is, it adds a new entry.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku journal
</span></span><span class="line"><span class="cl"><span class="go">Note does not exist: &#34;2021-05-22T12:18:00-07:00&#34;. Create it? (Y/n) y
</span></span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Note has been saved.
</span></span></span></code></pre></div><p>Okay, fine.  It works.  So far it&rsquo;s neither tidier nor more readable than the initial one-liner.  But writing an entry was never the problem.</p>
<p>The problem was reading the entries.</p>
<h3 id="read-all-the-entries">Read all the entries?</h3>
<p>Back in our one-liner, collecting entries and reading them got smushed together.  They&rsquo;re two distinct actions, though.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">all-entries</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin ls</span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Right.  Now we have subs for writing, and subs for reading.  How do we want to get at them?  Maybe a callback table with action keywords? Maybe a fancy <a href="https://modules.raku.org">module</a>?</p>
<p>Nope!  Well — we <em>could</em>.  But we don&rsquo;t need to.  Raku has <a href="https://docs.raku.org/language/functions#Multi-dispatch">multi-dispatch</a>!</p>
<h4 id="use-multiple-main-subs">Use multiple <code>MAIN</code> subs!</h4>
<p>We replace the initial <code>MAIN</code> definition with these:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">add</span><span class="p">&#34;)</span> <span class="p">{</span>   <span class="k">#= </span><span class="sd">Add an entry
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="n">add-entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">read</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read all entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span><span class="n">all-entries</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>multi</code> tells Raku to expect multiple definitions for this sub.  Without it, the compiler gets annoyed.</p>
<p><a href="https://en.wikipedia.org/wiki/Multiple_dispatch">Multiple dispatch</a> means a few things depending on which language you&rsquo;re using — or which computer scientist you&rsquo;re asking.  Basically it lets you avoid having one giant glob of a function with all sorts of special logic.  You do that by having a different version of the function for different situations.</p>
<p>Where I got surprised?  Most of the tiny amount I&rsquo;ve read out there for multiple dispatch talks about basing on types or pattern matching against variables.  You could absolutely do that with Raku.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$action</span> <span class="k">where</span> <span class="p">{</span> <span class="nv">$action</span> <span class="o">==</span> <span class="p">&#34;</span><span class="s2">add</span><span class="p">&#34;</span> <span class="p">})</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$action</span> <span class="k">where</span> <span class="p">{</span> <span class="nv">$action</span> <span class="o">==</span> <span class="p">&#34;</span><span class="s2">read</span><span class="p">&#34;</span> <span class="p">})</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</span></span></code></pre></div><p>Thing is, we&rsquo;re not doing anything with <code>$action</code>.  We <em>read</em> if the first command line argument is <code>read</code>.  We <em>add</em> if it&rsquo;s <code>add</code>.  Raku is happy enough matching that first argument against literal strings.  I assume other multi-dispatch languages can to the same, but nobody&rsquo;s been uncouth enough to bring it up in polite company.  It&rsquo;s always &ldquo;this type&rdquo; and &ldquo;that pattern&rdquo; or &ldquo;this enum.&rdquo;</p>
<p>What happens if we try to run the script with no arguments?  Well, if we didn&rsquo;t remove that initial version of <code>MAIN</code> we get a compiler error about redefining the sub.  But once that&rsquo;s out of the way, we no longer have a default path into the application!</p>
<p>No worries.  Raku&rsquo;s special handling of the entry point sub shows us the accepted usage.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku journal.raku
</span></span><span class="line"><span class="cl"><span class="go">Usage:
</span></span></span><span class="line"><span class="cl"><span class="go">  journal.raku add -- Add an entry
</span></span></span><span class="line"><span class="cl"><span class="go">  journal.raku read -- Read all entries
</span></span></span></code></pre></div><p>And that&rsquo;s where those <code>#=</code> comments come in.  They provide extra detail for the usage message displayed.</p>
<p>Let&rsquo;s try them out.  We&rsquo;ll <code>add</code> an entry and then make sure it shows up when we <code>read</code> them.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku journal.raku add
</span></span><span class="line"><span class="cl"><span class="go">Note does not exist: &#34;2021-05-22T12:55:00-07:00&#34;. Create it? (Y/n)
</span></span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Note has been saved.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> raku journal.raku <span class="nb">read</span>
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">#</span> 2021-05-22T12:55:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">[multi-dispatch]: https://docs.raku.org/language/functions#Multi-dispatch
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Raku Joplin journaling script, now with [multi-dispatch][]!
</span></span></span></code></pre></div><p>Nice.  Of course, at this point I&rsquo;m being handed 142 lines of text, and it&rsquo;s taking about 12 seconds to do it.  All that work and we finally reached the full &ldquo;overwhelming and slow&rdquo; point we were at this morning.</p>
<p>Things are about to improve!</p>
<h3 id="i-just-want-today">I just want today</h3>
<p>I&rsquo;ve been carefully using <em>inbox/ISO 8601</em> format for my entries.  That means I can filter to a specific date — or year, month, hour, etc — by constructing a date fragment and grabbing each entry that starts with the fragment.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">filtered-entries</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">all-entries</span><span class="o">.</span><span class="nb">grep</span><span class="p">({</span> <span class="o">.</span><span class="nb">starts-with</span><span class="p">(</span><span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Getting today&rsquo;s entries then becomes a matter of extracting a <code>yyyy-mm-dd</code> string from the ever-so-helpful DateTime.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-today</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><blockquote>
<p>[!NOTE] 2021-05-24
<a href="https://twitter.com/b2gills">@b2gills</a> mentioned that I could also use <a href="https://docs.raku.org/type/Date#method_today[Date.today]"><code>Date.today</code></a>
here!</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Why didn&#39;t you use Date.​today?<br><br>If you had a coercive parameter, you wouldn&#39;t even need to do anything more than Date.​today.<br><br> sub filtered-entries(Str(Date) $​date-funnel) {…}<br><br> sub entries-for-today() {<br> filtered-entries Date.​today<br> }</p>&mdash; Brad Gilbert (@b2gills) <a href="https://twitter.com/b2gills/status/1397038905405452296?ref_src=twsrc%5Etfw">May 25, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</blockquote>
<p>I haven&rsquo;t messed with <a href="https://docs.raku.org/syntax/Coercion%20type">parameter coercion</a> yet, but that looks like it will come in handy.</p>
<p>Need to touch up my reading <code>MAIN</code> definition, though.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">read</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read today&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-today</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Does it work?  Is it fast?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nb">time</span> raku journal.raku <span class="nb">read</span>
</span></span><span class="line"><span class="cl"><span class="gp">#</span> 2021-05-22T08:12:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Millie let me sleep in until 7:54. How gracious.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">[@liztormato]: https://twitter.com/liztormato
</span></span></span><span class="line"><span class="cl"><span class="go">[Reddit]: https://www.reddit.com/r/rakulang/comments/nif2sf/cli_journaling_in_joplin_with_raku_brian_wisti/
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Oh and last night&#39;s Joplin / Raku post got some legs. [@liztormato][] even
</span></span></span><span class="line"><span class="cl"><span class="go">shared it on [Reddit][]. That&#39;s cool. I always hope they like it when I post
</span></span></span><span class="line"><span class="cl"><span class="go">something about #RakuLang.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">#</span> 2021-05-22T10:43:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">My note script needs an option for &#34;read yesterday&#39;s notes.&#34;
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">#</span> 2021-05-22T12:18:00-07:00 Making sure that my Raku Joplin journaling script lets me add an entry.
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">#</span> 2021-05-22T12:55:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">[multi-dispatch]: https://docs.raku.org/language/functions#Multi-dispatch
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Raku Joplin journaling script, now with [multi-dispatch][]!
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">real    0m3.815s
</span></span></span><span class="line"><span class="cl"><span class="go">user    0m3.966s
</span></span></span><span class="line"><span class="cl"><span class="go">sys     0m0.502s
</span></span></span></code></pre></div><p>It works.  It&rsquo;s — it&rsquo;s not <em>fast</em> by any means, but 3.8 seconds is much faster than 12.  Again, there&rsquo;s an API waiting for when I&rsquo;m bored of abusing Joplin&rsquo;s command line conveniences.</p>
<h3 id="and-maybe-yesterday">And maybe yesterday</h3>
<p>Most of my deep dives into the journal will be from inside the Joplin app.  A quick glance at yesterday&rsquo;s notes could still be useful.</p>
<p>Of course a DateTime lets me ask for an <a href="https://docs.raku.org/type/DateTime#%28Dateish%29_method_earlier"><code>earlier</code></a> DateTime.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-yesterday</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$yesterday</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">earlier</span><span class="p">(</span><span class="s">days</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1"># or :1day for the terse</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="nv">$yesterday</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>For <code>MAIN</code> I <em>could</em> add and match against a subcommand.  I think instead I will adjust my top-level commands to reflect the most common cases.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">today</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read today&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-today</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">yesterday</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read yesterday&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-yesterday</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>And it works!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku journal.raku yesterday
</span></span><span class="line"><span class="cl"><span class="gp">#</span> 2021-05-21T09:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Alarm 07:00, stayed in bed as long as I could. Thanks to the dogs, that was 15
</span></span></span><span class="line"><span class="cl"><span class="go">minutes. Oh well.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">[Homebrew]: https://brew.sh
</span></span></span><span class="line"><span class="cl"><span class="go">[Nix]: https://nixos.org/
</span></span></span><span class="line"><span class="cl"><span class="go">[using Nix on Debian]: https://ariya.io/2020/05/nix-package-manager-on-ubuntu-or-debian
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Got the Raspberry Pi 4 set up with Raspbian, and the 500GB external drive
</span></span></span><span class="line"><span class="cl"><span class="go">attached. Thinking about package managers. I know [Homebrew][] but I could
</span></span></span><span class="line"><span class="cl"><span class="go">maybe try [Nix][]. There&#39;s a post about [using Nix on Debian][].
</span></span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">#</span> 2021-05-21T21:29:00-07:00
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Just about to post my Raku Joplin Journaling One-liners, but maybe a couple
</span></span></span><span class="line"><span class="cl"><span class="go">screenshots? People love screenshots.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Maybe they do. Maybe they don&#39;t. *I* love screenshots.
</span></span></span></code></pre></div><h3 id="what-about-formatting">What about formatting?</h3>
<p>Honestly?  I&rsquo;m not going to worry about it right now.  Piping to <a href="/card/rich/">card/Rich</a>
or <a href="/card/glow/">card/Glow</a> suffices when I want it pretty.</p>
<pre class="rich">╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-22T08:12:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

Millie let me sleep in until 7:54. How gracious.

Oh and last night's Joplin / Raku post got some legs. <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://twitter.com/liztormato">@liztormato</a></span> even shared it
on <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://www.reddit.com/r/rakulang/comments/nif2sf/cli_journaling_in_joplin_with_raku_brian_wisti/">Reddit</a></span>. That's cool. I always hope they like it when I post something about
#RakuLang.

╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-22T10:43:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

My note script needs an option for "read yesterday's notes."

╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-22T12:18:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

Making sure that my Raku Joplin journaling script lets me add an entry.

╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-22T12:55:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

Raku Joplin journaling script, now with <span style="color: #0000ff; text-decoration-color: #0000ff"><a href="https://docs.raku.org/language/functions#Multi-dispatch">multi-dispatch</a></span>!

╔══════════════════════════════════════════════════════════════════════════════╗
║                          <span style="font-weight: bold">2021-05-22T14:05:00-07:00</span>                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

Guess I'm about ready to post the second Raku Joplin journaling post. Ah, the
joys of hyperfocus.

Better stretch my legs and get back to the official task list after.
</pre>
<h2 id="the-complete-script">The complete script</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env raku</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$notebook</span>     <span class="o">=</span> <span class="p">&#34;</span><span class="s2">Journal</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$entry-window</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">minute</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">add-entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$timestamp</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">truncated-to</span><span class="p">(</span><span class="nv">$entry-window</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$command</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin edit </span><span class="nv">$timestamp</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">shell</span><span class="p">(</span> <span class="nv">$command</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">all-entries</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin ls</span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">filtered-entries</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">all-entries</span><span class="o">.</span><span class="nb">grep</span><span class="p">({</span> <span class="o">.</span><span class="nb">starts-with</span><span class="p">(</span><span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-today</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-yesterday</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$yesterday</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">earlier</span><span class="p">(</span><span class="s">days</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1"># or :1day for the terse</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="nv">$yesterday</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">add</span><span class="p">&#34;)</span> <span class="p">{</span>   <span class="k">#= </span><span class="sd">Add an entry
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="n">add-entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">today</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read today&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-today</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">yesterday</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read yesterday&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-yesterday</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">all</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read all entries (SLOW!)
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">all-entries</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
</item>
<item>
  <title>Post: Got different benchmarks from Programming Crystal</title>
  <link>https://randomgeekery.org/post/2021/02/got-different-benchmarks-from-programming-crystal/</link>
  <pubDate>Sun, 21 Feb 2021 20:13:07 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/02/got-different-benchmarks-from-programming-crystal/</guid>
  <description>Finally reading Programming Crystal, by Ivo Balbaert and Simon St. Laurent. Good stuff. The card/Crystal language has advanced some since the book came out, but nearly all the code runs as-is.
Something that jumped out at me was the difference between their results and mine with the benchmarking example. Not the raw numbers. I’d be a little confused if those were exactly the same. The ratios caught my attention.
Given this source:</description>
   <category>post</category> 
   <category>post</category> 
   <category>crystal</category>  <category>benchmarking</category>  <category>not-quite-errata</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>just a note, but too long to post as a note</h2><p>Finally reading <a href="https://pragprog.com/titles/crystal/programming-crystal/">Programming Crystal</a>, by Ivo Balbaert and <a href="http://simonstl.com/">Simon St.  Laurent</a>.  Good stuff.  The <a href="/card/crystal/">card/Crystal</a> language has advanced some since the book came out, but nearly all the code runs as-is.</p>
<p>Something that jumped out at me was the difference between their results and mine with the <a href="https://github.com/Ivo-Balbaert/programming_crystal/blob/master/code/managing_projects/benchmarking.cr">benchmarking</a> example.  Not the raw numbers.  I&rsquo;d be a little confused if those were exactly the same.  The ratios caught my attention.</p>
<p>Given this source:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-crystal" data-lang="crystal"><span class="line"><span class="cl"><span class="k">require</span> <span class="s2">&#34;benchmark&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">IOM</span> <span class="o">=</span> <span class="no">IO</span><span class="o">::</span><span class="n">Memory</span><span class="o">.</span><span class="n">new</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Benchmark</span><span class="o">.</span><span class="n">ips</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&#34;Appending&#34;</span><span class="p">)</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="n">append</span>
</span></span><span class="line"><span class="cl">    <span class="no">IOM</span><span class="o">.</span><span class="n">clear</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&#34;Using to_s&#34;</span><span class="p">)</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="n">to_s</span>
</span></span><span class="line"><span class="cl">    <span class="no">IOM</span><span class="o">.</span><span class="n">clear</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&#34;Interpolation&#34;</span><span class="p">)</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="n">interpolation</span>
</span></span><span class="line"><span class="cl">    <span class="no">IOM</span><span class="o">.</span><span class="n">clear</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">append</span>
</span></span><span class="line"><span class="cl">  <span class="no">IOM</span> <span class="o">&lt;&lt;</span> <span class="mi">42</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">to_s</span>
</span></span><span class="line"><span class="cl">  <span class="no">IOM</span> <span class="o">&lt;&lt;</span> <span class="mi">42</span><span class="o">.</span><span class="n">to_s</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">interpolation</span>
</span></span><span class="line"><span class="cl">  <span class="no">IOM</span> <span class="o">&lt;&lt;</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="mi">42</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>Here&rsquo;s what we&rsquo;re told to expect.</p>
<blockquote>
<p>Build the code for production using <code>$ crystal build benchmarking.cr —release</code> and execute that with: <code>$ ./benchmarking</code></p>
<p>You’ll get results like this:</p>
<pre tabindex="0"><code>Appending    34.06M ( 29.36ns) (± 3.97%) fastest
Using to_s   12.67M ( 78.92ns) (± 7.55%) 2.69× slower
Interpolation  2.8M (356.75ns) (± 3.84%) 12.15× slower
</code></pre></blockquote>
<p>But in Crystal 0.36.1 on Ubuntu 20.04, running on Windows WSL2:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ ./benchmarking
</span></span><span class="line"><span class="cl">    Appending 110.36M (  9.06ns) (± 3.70%)   0.0B/op        fastest
</span></span><span class="line"><span class="cl">   Using to_s  18.52M ( 54.00ns) (± 5.36%)  16.0B/op   5.96× slower
</span></span><span class="line"><span class="cl">Interpolation  19.19M ( 52.12ns) (± 2.99%)  16.0B/op   5.75× slower
</span></span></code></pre></div><p>Sure, my numbers are bigger than the book&rsquo;s.  That&rsquo;s cool.  But <code>interpolation</code> and <code>to_s</code> are so close to each other on my machine!</p>
<p>Maybe that&rsquo;s WSL?  After I get the day&rsquo;s tasks done, I revisit on my computer&rsquo;s Manjaro partition.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ ./benchmarking
</span></span><span class="line"><span class="cl">    Appending 123.54M (  8.09ns) (± 2.57%)   0.0B/op        fastest
</span></span><span class="line"><span class="cl">   Using to_s  56.57M ( 17.68ns) (± 3.49%)  16.0B/op   2.18× slower
</span></span><span class="line"><span class="cl">Interpolation  56.55M ( 17.68ns) (± 4.32%)  16.0B/op   2.18× slower
</span></span></code></pre></div><p>Well heck.</p>
<p>It&rsquo;s faster on native Linux than WSL.  That&rsquo;s hardly surprising.  But the differences between <code>to_s</code> and <code>interpolation</code> are now negligible.  For that matter, both of them are closer to the speed of <code>append</code> than <code>to_s</code> was in the book&rsquo;s example!</p>
<p>Is the difference because of changes in Crystal?  Some dependency, like LLVM? My computer&rsquo;s 40GB of RAM compared to whatever the authors used?  My hard drive?  GPU?  Is Mercury in retrograde?</p>
<p><em>I don&rsquo;t know!</em> I just saw different numbers and thought it was curious.</p>
<p>My point isn&rsquo;t that the book&rsquo;s wrong.  Heck no.  The example&rsquo;s supposed to remind you that testing your assumptions is important.  All I&rsquo;ve done is emphasized the validity of the lesson.</p>
<p>Anyways.</p>
<p>Good book.  Fun language.  Don&rsquo;t forget to try out the example code.  And if you need to care about performance?  Don&rsquo;t assume — benchmark.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: My first Julia script</title>
  <link>https://randomgeekery.org/post/2020/12/my-first-julia-script/</link>
  <pubDate>Fri, 25 Dec 2020 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/my-first-julia-script/</guid>
  <description>Drawn with Luxor.jl
Merry Christmas! I wrote a little Julia code.
The inspiration Been getting frustrated with card/Python’s type hinting system. I usually start with loose and informal code, but eventually I specify types. And when I do, I want the language to check my work. I dislike relying on an external tool like MyPy that runs separately.
I’ve also been looking at Pandas a lot recently for work stuff.</description>
   <category>post</category> 
   <category>post</category> 
   <category>julialang</category>  <category>literateprogramming</category>  <category>literateblogging</category>  <category>site</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Weaving code in Hugo posts with Julia</h2><p><img src="/post/2020/12/../../../attachments/img/2020/cover-2020-12-25.png" alt="attachments/img/2020/cover-2020-12-25.png"/>
Drawn with <a href="http://juliagraphics.github.io/Luxor.jl/stable/">Luxor.jl</a></p>
<p>Merry Christmas! I wrote a little <a href="https://julialang.org">Julia</a> code.</p>
<h2 id="the-inspiration">The inspiration</h2>
<p>Been getting frustrated with <a href="/card/python/">card/Python</a>&rsquo;s type hinting system. I usually start with loose and informal code, but eventually I specify types. And when I do, I want the language to check my work. I dislike relying on an external tool like <a href="https://mypy.readthedocs.io/en/stable/">MyPy</a> that runs separately.</p>
<p>I&rsquo;ve also been looking at <a href="https://pandas.pydata.org">Pandas</a> a lot recently for work stuff. Okay, Pandas looks interesting to my non-data science brain. I mainly use it to filter Excel files for database updates. But I can&rsquo;t help noticing how often the Julia programming language comes up in those posts about Data Science in Python.</p>
<p>So I check out Julia. It intrigues me. The type system and concurrency tools look nice, of course. But what&rsquo;s this? Math code that looks more like math?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="o">√</span><span class="mi">2</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span> <span class="n">with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span><span class="o">-</span><span class="n">element</span> <span class="kt">Vector</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="o">-</span><span class="mf">5.0</span>
</span></span><span class="line"><span class="cl"> <span class="o">-</span><span class="mf">3.585786437626905</span>
</span></span><span class="line"><span class="cl">  <span class="mf">0.6568542494923806</span>
</span></span><span class="line"><span class="cl">  <span class="mf">7.727922061357857</span>
</span></span></code></pre></div><p>By way of contrast, this is Python&rsquo;s equivalent of those two lines of Julia code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sqrt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">x</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>
</span></span></code></pre></div><p>It&rsquo;s similar enough that I don&rsquo;t feel massively disoriented. But the math stuff is just a little bit friendlier.</p>
<p>Time to run through the &ldquo;is this language worth my time&rdquo; checklist.</p>
<ul>
<li>Julia is <a href="https://docs.julialang.org/en/v1/">well-documented</a></li>
<li>even though scientific programming is Julia&rsquo;s main niche, it includes a solid  base and standard library for the general-purpose utility code I write</li>
<li>the <a href="https://juliapackages.com">package ecosystem</a> looks healthy</li>
<li>I found at least one useful-looking <a href="https://www.genieframework.com">Web framework</a></li>
<li>I found at least one <a href="https://juliapackages.com/p/octo">high-level library</a> to interact with assorted database
servers</li>
<li>and — of course — somebody&rsquo;s written a <a href="/card/static-site-generator/">card/Static Site Generator</a> in Julia, called <a href="https://franklinjl.org">Franklin.jl</a></li>
</ul>
<p>So yeah. I can poke around a little more.</p>
<p>I love <a href="http://literateprogramming.com/index.html">literate programming</a>. One of the first things I did was look to see if someone in the Julia world did too. And they do!</p>
<p>There&rsquo;s <a href="https://fredrikekre.github.io/Literate.jl/v2/">Literate.jl</a>, which processes Markdown and code in Julia scripts. <a href="http://weavejl.mpastell.com/stable/">Weave.jl</a> is more my style, processing Julia code in Markdown files. I can write my post and weave it into an ordinary-looking Markdown file. <a href="/card/hugo/">card/Hugo</a> won&rsquo;t have to know the difference.</p>
<h2 id="the-setup">The setup</h2>
<p>Julia treats environment and package management as core functionality. Everything I need is in <a href="https://docs.julialang.org/en/v1/stdlib/Pkg/">Pkg</a>. Not to pick too much on Python — it really is a great language — but its environment management options are <a href="https://xkcd.com/1987/">infamously byzantine</a>.</p>
<p>To set up a package for my existing site, I drop into the REPL&rsquo;s <code>pkg</code> mode.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">julia&gt; ]
</span></span></code></pre></div><p>Here I can initialize my project and add dependencies.</p>
<pre tabindex="0"><code>(v1.5) pkg&gt; initialize .
(rgb-hugo-legacy)&gt; add Weave
...
</code></pre><p>Now I have <code>Project.toml</code> and <code>Manifest.toml</code> files describing my Hugo site&rsquo;s new Julia needs. I can start writing this post.</p>
<h3 id="writing-with-weave">Writing with Weave</h3>
<p>Write the stuff you want to write, using <a href="https://docs.julialang.org/en/v1/stdlib/Markdown/">Julia-flavored Markdown</a>. Any code block fenceposted with triple backticks and labeled as &ldquo;julia&rdquo; gets evaluated by
Weave.</p>
<p>Set different <a href="http://weavejl.mpastell.com/stable/chunk_options/">chunk options</a> for the block if you want to tweak the code&rsquo;s treatment.</p>
<pre tabindex="0"><code>```julia; term = true
f(x) = √2x^2 - 5
[f(x) for x in [0, 1, 2, 3]]
```
</code></pre><p>Weave does its thing, and produces something interesting depending on what output options you use.</p>
<pre tabindex="0"><code>```julia
julia&gt; f(x) = √2x^2 - 5
f (generic function with 1 method)

julia&gt; [f(x) for x in [0, 1, 2, 3]]
4-element Array{Float64,1}:
-5.0
-3.585786437626905
0.6568542494923806
7.727922061357857
```
</code></pre><h2 id="the-script">The script</h2>
<p>AKA the point of this blog post. It looks in my content folder for recently modified <code>.jmd</code> files. Anything found gets handed off to <code>weave</code>, which does the hard work. Heck, <code>weave</code> even has a <code>hugo</code> option so I can generate Markdown specifically formatted to satisfy Hugo.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Logging</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Weave</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">content_folder</span> <span class="o">=</span> <span class="s">&#34;content&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">weave_extensions</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#34;.jmd&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">weave_files</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@debug</span> <span class="s">&#34;content is in </span><span class="si">$content_folder</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span><span class="p">)</span> <span class="k">in</span> <span class="n">walkdir</span><span class="p">(</span><span class="n">content_folder</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">file</span> <span class="k">in</span> <span class="n">files</span>
</span></span><span class="line"><span class="cl">            <span class="n">ext</span> <span class="o">=</span> <span class="n">splitext</span><span class="p">(</span><span class="n">file</span><span class="p">)[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">ext</span> <span class="k">in</span> <span class="n">weave_extensions</span>
</span></span><span class="line"><span class="cl">                <span class="n">weave_file</span> <span class="o">=</span> <span class="n">joinpath</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nd">@debug</span> <span class="s">&#34;Found weave file&#34;</span> <span class="n">weave_file</span>
</span></span><span class="line"><span class="cl">                <span class="n">target_file</span> <span class="o">=</span> <span class="n">joinpath</span><span class="p">(</span><span class="n">dirname</span><span class="p">(</span><span class="n">weave_file</span><span class="p">),</span> <span class="s">&#34;index.md&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">isfile</span><span class="p">(</span><span class="n">target_file</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">mtime</span><span class="p">(</span><span class="n">weave_file</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">mtime</span><span class="p">(</span><span class="n">target_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">push!</span><span class="p">(</span><span class="n">weave_files</span><span class="p">,</span> <span class="n">weave_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">end</span>
</span></span><span class="line"><span class="cl">            <span class="k">end</span>
</span></span><span class="line"><span class="cl">        <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@info</span> <span class="s">&#34;Weave-able files found:&#34;</span> <span class="n">weave_files</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">weave_file</span> <span class="k">in</span> <span class="n">weave_files</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@info</span> <span class="s">&#34;Weaving&#34;</span> <span class="n">weave_file</span>
</span></span><span class="line"><span class="cl">        <span class="n">weave</span><span class="p">(</span><span class="n">weave_file</span><span class="p">;</span> <span class="n">out_path</span><span class="o">=</span><span class="ss">:doc</span><span class="p">,</span> <span class="n">doctype</span><span class="o">=</span><span class="s">&#34;hugo&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@info</span> <span class="s">&#34;Done?&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><p>This is probably not idiomatic Julia. Maybe it&rsquo;ll get there when I learn what idiomatic Julia even looks like.</p>
<p>Obviously there&rsquo;s no error handlng of any kind. That can come later.</p>
<p>A few things I noticed:</p>
<ul>
<li>functions like <code>walkdir</code> end up making the flow look a bit like Python</li>
<li>I kept making my code more complicated than it needed to be, when both Julia and Weave were ready with reasonable defaults</li>
<li>especially in regard to types; everything works fine without specifying  details; I can find out what happens when I add details later</li>
</ul>
<pre tabindex="0"><code>❯ just weave
julia --project=. scripts/weave-content.jl
┌ Info: Files that need weaving:
│   weave_files =
│    1-element Array{Any,1}:
└     &#34;content/post/2020/12/my-first-julia-script/index.jmd&#34;
┌ Info: Weaving
└   weave_file = &#34;content/post/2020/12/my-first-julia-script/index.jmd&#34;
┌ Info: Weaving chunk 1 from line 45
└   progress = 0.0
┌ Info: Weaving chunk 2 from line 163
└   progress = 0.3333333333333333
┌ Info: Weaving chunk 3 from line 249
└   progress = 0.6666666666666666
┌ Info: Weaved all chunks
└   progress = 1
[ Info: Weaved to /home/random/Sites/rgb-hugo-legacy/content/post/2020/12/my-first-julia-script/index.md
[ Info: Done?
</code></pre><p>Okay. That&rsquo;s great. I mean — all that so I could do a little math, but whatever.</p>
<h2 id="thats-it">That&rsquo;s it?</h2>
<p>Hey. Maybe we could do something cool. Make a cover image for this post with <a href="http://juliagraphics.github.io/Luxor.jl/stable/">Luxor</a>.</p>
<p>Let&rsquo;s try it out. I&rsquo;ll borrow heavily from the Luxor manual since I don&rsquo;t really know what I&rsquo;m doing,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Colors</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Luxor</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">draw</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">foregroundcolors</span> <span class="o">=</span> <span class="n">Colors</span><span class="o">.</span><span class="n">diverging_palette</span><span class="p">(</span><span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">:</span><span class="mi">360</span><span class="p">),</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">:</span><span class="mi">360</span><span class="p">),</span> <span class="mi">200</span><span class="p">,</span> <span class="n">s</span> <span class="o">=</span> <span class="mf">0.99</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mf">0.8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">gsave</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">translate</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">-</span><span class="mi">150</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">julialogo</span><span class="p">(</span><span class="n">action</span><span class="o">=</span><span class="ss">:clip</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">500</span>
</span></span><span class="line"><span class="cl">        <span class="n">sethue</span><span class="p">(</span><span class="n">foregroundcolors</span><span class="p">[</span><span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">:</span><span class="k">end</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">        <span class="n">circle</span><span class="p">(</span><span class="n">rand</span><span class="p">(</span><span class="o">-</span><span class="mi">50</span><span class="o">:</span><span class="mi">350</span><span class="p">),</span> <span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">:</span><span class="mi">300</span><span class="p">),</span> <span class="mi">15</span><span class="p">,</span> <span class="ss">:fillstroke</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">clipreset</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">sethue</span><span class="p">(</span><span class="s">&#34;black&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">julialogo</span><span class="p">(</span><span class="n">action</span><span class="o">=</span><span class="ss">:stroke</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">translate</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">125</span><span class="p">,</span> <span class="n">y</span><span class="o">+</span><span class="mi">150</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">spiral</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">period</span><span class="o">=</span><span class="mi">20</span><span class="nb">π</span><span class="p">,</span> <span class="ss">:stroke</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">grestore</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">currentwidth</span> <span class="o">=</span> <span class="mi">850</span>
</span></span><span class="line"><span class="cl"><span class="n">currentheight</span> <span class="o">=</span> <span class="mi">500</span>
</span></span><span class="line"><span class="cl"><span class="n">Drawing</span><span class="p">(</span><span class="n">currentwidth</span><span class="p">,</span> <span class="n">currentheight</span><span class="p">,</span> <span class="s">&#34;cover.png&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">origin</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">background</span><span class="p">(</span><span class="s">&#34;white&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">setopacity</span><span class="p">(</span><span class="mf">.4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">scale</span><span class="p">(</span><span class="mf">1.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">draw</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">finish</span><span class="p">()</span>
</span></span></code></pre></div><blockquote>
<p>[!NOTE]
First off, PNG format works better than SVG when you&rsquo;re drawing 500 random circles.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ exa -l content/post/2020/12/my-first-julia-script/cover*
</span></span><span class="line"><span class="cl">.rw-r--r--  99k random <span class="m">25</span> Dec 12:42 cover.png
</span></span><span class="line"><span class="cl">.rw-r--r-- 4.8M random <span class="m">25</span> Dec 12:37 cover.svg
</span></span></code></pre></div><p>Second, I added an <code>eval = false</code> chunk option after the image was good enough. No point regenerating the cover every time I fix a typo.</p>
</blockquote>
<p>That&rsquo;s enough writing about writing with Julia. I have a couple other drafts I want to revisit now.</p>
<p>Besides, it&rsquo;s Christmas! Christmas 2020. Which means my only regret is forgetting to order Christmas-themed face masks.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Learning a little elisp</title>
  <link>https://randomgeekery.org/post/2020/12/learning-a-little-elisp/</link>
  <pubDate>Sat, 19 Dec 2020 16:30:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/12/learning-a-little-elisp/</guid>
  <description>&lt;p&gt;Excuse me while I share a sleep-deprived ramble from last night through about five lines of &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html%5Fnode/eintr/index.html&#34;&gt;Emacs Lisp&lt;/a&gt;, the extension language for &lt;a href=&#34;https://randomgeekery.org/card/emacs/&#34;&gt;Emacs&lt;/a&gt;&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>elisp</category>  <category>emacs</category>  <category>org-mode</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Don't get impressed yet</h2><p>Excuse me while I share a sleep-deprived ramble from last night through about five lines of <a href="https://www.gnu.org/software/emacs/manual/html%5Fnode/eintr/index.html">Emacs Lisp</a>, the extension language for <a href="/card/emacs/">Emacs</a></p>
<p>There&rsquo;s <a href="https://www.gnu.org/software/emacs/manual/html%5Fnode/eintr/index.html">tons</a> of <a href="https://caiorss.github.io/Emacs-Elisp-Programming/">detailed</a> information about Emacs LISP — aka Emacs Lisp, elisp, ELisp, and &ldquo;oh my god they love parentheses&rdquo; — out there.  I just want my old &ldquo;Babysteps&rdquo; approach, so all the detailed sites won&rsquo;t be so intimidating.</p>
<p>Gotta do it myself, I guess.</p>
<h2 id="why">Why</h2>
<p>So far I have treated elisp as an arcane configuration language.  But it’s so much more than that.  It’s also an arcane <em>programming</em> language.  I do love learning programming languages.</p>
<p>I’ll have an easier time configuring Emacs, and most likely get strange new ideas for ways to extend my frenemy text editing environment.</p>
<h2 id="how">How</h2>
<p>Using <a href="https://www.gnu.org/software/emacs/">Emacs</a>, of course!  A little bit with the deep integration for both <a href="https://www.gnu.org/software/emacs/manual/html%5Fnode/emacs/Lisp-Eval.html#Lisp-Eva">evaluation</a> and documentation_ of Lisp.  Probably a bit more with <a href="https://orgmode.org/worg/org-contrib/babel/intro.html">Org Babel</a>, which provides a layer for evaluating code and exporting the results — say, for example, to a blog post like this one.</p>
<p>Expect side notes about <a href="https://github.com/hlissner/doom-emacs">Doom Emacs</a>, since that’s the flavor I use lately.</p>
<h2 id="lets-get-started">Let’s get started</h2>
<p>I looked up &ldquo;Hello World in ELisp&rdquo; and found something like this.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nf">message</span> <span class="s">&#34;Hey World!&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="elisp-evaluation">ELisp evaluation</h3>
<p>Want to write some Emacs Lisp? Here you go.</p>
<ul>
<li>open Emacs</li>
<li>type <code>(message &quot;Hey World!&quot;)</code></li>
<li>put your cursor — the <em>point</em> — just outside the closing parenthesis.</li>
<li>Hit <em>C-x e</em></li>
<li>Emacs prints <code>Hey World!</code></li>
</ul>
<p>Boom.  Done.</p>
<p>The <code>()</code> indicate an <a href="https://en.wikipedia.org/wiki/S-expression">s-expression</a>.  That’s a <em>symbolic expression</em>, or <em>sexpr</em> if you’re cool.  S-expressions aren’t quite the atoms of a Lisp program.  There are smaller bits, like the symbol <code>message</code> or the value <code>&quot;Hey World!&quot;</code>.  But it’s the smallest <em>useful</em> element.  Oh I know.  S-expressions are the <em>molecules</em> of a Lisp program.</p>
<p>No?  How about words vs sentences?  Okay, whatever.</p>
<p>This particular s-expression holds an <em>ordered pair</em>, <code>message</code> and <code>&quot;Hey World!&quot;</code>.  <em>Pair</em> because there are two items.  <em>Ordered</em> because the order matters.</p>
<p>When ELisp sees an ordered pair, it knows what to do:</p>
<ul>
<li>figure out what it gets from the second thing</li>
<li>hand that to the first thing</li>
<li>hand <em>that</em> result to you</li>
</ul>
<p>The part that feels magic is each of the items in the pair can be s-expressions too!  Try <code>(sqrt (* 37 37))</code>.  <code>37.0</code>, right?</p>
<p>That <code>*</code> is for multiplication.  So we’re multiplying <code>37</code> by <code>37</code> and proving to ourselves that <code>sqrt</code> hands us back <code>37</code>.  It’s a bit of a pointless example, but hey welcome to me learning stuff.  And there’s my first lesson:</p>
<p>A Lisp program is pretty much just infinitely nested s-expressions.</p>
<p>And macros.  Macros, near as I can tell, are infinitely nested s-expressions with gloves and a nice hat.</p>
<p>BTW I don’t know Lisp.  I hope you did not come here expecting a tutorial.</p>
<h3 id="elisp-documentation">ELisp documentation</h3>
<p>When we have a question about ELisp functions, we don’t need to look everything up online.  Emacs comes with notes.</p>
<ul>
<li>put <em>point</em> over <code>message</code> in <code>(message &quot;Hey world!&quot;)</code></li>
<li>hit <code>C-h f</code></li>
<li>see the prompt asking me to specify a function, with <code>message</code> pre-filled</li>
<li>hit <code>ENTER</code></li>
<li>Learn things!</li>
</ul>
<blockquote>
<p>[!NOTE]
Doom uses <kbd>SPC h f</kbd> to fetch function descriptions.  Oh hey, while you’re at it try <kbd>SPC h d h</kbd> for general Doom help, or <kbd>SPC h d m</kbd> for help with a specific mode!</p>
</blockquote>
<h3 id="elisp-in-org-babel">ELisp in Org Babel</h3>
<p>This is great and all, but I am less concerned about live evaluation of ELisp. Org mode is more interesting to me.  I could make my <a href="/config/">config</a> smarter.  For example, only tangle a section if it’s relevant for that machine.</p>
<p>And, of course, really handy for blogging about ELisp.</p>
<blockquote>
<p>[!NOTE]
Configuration of Org and Babel is traditionally an elaborate ritual.  In Doom, it’s enough for this post to enable <code>org</code>.</p>
<p>Somewhere in my <code>init.el</code> I have these lines.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="nb">:lang</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nv">org</span> <span class="nv">+roam</span> <span class="nv">+hugo</span><span class="p">)</span>
</span></span></code></pre></div><p>Okay, I added <code>+hugo</code> since I’m using <code>ox-hugo</code> to integrate with my workflow. And <code>+roam</code> because <a href="https://www.orgroam.com/">org-roam</a> is kinda cool.  But not relevant for today.</p>
</blockquote>
<p>I need a code block written in a language that Babel knows.  It should not
surprise us that Babel knows ELisp.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">#+begin_src elisp
</span></span><span class="line"><span class="cl">(message &#34;Hey World!&#34;)
</span></span><span class="line"><span class="cl">#+end_src
</span></span></code></pre></div><p>I press <kbd>C-c C-c</kbd> with <em>point</em> over the code block.</p>
<blockquote>
<p>[!NOTE]
Or <kbd>ENTER</kbd> in Doom.</p>
</blockquote>
<p>Suddenly: a <code>#+RESULTS:</code> block!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">#+RESULTS:
</span></span><span class="line"><span class="cl">: Hey World!
</span></span></code></pre></div><p>I can also write my ELisp inline:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">src_elisp{(sqrt (* 37 37))}, right?
</span></span></code></pre></div><p>Written like this, Babel replaces my code with its result when <code>ox-hugo</code> exports the post.</p>
<p>All right. That’s the very basics of evaluating ELisp in Emacs generally and Org mode in particular.</p>
<p>Let’s get back to the code, please. How do I do variables?</p>
<h2 id="displaying-a-variable">Displaying a variable</h2>
<p>Let’s see. <code>setq</code> to set a variable for my name. identifiers can be pretty much whatever. I’ll use lowercase letters and a hyphen.</p>
<p>Looks like <code>format</code> can smush it into a string for <code>message</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">my-name</span> <span class="s">&#34;Brian&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">message</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nf">format</span> <span class="s">&#34;hello %s&#34;</span> <span class="nv">my-name</span><span class="p">))</span>
</span></span></code></pre></div><p><code>format</code> does its work and hands the result back to <code>message</code>, which displays the result.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">hello Brian
</span></span></code></pre></div><p>Thing is, now <code>my-name</code> is floating around forever what with being a global variable.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nf">message</span> <span class="nv">my-name</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Brian
</span></span></code></pre></div><p>What if I used a local variable instead?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">new-name</span> <span class="s">&#34;Whozzomongo&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">     <span class="p">(</span><span class="nf">message</span> <span class="nv">new-name</span><span class="p">))</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Whozzomongo
</span></span></code></pre></div><p>But back out here it doesn’t exist.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">new-name</span><span class="p">)</span>
</span></span></code></pre></div><p>You don’t see anything out here, but when I tried to <kbd>C-c C-c</kbd> that, Emacs complained:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Symbol’s function definition is void: new-name
</span></span></code></pre></div><p>I consider that a good thing. Global variables make me nervous, especially in long-running applications.</p>
<p>So I know how to set global or local variables.  I know how to display them.</p>
<p>How to get them from the user?</p>
<h2 id="getting-user-input">Getting user input</h2>
<p><a href="http://www.ergoemacs.org/emacs/elisp%5Fidioms%5Fprompting%5Finput.html">Xah Lee</a> gives a nice rundown on how to get user input. <code>read-string</code> is the one I want.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nf">read-string</span> <span class="s">&#34;What&#39;s your name? &#34;</span><span class="p">)</span>
</span></span></code></pre></div><p><code>read-string</code> returns whatever I answer.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Waffle Smasher The Magnificent Pineapple
</span></span></code></pre></div><p>Let’s make a question prompt.  The inside-out approach of nested evaluation confuses me a bit, so I’ll happily let Emacs indent things however it wants.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nf">message</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nb">let</span>
</span></span><span class="line"><span class="cl">     <span class="p">((</span><span class="nv">question</span> <span class="s">&#34;What&#39;s your name?&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nf">message</span> <span class="s">&#34;Go to bed, %s!&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nf">format</span> <span class="nf">message</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="nf">read-string</span> <span class="p">(</span><span class="nf">format</span> <span class="s">&#34;%s &#34;</span> <span class="nv">question</span><span class="p">)))))</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Go to bed, Dude!
</span></span></code></pre></div><p>I did some things.  <code>read-string</code> puts the cursor right after the <code>question</code> prompt.  So to help myself while I’m figuring all this out, I created some local variables.  <code>question</code> holds the question to be answered. <code>message</code> holds the —</p>
<p>Wait, there’s already a global <em>standard</em> function called <code>message</code>!</p>
<p>It’s cool.  By the time I need the function, <code>let</code> is done and my variable
doesn’t exist.  Still.  I shouldn’t make this a habit.</p>
<h2 id="wrapping-it-in-a-function">Wrapping it in a function</h2>
<p>I wasn’t planning on looking at functions today, but I’m more than halfway there already.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">ask-and-respond</span> <span class="p">(</span><span class="nv">question-for-user</span> <span class="nv">our-response</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Ask the user a question and show them a response.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">interactive</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">message</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nf">format</span> <span class="nv">our-response</span>
</span></span><span class="line"><span class="cl">           <span class="p">(</span><span class="nf">read-string</span> <span class="p">(</span><span class="nf">format</span> <span class="s">&#34;%s &#34;</span> <span class="nv">question-for-user</span><span class="p">)))))</span>
</span></span></code></pre></div><p>Use the <a href="https://www.gnu.org/software/emacs/manual/html%5Fnode/eintr/defun.html#defun">defun</a> macro to <em>define functions</em>. It’s similar enough to function definitions in other languages.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">NAME</span> <span class="p">(</span><span class="nv">ARGUMENTS</span><span class="err">…</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;A docstring&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">THE</span> <span class="nv">CODE</span><span class="p">)</span>
</span></span></code></pre></div><p>Though there are some differences right off the bat.  <code>ask-and-respond</code> needs user input.  ELisp requires I mark those as interactive_.</p>
<p>Other than <em>that</em> it’s similar enough to function definitions in other languages.</p>
<p>I already know how to call a function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">ask-and-respond</span> <span class="s">&#34;What&#39;s your name?&#34;</span> <span class="s">&#34;Goodnight, %s!&#34;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Goodnight, Brian!
</span></span></code></pre></div><p>Okay, time to take my own hint.  Good night!</p>]]></content:encoded>
</item>
<item>
  <title>Post: Tangling code from Hugo content with Raku</title>
  <link>https://randomgeekery.org/post/2020/07/tangling-code-from-hugo-content-with-raku/</link>
  <pubDate>Wed, 08 Jul 2020 21:45:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/07/tangling-code-from-hugo-content-with-raku/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;https://randomgeekery.org/post/2020/07/../../../attachments/img/2020/cover-2020-07-08.jpg&#34; alt=&#34;attachments/img/2020/cover-2020-07-08.jpg&#34;/&gt;
You know what else I can tangle? Yarn!&lt;/p&gt;
&lt;p&gt;I spend a while using &lt;a href=&#34;https://randomgeekery.org/card/raku/&#34;&gt;card/Raku&lt;/a&gt; to extract code from a &lt;a href=&#34;https://randomgeekery.org/card/hugo/&#34;&gt;card/Hugo&lt;/a&gt; post.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>raku-lang</category>  <category>literateprogramming</category>  <category>files</category>  <category>hugo</category>  <category>sortof</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>I could just use Org mode, but noo that's too easy</h2><p><img src="/post/2020/07/../../../attachments/img/2020/cover-2020-07-08.jpg" alt="attachments/img/2020/cover-2020-07-08.jpg"/>
You know what else I can tangle? Yarn!</p>
<p>I spend a while using <a href="/card/raku/">card/Raku</a> to extract code from a <a href="/card/hugo/">card/Hugo</a> post.</p>
<blockquote>
<p>[!NOTE] 2020-09-03
<a href="https://fosstodon.org/@codesections">@codesections@fosstodon.org</a> found a typo! I forgot to <em>show</em> the target file name once command line arguments are in place. It should go <code>raku tangle-fragments.raku index.md</code>.</p>
</blockquote>
<p>Let&rsquo;s say I have a file.  The one you&rsquo;re reading, perhaps.  Well, its original Markdown content.</p>
<p>It has a <a href="/card/hugo/">card/Hugo</a> shortcode in it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">code</span> <span class="na">file</span><span class="o">=</span><span class="s">&#34;hello.py&#34;</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">print(&#34;Hello&#34;)
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">code</span> <span class="p">&gt;</span>}}
</span></span></code></pre></div><p>I based <code>{{&lt; code &gt;}}</code> here on a shortcode from the <a href="https://github.com/gohugoio/hugoDocs/blob/master/layouts/shortcodes/code.html">Hugo docs</a>. It presents highlighted code with additional context.</p>
<div class="highlight" title="hello.py"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"> <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>Really handy when you&rsquo;re writing about code.  Thing is, now I have two copies. There&rsquo;s one here in the shortcode, and another in a <code>hello.py</code> file that I&rsquo;m writing about.  I&rsquo;d prefer there was only a single copy.  That way they don&rsquo;t get out of sync.</p>
<p>I <em>could</em> use Hugo&rsquo;s <a href="https://gohugo.io/functions/readfile/">readFile</a> function in a new shortcode, including the contents of <code>hello.py</code> in this Markdown file.  Something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">include</span> <span class="na">file</span><span class="o">=</span><span class="s">&#34;hello.py&#34;</span> <span class="p">&gt;</span>}}
</span></span></code></pre></div><blockquote>
<p>[!NOTE]
Actual shortcode logic left as an exercise for the reader.</p>
</blockquote>
<p>But that still breaks up the writing flow a little bit.  I&rsquo;m writing the code over here, and writing <em>about</em> it over there.  It&rsquo;s a tiny complaint, but working with <a href="/card/org/">card/Org</a> has spoiled me.  I get to write the code in the same document that I&rsquo;m writing about it in.  Everything stays in sync, more or less.</p>
<p>What I want is to write about <code>hello.py</code> here, and with a command have <code>hello.py</code> appear on my filesystem, containing the Python code I&rsquo;ve been describing.</p>
<p>And I want to do it without disturbing Hugo. Let it turn Markdown into HTML.</p>
<h2 id="tangling">Tangling</h2>
<p>This process is called &ldquo;tangling,&rdquo; and it&rsquo;s popular in the admittedly small
world of <a href="http://literateprogramming.com/">Literate Programming</a>.  The code is interleaved
throughout some kind of document.  A tool like <a href="https://www.cs.tufts.edu/~nr/noweb/">noweb</a> or <a href="https://orgmode.org/worg/org-contrib/babel/intro.html">Babel</a>
parses the document to create code files.  Could be any kind of file, really.
The process can get fancy.</p>
<p>But the start is not fancy: given a text file containing a <code>{{&lt; code file=&quot;(something)&quot; &gt;}}</code>, write the contents of that shortcode to the named file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">index.md</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{&lt; </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> &gt;}}</span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="k">regex</span> <span class="nf">shortcode</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="nv">$opener</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      code </span><span class="se">\s</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      </span><span class="p">&#39;</span><span class="s1">file=&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;filename&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">  </span><span class="c1"># Remember the filename
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">      </span><span class="ni">.</span><span class="o">*?</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="nv">$&lt;content&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr">  </span><span class="c1"># Remember everything else in the block
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="nv">$opener</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">/code</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$markdown</span> <span class="o">=</span> <span class="nb">slurp</span> <span class="nv">$filename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nv">$markdown</span><span class="o">.</span><span class="nb">match</span><span class="p">(/</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">shortcode</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">/)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="nv">$tangle-file</span> <span class="o">=</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">filename</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="nv">$tangle-content</span> <span class="o">=</span> <span class="nv">$/</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">content</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">spurt</span> <span class="nv">$tangle-file</span><span class="o">,</span> <span class="nv">$tangle-content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Tangled to </span><span class="nv">$tangle-file</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>I love Raku&rsquo;s approach to <a href="https://docs.raku.org/language/regexes">regular expressions</a>.  For starters, the syntax looks a bit more like describing a grammar.  I can break the funny regex characters up with spaces, and clarify them with comments.  In fact, I could someday build this up to a real <a href="https://docs.raku.org/language/grammars">grammar</a>.</p>
<p>Secondly, it addresses the fact that most text we look at these days contains multiple lines.  I didn&rsquo;t have to worry about any special multiline flags to get this working.</p>
<p>Finally, getting at the named captures was — I wouldn&rsquo;t say &ldquo;obvious,&rdquo; but at least &ldquo;coherent.&rdquo; I can treat the match variable <code>$/</code> as a nested <a href="https://docs.raku.org/language/hashmap">Hash</a>. The important bits look something like this::</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">shortcode =&gt;
</span></span><span class="line"><span class="cl">  filename =&gt; ｢hello.py｣
</span></span><span class="line"><span class="cl">  content =&gt; ｢print(&#34;Hello&#34;)｣
</span></span></code></pre></div><p>I can grab the named capture <code>filename</code> of my matched <code>shortcode</code> regex with <code>$/&lt;shortcode&gt;&lt;filename&gt;</code> — or <code>~$&lt;shortcode&gt;&lt;filename&gt;</code>, depending on your preferred syntax.</p>
<p>This is all possible in languages like Perl with assorted flags, but I haven&rsquo;t seen parsing treated so well by default since maybe <a href="/card/rebol/">card/REBOL</a>.</p>
<p>Anyways, let&rsquo;s run this thing.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku tangle.raku
</span></span><span class="line"><span class="cl"><span class="go">Tangled to hello.py
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> bat hello.py
</span></span><span class="line"><span class="cl"><span class="go">───────┬──────────────────────────────────────────────────────────────────────
</span></span></span><span class="line"><span class="cl"><span class="go">       │ File: hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">───────┼──────────────────────────────────────────────────────────────────────
</span></span></span><span class="line"><span class="cl"><span class="go">   1   │ print(&#34;Hello&#34;)
</span></span></span><span class="line"><span class="cl"><span class="go">───────┴──────────────────────────────────────────────────────────────────────
</span></span></span></code></pre></div><p>Sweet.</p>
<p>Except — this Markdown file I&rsquo;m writing.  It has <em>two</em> file code blocks now.  I want to tangle both of them.</p>
<h2 id="multiple-output-files">Multiple output files</h2>
<p>This requires a couple changes, since I&rsquo;m writing code about Hugo shortcodes in a Hugo post.</p>
<p>To show shortcode directives without Hugo evaluating them, they need to look like shortcode comments.  Their contents will get passed straight through as part of your post.  To show <code>{{&lt; shortcode &gt;}}</code> in a post, your Hugo content needs <code>{{&lt;/* shortcode */&gt;}}</code>.</p>
<p>So that&rsquo;s lovely and all, but can be a headache of its own for this specific situation of extracting code from a blog post.</p>
<p>I need to remember this commented shortcode syntax.</p>
<div class="highlight" title="define-commented-shortcodes"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"> <span class="k">my</span> <span class="nv">$commented-opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{</span><span class="p">&#39;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">&lt;/* </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl"> <span class="k">my</span> <span class="nv">$commented-closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> */&gt;</span><span class="p">&#39;</span> <span class="o">~</span> <span class="p">&#39;</span><span class="s1">}}</span><span class="p">&#39;;</span>
</span></span></code></pre></div><blockquote>
<p>[!NOTE]
Goodness, that looks silly.  Well, I&rsquo;m writing this blog post as a test case
for the code.  I couldn&rsquo;t figure out how to cleanly present the  commented shortcode delimiters without Hugo and my code getting into a fierce argument.</p>
<p>If I wasn&rsquo;t writing the code <em>in</em> this post, I could use something simpler, like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$commented-opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{​&lt;/* </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$commented-closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> */&gt;}}</span><span class="p">&#39;;</span>
</span></span></code></pre></div><p>But that&rsquo;s not the path I chose.  It&rsquo;s not easy to write programs that write themselves.  Sometimes you must help them along.</p>
</blockquote>
<p>That way I can replace those commented shortcode delimiters with their normal counterparts when I tangle later.</p>
<div class="highlight" title="define-commented-shortcodes"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$tangle-content</span> <span class="o">=</span> <span class="nv">$block</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">content</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="nb">subst</span><span class="p">(:</span><span class="s">global</span><span class="o">,</span> <span class="p">/</span><span class="sr"> </span><span class="nv">$commented-opener</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="nv">$opener</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="nb">subst</span><span class="p">(:</span><span class="s">global</span><span class="o">,</span> <span class="p">/</span><span class="sr"> </span><span class="nv">$commented-closer</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="nv">$closer</span><span class="p">);</span>
</span></span></code></pre></div><p>Now that I have that particular detail out of the way, tangle every block? Sure!  Make a regular expression match <code>:global</code> and it returns a list containing every match.</p>
<div class="highlight" title="tangle-every-block"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$markdown</span>  <span class="o">=</span> <span class="nb">slurp</span> <span class="nv">$filename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@fragments</span> <span class="o">=</span> <span class="nv">$markdown</span><span class="o">.</span><span class="nb">match</span><span class="p">(/&lt;</span><span class="nf">shortcode</span><span class="p">&gt;/</span><span class="o">,</span> <span class="p">:</span><span class="s">global</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nv">@fragments</span> <span class="k">-&gt;</span> <span class="nv">$block</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$tangle-file</span> <span class="o">=</span> <span class="nv">$block</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">filename</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">replace-commented-shortcodes</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">  <span class="nb">spurt</span> <span class="nv">$tangle-file</span><span class="o">,</span> <span class="nv">$tangle-content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Tangled to </span><span class="nv">$tangle-file</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>I think that about covers it.  The shortcode recognition logic can stay the same.</p>
<div class="highlight" title="tangle-multi.raku"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">index.md</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{&lt; </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> &gt;}}</span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="k">regex</span> <span class="nf">shortcode</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="nv">$opener</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      code </span><span class="se">\h</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      </span><span class="p">&#39;</span><span class="s1">file=&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;filename&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">  </span><span class="c1"># Remember the filename
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">      </span><span class="ni">.</span><span class="o">*?</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="nv">$&lt;content&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr">  </span><span class="c1"># Remember everything else in the block
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore trailing newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">    </span><span class="nv">$opener</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">/code</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="o">«</span><span class="n">define-commented-shortcodes</span><span class="o">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">tangle-every-block</span><span class="p">»</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>And it works!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku tangle-multi.raku
</span></span><span class="line"><span class="cl"><span class="go">Tangled to hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to tangle.raku
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> bat tangle.raku
</span></span><span class="line"><span class="cl"><span class="go">───────┬──────────────────────────────────────────────────────────────────────
</span></span></span><span class="line"><span class="cl"><span class="go">       │ File: tangle.raku
</span></span></span><span class="line"><span class="cl"><span class="go">───────┼──────────────────────────────────────────────────────────────────────
</span></span></span><span class="line"><span class="cl"><span class="go">   1   │ sub MAIN() {
</span></span></span><span class="line"><span class="cl"><span class="go">   2   │   my $filename = &#34;index.md&#34;;
</span></span></span><span class="line"><span class="cl"><span class="go">   3   │   my $opener = &#39;{{&lt; &#39;;
</span></span></span><span class="line"><span class="cl"><span class="go">   4   │   my $closer = &#39; &gt;}}&#39;;
</span></span></span><span class="line"><span class="cl"><span class="go">   5   │   my regex shortcode {
</span></span></span><span class="line"><span class="cl"><span class="go">   6   │     $opener
</span></span></span><span class="line"><span class="cl"><span class="go">   7   │       code \s
</span></span></span><span class="line"><span class="cl"><span class="go">   8   │       &#39;file=&#34;&#39; $&lt;filename&gt; = .+? &#39;&#34;&#39;  # Remember the filename
</span></span></span><span class="line"><span class="cl"><span class="go">   9   │       .*?
</span></span></span><span class="line"><span class="cl"><span class="go">  10   │     $closer
</span></span></span><span class="line"><span class="cl"><span class="go">  11   │     \n                # Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="go">  12   │     $&lt;content&gt; = .+?  # Remember everything else in the block
</span></span></span><span class="line"><span class="cl"><span class="go">  13   │     \n                # Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="go">  14   │     $opener &#39;/code&#39; $closer
</span></span></span><span class="line"><span class="cl"><span class="go">  15   │   }
</span></span></span><span class="line"><span class="cl"><span class="go">  16   │
</span></span></span><span class="line"><span class="cl"><span class="go">  17   │   my $markdown = slurp $filename;
</span></span></span><span class="line"><span class="cl"><span class="go">  18   │
</span></span></span><span class="line"><span class="cl"><span class="go">  19   │   if $markdown.match(/ &lt;shortcode&gt; /) {
</span></span></span><span class="line"><span class="cl"><span class="go">  20   │     my $tangle-file = $/&lt;shortcode&gt;&lt;filename&gt;;
</span></span></span><span class="line"><span class="cl"><span class="go">  21   │     my $tangle-content = $/&lt;shortcode&gt;&lt;content&gt;;
</span></span></span><span class="line"><span class="cl"><span class="go">  22   │     spurt $tangle-file, $tangle-content;
</span></span></span><span class="line"><span class="cl"><span class="go">  23   │     say &#34;Tangled to $tangle-file&#34;;
</span></span></span><span class="line"><span class="cl"><span class="go">  24   │   }
</span></span></span><span class="line"><span class="cl"><span class="go">  25   │ }
</span></span></span><span class="line"><span class="cl"><span class="go">  ───────┴──────────────────────────────────────────────────────────────────────
</span></span></span></code></pre></div><p>Unfortunately, I&rsquo;m not quite done yet.</p>
<h2 id="multiple-fragments">Multiple fragments</h2>
<p>I&rsquo;m not done yet because I don&rsquo;t like to describe my code a full file at a time.  I&rsquo;d rather talk about this bit here, explain that bit over there, then mash it all up in the end.</p>
<p>Consistency counts, so I need to pick a syntax.  Well — you&rsquo;ve been reading along.  You can see that I already made my choice.  I got used to <code>&lt;&lt;fragment-name&gt;&gt;</code> in Babel, where the attribute is called <code>name</code>. Might as well keep doing that over here.  Oh but hang on. I want it to stand out a bit.  I&rsquo;ll use angle quotes <code>«‥»</code>.</p>
<blockquote>
<p>[!NOTE]
On a US keyboard using <a href="/card/vim/">card/Vim</a> or <a href="/card/neovim/">card/Neovim</a>, <code>«</code> is a <a href="https://vimhelp.org/digraph.txt.html#digraph.txt">digraph</a> which can be entered via <kbd>Control-k</kbd> followed by <kbd>&lt;&lt;</kbd>.  Or if you&rsquo;ve set up a <a href="https://en.wikipedia.org/wiki/Compose_key">Compose</a> key, it&rsquo;s <kbd>Compose</kbd> followed by <kbd>&lt;&lt;</kbd> in any editor.</p>
<p><code>»</code> is the same, but <kbd>&gt;&gt;</kbd> instead.</p>
<p><em>Or</em> you can use <code>&lt;&lt;…&gt;&gt;</code> in your code and ignore my recent obsession with fancy characters.</p>
<p>Yes, I know I could practically write it <em>all</em> with fancy characters in Raku. One step at a time.</p>
</blockquote>
<p>Let&rsquo;s go back to the Python code because it&rsquo;s still so small.</p>
<p>Say I want to demonstrate the delightful <a href="/card/rich/">card/Rich</a> terminal library for Python.</p>
<div class="highlight" title="import-libraries"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"> <span class="kn">from</span> <span class="nn">rich</span> <span class="kn">import</span> <span class="nb">print</span>
</span></span><span class="line"><span class="cl"> <span class="kn">from</span> <span class="nn">rich.panel</span> <span class="kn">import</span> <span class="n">Panel</span>
</span></span><span class="line"><span class="cl"> <span class="kn">from</span> <span class="nn">rich.markdown</span> <span class="kn">import</span> <span class="n">Markdown</span>
</span></span></code></pre></div><p>But before I really use it in my code, I spend 1,500 words singing its praises.</p>
<p>It&rsquo;s nice.  I like it.</p>
<p>Okay, done singing.  Time to write the rest of the program.</p>
<div class="highlight" title="rich-hello.py"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="err">«</span><span class="n">import</span><span class="o">-</span><span class="n">libraries</span><span class="err">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">md</span> <span class="o">=</span> <span class="n">Markdown</span><span class="p">(</span><span class="s2">&#34;**Hello**, *World*.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">Panel</span><span class="p">(</span><span class="n">md</span><span class="p">))</span>
</span></span></code></pre></div><p>I identify the fragment with a <code>name</code> attribute:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">code</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;import-libraries&#34;</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;python&#34;</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">from rich import print
</span></span><span class="line"><span class="cl">from rich.panel import Panel
</span></span><span class="line"><span class="cl">from rich.markdown import Markdown
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">code</span> <span class="p">&gt;</span>}}
</span></span></code></pre></div><p>My <code>code</code> block references the <code>import-libraries</code> fragment by name when I&rsquo;m ready for it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">code</span> <span class="na">file</span><span class="o">=</span><span class="s">&#34;rich-hello.py&#34;</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">«import-libraries»
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">md = Markdown(&#34;**Hello**, *World*.&#34;)
</span></span><span class="line"><span class="cl">print(Panel(md))
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">code</span> <span class="p">&gt;</span>}}
</span></span></code></pre></div><p>I <em>might</em> spend some time talking about the <code>code</code> shortcode in another post, but I dislike Go&rsquo;s templating enough that this does not sound like fun.</p>
<h3 id="rounding-up-fragments-to-tangle">Rounding up fragments to tangle</h3>
<p>Recognizing an additional parameter doesn&rsquo;t make my regular expression <em>that</em> much more complicated, but I can see things getting  ore complex.  I could even find a better pattern later.  Let&rsquo;s give the params their own named regex for some encapsulation.</p>
<div class="highlight" title="shortcode-params-regex"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">params</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">   </span><span class="p">&#39;</span><span class="s1">file=&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;filename&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">   </span><span class="o">||</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">   </span><span class="p">&#39;</span><span class="s1">name=&#34;</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$&lt;fragment&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">&#34;</span><span class="p">&#39;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span></code></pre></div><p>That way I can drop it in <code>shortcode</code> to say &ldquo;oh and look for <code>params</code> while you&rsquo;re at it please.&rdquo;</p>
<div class="highlight" title="nested-shortcode-regex"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="p">«</span><span class="s2">shortcode-params-regex</span><span class="p">»</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$opener</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1">{{&lt; </span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$closer</span> <span class="o">=</span> <span class="p">&#39;</span><span class="s1"> &gt;}}</span><span class="p">&#39;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">shortcode</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="nv">$opener</span><span class="sr"> code </span><span class="se">\s</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">params</span><span class="p">&gt;</span><span class="sr"> </span><span class="ni">.</span><span class="o">*?</span><span class="sr"> </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore leading newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">  </span><span class="nv">$&lt;content&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr">  </span><span class="c1"># Remember everything else in the block
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">  </span><span class="se">\n</span><span class="sr">                </span><span class="c1"># Ignore trailing newline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sr">  </span><span class="nv">$opener</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">/code</span><span class="p">&#39;</span><span class="sr"> </span><span class="nv">$closer</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span></code></pre></div><p>Okay, we recognize <code>file</code> and <code>name</code> parameters.  What do we do with them? We gather them!</p>
<div class="highlight" title="gather-fragments-and-files"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">%fragment-for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@filenames</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$markdown</span> <span class="o">=</span> <span class="nb">slurp</span> <span class="nv">$filename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nv">$markdown</span><span class="o">.</span><span class="nb">match</span><span class="p">(/&lt;</span><span class="nf">shortcode</span><span class="p">&gt;/</span><span class="o">,</span> <span class="p">:</span><span class="s">global</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nv">$block</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$tangle-content</span> <span class="o">=</span> <span class="nv">$block</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">content</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$params</span> <span class="o">=</span> <span class="nv">$block</span><span class="p">&lt;</span><span class="s">shortcode</span><span class="p">&gt;&lt;</span><span class="s">params</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$fragment</span> <span class="o">=</span> <span class="nv">$params</span><span class="p">&lt;</span><span class="s">fragment</span><span class="p">&gt;</span> <span class="o">||</span> <span class="nv">$params</span><span class="p">&lt;</span><span class="s">filename</span><span class="p">&gt;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nv">$fragment</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">fragment: </span><span class="nv">$fragment</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">%fragment-for</span><span class="p">{</span> <span class="nv">$fragment</span><span class="o">.</span><span class="kt">Str</span> <span class="p">}</span> <span class="o">=</span> <span class="nv">$tangle-content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nv">$params</span><span class="p">&lt;</span><span class="s">filename</span><span class="p">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">@filenames</span><span class="o">.</span><span class="nb">push</span><span class="p">(</span><span class="nv">$filename</span><span class="o">.</span><span class="kt">Str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="tangling-my-fragments">Tangling my fragments</h3>
<p>Let&rsquo;s see here.  I know before I can write any files, I need to make sure everything&rsquo;s tangled Trying to keep fragments easy to identify.  They sit on a line by themselves, possibly with some leading whitespace.</p>
<div class="highlight" title="tangle-fragments"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">fragment</span> <span class="p">{</span><span class="sr"> </span><span class="ni">^^</span><span class="sr"> </span><span class="se">\h</span><span class="o">*?</span><span class="sr"> </span><span class="p">&#34;</span><span class="s2">«</span><span class="p">&#34;</span><span class="sr"> </span><span class="nv">$&lt;name&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="ni">.</span><span class="o">+?</span><span class="sr"> </span><span class="p">&#34;</span><span class="s2">»</span><span class="p">&#34;</span><span class="sr"> </span><span class="ni">$$</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">%tangle-for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">«</span><span class="s2">tangle-function</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nv">%fragment-for</span><span class="o">.</span><span class="nb">keys</span> <span class="k">-&gt;</span> <span class="nv">$name</span> <span class="p">{</span> <span class="nf">tangle</span><span class="p">(</span><span class="nv">$name</span><span class="p">);</span> <span class="p">}</span>
</span></span></code></pre></div><p>Raku functions are lexically scoped, which means it&rsquo;s perfectly okay to declare a function inside another function.  Though next time I revisit  his, I may want to think about a <a href="https://docs.raku.org/language/classtut">class</a> or something to hold the  complexity.</p>
<p>But what does that function need to look like?  I&rsquo;m still not sure I got it quite right.  I mean I know the <em>basic</em> shape of it.</p>
<div class="highlight" title="tangle-function"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">tangle</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">tangle-error-checking</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">tangle-text</span><span class="p">»</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>It needs some error checking.  I know that much.  Oh, and if it&rsquo;s already been tangled I should avoid going through it again.</p>
<div class="highlight" title="tangle-error-checking"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl">   <span class="k">return</span> <span class="p">&#34;&#34;</span> <span class="k">unless</span> <span class="nv">$name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nv">%tangle-for</span><span class="p">{</span> <span class="nv">$name</span> <span class="p">}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="nv">%tangle-for</span><span class="p">{</span> <span class="nv">$name</span> <span class="p">}</span><span class="o">.</span><span class="kt">Str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">my</span> <span class="nv">$content</span> <span class="o">=</span> <span class="nv">%fragment-for</span><span class="p">{</span> <span class="nv">$name</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">   <span class="k">unless</span> <span class="nv">$content</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nb">die</span> <span class="p">&#34;</span><span class="s2">«</span><span class="nv">$name</span><span class="s2">» is not a valid fragment</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span></code></pre></div><p>The idea of the thing is clear enough.  Find and recursively <code>tangle</code> each fragment found in this text, replacing the fragment references with their tangled text.  Once that&rsquo;s all done, cache and return the tangled text.</p>
<div class="highlight" title="tangle-text"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl">   <span class="k">for</span> <span class="nv">$content</span><span class="o">.</span><span class="nb">match</span><span class="p">(/</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">fragment</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="p">:</span><span class="s">global</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nv">$match</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">my</span> <span class="nv">$fragment-ref</span> <span class="o">=</span> <span class="nv">$match</span><span class="o">.</span><span class="kt">Str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="k">my</span> <span class="nv">$fragment-name</span> <span class="o">=</span> <span class="nv">$match</span><span class="p">&lt;</span><span class="s">fragment</span><span class="p">&gt;&lt;</span><span class="s">name</span><span class="p">&gt;</span><span class="o">.</span><span class="kt">Str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$name</span><span class="s2"> ← «</span><span class="nv">$fragment-name</span><span class="s2">»</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">     <span class="nv">$content</span><span class="o">.</span><span class="nb">subst-mutate</span><span class="p">(/</span><span class="nv">$fragment-ref</span><span class="p">/</span><span class="o">,</span> <span class="nf">tangle</span><span class="p">(</span> <span class="nv">$fragment-name</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nv">%tangle-for</span><span class="p">{</span> <span class="nv">$name</span> <span class="p">}</span> <span class="o">=</span> <span class="nv">$content</span><span class="p">;</span>
</span></span></code></pre></div><p>I flailed while tangling fragments.  Lots of complaints from Raku about the difference between a <code>Match</code> and a <code>String</code>.  There <em>must</em> be better ways. But the most important thing?  I got it to work eventually.</p>
<h3 id="writing-tangled-files">Writing tangled files</h3>
<p>After all that, writing the tangled files felt easy.</p>
<div class="highlight" title="write-tangled-fragments"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl">   <span class="p">«</span><span class="s2">define-commented-shortcodes</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="nv">@filenames</span> <span class="k">-&gt;</span> <span class="nv">$tangle-file</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">my</span> <span class="nv">$tangle-content</span> <span class="o">=</span> <span class="nv">%tangle-for</span><span class="p">{</span> <span class="nv">$tangle-file</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="o">.</span><span class="nb">subst</span><span class="p">(:</span><span class="s">global</span><span class="o">,</span> <span class="p">/</span><span class="sr"> </span><span class="nv">$commented-opener</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="nv">$opener</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="o">.</span><span class="nb">subst</span><span class="p">(:</span><span class="s">global</span><span class="o">,</span> <span class="p">/</span><span class="sr"> </span><span class="nv">$commented-closer</span><span class="sr"> </span><span class="p">/</span><span class="o">,</span> <span class="nv">$closer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="nb">spurt</span> <span class="nv">$tangle-file</span><span class="o">,</span> <span class="nv">$tangle-content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="nb">say</span> <span class="p">&#34;</span><span class="s2">Tangled to </span><span class="nv">$tangle-file</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span></code></pre></div><p>Then — theoretically — all these fragments I wrote will make a useful code tangler!</p>
<p>Might as well make it so this script can look at more than just the file I&rsquo;m editing right now.</p>
<div class="highlight" title="tangle-fragments.raku"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$filename</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">nested-shortcode-regex</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">gather-fragments-and-files</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">tangle-fragments</span><span class="p">»</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">«</span><span class="s2">write-tangled-files</span><span class="p">»</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Easiest <a href="https://docs.raku.org/language/create-cli">CLI</a> I ever wrote, by the way.  See?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku tangle-fragments.raku
</span></span><span class="line"><span class="cl"><span class="go">Usage:
</span></span></span><span class="line"><span class="cl"><span class="go">  tangle-fragments.raku &lt;filename&gt;
</span></span></span></code></pre></div><p>Time for the real thing.  I&rsquo;m nervous.  I shouldn&rsquo;t be nervous.  I know how this story ends.  Then again I keep rewriting the middle.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> raku tangle-fragments.raku index.md
</span></span><span class="line"><span class="cl"><span class="go">fragment: hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle.raku
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: define-commented-shortcodes
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: replace-commented-shortcodes
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-every-block
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-multi.raku
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: import-libraries
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: rich-hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: shortcode-params-regex
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: nested-shortcode-regex
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: gather-fragments-and-files
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-fragments
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-function
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-error-checking
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-text
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: write-tangled-files
</span></span></span><span class="line"><span class="cl"><span class="go">fragment: tangle-fragments.raku
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-function &lt;-- (tangle-error-checking)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-function &lt;-- (tangle-text)
</span></span></span><span class="line"><span class="cl"><span class="go">nested-shortcode-regex &lt;-- (shortcode-params-regex)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-every-block &lt;-- (replace-commented-shortcodes)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments &lt;-- (tangle-function)
</span></span></span><span class="line"><span class="cl"><span class="go">write-tangled-files &lt;-- (define-commented-shortcodes)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments.raku &lt;-- (nested-shortcode-regex)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments.raku &lt;-- (gather-fragments-and-files)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments.raku &lt;-- (tangle-fragments)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-fragments.raku &lt;-- (write-tangled-files)
</span></span></span><span class="line"><span class="cl"><span class="go">rich-hello.py &lt;-- (import-libraries)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-multi.raku &lt;-- (define-commented-shortcodes)
</span></span></span><span class="line"><span class="cl"><span class="go">tangle-multi.raku &lt;-- (tangle-every-block)
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to tangle.raku
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to tangle-multi.raku
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to rich-hello.py
</span></span></span><span class="line"><span class="cl"><span class="go">Tangled to tangle-fragments.raku
</span></span></span></code></pre></div><p>That overwrote my test version of <code>tangle-fragments.raku</code>.  Scary.  Ran the new version to keep myself honest.  It produced the same output, and appears to have correctly tangled my fragments!</p>
<div class="highlight" title="Generated rich-hello.py" verbatim="false"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich</span> <span class="kn">import</span> <span class="nb">print</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.panel</span> <span class="kn">import</span> <span class="n">Panel</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rich.markdown</span> <span class="kn">import</span> <span class="n">Markdown</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">md</span> <span class="o">=</span> <span class="n">Markdown</span><span class="p">(</span><span class="s2">&#34;**Hello**, *World*.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">Panel</span><span class="p">(</span><span class="n">md</span><span class="p">))</span>
</span></span></code></pre></div><p>Running <code>rich-hello.py</code> looks more interesting with a screenshot than a text block:</p>
<p><img src="/post/2020/07/attachments/img/2020/rich-panel.png" alt="Formatted output using Rich"/></p>
<p>Okay.  Now I&rsquo;m done.</p>
<p>I <em>could</em> have done this in Python.  There are decent parsing libraries out there.  But Raku did this on its own, without pulling in any extra — without pulling in <em>any</em> libraries.</p>
<h2 id="done-you-barely-started">Done? You barely started!</h2>
<p>My tangle script is no competition for Org mode&rsquo;s Babel.</p>
<ul>
<li>it needs more error checking
<ul>
<li>circular fragment references</li>
<li>unreachable files (path, permissions)</li>
</ul>
</li>
<li>smart handling of whitespace and indentation to keep Python from becoming a chore</li>
<li>rendering fragment names in such a way that syntax highlighters can do something pretty with them
<ul>
<li>especially when writing code in a language that <a href="https://github.com/alecthomas/chroma">Chroma</a> has heard of</li>
</ul>
</li>
<li>hidden blocks</li>
<li>code evaluation and display of results</li>
</ul>
<p>But it&rsquo;ll do for now.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Letting Ruby build Asciidoctor files for Hugo</title>
  <link>https://randomgeekery.org/post/2020/05/letting-ruby-build-asciidoctor-files-for-hugo/</link>
  <pubDate>Mon, 18 May 2020 14:15:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/05/letting-ruby-build-asciidoctor-files-for-hugo/</guid>
  <description>actually really proud of myself but this post needs all the disclaimers
[!WARNING] Normal people: don’t do any of this. The whole post is me compensating for making Hugo do things it’s not good at.
Stick with [Markdown][markdown] if you use [Hugo][hugo]. Use shortcodes or render hooks if you want to make things interesting. Experiment with card/reStructuredText or card/Asciidoctor — but anything past a few pages slows builds dramatically. Move away from Hugo if you prefer those formats.</description>
   <category>post</category> 
   <category>post</category> 
   <category>ruby</category>  <category>hugo</category>  <category>asciidoctor</category>  <category>site</category>  <category>don-t-try-this-at-home</category>  <category>fine-go-ahead</category>  <category>but-i-warned-you</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Stuff like this is why i don't advertise my site repo</h2><p><img src="/post/2020/05/../../../attachments/img/2020/cover-2020-05-18.jpg" alt="attachments/img/2020/cover-2020-05-18.jpg"/>
actually really proud of myself but this post needs all the disclaimers</p>
<blockquote>
<p>[!WARNING]
Normal people: don&rsquo;t do any of this.  The whole post is me compensating for making Hugo do things it&rsquo;s not good at.</p>
<p>Stick with [Markdown][markdown] if you use [Hugo][hugo].  Use <a href="https://gohugo.io/content-management/shortcodes/">shortcodes</a> or <a href="https://gohugo.io/getting-started/configuration-markup#markdown-render-hooks">render hooks</a> if you want to make things interesting. Experiment with <a href="/card/restructuredtext/">card/reStructuredText</a> or <a href="/card/asciidoctor/">card/Asciidoctor</a> — but anything past a few pages slows builds dramatically.  Move <em>away</em> from Hugo if you prefer those formats.  Try [Nikola][nikola] for <code>rst</code> blogs.  [Gatsby][gatsby] has a <a href="https://www.gatsbyjs.org/packages/gatsby-transformer-asciidoc/?=asciidoctor">plugin</a> to directly transform <code>adoc</code> content.  You have options!</p>
</blockquote>
<h2 id="asciidoctor">Asciidoctor?</h2>
<p>Asciidoctor is yet another lightweight formatting language, with official implementations in Ruby, JavaScript, and Java.  Processing tools transform it into HTML, PDF, and other formats.  Like Markdown, I find it easy to read and write the format.  Like reStructuredText and [Org][org], it provides structures suited for technical and long form writing.  Oh, and clearly labeled hooks for extending if the built-in structures don’t quite meet your needs.</p>
<h2 id="whats-this-got-to-do-with-hugo">What’s this got to do with Hugo?</h2>
<p>Hugo shines with Markdown, but you can use other <a href="https://gohugo.io/content-management/formats/">content formats</a> as well.  It supports Org files directly through <a href="https://github.com/niklasfasching/go-org">go-org</a>.  reStructuredText is supported if you have <code>rst2html.py</code> installed. Asciidoc and Asciidoctor are supported if you have their processors installed. And like [Jekyll][jekyll], Hugo supports HTML as an HTML authoring language if you tack some front matter onto it.</p>
<p>I enjoy the flexibility.  And that bit about supporting HTML as an authoring language is about to come in real handy.</p>
<blockquote>
<p>[!TIP]
go-org is nice, but <a href="https://ox-hugo.scripter.co/"><code>ox-hugo</code></a> excels if you want Hugo support tightly integrated with Org mode.</p>
</blockquote>
<h2 id="so-whats-the-problem">So what’s the problem?</h2>
<p>What’s up with this?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ hugo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                   |  EN
</span></span><span class="line"><span class="cl">-------------------+-------
</span></span><span class="line"><span class="cl">  Pages            | 1353
</span></span><span class="line"><span class="cl">  Paginator pages  |  128
</span></span><span class="line"><span class="cl">  Non-page files   |  442
</span></span><span class="line"><span class="cl">  Static files     |   31
</span></span><span class="line"><span class="cl">  Processed images | 1195
</span></span><span class="line"><span class="cl">  Aliases          | 1261
</span></span><span class="line"><span class="cl">  Sitemaps         |    1
</span></span><span class="line"><span class="cl">  Cleaned          |    0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total in 15929 ms
</span></span></code></pre></div><p>Sixteen seconds might look impressive compared to Jekyll.  It’s more alarming if you know Hugo’s reputation for speed.</p>
<p>I think my Asciidoctor files might be causing this slowdown.  I do have quite a few of them.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> make formats
</span></span><span class="line"><span class="cl"><span class="go">hugo list all | raku -e &#39;bag(lines[1..*].map({ .split(&#34;,&#34;)[0].IO.extension })).say&#39;
</span></span></span><span class="line"><span class="cl"><span class="go">Bag(adoc(206), html, md(424))
</span></span></span></code></pre></div><p>How to confirm this?  Well, I could run <code>hugo</code> in debug mode and scan the output.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> hugo --debug &gt; debug.log
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Building sites … INFO 2020/05/14 21:44:50 syncing static files to /home/random/Sites/rgb-hugo/randomgeekery.org/
</span></span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span><span class="line"><span class="cl"><span class="go">INFO 2020/05/14 21:44:50 Rendering contact.adoc with /home/random/Sites/rgb-hugo/scripts/asciidoctor ...
</span></span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span><span class="line"><span class="cl"><span class="go">INFO 2020/05/14 21:45:07 Rendering post/2020/05/querying-hugo-content-with-python/index.adoc with /home/random/Sites/rgb-hugo/scripts/asciidoctor ...
</span></span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span><span class="line"><span class="cl"><span class="go">Total in 17235 ms
</span></span></span></code></pre></div><p>Interesting.  I only updated a single <code>.adoc</code> file — this one — but Hugo rebuilds <em>all</em> of them.  It also spends about 17 seconds doing so.  17,000 of the 17,235 milliseconds spent in this build go to rebuilding mostly unchanged Asciidoctor files.</p>
<p>Okay.</p>
<h2 id="fine-ill-do-it-myself">Fine I’ll do it myself</h2>
<p>I could always build the <code>adoc</code> files myself instead of making Hugo do it.</p>
<h3 id="hang-onis-that-even-worth-it">Hang on — is that even worth it?</h3>
<p>How long does it take for a single process to build HTML from all the <code>adoc</code> files in my site?  Not much point in this idea if Asciidoctor takes 17 seconds on its own.</p>
<p>All right.  Let’s try this with roughly the same arguments Hugo does with <a href="https://gohugo.io/content-management/formats/#external-helpers">external helpers</a>.</p>
<div class="highlight" title="build-adoc"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="nb">require</span> <span class="s2">&#34;fileutils&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s2">&#34;asciidoctor&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">SRC_DIR</span> <span class="o">=</span> <span class="s2">&#34;content&#34;</span>
</span></span><span class="line"><span class="cl"><span class="no">BUILD_DIR</span> <span class="o">=</span> <span class="s2">&#34;adoc-out&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span> <span class="no">BUILD_DIR</span>
</span></span><span class="line"><span class="cl">  <span class="no">FileUtils</span><span class="o">.</span><span class="n">rm_r</span> <span class="no">BUILD_DIR</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">Dir</span><span class="o">[</span><span class="s2">&#34;</span><span class="si">#{</span><span class="no">SRC_DIR</span><span class="si">}</span><span class="s2">/**/*.adoc&#34;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">filename</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Mirror the nested folder structure where I found the `adoc` file</span>
</span></span><span class="line"><span class="cl">  <span class="n">dirname</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">branch</span> <span class="o">=</span> <span class="n">dirname</span><span class="o">.</span><span class="n">sub</span> <span class="sr">%r[^</span><span class="si">#{</span><span class="no">SRC_DIR</span><span class="si">}</span><span class="sr">/?]</span><span class="p">,</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">target_dir</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="no">BUILD_DIR</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">branch</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">target_base</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">sub</span> <span class="sr">%r{adoc$}</span><span class="p">,</span> <span class="s2">&#34;html&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">target_file</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">target_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">target_base</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="no">Asciidoctor</span><span class="o">.</span><span class="n">convert_file</span> <span class="n">filename</span><span class="p">,</span> <span class="ss">to_file</span><span class="p">:</span> <span class="n">target_file</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="ss">header_footer</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">safe</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">mkdirs</span><span class="p">:</span> <span class="kp">true</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>This fills a temporary folder with Asciidoctor’s generated HTML, keeping it out of Hugo’s way.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nb">time</span> ruby scripts/build-adoc
</span></span><span class="line"><span class="cl"><span class="go">0.61user 0.03system 0:00.65elapsed 98%CPU (0avgtext+0avgdata 20584maxresident)k
</span></span></span><span class="line"><span class="cl"><span class="go">0inputs+3680outputs (0major+7188minor)pagefaults 0swaps
</span></span></span></code></pre></div><p>0.65 seconds to build all the <code>.adoc</code> files.</p>
<p>So yes.  Building them fresh myself is quicker than 17 seconds.  That’s about what I figured, since Hugo apparently starts a fresh Ruby process for each <code>adoc</code> file.  I used a single process for all of them.</p>
<p>This experiment is worth pursuing further.</p>
<h2 id="give-it-a-shot">Give it a shot</h2>
<p>It will be fiddly, though.  I’m going to end up adding a build step, and complicating Hugo’s normally straightforward site generation process.</p>
<h3 id="keep-the-front-matter">Keep the front matter</h3>
<p>Asciidoctor has its own <a href="https://asciidoctor.org/docs/asciidoc-syntax-quick-reference/#document-header">document header</a> rules, but I don’t have to think too much about that.  To better support <a href="https://asciidoctor.org/docs/user-manual/#static-website-generators">static site generators</a>, Asciidoctor can be told what to do with YAML front matter.  I want front matter glued back to output before saving to Hugo’s <code>content</code> folder.</p>
<p>You can <a href="https://asciidoctor.org/docs/user-manual/#extensions">extend</a> Asciidoctor at multiple points in the conversion pipeline, with code blocks or full classes.  I’ll register a block extension for the postprocessor stage: after the document has been converted, but before it gets saved.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s2">&#34;asciidoctor&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s2">&#34;asciidoctor/extensions&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">Asciidoctor</span><span class="o">::</span><span class="no">Extensions</span><span class="o">.</span><span class="n">register</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># reinsert &#34;front-matter&#34; attribute</span>
</span></span><span class="line"><span class="cl">  <span class="n">postprocessor</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Create a YAML front matter + HTML content document that Hugo can work with</span>
</span></span><span class="line"><span class="cl">    <span class="n">process</span> <span class="k">do</span> <span class="o">|</span><span class="n">document</span><span class="p">,</span> <span class="n">output</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">      <span class="n">front_matter</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">attr</span> <span class="s2">&#34;front-matter&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="n">output</span> <span class="o">=</span> <span class="s2">&#34;---</span><span class="se">\n</span><span class="si">#{</span><span class="n">front_matter</span><span class="si">}</span><span class="se">\n</span><span class="s2">---</span><span class="se">\n\n</span><span class="si">#{</span><span class="n">output</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">Dir</span><span class="o">[</span><span class="s2">&#34;</span><span class="si">#{</span><span class="no">SRC_DIR</span><span class="si">}</span><span class="s2">/**/*.adoc&#34;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">filename</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">  <span class="no">Asciidoctor</span><span class="o">.</span><span class="n">convert_file</span> <span class="n">filename</span><span class="p">,</span> <span class="ss">to_file</span><span class="p">:</span> <span class="n">target</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="ss">header_footer</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">safe</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">mkdirs</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># extract front matter into a `front-matter` document attribute.</span>
</span></span><span class="line"><span class="cl">    <span class="ss">attributes</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;skip-front-matter&#34;</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><h3 id="what-about-page-resources">What about page resources?</h3>
<p>For adoc files, I’ll treat the Asciidoctor content folder as the source of truth.  Cover images and other <a href="https://gohugo.io/content-management/page-bundles/">page bundle</a> files go with the <code>adoc</code>.  <code>build-adoc</code> will copy them over when converting files.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="no">Dir</span><span class="o">[</span><span class="s2">&#34;</span><span class="si">#{</span><span class="no">SRC_DIR</span><span class="si">}</span><span class="s2">/**/*.adoc&#34;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">filename</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">  <span class="no">Dir</span><span class="o">[</span><span class="s2">&#34;</span><span class="si">#{</span><span class="n">dirname</span><span class="si">}</span><span class="s2">/*&#34;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">supplemental</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># We&#39;re just looking for resource bundle files</span>
</span></span><span class="line"><span class="cl">    <span class="k">next</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span> <span class="n">supplemental</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># We already grabbed the adoc file(s)</span>
</span></span><span class="line"><span class="cl">    <span class="k">next</span> <span class="k">if</span> <span class="n">supplemental</span> <span class="o">=~</span> <span class="sr">%r{adoc$}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="no">FileUtils</span><span class="o">.</span><span class="n">cp</span> <span class="n">supplemental</span><span class="p">,</span> <span class="n">target_dir</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><h3 id="only-rebuild-new-stuff">Only rebuild new stuff</h3>
<p>I might save a little more time — and disk writes — by limiting my build to updated adoc and supplemental files.</p>
<p>Course, it helps to stop deleting <code>BUILD_DIR</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="no">Dir</span><span class="o">[</span><span class="s2">&#34;</span><span class="si">#{</span><span class="n">dirname</span><span class="si">}</span><span class="s2">/*&#34;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">supplemental</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># We&#39;re just looking for resource bundle files</span>
</span></span><span class="line"><span class="cl">  <span class="k">next</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span> <span class="n">supplemental</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># We already grabbed the adoc file(s)</span>
</span></span><span class="line"><span class="cl">  <span class="k">next</span> <span class="k">if</span> <span class="n">supplemental</span> <span class="o">=~</span> <span class="sr">%r{adoc$}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">supplemental_base</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span> <span class="n">supplemental</span>
</span></span><span class="line"><span class="cl">  <span class="n">target_file</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">target_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">supplemental_base</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">copy_needed</span> <span class="o">=</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span> <span class="n">target_file</span>
</span></span><span class="line"><span class="cl">                  <span class="no">File</span><span class="o">.</span><span class="n">mtime</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="o">&gt;</span> <span class="no">File</span><span class="o">.</span><span class="n">mtime</span><span class="p">(</span><span class="n">target_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span>
</span></span><span class="line"><span class="cl">                  <span class="kp">true</span>
</span></span><span class="line"><span class="cl">                <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="n">copy_needed</span>
</span></span><span class="line"><span class="cl">    <span class="nb">puts</span> <span class="s2">&#34;Converting </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="no">FileUtils</span><span class="o">.</span><span class="n">copy</span> <span class="n">supplemental</span><span class="p">,</span> <span class="n">target_file</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span></code></pre></div><p>If processing a single file was more expensive, I’d use something more careful than a timestamp check.</p>
<h3 id="make-it-official">Make it official</h3>
<p>Let’s skip the gory details, but I eventually moved all the <code>adoc</code> posts, notes, and drafts to their own folder.  Now <code>build-adoc</code> officially generates HTML content with YAML front matter for Hugo.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="no">SRC_DIR</span> <span class="o">=</span> <span class="s2">&#34;adoc&#34;</span>
</span></span><span class="line"><span class="cl"><span class="no">BUILD_DIR</span> <span class="o">=</span> <span class="s2">&#34;content&#34;</span>
</span></span></code></pre></div><p>Since Asciidoctor finishes so promptly, I’ll run it every time I build the site.</p>
<div class="highlight" title="Makefile"><pre tabindex="0" class="chroma"><code class="language-Makefile" data-lang="Makefile"><span class="line"><span class="cl"><span class="nf">.PHONY</span><span class="o">:</span> <span class="n">adoc</span> <span class="n">build</span>
</span></span><span class="line"><span class="cl"><span class="nf">adoc</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    ruby scripts/build-adoc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">build</span><span class="o">:</span> <span class="n">adoc</span> <span class="c">## Build live version of site
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="nv">INCLUDE_ANALYTICS</span><span class="o">=</span><span class="m">1</span> hugo
</span></span><span class="line"><span class="cl">    cp etc/robots.txt randomgeekery.org/
</span></span><span class="line"><span class="cl">    cp etc/htaccess randomgeekery.org
</span></span></code></pre></div><h3 id="what-do-we-have-now">What do we have now?</h3>
<p>I finished my basic Asciidoctor + Hugo flow. How long does it take to build the site now? Let’s find out.</p>
<p>Every <code>adoc</code> file gets processed in the first run.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time make build
</span></span><span class="line"><span class="cl"># every adoc file is converted
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">done
</span></span><span class="line"><span class="cl">INCLUDE_ANALYTICS=1 hugo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                   |  EN
</span></span><span class="line"><span class="cl">-------------------+-------
</span></span><span class="line"><span class="cl">  Pages            | 1353
</span></span><span class="line"><span class="cl">  Paginator pages  |  128
</span></span><span class="line"><span class="cl">  Non-page files   |  431
</span></span><span class="line"><span class="cl">  Static files     |   31
</span></span><span class="line"><span class="cl">  Processed images | 1188
</span></span><span class="line"><span class="cl">  Aliases          | 1261
</span></span><span class="line"><span class="cl">  Sitemaps         |    1
</span></span><span class="line"><span class="cl">  Cleaned          |    0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total in 1416 ms
</span></span><span class="line"><span class="cl">cp etc/robots.txt randomgeekery.org/
</span></span><span class="line"><span class="cl">cp etc/htaccess randomgeekery.org
</span></span><span class="line"><span class="cl">3.80user 0.78system 0:02.87elapsed 159%CPU (0avgtext+0avgdata 198236maxresident)k
</span></span><span class="line"><span class="cl">24inputs+505056outputs (0major+19157minor)pagefaults 0swaps
</span></span></code></pre></div><p>Less than three seconds. I like that time more than 15-18 seconds.</p>
<p>I went to a bit of trouble to only process updated <code>adoc</code> files. Does it help?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time make build
</span></span><span class="line"><span class="cl">ruby scripts/build-adoc
</span></span><span class="line"><span class="cl">Converting adoc/draft/letting-ruby-build-asciidoctor-files-for-hugo/index.adoc
</span></span><span class="line"><span class="cl">done
</span></span><span class="line"><span class="cl">INCLUDE_ANALYTICS=1 hugo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                   |  EN
</span></span><span class="line"><span class="cl">-------------------+-------
</span></span><span class="line"><span class="cl">  Pages            | 1354
</span></span><span class="line"><span class="cl">  Paginator pages  |  128
</span></span><span class="line"><span class="cl">  Non-page files   |  432
</span></span><span class="line"><span class="cl">  Static files     |   31
</span></span><span class="line"><span class="cl">  Processed images | 1189
</span></span><span class="line"><span class="cl">  Aliases          | 1271
</span></span><span class="line"><span class="cl">  Sitemaps         |    1
</span></span><span class="line"><span class="cl">  Cleaned          |    0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total in 1458 ms
</span></span><span class="line"><span class="cl">cp etc/robots.txt randomgeekery.org/
</span></span><span class="line"><span class="cl">cp etc/htaccess randomgeekery.org
</span></span><span class="line"><span class="cl">3.11user 0.72system 0:01.90elapsed 200%CPU (0avgtext+0avgdata 212324maxresident)k
</span></span><span class="line"><span class="cl">64inputs+500976outputs (0major+61675minor)pagefaults 0swaps
</span></span></code></pre></div><p>Less than two seconds.  Then again, load from other system processes can add a second — or more, if I opened a browser tab to some JavaScript-intensive URL.</p>
<p>But it appears to help somewhat.  And again, I get happy when there are fewer disk writes.</p>
<h2 id="highlighting-code-samples">Highlighting code samples</h2>
<p>So at first, Asciidoctor wasn’t highlighting code samples. I had <code>:source-highlighter: rouge</code> in my document header, but it was being ignored. Rather than add preprocessor logic to ensure that the document header gets processed, I specified the same attributes for <em>every</em> file converted:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="no">Asciidoctor</span><span class="o">.</span><span class="n">convert_file</span> <span class="n">filename</span><span class="p">,</span> <span class="ss">to_file</span><span class="p">:</span> <span class="n">target_file</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="ss">header_footer</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">safe</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">mkdirs</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="ss">attributes</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;icons&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;font&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;source-highlighter&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;rouge&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;skip-front-matter&#34;</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div><p>All good now, right?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Rebuild failed:
</span></span><span class="line"><span class="cl">&#34;/home/random/Sites/rgb-hugo/content/post/2015/07/making-a-jekyll-collection/index.html:223:53&#34;: got closing shortcode, but none is open
</span></span></code></pre></div><p>Uh oh.</p>
<p>That’s not good.</p>
<p>When Hugo sees <code>{{ … }}</code> in my new HTML content files, it thinks that’s a shortcode!  That’s great if I <em>want</em> to invoke a shortcode.  Not so great in a <a href="/post/2015/07/making-a-jekyll-collection/">post with code samples</a> for working with templates.  Those aren’t supposed to get processed.</p>
<p>No problem.  <a href="http://rouge.jneen.net/">Rouge</a> handles syntax highlighting for my <code>adoc</code> files.  I need to take tokens that have already been transformed and make sure paired double curly braces are replaced with appropriate <a href="https://dev.w3.org/html5/html-author/charref">HTML entities</a>.  All I need is a slight  adjustment to <code>Rouge::Formatters::HTML#safe_span</code>.</p>
<p>I’d prefer to subclass <code>Rouge::Formatter::HTML</code>, but Asciidoctor chooses and creates formatters right in the middle of a <a href="https://github.com/asciidoctor/asciidoctor/blob/master/lib/asciidoctor/syntax_highlighter/rouge.rb#L15">highlight</a> method.  I would also need to create a new Asciidoctor adapter for syntax highlighting and update all my <code>adoc</code> content to use that adapter.  Great idea for later, but I don’t have that kind of time today.</p>
<p>I’ll <a href="https://en.wikipedia.org/wiki/Monkey_patch">monkey patch</a>  Rouge::Formatters::HTML<code>directly, redefining</code>safe_span` to perform the needed transformation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s2">&#34;asciidoctor/extensions&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">require</span> <span class="s2">&#34;rouge&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Make Rouge output safe for Hugo</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Rouge</span><span class="o">::</span><span class="no">Formatters</span><span class="o">::</span><span class="no">HTML</span>
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="nf">safe_span</span><span class="p">(</span><span class="n">tok</span><span class="p">,</span> <span class="n">safe_val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">safe_val</span> <span class="o">=</span> <span class="n">safe_val</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\{\{/</span><span class="p">,</span> <span class="s2">&#34;&amp;#123;&amp;#123;&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\}\}/</span><span class="p">,</span> <span class="s2">&#34;&amp;#125;&amp;#125;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">tok</span> <span class="o">==</span> <span class="no">Rouge</span><span class="o">::</span><span class="no">Token</span><span class="o">::</span><span class="no">Tokens</span><span class="o">::</span><span class="no">Text</span>
</span></span><span class="line"><span class="cl">      <span class="n">safe_val</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">      <span class="n">shortname</span> <span class="o">=</span> <span class="n">tok</span><span class="o">.</span><span class="n">shortname</span> <span class="p">\</span>
</span></span><span class="line"><span class="cl">        <span class="ow">or</span> <span class="k">raise</span> <span class="s2">&#34;unknown token: </span><span class="si">#{</span><span class="n">tok</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2"> for </span><span class="si">#{</span><span class="n">safe_val</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;&lt;span class=</span><span class="se">\&#34;</span><span class="si">#{</span><span class="n">shortname</span><span class="si">}</span><span class="se">\&#34;</span><span class="s2">&gt;</span><span class="si">#{</span><span class="n">safe_val</span><span class="si">}</span><span class="s2">&lt;/span&gt;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><blockquote>
<p>[!NOTE] What about shortcodes I want to keep?
This is just general advice to make Asciidoctor and Hugo play nice with each other. You don’t need to rebuild your entire site flow to use this information.</p>
<p>Say I’ve got a shortcode for displaying images as figures.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">{{​&lt; show-figure image=&#34;cover.png&#34; description=&#34;Taskwarrior edit view&#34; &gt;}}
</span></span></code></pre></div><p>Asciidoctor transforms unsafe characters into HTML entities.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{​<span class="p">&lt;</span> <span class="nt">show-figure</span> <span class="na">image</span><span class="o">=</span><span class="s">&#34;cover.png&#34;</span> <span class="na">description</span><span class="o">=</span><span class="s">&#34;Taskwarrior edit view&#34;</span> <span class="p">&gt;</span>}}
</span></span></code></pre></div><p>And it looks kind of embarrassing.</p>
<p><img src="/post/2020/05/attachments/img/2020/escaped-shortcode.png" title="my shortcode got escaped" alt="screenshot showing image shortcode instead of an image"/></p>
<p>The solution? Wrap that shortcode in a <a href="https://asciidoctor.org/docs/user-manual/#pass-macros">passthrough macro</a>.</p>
<pre tabindex="0"><code class="language-adoc" data-lang="adoc">pass:[{{​&lt; show-figure image=&#34;cover.png&#34; description=&#34;Taskwarrior edit view&#34; &gt;}}]
</code></pre><p><img src="/post/2020/05/attachments/img/2020/correct-shortcode.png" title="using a passthrough macro" alt="correct shortcode"/></p>
<p>Much better.</p>
</blockquote>
<h3 id="now-what-do-we-have"><em>Now</em> what do we have?</h3>
<p>I’m not sure. Let’s find out with a typical <code>build all</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time make all
</span></span><span class="line"><span class="cl">ruby scripts/build-adoc
</span></span><span class="line"><span class="cl">Converting adoc/draft/letting-ruby-build-asciidoctor-files-for-hugo/index.adoc
</span></span><span class="line"><span class="cl">done
</span></span><span class="line"><span class="cl">INCLUDE_ANALYTICS=1 hugo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                   |  EN
</span></span><span class="line"><span class="cl">-------------------+-------
</span></span><span class="line"><span class="cl">  Pages            | 1354
</span></span><span class="line"><span class="cl">  Paginator pages  |  128
</span></span><span class="line"><span class="cl">  Non-page files   |  432
</span></span><span class="line"><span class="cl">  Static files     |   31
</span></span><span class="line"><span class="cl">  Processed images | 1189
</span></span><span class="line"><span class="cl">  Aliases          | 1271
</span></span><span class="line"><span class="cl">  Sitemaps         |    1
</span></span><span class="line"><span class="cl">  Cleaned          |    0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total in 1447 ms
</span></span><span class="line"><span class="cl">cp etc/robots.txt randomgeekery.org/
</span></span><span class="line"><span class="cl">cp etc/htaccess randomgeekery.org
</span></span><span class="line"><span class="cl">perl scripts/generate-archives
</span></span><span class="line"><span class="cl">prove -r
</span></span><span class="line"><span class="cl">./t/site/test_archive.t .... ok
</span></span><span class="line"><span class="cl">./t/site/test_links.t ......
</span></span><span class="line"><span class="cl"># [mailto:brianwisti@pobox.com] is an email link, friend
</span></span><span class="line"><span class="cl">./t/site/test_links.t ...... ok
</span></span><span class="line"><span class="cl">./t/test_db.t .............. ok
</span></span><span class="line"><span class="cl">./t/test_db_persistence.t .. ok
</span></span><span class="line"><span class="cl">./t/test_pod.t ............. ok
</span></span><span class="line"><span class="cl">All tests successful.
</span></span><span class="line"><span class="cl">Files=5, Tests=10,  7 wallclock secs ( 0.26 usr  0.05 sys +  6.65 cusr  0.29 csys =  7.25 CPU)
</span></span><span class="line"><span class="cl">Result: PASS
</span></span><span class="line"><span class="cl">make all  10.44s user 1.15s system 114% cpu 10.108 total
</span></span></code></pre></div><p>Yeah there’s a lot of stuff there I still need to write about.  Long story short: by directly using Ruby to convert Asciidoctor files into HTML for Asciidoctor, build and test <em>combined</em> take noticeably less time than build alone when Hugo had to manage the whole thing.  And it’s not that different from how <code>ox-hugo</code> manages Org content.  A similar approach would probably work for <code>rst</code> files.</p>
<p>I like it for now. Keeps me from getting bored.</p>
<p>But — and this is a big but — I couldn’t recommend this approach for normal  people with things to do. Site generation now has more moving parts, which I must test and maintain if I want to share the least little note_.</p>
<h2 id="what-now">What now?</h2>
<p>Yay, everything works!</p>
<p>What’s next?  I’m not sure.  Hugo is an ever-smaller piece of my site-building workflow.  That’s <em>somewhat</em> intentional.  Still <a href="/post/2019/12/removing-mmark-has-me-grumbly/">grumbly</a> about having to fiddle with all my Markdown files last year.  But still.</p>
<ul>
<li>Probably explore some AsciiDoctor extensions. If most of the work happens  when I write a file, I won’t care much if that file takes a second to turn into HTML. And there are so many to choose from, from <a href="https://asciidoctor.org/docs/asciidoctor-diagram">Asciidoctor Diagram</a> to the <a href="https://github.com/asciidoctor/asciidoctor-extensions-lab">Extensions Lab</a> and beyond.</li>
<li>Maybe turn my shortcodes into macros? Write some of my <em>own</em> extension classes?</li>
<li>Keep exploring site generators. I love to putter. A framework that encourages puttering might suit me better than Hugo.  <a href="/card/eleventy/">Eleventy</a>, for example.</li>
</ul>
]]></content:encoded>
</item>
<item>
  <title>Post: Listing Hugo Content Extensions With Raku</title>
  <link>https://randomgeekery.org/post/2020/03/listing-hugo-content-extensions-with-raku/</link>
  <pubDate>Tue, 31 Mar 2020 14:33:29 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/03/listing-hugo-content-extensions-with-raku/</guid>
  <description>We like quick answers to important questions
How many text formatting languages have I used for my Hugo site? For that matter, how many content files were written in each?
$ hugo list all | raku -e &#39;bag(lines[1..*].map({ .split(&#34;,&#34;)[0].IO.extension })).say&#39; Bag(adoc(4), html, md(327), rst(109)) Mostly Markdown, with a fair chunk of reStructuredText and a little bit of Asciidoctor. Oh and one HTML source file, originally an Org-Jekyll experiment.
Okay that’s it.</description>
   <category>post</category> 
   <category>post</category> 
   <category>hugo</category>  <category>raku-lang</category>  <category>csv</category>  <category>site</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Twenty seconds to write a one-liner, and two days to think about it</h2><p><img src="/post/2020/03/../../../attachments/img/2020/cover-2020-03-31.jpg" alt="attachments/img/2020/cover-2020-03-31.jpg"/>
We like quick answers to important questions</p>
<p>How many text formatting languages have I used for my <a href="/card/hugo/">Hugo</a> site? For that matter, how many content files were written in each?</p>
<pre tabindex="0"><code>$ hugo list all | raku -e &#39;bag(lines[1..*].map({ .split(&#34;,&#34;)[0].IO.extension })).say&#39;
Bag(adoc(4), html, md(327), rst(109))
</code></pre><p>Mostly <a href="/card/markdown/">Markdown</a>, with a fair chunk of <a href="/card/restructuredtext/">reStructuredText</a> and a little bit of <a href="/card/asciidoctor/">Asciidoctor</a>. Oh and one HTML source file, originally an <a href="/post/2014/10/blog-writing-in-org-mode/">Org-Jekyll experiment</a>.</p>
<p>Okay that’s it. That’s the post, everyone. Time to go home!</p>
<h2 id="breaking-it-down">Breaking it down</h2>
<p>It helps me to understand the pieces I smash together in my one-liners. Read along if you like, or move on to more interesting topics. I don’t judge.</p>
<h3 id="first-off-why">First off: why?</h3>
<p>The <a href="https://gohugo.io">Hugo</a> static site generator supports multiple <a href="https://gohugo.io/content-management/formats/">content formats</a>. I use a few of them, which complicates my occasional urge to rebuild the whole site with something else.</p>
<p>If I know how my content formats are distributed, it will help me understand how much work I have cut out for me in The Eventual Inevitable Rebuild.</p>
<h3 id="hugo-list"><code>hugo list</code></h3>
<p>Hugo’s <a href="https://gohugo.io/commands/hugo_list">list</a> commands print a <a href="/card/csv/">CSV</a> list of your site’s content files. The content listed depends on which subcommand you use:</p>
<dl>
<dt><code>list all</code></dt>
<dd>Everything! Well, except section indexes.</dd>
<dt><code>list draft</code></dt>
<dd>Content with <code>draft: true</code></dd>
<dt><code>list expired</code></dt>
<dd>Content with <code>expiryDate</code> in the past</dd>
<dt><code>list future</code></dt>
<dd>Content with <code>date</code> in the future</dd>
</dl>
<p>What does that output look like?</p>
<pre tabindex="0"><code>$ hugo list all
path,slug,title,date,expiryDate,publishDate,draft,permalink
content/draft/listing-hugo-content-extensions-with-raku/index.adoc,,Listing Hugo Content Extensions With Raku,2020-03-27T22:36:13-07:00,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,true,https://randomgeekery.org/draft/listing-hugo-content-extensions-with-raku/
content/draft/managing-music-with-beets/index.adoc,,Managing My Music With Beets,2020-03-27T10:31:41-07:00,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,true,https://randomgeekery.org/draft/managing-music-with-beets/
content/post/2020/03/stdu-viewer/index.rst,,STDU Viewer,2020-03-26T23:42:16-07:00,0001-01-01T00:00:00Z,2020-03-26T23:42:16-07:00,false,https://randomgeekery.org/2020/03/26/stdu-viewer/
content/note/2020/03/every-post-has-a-uuid/index.rst,,Every Post Has a UUID,2020-03-21T19:06:00-07:00,0001-01-01T00:00:00Z,2020-03-21T19:06:00-07:00,false,https://randomgeekery.org/note/2020/81/every-post-has-a-uuid/
</code></pre><p>I could feed that to any language with a nice library for handling CSV
files — which is most of them. Heck, I could feed it to Excel!</p>
<p>Now that I think to look, there’s the <a href="https://github.com/secretGeek/awesomecsv">Awesome CSV</a> list of tools and resources.</p>
<p>But no. Today I handed it off to the first tool that came to mind.</p>
<h3 id="raku--e"><code>raku -e</code></h3>
<p>Look, we’ve all been stuck at home for a bit. I need a break from Python. How about <a href="/card/perl/">Perl</a>&rsquo;s sister language, <a href="/card/raku/">Raku</a>?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="nb">bag</span><span class="p">(</span><span class="nb">lines</span><span class="o">[</span><span class="mi">1</span><span class="o">..*].</span><span class="nb">map</span><span class="p">({</span> <span class="o">.</span><span class="nb">split</span><span class="p">(&#34;</span><span class="s2">,</span><span class="p">&#34;)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="kt">IO</span><span class="o">.</span><span class="nb">extension</span> <span class="p">}))</span><span class="o">.</span><span class="nb">say</span>
</span></span></code></pre></div><h4 id="bagsay"><code>bag(…).say</code></h4>
<p><a href="https://docs.raku.org/routine/bag"><code>bag</code></a> uses its arguments to create a <a href="https://docs.raku.org/type/Bag">Bag</a> — basically, a set that gives each member a &ldquo;weight&rdquo; based on integer values. <a href="https://docs.raku.org/type/Mu#method_say"><code>say</code></a> prints the <a href="https://docs.raku.org/routine/gist"><code>gist</code></a> of the Bag, telling me what I need to know. The highest level view of this one-liner is &ldquo;make a Bag and give me a general idea what it looks like.&rdquo;</p>
<h4 id="lines1map--"><code>lines[1..*].map({ … })</code></h4>
<p>Now I need to create that bag from <code>hugo list all</code>. <a href="https://docs.raku.org/type/IO::Handle#routine_lines"><code>lines</code></a> called as
a routine creates a list of lines from <a href="https://docs.raku.org/language/variables#$*ARGFILES"><code>$*ARGFILES</code></a>, which currently holds the piped output from my Hugo invocation. I don’t need the header line, so I use a
<a href="https://docs.raku.org/type/Range">Range</a> to <a href="https://docs.raku.org/language/subscripts#Slices">slice</a> the remaining lines.</p>
<p><a href="https://docs.raku.org/routine/map#class_Any"><code>map</code></a> applies a block to each of those lines, returning a new list to create our Bag. What’s going on in that map?</p>
<h4 id="split0ioextension"><code>.split(&quot;,&quot;)[0].IO.extension</code></h4>
<p>That leading dot? It’s an <a href="https://docs.raku.org/language/contexts#Item_context">item context</a> view of the <a href="https://docs.raku.org/language/variables#The_$__variable">topic variable</a> handed to the block by <code>map</code>. Yes, for folks who don’t feel like clicking: <em>topic variable</em> is Raku’s name for <code>$_</code>, an easily abused blessing of Perl languages.</p>
<p>So the line of comma-delimited values is <a href="https://docs.raku.org/type/Str#routine_split"><code>split</code></a> into values. Each line from Hugo’s CSV gets <code>split</code> into a list of values, but I only care about the first one. The first value is the path to the content file itself.</p>
<p>Coercing that to an <a href="https://docs.raku.org/type/IO::Path">IO::Path</a> object lets me ask for an <a href="https://docs.raku.org/type/IO::Path#method_extension"><code>extension</code></a>.</p>
<p>The block returns that extension, so when <code>map</code> is all done it has a list of file extensions:</p>
<pre tabindex="0"><code>(adoc adoc rst rst md md md rst ...)
</code></pre><p>During initialization, the Bag counts how many times each extension appears in the list. Since the result of that tally is all I care about, I print it out.</p>
<pre tabindex="0"><code>$ hugo list all | raku -e &#39;bag(lines[1..*].map({ .split(&#34;,&#34;)[0].IO.extension })).say&#39;
Bag(adoc(4), html, md(327), rst(109))
</code></pre><h2 id="alternate-versions">Alternate versions</h2>
<p>While I was learning more about my impulsive little invocation, I wondered about other ways to get the same information from Raku.</p>
<h3 id="a-bit-more-perlish">A bit more Perlish</h3>
<p>All those method dots bother you? No problem. We can use them like plain old subroutines too. Course, we have to reach for <a href="https://docs.raku.org/language/variables#$*SPEC"><code>$*SPEC</code></a>. This lower-level <a href="https://docs.raku.org/type/IO::Spec">IO::Spec</a> object understands file extensions on our platform.</p>
<pre tabindex="0"><code>$ hugo list all | raku -e &#39;say bag(map({ $*SPEC.extension(split(&#34;,&#34;, $_)[0]) }, lines[1..*]))&#39;
Bag(adoc(4), html, md(327), rst(109))
</code></pre><h3 id="using-textcsv">Using Text::CSV</h3>
<p>I know what to expect from Hugo’s CSV output, but what if I didn’t? I’d feed the standard input handle <code>$*IN</code> to H. Merijn Brand’s <a href="https://github.com/Tux/CSV">Text::CSV</a> module.</p>
<pre tabindex="0"><code>$ zef install Text::CSV
$ hugo list all | raku -MText::CSV -e \
  &#39;bag(csv(in =&gt; $*IN, headers=&gt;&#34;skip&#34;, fragment=&gt;&#34;col=1&#34;).map({ .IO.extension })).say&#39;
Bag(adoc(4), html, md(327), rst(109))
</code></pre><p>Though if I was being <em>this</em> careful, I’d probably also move away from a one-liner. But that takes us a long ways away from my original goal of getting a quick answer to an idle question.</p>
<p>Well, I satisfied my curiosity and understood a little more Raku. That was fun!</p>
]]></content:encoded>
</item>
</channel>
</rss>
