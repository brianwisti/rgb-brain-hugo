<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>mojoliciousonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/mojolicious/</link>
    <description>
      Recent contentinmojolicious on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Tue, 11 Apr 2017 00:00:00 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/mojolicious/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Making A Mojo Link Checker</title>
  <link>https://randomgeekery.org/post/2017/04/making-a-mojo-link-checker/</link>
  <pubDate>Tue, 11 Apr 2017 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/04/making-a-mojo-link-checker/</guid>
  <description>I wrote a card/Perl script using utility features in Mojolicious to check all of the links in my site.
Nothing lasts forever. Sites get reorganized, move, or disappear. As my own site has gotten older — some of these pages are over fifteen years old — links from old posts stop working. link rot is a fact of life on the Internet. I want to minimize it here.
Instead of manually checking each of the 245 posts on this site, I chose to write some code that identifies the dead end links.</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>site</category>  <category>mojolicious</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p>I wrote a <a href="/card/perl/">card/Perl</a> script using utility features in Mojolicious to check all of the links in my site.</p>
<p>Nothing lasts forever. Sites get reorganized, move, or disappear. As my own site has gotten older — some of these pages are over fifteen years old — links from old posts stop working. <a href="https://en.wikipedia.org/wiki/Link_rot">link rot</a> is a fact of life on the Internet. I want to minimize it here.</p>
<p>Instead of manually checking each of the 245 posts on this site, I chose to write some code that identifies the dead end links. Then I could manually adjust the bad links. Yay! That’s hand-crafted automation there.</p>
<h2 id="use-mojo">use Mojo!</h2>
<p><a href="/card/mojolicious/">card/Mojolicious</a> is a Perl framework for making Web applications. It also happens to provide <a href="http://mojolicious.org/perldoc#REFERENCE">excellent support</a> for a wide range of Web-related programming.</p>
<p>I mentioned Mojolicious here before. I use it as a part of my daily dev toolkit, even though I <em>still</em> haven’t made a real Web app with it.</p>
<h2 id="the-code">The code</h2>
<p>I could just dump the script here and go on with my day, but I feel like typing a lot for some reason. Let’s go through the major chunks of the code.</p>
<h3 id="the-setup">The setup</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">use</span> <span class="mf">5.24.0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">warnings</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">experimental</span> <span class="s">&#39;signatures&#39;</span><span class="p">;</span>
</span></span></code></pre></div><p>Whenever possible, I specify the latest version of Perl (currently <a href="http://perldoc.perl.org/perl5240delta.html">5.24</a>. It enables some features and deprecates others. If nothing else, it reminds me when I last worked on the code. Recent Perl versions automatically enable <a href="http://perldoc.perl.org/strict.html"><code>strict</code></a>, but it’s useful for me to also turn on <a href="http://perldoc.perl.org/warnings.html"><code>warnings</code></a>.</p>
<p>The <a href="https://metacpan.org/pod/experimental"><code>experimental</code></a> CPAN module saves some boiler plate when using Perl features that have not fully stabilized — such as function <a href="http://perldoc.perl.org/feature.html#The-%27signatures%27-feature">signatures</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Mojo::DOM</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Mojo::File</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Mojo::JSON</span> <span class="sx">qw(decode_json)</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Mojo::URL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Mojo::UserAgent</span><span class="p">;</span>
</span></span></code></pre></div><p>Mojolicious provides a remarkable amount of functionality for such a small installation. This is just what I’m explicitly using.</p>
<dl>
<dt><a href="http://mojolicious.org/perldoc/Mojo/DOM">Mojo::DOM</a></dt>
<dd>HTML/XML DOM parser that supports <a href="https://www.w3.org/TR/CSS2/selector.html">CSS Selectors</a></dd>
<dt><a href="http://mojolicious.org/perldoc/Mojo/File">Mojo::File</a></dt>
<dd>for handling filepaths and easy reading / writing files.</dd>
<dt><a href="http://mojolicious.org/perldoc/Mojo/JSON">Mojo::JSON</a></dt>
<dd><code>decode_json</code> lets me turn the <a href="http://gohugo.io/">Hugo</a> <code>config.json</code> file into a Perl structure.</dd>
<dt><a href="http://mojolicious.org/perldoc/Mojo/URL">Mojo::URL</a></dt>
<dd>understands the components of Uniform Resource Locators</dd>
<dt><a href="http://mojolicious.org/perldoc/Mojo/UserAgent">Mojo::UserAgent</a></dt>
<dd>makes HTTP and WebSocket requests (similar to <a href="https://metacpan.org/pod/LWP::UserAgent">LWP::UserAgent</a>, or <a href="http://docs.python-requests.org/en/master/">Requests</a> for Python people)</dd>
</dl>
<h3 id="from-the-top">From the top</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$config_file</span>   <span class="o">=</span> <span class="s">&#34;config.json&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$config</span>        <span class="o">=</span> <span class="n">decode_json</span><span class="p">(</span><span class="nn">Mojo::File</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$config_file</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">slurp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$site</span>          <span class="o">=</span> <span class="nn">Mojo::URL</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$config</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">BaseURL</span><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$root</span>          <span class="o">=</span> <span class="nv">$config</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">publishDir</span><span class="p">}</span> <span class="o">||</span> <span class="s">&#39;public&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$checked_links</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$ua</span>            <span class="o">=</span> <span class="nn">Mojo::UserAgent</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ua</span><span class="o">-&gt;</span><span class="n">max_redirects</span><span class="p">(</span> <span class="mi">5</span> <span class="p">);</span> <span class="c1"># some sites love lots of redirects</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$test_file</span> <span class="o">=</span> <span class="nb">shift</span> <span class="nv">@ARGV</span> <span class="sr">//</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span> <span class="nv">$test_file</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">check_links_in</span><span class="p">(</span> <span class="nv">$test_file</span><span class="p">,</span> <span class="nv">$ua</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$path</span> <span class="o">=</span> <span class="nn">Mojo::File</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="nv">$root</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$files</span> <span class="o">=</span> <span class="nv">$path</span><span class="o">-&gt;</span><span class="nn">list_tree</span><span class="o">-&gt;</span><span class="nb">grep</span><span class="p">(</span> <span class="sx">qr{ \. (?:html|xml )$ }</span><span class="n">x</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nv">$files</span><span class="o">-&gt;</span><span class="nb">each</span><span class="p">(</span> <span class="k">sub</span> <span class="p">{</span> <span class="n">check_links_in</span><span class="p">(</span><span class="nv">$_</span><span class="p">);</span> <span class="p">}</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>This is the important bit: load the config, create a user agent, and check links in one or all of the generated HTML files. I checked the generated HTML files in <code>public</code> because I didn’t feel like messing with <code>hugo server</code> or a Mojolicious mini-app. Scraping a local server could be an option later.</p>
<p>Using Mojolicious for everything was so much fun that I rewrote <code>config.yaml</code> as <code>config.json</code> to allow using <code>Mojo::JSON</code> here. Hugo’s built-in support for different <a href="http://gohugo.io/overview/configuration/">configuration format</a> made that a painless shift. Then Mojo lets me <a href="http://mojolicious.org/perldoc/Mojo/File#slurp"><code>slurp</code></a> the contents of the config file into a single string, which <a href="http://mojolicious.org/perldoc/Mojo/JSON#decode_json"><code>decode_json</code></a> turns into a hash reference.</p>
<p><a href="http://mojolicious.org/perldoc/Mojo/File#list_tree"><code>list_tree</code></a> gives a recursive directory listing of everything under <code>$root</code> as a <a href="http://mojolicious.org/perldoc/Mojo/Collection">Mojo::Collection</a>. Collections provide a tidy toolkit of list handling functionality without requiring me to go back and forth between arrays and array references.
I could find and iterate over all the HTML and XML files in vanilla Perl 5, but I like this better.</p>
<p>After a few runs, I added the ability to specify a single file in <a href="http://perldoc.perl.org/perlvar.html#%40ARGV"><code>@ARGV</code></a>. That way I can figure things out when that one link in that one file causes trouble.</p>
<h3 id="checking-links-in-a-file">Checking links in a file</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">check_links_in</span><span class="p">($filename) {</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$html</span> <span class="o">=</span> <span class="nn">Mojo::File</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="nv">$filename</span> <span class="p">)</span><span class="o">-&gt;</span><span class="n">slurp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$dom</span> <span class="o">=</span> <span class="nn">Mojo::DOM</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="nv">$html</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$links</span> <span class="o">=</span> <span class="nv">$dom</span><span class="o">-&gt;</span><span class="n">find</span><span class="p">(</span> <span class="s">&#39;[href], [src]&#39;</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nv">$links</span><span class="o">-&gt;</span><span class="nb">each</span><span class="p">(</span> <span class="n">sub</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span> <span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="nv">$target</span> <span class="o">=</span> <span class="nv">$link</span><span class="o">-&gt;</span><span class="n">attr</span><span class="p">(</span> <span class="s">&#34;href&#34;</span> <span class="p">)</span> <span class="o">||</span> <span class="nv">$link</span><span class="o">-&gt;</span><span class="n">attr</span><span class="p">(</span> <span class="s">&#34;src&#34;</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Assume status will not change during the same run.</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">if</span> <span class="nb">exists</span> <span class="nv">$checked_links</span><span class="o">-&gt;</span><span class="p">{</span> <span class="nv">$target</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nv">$checked_links</span><span class="o">-&gt;</span><span class="p">{</span> <span class="nv">$target</span> <span class="p">}</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nn">Mojo::URL</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="nv">$target</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Ignore email links</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">if</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">scheme</span> <span class="o">&amp;&amp;</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">scheme</span> <span class="ow">eq</span> <span class="s">&#39;mailto&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nv">$checked_links</span><span class="o">-&gt;</span><span class="p">{</span> <span class="nv">$target</span> <span class="p">}</span> <span class="o">=</span> <span class="n">file_exists_for</span><span class="p">(</span> <span class="nv">$url</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="sr">//</span> <span class="n">external_link_works_for</span><span class="p">(</span> <span class="nv">$url</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="sr">//</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># In this version we only care about invalid links.</span>
</span></span><span class="line"><span class="cl">    <span class="k">unless</span> <span class="p">(</span> <span class="nv">$checked_links</span><span class="o">-&gt;</span><span class="p">{</span> <span class="nv">$target</span> <span class="p">}</span> <span class="p">)</span> <span class="p">{</span> <span class="n">say</span> <span class="n">summary_for</span><span class="p">(</span> <span class="nv">$target</span><span class="p">,</span> <span class="nv">$filename</span> <span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Once again I <code>slurp</code> a file into a string. This time it gets handed off to <code>Mojo::DOM</code> so it can <a href="http://mojolicious.org/perldoc/Mojo/DOM#find"><code>find</code></a> any elements with <code>src</code> or <code>href</code> attributes, and then create a <code>Mojo::URL</code> from the appropriate <a href="http://mojolicious.org/perldoc/Mojo/DOM#attr"><code>attr</code></a>. <code>Mojo::URL</code> does the tedious work of parsing URLs and making components like <a href="http://mojolicious.org/perldoc/Mojo/URL#scheme"><code>scheme</code></a> available.</p>
<p>Leaning on the <code>//</code> defined-or logical shortcut lets me take advantage of the three boolean states of Perl: truthy, falsey, and &ldquo;I dunno.&rdquo; Each URL-testing subroutine can return <code>undef</code> to indicate that it doesn’t know what to do with the URL, and let the next subroutine in line handle it. If nobody knows what to do with it, then that’s a bad link and gets remembered as a falsey value.</p>
<p><a href="http://mojolicious.org/perldoc/Mojo/Collection#each"><code>each</code></a> hands two items to the subroutine it invokes: an item in the collection and what number in the collection that item is (starting from 1). No, I don’t use <code>$n</code>, but I wanted you to see that it’s available. You can also access the item as <code>$_</code> as I did earlier. You can even do your subroutine arguments the old fashioned way with <code>@_</code>.</p>
<h3 id="is-it-an-internal-link">Is it an internal link?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">file_exists_for</span><span class="p">($url) {</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Ignore full urls that aren&#39;t pointed at my site.</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">host</span> <span class="o">&amp;&amp;</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">host</span> <span class="ow">ne</span> <span class="nv">$site</span><span class="o">-&gt;</span><span class="n">host</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">fragment</span> <span class="o">&amp;&amp;</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">path</span> <span class="ow">eq</span> <span class="s">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Points to a URL fragment within itself</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Today I don&#39;t care about those.</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># If I did, I&#39;d remember what file $url came from, load it, and check the DOM.</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$path</span> <span class="o">=</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">path</span>
</span></span><span class="line"><span class="cl">    <span class="ow">or</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="nv">$path</span> <span class="ow">eq</span> <span class="s">&#39;/&#39;</span> <span class="o">||</span> <span class="nv">$path</span><span class="o">-&gt;</span><span class="n">trailing_slash</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$path</span> <span class="o">=</span> <span class="nv">$path</span><span class="o">-&gt;</span><span class="n">merge</span><span class="p">(</span><span class="s">&#34;index.html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$file</span> <span class="o">=</span> <span class="nv">$root</span> <span class="o">.</span> <span class="nv">$path</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="o">-</span><span class="n">f</span> <span class="nv">$file</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>I would check for <code>../</code> abuse if this was a general purpose script, but it’s mostly links I added by hand and checked manually at some point in the last fifteen years. So - assuming past me was not acting maliciously or foolishly, we rule out more likely situations:</p>
<ul>
<li>The URL <a href="http://mojolicious.org/perldoc/Mojo/URL#host"><code>host</code></a> points to something besides my site, which means it can’t be a local file.</li>
<li>The link has a <a href="http://mojolicious.org/perldoc/Mojo/URL#fragment"><code>fragment</code></a> pointing to a named anchor and nothing else. I only have that on <a href="/post/2014/10/blog-writing-in-org-mode/">one page</a> right now, and I don’t feel like complicating this script for a single page.</li>
<li>The <a href="http://mojolicious.org/perldoc/Mojo/URL#path"><code>path</code></a> isn’t set, which at this point means an empty link. That can’t be good.</li>
<li>If the link <em>is</em> to a local file, we check whether it exists.</li>
</ul>
<p><a href="http://mojolicious.org/perldoc/Mojo/Path">Mojo::Path</a> manipulation delights me. Sure, this could be a regular expression substitution with fewer characters of code, but someone else seeing <a href="http://mojolicious.org/perldoc/Mojo/Path#merge"><code>merge</code></a> after a check for a <a href="http://mojolicious.org/perldoc/Mojo/Path#trailing_slash">trailing slash</a> would probably understand that I’m adjusting for the common practice of <code>/thing/</code> being a link to <code>/thing/index.html</code>. They might understand even if they weren’t Perl developers!</p>
<h3 id="is-it-a-working-external-link">Is it a working external link?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">external_link_works_for</span><span class="p">($url, $ua) {</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$response</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Ignore tutorial demo links</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">host</span> <span class="o">&amp;&amp;</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">host</span> <span class="ow">eq</span> <span class="s">&#39;localhost&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Ex: //www.youtube.com/embed/bWqSuBg8AMo</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Produced by some Hugo shortcodes.</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$is_protocol_relative</span> <span class="o">=</span> <span class="o">!</span><span class="nv">$url</span><span class="o">-&gt;</span><span class="n">scheme</span> <span class="o">&amp;&amp;</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">host</span> <span class="o">&amp;&amp;</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">host</span> <span class="ow">ne</span> <span class="nv">$site</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="nv">$is_protocol_relative</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Use my site&#39;s choice of HTTP / HTTPS</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">scheme</span><span class="p">(</span> <span class="nv">$site</span><span class="o">-&gt;</span><span class="n">scheme</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nb">eval</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$ua</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">(</span> <span class="nv">$url</span> <span class="p">)</span><span class="o">-&gt;</span><span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="vg">$@</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">warn</span> <span class="s">&#34;When checking $url: $@&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="n">is_success</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>After some quick checks to ensure I’m not looking at a blog demo link and that I handle <a href="https://www.paulirish.com/2010/the-protocol-relative-url/">protocol-relative URLs</a> correctly, I wrap a simple <a href="http://mojolicious.org/perldoc/Mojo/UserAgent#head"><code>head</code></a> request in an <code>eval</code> block.</p>
<p>I use <a href="https://ochronus.com/http-head-request-good-uses/"><code>HTTP HEAD</code></a> because I only care about whether the link is valid. I don’t want the full content at the link. <code>eval</code> lets me catch timeouts and requests being sent to Web sites which no longer exist. Assuming no errors, this eventually returns whether the <a href="http://mojolicious.org/perldoc/Mojo/Transaction#result"><code>result</code></a> of the <a href="http://mojolicious.org/perldoc/Mojo/Transaction/HTTP">HTTP transaction</a> succeeded with <a href="http://mojolicious.org/perldoc/Mojo/Message/Response#is_success"><code>is_success</code></a>.</p>
<h3 id="summarize-it">Summarize it</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">summary_for</span><span class="p">($target, $filename) {</span>
</span></span><span class="line"><span class="cl">  <span class="nb">die</span> <span class="s">&#34;Didn&#39;t check [$target]?&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">unless</span> <span class="nb">exists</span> <span class="nv">$checked_links</span><span class="o">-&gt;</span><span class="p">{</span> <span class="nv">$target</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$status</span> <span class="o">=</span> <span class="nv">$checked_links</span><span class="o">-&gt;</span><span class="p">{</span> <span class="nv">$target</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">?</span> <span class="s">&#34;+&#34;</span>  <span class="c1"># It worked!</span>
</span></span><span class="line"><span class="cl">    <span class="p">:</span> <span class="s">&#34;-&#34;</span>  <span class="c1"># Something went wrong.</span>
</span></span><span class="line"><span class="cl">    <span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="s">&#34;$status $filename $target&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Today I only looked for bad links, but it can be useful to know the status of <em>all</em> links in my site. I used it a few times during development. May as well leave that bit of logic in.</p>
<h2 id="whats-that-do">What’s That Do?</h2>
<pre tabindex="0"><code>$ ./scripts/link-checker &gt; links.txt
</code></pre><p>A couple hundred lines like this, basically.</p>
<pre tabindex="0"><code>When checking http://coolnamehere.com: Premature connection close at scripts/check-links.pl line 53.
- public/categories/blogspot/index.html http://coolnamehere.com
- public/categories/blogspot/index.html http://blogspot.com
When checking http://vim.org/: Can&#39;t connect: Name or service not known at scripts/check-links.pl line 53.
- public/categories/blogspot/index.html http://vim.org/
When checking http://jruby.codehaus.org: Connect timeout at scripts/check-links.pl line 53.
- public/categories/blogspot/index.html http://jruby.codehaus.org
- public/categories/blogspot/index.html http://devzone.zend.com/article/2262-Zend-Framework-1.0.0-production-release
When checking http://jruby.codehaus.org/: Connect timeout at scripts/check-links.pl line 53.
- public/categories/coolnamehere/index.html http://jruby.codehaus.org/
</code></pre><p>Goodness those are embarrassing.</p>
<p>Okay I’m gonna go fix this.</p>
<p>Some links just won’t work with this code. I may revisit this later, but I got what I need. All links should at least work in a browser for now.</p>
<p>An added bonus that I didn’t expect: this code also ran on Windows 10 with no  changes needed.</p>
<h2 id="more-ideas">More Ideas</h2>
<p>Improvements that I thought of while putting this together, which I may eventually try out.</p>
<ul>
<li>Be a good bot citizen by paying attention to <a href="http://www.robotstxt.org/robotstxt.html"><code>robots.txt</code></a>. I tried that in an early version of the script, but hardly any of the sites provided one. I’ll ponder and try not to run the script too often for now.</li>
<li>Wrap things up in a <a href="http://mojolicious.org/perldoc/Mojo/Base">Mojo::Base</a> class for organization.</li>
<li>Run an instance and scrape that live - see if it makes a difference!</li>
<li>Use non-blocking requests, since <a href="http://mojolicious.org/perldoc/Mojo/UserAgent">Mojo::UserAgent</a> supports them.</li>
<li>Cache results to disk, since working links tend to stay that way for <em>at least</em> a few days.</li>
<li>Find out why some URLs didn’t work. Was it a <code>robots.txt</code> thing? A weird redirect? They worked in the browser, after all.</li>
</ul>
<p>Honestly the script does what I need it to, and I might never implement these other ideas.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: replyrc And Mojo</title>
  <link>https://randomgeekery.org/post/2014/08/replyrc-and-mojo/</link>
  <pubDate>Tue, 19 Aug 2014 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2014/08/replyrc-and-mojo/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;https://randomgeekery.org/post/2014/08/../../../attachments/img/2014/cover-2014-08-19.png&#34; alt=&#34;attachments/img/2014/cover-2014-08-19.png&#34;/&gt;&lt;/p&gt;
&lt;p&gt;It has been a few days since I &lt;a href=&#34;https://randomgeekery.org/post/2014/08/repl-in-perl-with-reply/&#34;&gt;started playing&lt;/a&gt; with &lt;a href=&#34;https://metacpan.org/pod/Reply&#34;&gt;Reply&lt;/a&gt;, and I still enjoy it. Command history features from the &lt;a href=&#34;https://metacpan.org/pod/Reply::Plugin::ReadLine&#34;&gt;ReadLine plugin&lt;/a&gt; became available once I installed &lt;a href=&#34;http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html&#34;&gt;GNU ReadLine&lt;/a&gt; and &lt;a href=&#34;https://metacpan.org/pod/Term::ReadLine::Gnu&#34;&gt;Term::ReadLine::Gnu&lt;/a&gt;.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>reply</category>  <category>mojolicious</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>Customizing Perl Reply and using -Mojo</h2><p><img src="/post/2014/08/../../../attachments/img/2014/cover-2014-08-19.png" alt="attachments/img/2014/cover-2014-08-19.png"/></p>
<p>It has been a few days since I <a href="/post/2014/08/repl-in-perl-with-reply/">started playing</a> with <a href="https://metacpan.org/pod/Reply">Reply</a>, and I still enjoy it. Command history features from the <a href="https://metacpan.org/pod/Reply::Plugin::ReadLine">ReadLine plugin</a> became available once I installed <a href="http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html">GNU ReadLine</a> and <a href="https://metacpan.org/pod/Term::ReadLine::Gnu">Term::ReadLine::Gnu</a>.</p>
<p>There are still customizations that I would like to make. For example, I write most of my personal code using <a href="/card/perl/">card/Perl</a> 5.20&rsquo;s experimental <a href="http://perldoc.perl.org/perldelta.html#Experimental-Subroutine-signatures">subroutine signature</a> and <a href="http://perldoc.perl.org/perldelta.html#Experimental-Postfix-Dereferencing">postderef</a> features.</p>
<h2 id="use-shiny-perl-520-features-automatically">Use Shiny Perl 5.20 Features Automatically</h2>
<p>A default <code>$HOME/.replyrc</code> is created the first time you run Reply - unless you already have one, of course. It includes a selection of plugins that will be loaded and a collection of <code>script_line</code> entries that are evaluated automatically for any new Reply session. I fiddled with mine so that I had a Perl with syntactical sugar in place.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="na">script_line1</span> <span class="o">=</span> <span class="s">use 5.20.0</span>
</span></span><span class="line"><span class="cl"><span class="na">script_line2</span> <span class="o">=</span> <span class="s">use warnings</span>
</span></span><span class="line"><span class="cl"><span class="na">script_line3</span> <span class="o">=</span> <span class="s">use feature qw(signatures postderef)</span>
</span></span><span class="line"><span class="cl"><span class="na">script_line4</span> <span class="o">=</span> <span class="s">no warnings &#39;experimental&#39;</span>
</span></span></code></pre></div><p>Each line gets its own numbered <code>script_line</code> entry because of the INI format and the way that input is parsed by Reply.</p>
<p>With this base level of behavior defined, I can run <code>reply</code> and rewrite my <code>greet</code> subroutine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">0&gt; sub greet ($name) { &#34;Hello $name!&#34; }
</span></span><span class="line"><span class="cl">1&gt; my $me = &#34;Brian&#34;
</span></span><span class="line"><span class="cl">$res[0] = &#39;Brian&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">2&gt; greet $me
</span></span><span class="line"><span class="cl">$res[1] = &#39;Hello Brian!&#39;
</span></span></code></pre></div><p>That&rsquo;s better.</p>
<h2 id="enabling-the-editor">Enabling The Editor</h2>
<p>You need <a href="https://metacpan.org/pod/Proc::InvokeEditor">Proc::InvokeEditor</a> in order to activate the <a href="https://metacpan.org/pod/Reply::Plugin::Editor">Editor plugin</a>. I suppose that makes sense. Proc::InvokeEditor is a module that makes it easy to launch your default text editor on behalf of the application, sending the editor buffer back to your application as user input.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> cpanm Proc::InvokeEditor
</span></span></code></pre></div><p>Add the Editor plugin entry to your <code>.replyrc</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="k">[Editor]</span>
</span></span></code></pre></div><p>And just like that, here is a new <code>#e</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">0&gt; #e
</span></span></code></pre></div><p>It can probably work with <a href="/post/2014/06/start-using-emacsclient/">EmacsClient</a>, but I have been lazy lately and fallen back to Vim as my <code>$EDITOR</code> default.</p>
<h2 id="specifying-a-module-at-start">Specifying a Module at Start</h2>
<p>I have been exploring <a href="/card/mojolicious/">card/Mojolicious</a>, which is a surprisingly full-featured framework considering its small size. The <a href="http://mojolicio.us/perldoc/ojo">ojo</a> library is a Mojolicious command line tool focused on making your one-liners even more useful. Since Reply is sort of an extended one-liner environment - okay, you can call it a &ldquo;shell&rdquo; - ojo and Reply can go together perfectly.</p>
<p>There is no need to add ojo to my <code>.replyrc</code>, because I will not be needing its functionality every single time I load Reply. Instead I will just tell Reply to load the library when starting those particular sessions.</p>
<p>Let&rsquo;s keep with the Questhub.io example from the earlier post. I start <code>reply</code> with the <code>-M</code> flag to load a specific module on startup.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ reply -Mojo
</span></span><span class="line"><span class="cl">0&gt; sort map { $_-&gt;{name} } j( g( &#39;https://questhub.io/api/realm&#39; )-&gt;body )-&gt;@*
</span></span><span class="line"><span class="cl">$res[0] = [
</span></span><span class="line"><span class="cl">  &#39;Big Data&#39;,
</span></span><span class="line"><span class="cl">  &#39;Chaos&#39;,
</span></span><span class="line"><span class="cl">  &#39;Code&#39;,
</span></span><span class="line"><span class="cl">  &#39;DC Metro Region&#39;,
</span></span><span class="line"><span class="cl">  &#39;Fitness&#39;,
</span></span><span class="line"><span class="cl">  &#39;Haskell&#39;,
</span></span><span class="line"><span class="cl">  &#39;Japanese&#39;,
</span></span><span class="line"><span class="cl">  &#39;Lisp&#39;,
</span></span><span class="line"><span class="cl">  &#39;MOOCs&#39;,
</span></span><span class="line"><span class="cl">  &#39;Meta&#39;,
</span></span><span class="line"><span class="cl">  &#39;Node.js&#39;,
</span></span><span class="line"><span class="cl">  &#39;Perl&#39;,
</span></span><span class="line"><span class="cl">  &#39;Portland&#39;,
</span></span><span class="line"><span class="cl">  &#39;Python (Ru)&#39;,
</span></span><span class="line"><span class="cl">  &#39;Read&#39;,
</span></span><span class="line"><span class="cl">  &#39;Testing&#39;,
</span></span><span class="line"><span class="cl">  &#39;Yoga + Meditation&#39;
</span></span><span class="line"><span class="cl">]
</span></span></code></pre></div><p>I know. This is confusing if you are unfamiliar with ojo and the experimental Perl 5.20 postderef feature. We can look at it in smaller pieces.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="c1"># Using ojo::g</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="p">(</span> <span class="s">&#39;https://questhub.io/api/realm&#39;</span> <span class="p">)</span><span class="o">-&gt;</span><span class="n">body</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># is roughly the same as this</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ua</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span> <span class="s">&#39;http://questhub.io/api/realm&#39;</span> <span class="p">)</span><span class="o">-&gt;</span><span class="nn">res</span><span class="o">-&gt;</span><span class="n">body</span>
</span></span></code></pre></div><p><a href="http://mojolicio.us/perldoc/ojo#g"><code>g</code></a> is a shortcut for the <code>get</code> method of <a href="http://mojolicio.us/perldoc/Mojo/UserAgent">Mojo::UserAgent</a>. There are shortcuts for numerous HTTP verbs in ojo.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="c1"># using ojo::j and ojo::g</span>
</span></span><span class="line"><span class="cl"><span class="n">j</span><span class="p">(</span> <span class="n">g</span><span class="p">(</span> <span class="s">&#39;https://questhub.io/api/realm&#39;</span> <span class="p">)</span><span class="o">-&gt;</span><span class="n">body</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># is rougly the same as this</span>
</span></span><span class="line"><span class="cl"><span class="n">decode_json</span><span class="p">(</span> <span class="nv">$ua</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span> <span class="s">&#39;https://questhub.io/api/realm&#39;</span> <span class="p">)</span><span class="o">-&gt;</span><span class="nn">res</span><span class="o">-&gt;</span><span class="n">body</span> <span class="p">)</span>
</span></span></code></pre></div><p><a href="http://mojolicio.us/perldoc/ojo#j"><code>j</code></a> is a convenience function from <a href="http://mojolicio.us/perldoc/Mojo/JSON#j">Mojo::JSON</a> for encoding and decoding JSON. My experience so far has been that it does what I mean when I use it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="c1"># using j, g, and postderef</span>
</span></span><span class="line"><span class="cl"><span class="n">j</span><span class="p">(</span> <span class="n">g</span><span class="p">(</span> <span class="s">&#39;https://questhub.io/api/realm&#39;</span> <span class="p">)</span><span class="o">-&gt;</span><span class="n">body</span> <span class="p">)</span><span class="o">-&gt;</span><span class="nv">@</span><span class="err">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">#</span> <span class="nv">is</span> <span class="n">rougly</span> <span class="n">the</span> <span class="n">same</span> <span class="n">as</span> <span class="n">this</span>
</span></span><span class="line"><span class="cl"><span class="nv">@</span><span class="p">{</span> <span class="n">decode_json</span><span class="p">(</span> <span class="nv">$ua</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span> <span class="s">&#39;https://questhub.io/api/realm&#39;</span> <span class="p">)</span><span class="o">-&gt;</span><span class="nn">res</span><span class="o">-&gt;</span><span class="n">body</span><span class="p">)</span> <span class="p">}</span>
</span></span></code></pre></div><p><code>$ref-&gt;@*</code> is an experimental new syntax for accessing the contents of an array reference. It is equivalent to <code>@{ $ref }</code> or <code>@$ref</code>. The postderef syntax is a little easier for me to read, but your experience may be different.</p>
<h2 id="all-done">All Done</h2>
<p>That is enough for now. With the ReadLine plugin and Editor plugin enabled, a nice 2014-ish Perl setup in my <code>.replyrc</code>, and ojo available when I want it, Reply is downright useful for me.</p>]]></content:encoded>
</item>
<item>
  <title>Post: REPL In Perl With Reply</title>
  <link>https://randomgeekery.org/post/2014/08/repl-in-perl-with-reply/</link>
  <pubDate>Thu, 14 Aug 2014 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2014/08/repl-in-perl-with-reply/</guid>
  <description>Time for a quick post about Reply, a new Perl toy from Jesse Luers. There will not be much for me to say, because I have only been playing with it for about twenty minutes.
[!NOTE] This post used Questhub.io for a subject. Unfortunately, that site is no longer with us.
Reply is a REPL for Perl. It is an interactive shell that simplifies quick experimentation with language features. It is extensible via a plugin system that I may look at later if I have more time.</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>reply</category>  <category>mojolicious</category>  <category>tools</category> 
  <content:encoded><![CDATA[<p><img src="/post/2014/08/../../../attachments/img/2014/cover-2014-08-14.png" alt="attachments/img/2014/cover-2014-08-14.png"/></p>
<p>Time for a quick post about <a href="https://metacpan.org/release/Reply">Reply</a>, a new <a href="/card/perl/">Perl</a> toy from <a href="http://tozt.net/">Jesse Luers</a>. There will not be much for me to say, because I have only been playing with it for about twenty minutes.</p>
<blockquote>
<p>[!NOTE]
This post used Questhub.io for a subject. Unfortunately, that site is no longer with us.</p>
</blockquote>
<p>Reply is a <a href="http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a> for Perl. It is an interactive shell that simplifies quick experimentation with language features. It is extensible via a <a href="https://metacpan.org/source/DOY/Reply-0.35/lib/Reply/Plugin.pm">plugin</a> system that I may look at later if I have more time.</p>
<h2 id="installation">Installation</h2>
<p>I use <a href="http://perlbrew.pl">perlbrew</a> and <a href="https://github.com/miyagawa/cpanminus">cpanm</a>, so installation was easy.</p>
<pre tabindex="0"><code>$ cpanm Reply
</code></pre><p>Oh. It is worth pointing out that if you do not have <a href="http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html">GNU Readline</a> or a similar library installed, you will not get command-line editing or history in Reply.</p>
<h2 id="hello-reply">Hello Reply</h2>
<p>The <code>reply</code> command starts a new session. Once the session is going, it’s pretty much just Perl.</p>
<pre tabindex="0"><code>$ reply
0&gt; &#34;Hello World&#34;
$res[0] = &#39;Hello World&#39;

1&gt; my $name = &#34;Brian&#34;
$res[1] = &#39;Brian&#39;

2&gt; &#34;Hello $name&#34;
$res[2] = &#39;Hello Brian&#39;
</code></pre><p>Getting user input via <code>STDIN</code> works pretty much how you would expect.</p>
<pre tabindex="0"><code>3&gt; chomp( $name = &lt;STDIN&gt; )
Brian
$res[3] = 1

4&gt; $name
$res[4] = &#39;Brian&#39;
</code></pre><p>Defining subroutines is no big deal.</p>
<pre tabindex="0"><code>5&gt; sub greeting { &#34;Hello $_[0]&#34; }
6&gt; greeting $name
$res[5] = &#39;Hello Brian&#39;
</code></pre><p>And <code>exit</code> will quit Reply. It all seems straightforward.</p>
<pre tabindex="0"><code>7&gt; exit
</code></pre><h2 id="a-marginally-more-complex-example">A Marginally More Complex Example</h2>
<p>I have been working on a little experiment: fetching Questhub.io JSON with <a href="http://mojolicio.us/perldoc/Mojo/UserAgent">Mojo::UserAgent</a> and <a href="http://mojolicio.us/perldoc/Mojo/JSON">Mojo::JSON</a>. I decided to see if I could try some of that experiment in Reply.</p>
<pre tabindex="0"><code>0&gt; use Mojo::UserAgent
1&gt; use Mojo::JSON &#39;decode_json&#39;
2&gt; my $ua = Mojo::UserAgent-&gt;new
$res[0] = bless( {}, &#39;Mojo::UserAgent&#39; )

3&gt; sort map { $_-&gt;{name} } @{ decode_json( $ua-&gt;get( &#39;https://questhub.io/api/realm&#39; )-&gt;res-&gt;body ) }
$res[1] = [
  &#39;Big Data&#39;,
  &#39;Chaos&#39;,
  &#39;Code&#39;,
  &#39;DC Metro Region&#39;,
  &#39;Fitness&#39;,
  &#39;Haskell&#39;,
  &#39;Japanese&#39;,
  &#39;Lisp&#39;,
  &#39;MOOCs&#39;,
  &#39;Meta&#39;,
  &#39;Node.js&#39;,
  &#39;Perl&#39;,
  &#39;Portland&#39;,
  &#39;Python (Ru)&#39;,
  &#39;Read&#39;,
  &#39;Testing&#39;,
  &#39;Yoga + Meditation&#39;
]
</code></pre><p>Yes, I can.</p>
<h2 id="what-do-i-think">What Do I Think?</h2>
<p>I like Reply overall. I am not used to thinking in REPL terms when it comes to Perl, and need to spend more than twenty minutes with it. I like Reply enough that I do expect to spend more time with it.</p>
<p>I noticed that my coding style was more terse within the confines of Reply. Maybe I should install GNU Readline support on my machine or enable the <a href="https://metacpan.org/pod/Reply::Plugin::Editor">Editor plugin</a>.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Trusty Mongo Mojo Box</title>
  <link>https://randomgeekery.org/post/2014/08/trusty-mongo-mojo-box/</link>
  <pubDate>Tue, 05 Aug 2014 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2014/08/trusty-mongo-mojo-box/</guid>
  <description>[!NOTE] tldr Install Vagrant &amp; VirtualBox.
mkdir my-box cd my-box vagrant init brianwisti/trusty-mongo-mojo Be aware that this is my first packaged Vagrant box, and it is probably not great.
Motivation I want to explore Mojolicious framework for Perl along with MongoDB. Both of these are available for each operating system I use. Unfortunately, each operating system is a unique environment, with its own quirks. I usually work my way around these quirks, but I also want to explore a number of virtualization tools that have become popular.</description>
   <category>post</category> 
   <category>post</category> 
   <category>virtualization</category>  <category>vagrant</category>  <category>perl</category>  <category>mongodb</category>  <category>mojolicious</category>  <category>tools</category> 
  <content:encoded><![CDATA[<blockquote>
<p>[!NOTE] <a href="/card/tldr/">tldr</a>
Install Vagrant &amp; VirtualBox.</p>
<pre tabindex="0"><code>mkdir my-box
cd my-box
vagrant init brianwisti/trusty-mongo-mojo
</code></pre><p>Be aware that this is my first packaged Vagrant box, and it is probably not great.</p>
</blockquote>
<h2 id="motivation">Motivation</h2>
<p>I want to explore <a href="http://mojolicio.us/">Mojolicious</a> framework for <a href="/card/perl/">Perl</a> along with <a href="https://www.mongodb.org/">MongoDB</a>. Both of these are available for each operating system I use. Unfortunately, each operating system is a unique environment, with its own quirks. I usually work my way around these quirks, but I also want to explore a number of <a href="http://en.wikipedia.org/wiki/Virtualization">virtualization</a> tools that have become popular. This is an opportunity to learn how to set up a <a href="http://vagrantup.com">Vagrant</a> box for my Mojolicious / MongoDB explorations.</p>
<h2 id="creating-the-box">Creating The Box</h2>
<p>A <a href="http://en.wikipedia.org/wiki/Virtual_machine">virtual machine</a> is basically a simulated operating system running on whatever your host machine is: Windows, Linux, OS X - whatever. That virtual machine lives its life as if it has its own environment. It is useful for application development, testing, application hosting, and security research. You can have a library of guest virtual machines, each dedicated to a particular task.</p>
<p>I have now exhausted my knowledge of virtualization, so let us move on.</p>
<p>Vagrant provides a single configuration and command set for managing
aspects of multiple virtual machine managers. You can use Vagrant to
create identical virtual machine &ldquo;boxes&rdquo; on host operating systems.
These definitions — and the boxes themselves — can be shared with
others.</p>
<p>Although multiple virtual machine managers are supported by Vagrant, <a href="https://www.virtualbox.org/">VirtualBox</a> is widely used and has the best support.</p>
<p>My Vagrant box needs an operating system. This is my first time through, so I will keep it simple: <a href="http://ubuntu.com">Ubuntu</a> 14.04. I figure that I can find plenty of resources online if I get stuck.</p>
<p>Go to <a href="https://vagrantcloud.com/">Vagrant Cloud</a> for packaged Vagrant boxes with your favorite distribution and virtual machine provider. Vagrant Cloud provides a social network approach to shared boxes, allowing you to find and favorite useful options or even sharing your own. There is an Ubuntu account on Vagrant Cloud with a <a href="https://vagrantcloud.com/ubuntu/trusty64">trusty64</a> box, presenting a 14.04 64 bit release that can be used in VirtualBox.</p>
<p>The <code>vagrant init</code> command initializes a new Vagrant box. I will
reference trusty64 to give this box a starting point.</p>
<pre tabindex="0"><code>$ mkdir mongo-mojo
$ cd mongo-mojo
$ vagrant init ubuntu/trusty64
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
</code></pre><p>I could start the box up now and have a more or less blank starting point. Instead I will provision it so that it has the packages and tools needed for me to start development quickly. My goal is to get the latest releases of MongoDB, Perl 5, Mojolicious, and <a href="https://metacpan.org/pod/Mango">Mango</a> — a pure Perl MongoDB driver written by the same developer who created Mojolicious.</p>
<p>Vagrant <a href="http://docs.vagrantup.com/v2/provisioning/index.html">provisioning</a> can be done via several approaches, but I go for the short and sweet method of writing a <a href="http://docs.vagrantup.com/v2/provisioning/shell.html">shell script</a>.</p>
<p>I am going to install MongoDB via the <a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/">provided Ubuntu packages</a>, so that I do not have to worry about startup scripts and all that. I will also install <code>build-essential</code> so that I can build <a href="http://perlbrew.pl/">Perlbrew</a>.</p>
<p><strong><code>bootstrap/system.sh</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Install MongoDB</span>
</span></span><span class="line"><span class="cl">apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> tee /etc/apt/sources.list.d/mongodb.list
</span></span><span class="line"><span class="cl">apt-get -q update
</span></span><span class="line"><span class="cl">apt-get -q -y install mongodb-org
</span></span><span class="line"><span class="cl">service mongod start
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Install development dependencies</span>
</span></span><span class="line"><span class="cl">apt-get -q -y install build-essential
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Set up vagrant user environment</span>
</span></span><span class="line"><span class="cl">su -c <span class="s2">&#34;source /vagrant/bootstrap/user.sh&#34;</span> vagrant
</span></span></code></pre></div><p><code>system.sh</code> invokes <code>user.sh</code> as the default vagrant user. <code>user.sh</code> contains the instructions to install Perlbrew and the latest <a href="http://perl.org">Perl</a>. Once that is out of the way, <a href="https://metacpan.org/pod/cpanm">cpanm</a> will install Mojolicious and Mango.</p>
<p><strong><code>bootstrap/user.sh</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Install perlbrew</span>
</span></span><span class="line"><span class="cl">curl -L http://install.perlbrew.pl <span class="p">|</span> bash
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;source ~/perl5/perlbrew/etc/bashrc&#39;</span> &gt;&gt; <span class="nv">$HOME</span>/.profile
</span></span><span class="line"><span class="cl"><span class="nb">source</span> ~/perl5/perlbrew/etc/bashrc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Install local Perl and app libs</span>
</span></span><span class="line"><span class="cl">perlbrew install perl-5.20.0
</span></span><span class="line"><span class="cl">perlbrew switch perl-5.20.0
</span></span><span class="line"><span class="cl">perlbrew install-cpanm
</span></span><span class="line"><span class="cl">cpanm Mojolicious
</span></span><span class="line"><span class="cl">cpanm Mango
</span></span></code></pre></div><p>My Vagrantfile varies only a little from the default. One thing to notice is that I have set up port forwarding so I can view running Mojolicious applications from a browser in the host system.</p>
<p><strong><code>Vagrantfile</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&#34;2&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Use Ubuntu 14.04 64 bit</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&#34;ubuntu/trusty64&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Install system requirements</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&#34;shell&#34;</span><span class="p">,</span> <span class="ss">path</span><span class="p">:</span> <span class="s2">&#34;bootstrap/system.sh&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Configure guest services to be accessible on host</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&#34;forwarded_port&#34;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">3000</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>Now just run <code>vagrant up</code> and wait.</p>
<pre tabindex="0"><code>$ vagrant up
</code></pre><p>I end up waiting quite a while.</p>
<p>Okay, okay. I admit that it took me a couple of tries to get those shell scripts working right. After each correction, <code>vagrant provision</code> reran the provisioning stage of <code>vagrant up</code>.</p>
<p>Eventually it finishes.</p>
<h2 id="testing-the-box">Testing the Box</h2>
<p>I will not even pretend I know what I am doing here. The whole point of this exercise is to learn Mojolicious, MongoDB, and Mango. Oh yeah, and Vagrant. I just copy the sample application from the <a href="https://github.com/kraih/mango">Mango Github README</a>.</p>
<p><strong><code>app.pl</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Mojolicious::Lite</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Mango</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Mango::BSON</span> <span class="s">&#39;:bson&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$uri</span> <span class="o">=</span> <span class="s">&#39;mongodb://localhost:27017/test&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">helper</span> <span class="n">mango</span> <span class="o">=&gt;</span> <span class="k">sub</span> <span class="p">{</span> <span class="n">state</span> <span class="nv">$mango</span> <span class="o">=</span> <span class="nn">Mango</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$uri</span><span class="p">)</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Store and retrieve information non-blocking</span>
</span></span><span class="line"><span class="cl"><span class="n">get</span> <span class="s">&#39;/&#39;</span> <span class="o">=&gt;</span> <span class="k">sub</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$c</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$collection</span> <span class="o">=</span> <span class="nv">$c</span><span class="o">-&gt;</span><span class="nn">mango</span><span class="o">-&gt;</span><span class="nn">db</span><span class="o">-&gt;</span><span class="n">collection</span><span class="p">(</span><span class="s">&#39;visitors&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$ip</span>         <span class="o">=</span> <span class="nv">$c</span><span class="o">-&gt;</span><span class="nn">tx</span><span class="o">-&gt;</span><span class="n">remote_address</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Store information about current visitor</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$collection</span><span class="o">-&gt;</span><span class="n">insert</span><span class="p">({</span><span class="n">when</span> <span class="o">=&gt;</span> <span class="n">bson_time</span><span class="p">,</span> <span class="n">from</span> <span class="o">=&gt;</span> <span class="nv">$ip</span><span class="p">}</span> <span class="o">=&gt;</span> <span class="k">sub</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="p">(</span><span class="nv">$collection</span><span class="p">,</span> <span class="nv">$err</span><span class="p">,</span> <span class="nv">$oid</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">render_exception</span><span class="p">(</span><span class="nv">$err</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$err</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Retrieve information about previous visitors</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$collection</span><span class="o">-&gt;</span><span class="nn">find</span><span class="o">-&gt;</span><span class="nb">sort</span><span class="p">({</span><span class="n">when</span> <span class="o">=&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">})</span><span class="o">-&gt;</span><span class="n">fields</span><span class="p">({</span><span class="n">_id</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">})</span><span class="o">-&gt;</span><span class="n">all</span><span class="p">(</span><span class="k">sub</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">my</span> <span class="p">(</span><span class="nv">$collection</span><span class="p">,</span> <span class="nv">$err</span><span class="p">,</span> <span class="nv">$docs</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">render_exception</span><span class="p">(</span><span class="nv">$err</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$err</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># And show it to current visitor</span>
</span></span><span class="line"><span class="cl">      <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">render</span><span class="p">(</span><span class="n">json</span> <span class="o">=&gt;</span> <span class="nv">$docs</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nn">app</span><span class="o">-&gt;</span><span class="n">start</span><span class="p">;</span>
</span></span></code></pre></div><p>I would like to configure my editor to invoke needed commands through Vagrant. Perhaps later. For now, SSH will do.</p>
<pre tabindex="0"><code>$ vagrant ssh
$ cd /vagrant
$ morbo app.pl
</code></pre><p>Back in my browser, I hit <code>http://localhost:3000</code> a couple times and get:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;from&#34;</span><span class="p">:</span> <span class="s2">&#34;10.0.2.2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;when&#34;</span><span class="p">:</span> <span class="mi">1407276553541</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;from&#34;</span><span class="p">:</span> <span class="s2">&#34;10.0.2.2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;when&#34;</span><span class="p">:</span> <span class="mi">1407276551337</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>Well how about that? Everything works!</p>
<h2 id="packaging">Packaging</h2>
<p>Installing everything took a <em>long</em> time. I do not want to wait for the full provisioning process every time I create a new box. Can I take a snapshot of this box and use it for other projects?</p>
<p>Of course I can. The Vagrant docs provide some <a href="http://docs.vagrantup.com/v2/boxes/base.html">guidelines</a> for creating a new box for packaging.</p>
<blockquote>
<p>[!WARNING]
There is a warning in the packaging documentation that looks serious.</p>
<blockquote>
<p><strong>Advanced topic!</strong> Creating a base box can be a time consuming and tedious process, and is not recommended for new Vagrant users. If you’re just getting started with Vagrant, we recommend trying to find existing base boxes to use first.</p>
</blockquote>
<p>Blah, blah, blah. If I listened to every warning, I wouldn’t know what my hair smells like when it’s on fire. <em>You</em> may want to be more careful,  though.</p>
</blockquote>
<p>The Vagrant <a href="http://docs.vagrantup.com/v2/cli/package.html">package command</a> takes your virtual machine and wraps it up into a single box file that you can reuse or share with others. Maybe I can just package my trusty64-derived box.</p>
<pre tabindex="0"><code>$ vagrant package
</code></pre><p>Apparently yes. The resulting box is about 750MB, which seems large.</p>
<p><a href="http://williamwalker.me/">William Walker</a> wrote a post about <a href="http://williamwalker.me/blog/creating-a-custom-vagrant-box.html">Creating a Custom Vagrant Box</a>, with many useful instructions. I am ignoring most of those useful instructions right now, though I will come back to them later. What caught my eye was his suggestion for reducing the size of the box. You can use <code>dd</code> to clear out some space from inside the box.</p>
<pre tabindex="0"><code>$ vagrant ssh
$ sudo dd if=/dev/zero of=/EMPTY bs=1M
$ sudo rm -f /EMPTY
$ sudo shutdown -h now
</code></pre><p>I rebuild my package. That brings it down to 649MB - still large, but better than 750. I will come back later when I have the time and see if I can cut it down a little more.</p>
<pre tabindex="0"><code>$ vagrant add test-trusty-mongo-mojo package.box
$ cd ..
$ mkdir test-tmm
$ cd test-tmm
$ vagrant init test-trust-mongo-mojo
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
</code></pre><p>I test it with the same Mojolicious application I used above and — hot dog — it works.</p>
<h2 id="sharing">Sharing</h2>
<p>Now is the part where I jump straight off the cliff of rational thinking and share every horrible mistake I made with you and anyone else who wants it.</p>
<p>Should you use MongoDB in production? I have no idea, but I bet that it’s a really bad idea to use my <a href="https://vagrantcloud.com/brianwisti/trusty-mongo-mojo">trusty-mongo-mojo box</a> in production. Still — could be interesting to play with.</p>
<pre tabindex="0"><code>$ vagrant init brianwisti/trusty-mongo-mojo
</code></pre><p>Have fun.</p>
<h2 id="was-it-worth-it">Was It Worth It?</h2>
<p>That’s a good question. It was great as a learning experience. I enjoyed learning more about <a href="http://vagrantup.com">Vagrant</a>. I don’t know yet whether it was worth my time to create this bundle. Mojolicious and MongoDB are already fairly easy to install on whatever platform. We’ll see. I do know that I’d like to revisit this package, clean it up, and maybe follow up with a similar package for <a href="http://perldancer.org/">Dancer</a>. It’s just plain <em>fun</em> to make these packages.</p>
<h2 id="what-now">What Now?</h2>
<p>All that’s left now is to learn all the things. The online <a href="http://perldoc.perl.org/">Perl documentation</a> is current with Perl 5.20. <a href="http://mojolicio.us/perldoc/Mojolicious/Lite">Mojolicious::Lite</a> is as good a place as any to start with learning Mojolicious. There’s a <a href="http://docs.mongodb.org/manual/">MongoDB manual</a> to peruse. Mango does not yet have the polished guides that Mojolicious does, but browsing the <a href="https://metacpan.org/release/Mango">Mango MetaCPAN page</a> will get me a ways.</p>
<p>Oh yeah. When I’m done for the day, I’ll exit my vagrant session and suspend the virtual machine.</p>
<pre tabindex="0"><code>$ vagrant exit
$ vagrant suspend
</code></pre>]]></content:encoded>
</item>
</channel>
</rss>
