<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>dwimonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/dwim/</link>
    <description>
      Recent contentindwim on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Fri, 27 Dec 2019 00:00:00 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/tags/dwim/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: DWIM is consistent</title>
  <link>https://randomgeekery.org/post/2019/12/dwim-is-consistent/</link>
  <pubDate>Fri, 27 Dec 2019 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/12/dwim-is-consistent/</guid>
  <description>Moshe Zadka has been writing a mostly excellent exploration of the Zen of Python for Opensource.com. Not sure I approve of this take on guessing, from The importance of consistency in your Python code:
What should the result of 1 &#43; &#34;1&#34; be? Both &#34;11&#34; and 2 would be valid guesses. This expression is ambiguous: there is no single thing it can do that would not be a surprise to at least some people.</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>python</category>  <category>dwim</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p>Moshe Zadka has been <a href="https://opensource.com/users/moshez">writing</a> a mostly excellent exploration of the <a href="https://www.python.org/dev/peps/pep-0020/">Zen of  Python</a> for <a href="https://opensource.com">Opensource.com</a>. Not sure I approve of this take on guessing, from <a href="https://opensource.com/article/19/12/zen-python-consistency">The importance of consistency in your Python code</a>:</p>
<blockquote>
<p>What should the result of <code>1 + &quot;1&quot;</code> be? Both <code>&quot;11&quot;</code> and <code>2</code> would be
valid guesses. This expression is ambiguous: there is no single thing
it can do that would not be a surprise to at least some people.</p>
<p>Some languages choose to guess. In JavaScript, the result is <code>&quot;11&quot;</code>.
In Perl, the result is 2. In <code>C</code>, naturally, the result is the empty
string. In the face of ambiguity, JavaScript, Perl, and C all guess.</p>
</blockquote>
<p>I can’t speak for the other languages, but <a href="/card/perl/">card/Perl</a> isn’t guessing. It’s adding these two values as numbers because we <em>told it to</em> by using the numeric <code>+</code> operator. If we wanted a string, we would tell Perl by using the <code>.</code> concatenation operator.</p>
<p>Let’s fire up <a href="https://metacpan.org/pod/distribution/Eval-WithLexicals/bin/tinyrepl">tinyrepl</a> for a quick demonstration.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >$ tinyrepl
re.pl$ 1 &#43; &#34;1&#34;
2
re.pl$ 1 . &#34;1&#34;
11</code></pre>
</figure><p>Perl <a href="https://perldoc.perl.org/perlop.html#Additive-Operators">operators</a> do the type casting for you. This is <a href="https://en.wikipedia.org/wiki/DWIM">DWIM</a> — “Do What I Mean” — in action. You say you want numbers? Perl gives you numbers. You say you want strings? Perl gives you strings.</p>
<p>Are <code>1 + &quot;1&quot;</code> and <code>1 . &quot;1&quot;</code> better than <code>1 + int(&quot;1&quot;)</code> and <code>str(1) + &quot;1&quot;</code>? I don’t know. Perl was born for text processing. Most of its <a href="https://en.wikipedia.org/wiki/Affordance">affordances</a> make the most sense in that context.</p>
<p>DWIM can be surprising to those unfamiliar with this approach. But it’s not guessing.</p>
<p>The points about consistency and ambiguity are solid. The <a href="/card/zen-of-python/">card/Zen of Python</a> can be applied with slight modifications to all programming. Just remember that &ldquo;obvious&rdquo; is different in different languages.</p>
]]></content:encoded>
</item>
</channel>
</rss>
