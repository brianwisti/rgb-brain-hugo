<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>securityonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/security/</link>
    <description>
      Recent contentinsecurity on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Tue, 30 Jul 2019 07:36:11 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/security/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Try xkcdpass</title>
  <link>https://randomgeekery.org/post/2019/07/try-xkcdpass/</link>
  <pubDate>Tue, 30 Jul 2019 07:36:11 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/07/try-xkcdpass/</guid>
  <description>XKCD 936 (CC BY-NC 2.5)
[!Summary] Use xkcdpass to generate more secure passwords, like “correcthorsebatterystaple”.
This started as a Note but I passed my 15 minute rule — if I spend more than 15 minutes on it, it should be a post — so here we are.
It won’t satisfy your bank’s silly password requirements, but — as XKCD told us — using a random collection of words for your password provides more security than trying to Leet-speak some word with numbers and symbols.</description>
   <category>post</category> 
   <category>post</category> 
   <category>linux</category>  <category>security</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>In which I suggest a password generator</h2><p><img src="/post/2019/07/../../../attachments/img/2019/cover-2019-07-30.png" alt="attachments/img/2019/cover-2019-07-30.png"/>
<a href="https://xkcd.com/936/">XKCD 936</a> <em>(<a href="https://xkcd.com/license.html">CC BY-NC 2.5</a>)</em></p>
<blockquote>
<p>[!Summary]
Use <a href="https://pypi.org/project/xkcdpass/">xkcdpass</a> to generate more secure passwords, like “correcthorsebatterystaple”.</p>
</blockquote>
<p>This started as a Note but I passed my 15 minute rule — if I spend more than 15 minutes on it, it should be a post — so here we are.</p>
<p>It won’t satisfy your bank’s silly password requirements, but — as XKCD told us — using a random collection of words for your password provides more security than trying to <a href="https://simple.wikipedia.org/wiki/Leet">Leet-speak</a> some word with numbers and symbols.</p>
<p>You could pick a handful of words by flipping through the dictionary, but why not let the computer do it for you? That’s where xkcdpass comes in.</p>
<p>It’s probably available in your package repository.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> pacman -Ss xkcdpass
</span></span></code></pre>
</figure><p>It’s just #python , so you can use <code>pip</code> if you’re on macOS or Windows
or some other platform that doesn’t have <code>xkcdpass</code> handy.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">pip install xkcdpass</span></span></code></pre>
</figure><p>Regardless of how you install it, run it and grab the output — but let your password manager remember it for you.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> xkcdpass
</span></span><span class="line"><span class="cl"><span class="go">tiara embezzle stack doorway scrambled imitate
</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
</channel>
</rss>
