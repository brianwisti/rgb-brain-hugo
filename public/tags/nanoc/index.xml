<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>nanoconRandom Geekery</title>
    <link>https://randomgeekery.org/tags/nanoc/</link>
    <description>
      Recent contentinnanoc on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 25 Dec 2022 11:00:00 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/tags/nanoc/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: Nanoc builds sites faster with 3.2.0</title>
  <link>https://randomgeekery.org/post/2022/12/nanoc-builds-faster-with-3-2-0/</link>
  <pubDate>Sun, 25 Dec 2022 11:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/12/nanoc-builds-faster-with-3-2-0/</guid>
  <description>just the numbers
Today is Christmas, which means version 3.2.0 of Ruby has been released. I read Peter Solnica’s post about Benchmarking Ruby 3.2 with YJIT. One bit of feedback he got was that YJIT — the now official Just In Time compiler — kicks in for frequently called methods:
{% quote( from=“Noah Gibbs” cite=&#34;https://ruby.social/@codefolio/109573860732354569&#34; ) %} By default, YJIT optimizes a method on the 30th time you call it.</description>
   <category>post</category> 
   <category>post</category> 
   <category>ruby</category>  <category>nanoc</category> 
  <content:encoded><![CDATA[<h2>Ain't no benchmark like an unscientific ad hoc benchmark</h2><p><img src="/post/2022/12/../../../attachments/img/2022/cover-2022-12-25.png" alt="attachments/img/2022/cover-2022-12-25.png"/>
just the numbers</p>
<p>Today is Christmas, which means version <a href="https://www.ruby-lang.org/en/news/2022/12/25/ruby-3-2-0-released/">3.2.0</a> of <a href="/card/ruby/">Ruby</a> has been released. I read Peter Solnica&rsquo;s post about <a href="https://www.solnic.dev/p/benchmarking-ruby-32-with-yjit">Benchmarking Ruby 3.2 with YJIT</a>. One bit of feedback he got was that YJIT — the now official Just In Time compiler — kicks in for frequently called methods:</p>
<p>{% quote(
from=&ldquo;Noah Gibbs&rdquo;
cite=&quot;<a href="https://ruby.social/@codefolio/109573860732354569">https://ruby.social/@codefolio/109573860732354569</a>&quot;
) %}
By default, YJIT optimizes a method on the 30th time you call it.
{% end %}</p>
<p>Well hey. The <a href="https://nanoc.app">Nanoc</a> iteration of my site has a few hundred pages. Nanoc probably calls some of its methods 30 or more times for that. Let&rsquo;s find out if 3.2.0 makes a difference.</p>
<h2 id="i-should-probably-install-320">I should probably install 3.2.0</h2>
<p>This is in my Windows 11 + WSL2 workspace. I wouldn&rsquo;t be surprised if Linux and macOS tests went faster.</p>
<p>Installed 3.2.0 on my system using <code>rbenv</code>. Worth mentioning that I had to <code>export CC=/home/linuxbrew/.linuxbrew/bin/gcc-12</code> for <code>rbenv install</code> to work at all. For some reason I had a <code>brew</code>-installed Ruby floating around, too. Removed that with <code>brew uninstall ruby</code> so <code>rbenv install 3.2.0</code> would work.</p>
<p>I have a very fiddly system.</p>
<h2 id="the-test">The &ldquo;test&rdquo;</h2>
<ol>
<li>Switch to the right version</li>
<li>Install dependencies for that version</li>
<li>Build the site</li>
<li>Build it again, to see how long things take when nothing&rsquo;s changed</li>
<li>Remove the build folder and move on to the next case</li>
</ol>
<p>First in 3.1.3 to set a baseline of sorts.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> rbenv <span class="nb">local</span> 3.1.3
</span></span><span class="line"><span class="cl"><span class="gp">$</span> bundle
</span></span><span class="line"><span class="cl"><span class="gp">$</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 50.39s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">Site compiled in 43.87s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> rm -r output/
</span></span></code></pre>
</figure><p>Don&rsquo;t judge those numbers too harshly. Nanoc site configuration is Ruby code, and mine was very sloppy Ruby code. Regardless, it&rsquo;s way slower than <a href="https://gohugo.io">Hugo</a>.</p>
<p>Now in 3.2.0 without enabling YJIT, to see if just the plain old upgrade is quicker.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> rbenv <span class="nb">local</span> 3.2.0
</span></span><span class="line"><span class="cl"><span class="gp">$</span> bundle
</span></span><span class="line"><span class="cl"><span class="gp">$</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 43.58s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 37.30s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> rm -r output/
</span></span></code></pre>
</figure><p>There&rsquo;s variation from one invocation to the next in 3.1.3, but 3.2.0&rsquo;s first build is consistently a sliver faster than 3.1.3&rsquo;s second build.</p>
<p>Finally with YJIT.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nv">RUBY_YJIT_ENABLE</span><span class="o">=</span><span class="m">1</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 29.51s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> <span class="nv">RUBY_YJIT_ENABLE</span><span class="o">=</span><span class="m">1</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 23.28s.
</span></span></span></code></pre>
</figure><p>That is an impressive difference. We&rsquo;re still not talking Hugo numbers, of course.
But under 30 seconds means I might be able to pay attention long enough to fix
my terrible site configuration code.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Not sure why I keep fussing with every single SSG. It&#39;s fun, I guess?</title>
  <link>https://randomgeekery.org/post/2021/05/not-sure-why-i-keep-fussing-with-ssgs/</link>
  <pubDate>Sun, 16 May 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/05/not-sure-why-i-keep-fussing-with-ssgs/</guid>
  <description>So after bouncing back to card/Hugo from a brief card/Statamic experiment, what do I do? Do I post the slides from a talk I gave the other day, like I promised?
No of course not.
I spent the weekend messing with Nanoc and Nikola. Still chasing the high of the perfect site generator? Maybe.
Nikola’s got the convenience thing down. Someone can sit and start a fresh blog quick.</description>
   <category>post</category> 
   <category>note</category> 
   <category>static-site-generators</category>  <category>nikola</category>  <category>nanoc</category>  <category>spinning-wheels</category> 
  <content:encoded><![CDATA[<p><img src="/post/2021/05/../../../attachments/img/2021/cover-2021-05-16.png" alt="attachments/img/2021/cover-2021-05-16.png"/></p>
<p>So after bouncing back to <a href="/card/hugo/">card/Hugo</a> from a brief <a href="/card/statamic/">card/Statamic</a> experiment, what do I do? Do I post the slides from a talk I gave the other day, like I promised?</p>
<p>No of course not.</p>
<p>I spent the weekend messing with <a href="https://nanoc.app">Nanoc</a> and <a href="https://getnikola.com">Nikola</a>. Still chasing the high of the perfect site generator? Maybe.</p>
<p>Nikola&rsquo;s got the convenience thing down. Someone can sit and start a fresh blog quick.</p>
<p>Nanoc&rsquo;s got this sort of friendly flexibility. It&rsquo;s been able to handle every idea so far. Obviously not nearly as fast as Hugo, but fast enough if you don&rsquo;t get carried away with images and templates.</p>
<p>Guess what I like to do. I like to get carried away with images and templates.</p>
<p>Might play more with Nanoc. Might get back to tuning the Hugo site.</p>
<p>Been sort of eyeballing <a href="https://elderguide.com/tech/elderjs/">Elder.js</a> and <a href="https://vitepress.vuejs.org/">Vitepress</a> too. Sort-of-static sounds like fun.</p>
]]></content:encoded>
</item>
</channel>
</rss>
