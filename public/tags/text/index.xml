<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>textonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/text/</link>
    <description>
      Recent contentintext on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 19 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://randomgeekery.org/tags/text/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: reStructuredText Basics For Blogging</title>
  <link>https://randomgeekery.org/post/2020/01/restructuredtext-basics-for-blogging/</link>
  <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/01/restructuredtext-basics-for-blogging/</guid>
  <description>What is it? card/reStructuredText is a card/Lightweight Text Formatting Language with a cumbersome name. You mostly see it in Python docstrings, because it’s the standard format for Python documentation. Through site generators and Sphinx, RST also shows up behind the scenes in blogs, projects, and technical books.
Nothing about RST limits it to technical writing — well except that most nontechnical folks aren’t installing special Python libraries to write Hugo posts.</description>
   <category>post</category> 
   <category>post</category> 
   <category>python</category>  <category>rst</category>  <category>text</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>I got carried away taking notes about basic RST usage</h2><h2 id="what-is-it">What is it?</h2>
<p><a href="/card/restructuredtext/">card/reStructuredText</a> is a <a href="/card/lightweight-text-formatting-language/">card/Lightweight Text Formatting Language</a> with a cumbersome name.  You mostly see it in <a href="https://www.python.org/dev/peps/pep-0287/">Python docstrings</a>, because it&rsquo;s the standard format for Python documentation. Through site generators and <a href="https://www.sphinx-doc.org/en/master/index.html">Sphinx</a>, RST also shows up <a href="https://www.sphinx-doc.org/en/master/examples.html">behind the scenes</a> in blogs, projects, and technical books.</p>
<p>Nothing about RST limits it to technical writing — well except that most nontechnical folks aren&rsquo;t installing special Python libraries to write Hugo posts.</p>
<p>Anyways. The essentials of the RST format are easy enough that it&rsquo;s suited for general writing.</p>
<h3 id="how-do-i-use-rst-in-my-blog">How do I use RST in my blog?</h3>
<p>If you already blog with <a href="/card/nikola/">card/Nikola</a> or <a href="https://getpelican.com">Pelican</a>, you are all set. Those site generators natively support reStructuredText.</p>
<p><a href="/card/hugo/">card/Hugo</a> will build <code>.rst</code> content if you have <code>rst2html.py</code> installed.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">pip install docutils</span></span></code></pre>
</figure><h3 id="editor-support">Editor support</h3>
<p>Emacs and Vim both include RST support built-in. Visual Studio Code users can find a [useful plugin])(<a href="https://marketplace.visualstudio.com/items?itemName=lextudio.restructuredtext%29">https://marketplace.visualstudio.com/items?itemName=lextudio.restructuredtext)</a>. But all you <em>need</em> is a plain text editor, preferably with automatic indentation.</p>
<h3 id="extracting-styles">Extracting styles</h3>
<p>The HTML generated by <code>rst2html.py</code> has its own special classes. My home-grown Hugo theme supports none of those classes, of course. I couldn&rsquo;t figure out how to export the Docutils default stylesheet this morning.</p>
<p>So I made a document and grabbed the CSS rules from there for my own nefarious purposes.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="s2">&#34;hey\n&#34;</span> <span class="p">|</span> rst2html.py &gt;&gt; sample.html</span></span></code></pre>
</figure><h2 id="what-does-it-look-like">What does it look like?</h2>
<p>Although RST is readable, more folks are familiar with <a href="/card/markdown/">card/Markdown</a>. I know I was more familiar with Markdown when I started this. Once you get the hang of it, you may find that RST has its charms.</p>
<h3 id="the-basics">The basics</h3>
<p>More than enough to write one of my blog posts.</p>
<h4 id="paragraphs-and-inline-formatting">Paragraphs and inline formatting</h4>
<p>It all starts with paragraphs. Plan text, separated by empty lines. The text lines of a paragraph are wrapped together.</p>
<blockquote>
<p>Indent your paragraph if you want a nice blockquote.</p>
</blockquote>
<p>You can <em>emphasize</em> text in a paragraph using asterisks. Double asterisks give <strong>more</strong> emphasis. You can wrap multiple words to <em>emphasize all of them</em>. I think doing that dilutes the effect, though. You end up with something that looks more like a conspiracy-themed newsletter. But hey. If that&rsquo;s the look you&rsquo;re going for? Have fun!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl">It all starts with paragraphs. Plain text, separated by empty lines.<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>The text lines of a paragraph are wrapped together.<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>     Indent your paragraph if you want a nice blockquote.<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>You can <span class="ge">*emphasize*</span> text in a paragraph using asterisks.<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Double asterisks give <span class="gs">**more**</span> emphasis.<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>You can wrap multiple words to <span class="ge">*emphasize all of them*</span>.</span></span></code></pre>
</figure><p>Use <code>double backticks</code> for inline literals — characters displayed in a monospace font and often used to indicate code. This is a little confusing after Mrkdown, which uses a single backtick for literals. But RST uses those for <em>interpreted text</em>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl">Use <span class="s">``double backticks``</span> for inline literals — characters displayed in a monospace font and often used to indicate code. This is a little confusing after Mrkdown, which uses a single backtick for literals. But RST uses those for <span class="nv">`interpreted text`</span>.</span></span></code></pre>
</figure><p>What&rsquo;s interpreted text? Well, it can mean a few things depending on the context of what&rsquo;s in and around it. You could even define your own with Python. Not today, though.</p>
<p><code>rst2html.py</code> transforms a lone bit of <code>interpreted text</code> to <code>&lt;cite&gt;interpreted text&lt;/cite&gt;</code>. The <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite">citation</a> tag is used in HTML for referencing creative work: books, songs, blog posts.</p>
<h4 id="bullet-lists">Bullet lists</h4>
<p>We already know what a basic bullet list looks like.</p>
<ul>
<li>You have some lines</li>
<li>Each line starts with a special character and a space</li>
<li>I used <code>*</code> but RST allows a few
<ul>
<li><code>*</code></li>
<li><code>-</code></li>
<li><code>+</code></li>
</ul>
</li>
<li>The important thing is to be consistent for a list or sublist
<ul>
<li>oh, and you can do sub lists with indentation!</li>
<li>but you <em>need</em> blank lines between list levels</li>
</ul>
</li>
</ul>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="m">-</span> You have some lines<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="m">-</span> Each line starts with a special character and a space<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="m">-</span> I used <span class="s">``-``</span> but RST allows a few<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>
</span></span><span class="line"><span class="cl">	<span class="m">-</span> <span class="s">``*``</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	<span class="m">-</span> <span class="s">``-``</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	<span class="m">-</span> <span class="s">``+``</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>
</span></span><span class="line"><span class="cl"><span class="m">-</span> The important thing is to be consistent for a list or sublist<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>
</span></span><span class="line"><span class="cl">	<span class="m">-</span> oh, and you can do sub lists with indentation!<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	- but you <span class="ge">*need*</span> blank lines between list levels</span></span></code></pre>
</figure><h4 id="links">Links</h4>
<p>Links can be simple URL drops, like <a href="https://beatrockmusic.bandcamp.com/">https://beatrockmusic.bandcamp.com/</a>. Or use some interpreted text for a more readable <a href="https://bambubeatrock.bandcamp.com">link</a>. I prefer <a href="https://rockyriverabeatrock.bandcamp.com">reference</a> links. It even looks nice for <a href="https://prometheusbrown.bandcamp.com/album/tag-init">long references</a>, once you get used to it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl">Links can be simple URL drops, like https://beatrockmusic.bandcamp.com/.<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Or use some interpreted text for a more readable <span class="s">`link </span><span class="si">&lt;https://bambubeatrock.bandcamp.com/&gt;</span><span class="s">`_</span>.<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>I prefer reference_ links.<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>If even looks nice for <span class="s">`longer references`_</span>, once you get used to it.<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="p">..</span> <span class="nt">_reference:</span> https://rockyriverabeatrock.bandcamp.com/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="p">..</span> <span class="nt">_longer references:</span> https://prometheusbrown.bandcamp.com/album/tag-init</span></span></code></pre>
</figure><p>See those last couple lines? Those define link targets. The <code>..</code> at the beginning of the line tells RST this is explicit markup. Explicit markup takes us out of the core document flow, letting us use extensions or define values.</p>
<p>For today&rsquo;s goal of basic blogging, this explanation is sufficient.</p>
<ul>
<li><code>.. _word: URL</code> or <code>.. _long word: URL</code> defines a target</li>
<li><code>word_</code> makes a link to it.</li>
<li>for multiword targets, use <tt>
<code>long name</code>_</tt> to reference them.</li>
</ul>
<h3 id="a-little-more">A little more</h3>
<p>We&rsquo;ve got the basics. After these next few items, I have about 80% of everything I ever wrote on this site covered.</p>
<h4 id="headers-and-sections">Headers and sections</h4>
<blockquote>
<p><strong>WARNING</strong></p>
<p>Most blog generators demote your headers by at least one level. That way your post title goes at the top of the hierarchy. It also means that my level three section headers generate <code>&lt;h4&gt;</code> tags! So don&rsquo;t go overboard with subsections.</p>
</blockquote>
<p>You&rsquo;ve been looking at section headers already, so it seems silly to put examples here. Plus it messes up the document structure.</p>
<p>You need two lines to make a section header. The text of the header itself forms the first line. Use the text of the header itself for the first line. In the second line, put enough non-alphanumeric characters to match your header&rsquo;s length. Pick any you like — well, any from the set of <code>= - : &quot; ~ ^ + * + # &lt; &gt;</code> — as long as you stay consistent.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="gh">What does it look like?</span>
</span></span><span class="line"><span class="cl"><span class="gh">=======================</span>
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>section 3</span></span></code></pre>
</figure><p>First symbols picked, so it&rsquo;s a level one header.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="gh">A little more</span>
</span></span><span class="line"><span class="cl"><span class="gh">-------------</span>
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Section 3.1</span></span></code></pre>
</figure><p>I picked a new symbol for the indicator, so this is a level two header.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="gh">Headers and sections</span>
</span></span><span class="line"><span class="cl"><span class="gh">~~~~~~~~~~~~~~~~~~~~</span>
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Section 3.1.1</span></span></code></pre>
</figure><p>Another new symbol means another level, taking us to a level three header.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="gh">Images and figures</span>
</span></span><span class="line"><span class="cl"><span class="gh">~~~~~~~~~~~~~~~~~~</span>
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Section 3.2.2</span></span></code></pre>
</figure><p>These use the same symbol I used for <em>Headers and sections</em>, so this is another level three header.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="gh">Directives</span>
</span></span><span class="line"><span class="cl"><span class="gh">----------</span>
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Section 1.2</span></span></code></pre>
</figure><p>Oh hey, remember this symbol? We&rsquo;re back up to level two!</p>
<p>This is the only area where RST feels significantly more cumbersome to me than Markdown or Asciidoctor. At least it&rsquo;s pretty to look at.</p>
<h4 id="images-and-figures">Images and figures</h4>
<p>I already have my own shortcodes for images in Hugo. Oh, and the special logic for cover pictures. Jeez I have my work cut out for me if and when I migrate to another generator.</p>
<p>Still, images are a pretty fundamental part of blogging. It would feel strange to skip them.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl">image:: worst-cat.png<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>   :alt: Text reads &#34;This is the worst cat.&#34; Photo is a baby hippo<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>   <span class="nc">:target:</span> <span class="nf">https://worstcats.tumblr.com/post/97243616862/this-is-the-worst-cat</span></span></span></code></pre>
</figure><p>Look, more explicit markup! This calls the image directive with <code>worst-cat.png</code> as an argument, and a few options specified with what RST calls a <em>field list</em>. You can make the image a link with <code>:target:</code>, which is nice.</p>
<p>I prefer the HTML <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure">figure</a> for my images. It allows me to add a readable caption, which is a great spot for attribution.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="p">..</span> <span class="ow">figure</span><span class="p">::</span> worst-cat.png<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	:alt: Text reads &#34;This is the worst cat&#34;; Photo is a baby hippo<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	via the <span class="s">`Worst Cats`_</span> Tumblr blog</span></span></code></pre>
</figure><p>This directive is conceptually much closer to what I&rsquo;m thinking of. You even get a whole paragraph to set the caption. Text after the first paragraph becomes the legend. Interested parties can read the <a href="https://docutils.sourceforge.io/docs/ref/rst/directives.html#figure">figure documentation</a> for more details about that.</p>
<p><img src="/post/2020/01/../../../attachments/img/2020/worst-cat.png" alt="attachments/img/2020/worst-cat.png"/>
via the <a href="https://worstcats.tumblr.com/post/97243616862/this-is-the-worst-cat">Worst Cats</a> Tumblr blog</p>
<p>Unfortunately it&rsquo;s not <em>really</em> a <code>&lt;figure&gt;</code>. This is a <code>div.figure</code> holding an <code>img</code> and a <code>p.caption</code> instead of a <code>&lt;figcaption</code>. As a purist, I recognize that I must eventually fix this.</p>
<h4 id="simple-tables">Simple Tables</h4>
<p>Tables are very handy for summarizing information. RST allows extremely complex table formatting. Fortunately for me, I never use extremely complex table formatting. <a href="https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#simple-tables">simple-tables</a> work just fine.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl">========= =================<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Generator Supports RST<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>========= =================<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Nikola    Yes<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Pelican   Yes<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Sphinx    Yes<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Hugo      If you install <span class="nv">`docutils`</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Gatsby    ??<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Eleventy  ??<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Jekyll    ??<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Middleman ??<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>========= =================</span></span></code></pre>
</figure><p>Overflow is okay, as long as the table markers themselves line up. Still. It&rsquo;s untidy. Excuse me a moment.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl">========= =========================<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Generator Supports RST<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>========= =========================<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Nikola    Yes<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Pelican   Yes<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Sphinx    Yes<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Hugo      If you install <span class="nv">`docutils`</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Gatsby    ??<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Eleventy  ??<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Jekyll    ??<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>Middleman ??<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>========= =========================</span></span></code></pre>
</figure><p>That&rsquo;s better.</p>
<table>
<thead>
<tr>
<th>Generator</th>
<th>Supports RST</th>
</tr>
</thead>
<tbody>
<tr>
<td>Nikola</td>
<td>Yes</td>
</tr>
<tr>
<td>Pelican</td>
<td>Yes</td>
</tr>
<tr>
<td>Sphinx</td>
<td>Yes</td>
</tr>
<tr>
<td>Hugo</td>
<td>If you install <em>docutils</em></td>
</tr>
<tr>
<td>Gatsby</td>
<td>??</td>
</tr>
<tr>
<td>Eleventy</td>
<td>??</td>
</tr>
<tr>
<td>Jekyll</td>
<td>??</td>
</tr>
<tr>
<td>Middleman</td>
<td>??</td>
</tr>
</tbody>
</table>
<p>Table construction can get more elaborate. Check out <a href="https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#grid-tables">grid-table</a> if that sort of thing interests you. I can also get simpler, with <em>csv-table</em> and <em>table-listing</em> directives.</p>
<h3 id="directives">Directives</h3>
<p><a href="https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#directives">Directive</a> are used to extend RST. They&rsquo;re written in Python, but you don&rsquo;t need to understand Python to use them.</p>
<p>Directives share a basic structure:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="p">..</span> <span class="ow">directive-name</span><span class="p">::</span> arguments<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	:option-name: option-values<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	body</span></span></code></pre>
</figure><p>The details vary with every directive. Some require a body, some take no options. <a href="https://docutils.sourceforge.io/docs/ref/rst/directives.html#table-of-contents">content</a> generates a full table of contents without requiring argument, options, or a body!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="p">..</span> <span class="ow">content</span><span class="p">::</span></span></span></code></pre>
</figure><p>We&rsquo;ve already looked at a couple directives. Do I have a favorite? Strangely enough, I do.</p>
<h4 id="admonitions">Admonitions</h4>
<p>Most of this site&rsquo;s history has been me talking to myself. Sometimes I talk back. So I&rsquo;m always looking for good ways to add assorted interjections and comments. Markdown doesn&rsquo;t officially support that sort of thing, so as a result my <code>.md</code> files have nonstandard components and Hugo shortcodes to accomplish this sort of thing.</p>
<p>Fortunately, these side notes are part of RST as <a href="https://docutils.sourceforge.io/docs/ref/rst/directives.html#admonitions">admonitions</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="p">..</span> <span class="ow">note</span><span class="p">::</span> Don&#39;t forget to mention admonitions!</span></span></code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>Don&rsquo;t forget to mention admonitions!</p>
</blockquote>
<p>There are several admonition types, from the casual note to the dire alert.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="p">..</span> <span class="ow">warning</span><span class="p">::</span> Don&#39;t overuse admonitions!</span></span></code></pre>
</figure><blockquote>
<p><strong>WARNING</strong></p>
<p>Don&rsquo;t overuse admonitions!</p>
</blockquote>
<p><code>note</code> and <code>warning</code> should suffice for most cases.</p>
<h4 id="code-blocks">Code blocks</h4>
<p>This is mostly a coding blog. Of course I&rsquo;m going to cover the <a href="https://docutils.sourceforge.io/docs/ref/rst/directives.html#code">code</a> directive. You give it a language and some code. <a href="https://pygments.org">Pygments</a> handles the highlighting. It handles <em>nearly</em> every language I have handed to, so it should work nice.</p>
<p>How about a little snippet of Python?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="p">..</span> <span class="ow">code</span><span class="p">::</span> <span class="k">python</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Create a circle template from command line options&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Get details from command line or use defaults</span>
</span></span><span class="line"><span class="cl">        <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;--size&#34;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s2">&#34;length of image side in pixels&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_SIZE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;--circles&#34;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s2">&#34;number of circles&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_CIRCLES</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;--slices&#34;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s2">&#34;number of slices&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_SLICES</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">size</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">size</span>
</span></span><span class="line"><span class="cl">        <span class="n">circle_count</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">circles</span>
</span></span><span class="line"><span class="cl">        <span class="n">slice_count</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">slices</span>
</span></span><span class="line"><span class="cl">        <span class="n">circle_template</span> <span class="o">=</span> <span class="n">CircleTemplate</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">circle_count</span><span class="p">,</span> <span class="n">slice_count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        circle_template.save()</span></span></code></pre>
</figure><figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="s2">&#34;&#34;&#34;Create a circle template from command line options&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># Get details from command line or use defaults</span>
</span></span><span class="line"><span class="cl">	<span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;--size&#34;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s2">&#34;length of image side in pixels&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">						<span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_SIZE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;--circles&#34;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s2">&#34;number of circles&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">						<span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_CIRCLES</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s2">&#34;--slices&#34;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s2">&#34;number of slices&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">						<span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_SLICES</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="n">size</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">size</span>
</span></span><span class="line"><span class="cl">	<span class="n">circle_count</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">circles</span>
</span></span><span class="line"><span class="cl">	<span class="n">slice_count</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">slices</span>
</span></span><span class="line"><span class="cl">	<span class="n">circle_template</span> <span class="o">=</span> <span class="n">CircleTemplate</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">circle_count</span><span class="p">,</span> <span class="n">slice_count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">circle_template</span><span class="o">.</span><span class="n">save</span><span class="p">()</span></span></span></code></pre>
</figure><p>Oh my. I&rsquo;m closing in on two thousand words. That&rsquo;s far more than I indended. Let&rsquo;s stop here, with the majority of my regular blog-writing needs covered.</p>
<p>Oh, fine. One little bonus section.</p>
<h3 id="bonus-csv-tables">Bonus: CSV Tables</h3>
<p>Hand-drawing a table can be labor-intensive — especially when you get fancy. Sometimes that is too much. Sometimes you just want to stuff values in a table.</p>
<p><a href="https://docutils.sourceforge.io/docs/ref/rst/directives.html#id4">csv-table</a> serves that perfectly.</p>
<p>Let&rsquo;s say I have a CSV list of my most important <a href="/card/taskwarrior/">Taskwarrior</a> tasks for this site. I can paste that list under a <em>csv-table</em> directive, give it a caption and the <em>header</em> text — maybe set the <code>widths</code> option to <code>auto</code>, because I dislike the default of equal-width columns.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="p">..</span> <span class="ow">csv-table</span><span class="p">::</span> High priority site tasks<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	:header: &#34;ID&#34;, &#34;Description&#34;, &#34;Urgency&#34;<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    227,&#34;rst basics for blogging&#34;,11.9<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    228,&#34;extract rst stylesheet&#34;,7.9</span></span></code></pre>
</figure><p>And it comes out not too bad!</p>
<table border="1" class="colwidths-auto docutils">
	<caption>High priority site tasks</caption>
	<thead valign="bottom">
		<tr><th class="head">ID</th>
		<th class="head">Description</th>
		<th class="head">Urgency</th>
		</tr>
	</thead>
	<tbody valign="top">
		<tr><td>227</td>
			<td>rst basics for blogging</td>
			<td>11.9</td>
		</tr>
		<tr><td>228</td>
			<td>extract rst stylesheet</td>
			<td>7.9</td>
		</tr>
	</tbody>
</table>
<h3 id="another-bonus-list-tables">Another Bonus: List tables</h3>
<p>I feel bad. A two row CSV table does not save <em>that</em> much time. Maybe if I had 20 or 30 generated rows. And while it may be easier for stuffing values into a table, CSV is not the most readable format.</p>
<p>I can make it up to you.</p>
<p>I <em>just</em> used <a href="https://docutils.sourceforge.io/docs/ref/rst/directives.html#list-table%22">list-table</a> while switching a recent post to reStructuredText. It was a lifesaver.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-rst" data-lang="rst"><span class="line"><span class="cl"><span class="p">..</span> <span class="ow">list-table</span><span class="p">::</span> Emacs text-scale adjustment key bindings<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	:header-rows: 1<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	:widths: auto<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>
</span></span><span class="line"><span class="cl">	<span class="m">-</span> - Function<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	  <span class="m">-</span> Keys<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	  <span class="m">-</span> Description<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	<span class="m">-</span> - <span class="s">``(text-scale-adjust 1)``</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	  - <span class="s">``C-x C-=``</span> or <span class="s">``C-x C-+``</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	  - Increase text size by one step<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	<span class="m">-</span> - <span class="s">``(text-scale-adjust -1)``</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	  - <span class="s">``C-x C-=``</span> or <span class="s">``C-x C--``</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	  - Decrease text size by one step<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	<span class="m">-</span> - <span class="s">``(text-scale-adjust 0)``</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	  - <span class="s">``C-x C-=``</span> or <span class="s">``C-x C-0``</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>	  - Reset text size to default</span></span></code></pre>
</figure><p>Use nested lists to construct your list table. Each of the top list items represent a row in your table. Each of the items in a row list is a cell in that row. Because I specified <code>:header-rows: 1</code>, the first row gives us a table header.</p>
<table border="1" class="colwidths-auto docutils">
<caption>Emacs text scale adjustment key bindings</caption>
<thead valign="bottom">
<tr><th class="head">Function</th>
<th class="head">Keys</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><tt class="docutils literal"><span class="pre">(text-scale-adjust</span> 1)</tt></td>
<td><tt class="docutils literal"><span class="pre">C-x</span> <span class="pre">C-=</span></tt> or <tt class="docutils literal"><span class="pre">C-x</span> <span class="pre">C-+</span></tt></td>
<td>Increase text size by one step</td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">(text-scale-adjust</span> <span class="pre">-1)</span></tt></td>
<td><tt class="docutils literal"><span class="pre">C-x</span> <span class="pre">C--</span></tt></td>
<td>Decrease text-size by one step</td>
</tr>
<tr><td><tt class="docutils literal"><span class="pre">(text-scale-adjust</span> 0)</tt></td>
<td><tt class="docutils literal"><span class="pre">C-x</span> <span class="pre">C-0</span></tt></td>
<td>Reset text size to default</td>
</tr>
</tbody>
</table>
<p>I like this. Mind you, I get that simple and grid tables are easier to understanding when <em>reading</em> RST. There are fancy editor extension to draw simple or grid tables. Nevertheless, I&rsquo;m writing this RST file with the intent of turning it into HTML. In that context — for me — pasting CSV or lines of text is easier than polishing text tables.</p>
<p>Okay I have <strong>got</strong> to stop now. Clearly I enjoy RST way too much.</p>
<h2 id="what-did-i-miss">What did I miss?</h2>
<p><a href="https://docutils.sourceforge.io/docs/ref/rst/roles.html">Roles</a> and <a href="https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#substitution-definitions">substitutions</a>. I wanted to cover them today, but no. This will do for now.</p>
<h2 id="related">Related</h2>
<p>I referenced these quite a bit while putting this post together. Maybe they could be useful for you!</p>
<ul>
<li><a href="https://www.devdungeon.com/content/restructuredtext-rst-tutorial-0">DEV_DUNGEON reStructuredText (RST) Tutorial</a></li>
<li><a href="https://docutils.sourceforge.io/docs/">Docutils project documentation</a>
<ul>
<li>especially the <a href="https://docutils.sourceforge.io/docs/user/rst/quickref.html">Quick reStructuredText</a> reference</li>
</ul>
</li>
<li><a href="https://docutils.readthedocs.io/en/sphinx-docs/user/rst/quickstart.html">ReStructuredText Primer</a></li>
</ul>
]]></content:encoded>
</item>
</channel>
</rss>
