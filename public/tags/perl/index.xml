<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>perlonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/perl/</link>
    <description>
      Recent contentinperl on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Mon, 17 Oct 2022 22:40:56 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/perl/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: From Perl to Rust</title>
  <link>https://randomgeekery.org/post/2022/10/from-perl-to-rust/</link>
  <pubDate>Mon, 17 Oct 2022 22:40:56 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/10/from-perl-to-rust/</guid>
  <description>In Tim Heaney’s introduction to From Perl to Rust:
{% quote() %} Having to know everything at once makes it hard to teach Rust as well. It seems like no matter where we start, we are always touching on concepts that we haven’t covered yet. This is quite the opposite of Perl, where it’s fairly easy to learn as we go. But perhaps making this one assumption— that we all know Perl— will help us navigate the complexities of Rust.</description>
   <category>post</category> 
   <category>note</category> 
   <category>rust</category>  <category>perl</category> 
  <content:encoded><![CDATA[<p>In Tim Heaney&rsquo;s introduction to <a href="https://oylenshpeegul.gitlab.io/from-perl-to-rust/introduction.html">From Perl to Rust</a>:</p>
<p>{% quote() %}
Having to know everything at once makes it hard to teach Rust as well. It seems like no matter where we start, we are always touching on concepts that we haven&rsquo;t covered yet. This is quite the opposite of Perl, where it&rsquo;s fairly easy to learn as we go. But perhaps making this one assumption&mdash; that we all know Perl&mdash; will help us navigate the complexities of Rust. I don&rsquo;t know if this is going to work, but I thought I&rsquo;d try it.
{% end %}</p>
<p>Not everybody knows <a href="/card/perl/">card/Perl</a>, but I do. I am very much the target audience for this title. We&rsquo;ll just throw it on the TOREAD stack with the others. But maybe I might read it before some of those others?</p>
<p>I <em>really</em> want to get a better grasp on <a href="/card/rust/">card/Rust</a>.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: uploaded to cpan oops hang on how about now</title>
  <link>https://randomgeekery.org/post/2020/05/uploaded-to-cpan-oops-hang-on-how-about-now/</link>
  <pubDate>Thu, 28 May 2020 00:32:25 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/05/uploaded-to-cpan-oops-hang-on-how-about-now/</guid>
  <description>If anything about MojoX::Date::Local seems a bit off, that’s because it’s my first CPAN package. It’s just Mojo::Date with a tiny bit of date formatting and time zone stuff I needed in a couple projects. Not time zone math.
No.
God no.
Just showing local time.</description>
   <category>post</category> 
   <category>note</category> 
   <category>perl</category>  <category>i-made-something</category> 
  <content:encoded><![CDATA[<p>If anything about <a href="https://metacpan.org/pod/MojoX::Date::Local">MojoX::Date::Local</a> seems a bit off, that&rsquo;s because it&rsquo;s my first CPAN package. It&rsquo;s just <a href="https://mojolicious.org/perldoc/Mojo/Date">Mojo::Date</a> with a tiny bit of date formatting and time zone stuff I needed in a couple projects. Not time zone <em>math</em>.</p>
<p>No.</p>
<p>God no.</p>
<p>Just showing local time.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Hard Moving on From Perl When It Keeps Being More Good Enough Than the Other Good Enough Solutions</title>
  <link>https://randomgeekery.org/post/2020/05/hard-moving-on-from-perl/</link>
  <pubDate>Sat, 09 May 2020 23:21:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/05/hard-moving-on-from-perl/</guid>
  <description>So I still love my Datasette dashboard. But — Mastodon::Client with a variation on fREW’s q script I mentioned the other day? Works real good. Fast.
Good night.</description>
   <category>post</category> 
   <category>note</category> 
   <category>perl</category>  <category>right-tool-for-the-right-job</category>  <category>chainsaws-everywhere</category> 
  <content:encoded><![CDATA[<p>So I still love my <a href="https://datasette.readthedocs.io">Datasette</a> dashboard. But — <a href="https://metacpan.org/pod/Mastodon::Client">Mastodon::Client</a> with a variation on <a href="https://blog.afoolishmanifesto.com/posts/hugo-unix-vim-integration/#advanced-unix-tools">fREW’s <code>q</code></a> script I mentioned <a href="/post/2020/05/querying-hugo-content-with-python/">the other day</a>? Works real good. Fast.</p>
<p>Good night.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: How many recent authors on CPAN?</title>
  <link>https://randomgeekery.org/post/2020/04/how-many-recent-authors-on-cpan/</link>
  <pubDate>Tue, 28 Apr 2020 11:40:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/04/how-many-recent-authors-on-cpan/</guid>
  <description>Sorry, I couldn’t fit this in a tweet.
Yanick’s concerned about card/Perl’s CPAN.
{{&lt; tweet user=“yenzie” id=“1254874808774516738” &gt;}}
So I grabbed the authors of the last 5,000 releases and counted authors, using Mojolicious and the MetaCPAN API.
$ export MCP_LATEST=&#39;https://fastapi.metacpan.org/v1/release/_search?q=status:latest&amp;fields=author&amp;sort=date:desc&amp;size=5000&#39; $ http $MCP_LATEST &gt; _search.json $ perl -Mojo -E &#39;say c(j(f(&#34;_search.json&#34;)-&gt;slurp)-&gt;{hits}{hits}-&gt;@*)-&gt;map( sub { $_-&gt;{fields}-&gt;{author} } )-&gt;uniq-&gt;size . &#34; authors made the last 5000 releases&#34;&#39; 974 authors made the last 5000 releases Downloaded the file with httPie because I felt bad hammering MetaCPAN with -Mojo g() while sorting out the rest of the “one-liner.</description>
   <category>post</category> 
   <category>note</category> 
   <category>perl</category>  <category>gist</category> 
  <content:encoded><![CDATA[<p>Sorry, I couldn’t fit this in a tweet.</p>
<p><a href="http://techblog.babyl.ca/">Yanick</a>&rsquo;s concerned about <a href="/card/perl/">card/Perl</a>&rsquo;s <a href="https://cpan.org">CPAN</a>.</p>
<p>{{&lt; tweet user=&ldquo;yenzie&rdquo; id=&ldquo;1254874808774516738&rdquo; &gt;}}</p>
<p>So I grabbed the authors of the last 5,000 releases and counted authors, using <a href="https://mojolicious.org">Mojolicious</a> and the <a href="https://metacpan.org">MetaCPAN</a> API.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nb">export</span> <span class="nv">MCP_LATEST</span><span class="o">=</span><span class="s1">&#39;https://fastapi.metacpan.org/v1/release/_search?q=status:latest&amp;fields=author&amp;sort=date:desc&amp;size=5000&#39;</span>
</span></span><span class="line"><span class="cl"><span class="gp">$</span> http <span class="nv">$MCP_LATEST</span> &gt; _search.json
</span></span><span class="line"><span class="cl"><span class="gp">$</span> perl -Mojo -E <span class="s1">&#39;say c(j(f(&#34;_search.json&#34;)-&gt;slurp)-&gt;{hits}{hits}-&gt;@*)-&gt;map( sub { $_-&gt;{fields}-&gt;{author} } )-&gt;uniq-&gt;size . &#34; authors made the last 5000 releases&#34;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go">974 authors made the last 5000 releases
</span></span></span></code></pre></div><p>Downloaded the file with <a href="https://httpie.org/">httPie</a> because I felt bad hammering MetaCPAN with <a href="https://mojolicious.org/perldoc/ojo#g"><code>-Mojo g()</code></a> while sorting out the rest of the &ldquo;one-liner.&rdquo;</p>
<p>I have no idea if these results are good or bad, but I half-expected less than 100 authors.</p>
<p>Getting useful information like spread of release dates is left as an exercise for the reader.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Go back to bed</title>
  <link>https://randomgeekery.org/post/2020/01/go-back-to-bed/</link>
  <pubDate>Thu, 16 Jan 2020 06:35:47 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/01/go-back-to-bed/</guid>
  <description>
Woke up with the terrible idea of rewriting WebMake as a card/Gatsby plugin but:
I don’t even know who would know what I’m talking about I don’t know how to do that I’m just not sure how well this plan was thought through. </description>
   <category>post</category> 
   <category>note</category> 
   <category>site</category>  <category>perl</category>  <category>javascript</category>  <category>good-idea</category>  <category>bad-idea</category> 
  <content:encoded><![CDATA[<p><img src="/post/2020/01/../../../attachments/img/2020/cover-2020-01-16.png" alt="attachments/img/2020/cover-2020-01-16.png"/></p>
<p>Woke up with the terrible idea of rewriting <a href="http://webmake.taint.org/">WebMake</a> as a <a href="/card/gatsby/">card/Gatsby</a> plugin but:</p>
<ul>
<li>I don’t even know who would know what I’m talking about</li>
<li>I don’t know how to do that</li>
<li><a href="https://youtu.be/93B072j-E3I">I’m just not sure how well this plan was thought through</a>.</li>
</ul>
]]></content:encoded>
</item>
<item>
  <title>Post: DWIM is consistent</title>
  <link>https://randomgeekery.org/post/2019/12/dwim-is-consistent/</link>
  <pubDate>Fri, 27 Dec 2019 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/12/dwim-is-consistent/</guid>
  <description>Moshe Zadka has been writing a mostly excellent exploration of the Zen of Python for Opensource.com. Not sure I approve of this take on guessing, from The importance of consistency in your Python code:
What should the result of 1 &#43; &#34;1&#34; be? Both &#34;11&#34; and 2 would be valid guesses. This expression is ambiguous: there is no single thing it can do that would not be a surprise to at least some people.</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>python</category>  <category>dwim</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p>Moshe Zadka has been <a href="https://opensource.com/users/moshez">writing</a> a mostly excellent exploration of the <a href="https://www.python.org/dev/peps/pep-0020/">Zen of  Python</a> for <a href="https://opensource.com">Opensource.com</a>. Not sure I approve of this take on guessing, from <a href="https://opensource.com/article/19/12/zen-python-consistency">The importance of consistency in your Python code</a>:</p>
<blockquote>
<p>What should the result of <code>1 + &quot;1&quot;</code> be? Both <code>&quot;11&quot;</code> and <code>2</code> would be
valid guesses. This expression is ambiguous: there is no single thing
it can do that would not be a surprise to at least some people.</p>
<p>Some languages choose to guess. In JavaScript, the result is <code>&quot;11&quot;</code>.
In Perl, the result is 2. In <code>C</code>, naturally, the result is the empty
string. In the face of ambiguity, JavaScript, Perl, and C all guess.</p>
</blockquote>
<p>I can’t speak for the other languages, but <a href="/card/perl/">card/Perl</a> isn’t guessing. It’s adding these two values as numbers because we <em>told it to</em> by using the numeric <code>+</code> operator. If we wanted a string, we would tell Perl by using the <code>.</code> concatenation operator.</p>
<p>Let’s fire up <a href="https://metacpan.org/pod/distribution/Eval-WithLexicals/bin/tinyrepl">tinyrepl</a> for a quick demonstration.</p>
<pre tabindex="0"><code>$ tinyrepl
re.pl$ 1 + &#34;1&#34;
2
re.pl$ 1 . &#34;1&#34;
11
</code></pre><p>Perl <a href="https://perldoc.perl.org/perlop.html#Additive-Operators">operators</a> do the type casting for you. This is <a href="https://en.wikipedia.org/wiki/DWIM">DWIM</a> — “Do What I Mean” — in action. You say you want numbers? Perl gives you numbers. You say you want strings? Perl gives you strings.</p>
<p>Are <code>1 + &quot;1&quot;</code> and <code>1 . &quot;1&quot;</code> better than <code>1 + int(&quot;1&quot;)</code> and <code>str(1) + &quot;1&quot;</code>? I don’t know. Perl was born for text processing. Most of its <a href="https://en.wikipedia.org/wiki/Affordance">affordances</a> make the most sense in that context.</p>
<p>DWIM can be surprising to those unfamiliar with this approach. But it’s not guessing.</p>
<p>The points about consistency and ambiguity are solid. The <a href="/card/zen-of-python/">card/Zen of Python</a> can be applied with slight modifications to all programming. Just remember that &ldquo;obvious&rdquo; is different in different languages.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: I still love when people say nice things about Perl</title>
  <link>https://randomgeekery.org/post/2019/08/i-still-love-when-people-say-nice-things-about-perl/</link>
  <pubDate>Tue, 06 Aug 2019 17:46:19 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/08/i-still-love-when-people-say-nice-things-about-perl/</guid>
  <description>John Siracusa, on the Diving for Perl episode of the Command Line Heroes podcast:
My hope for Perl 5 is that people don’t dismiss it, because despite all the other more popular languages, there are still problems today to which Perl 5 is the best solution. Very often those are sort of glue type problems. If you find yourself ever writing a shell script, and you’re like, “Well, I’m not going to use my ‘real programming language’ for this.</description>
   <category>post</category> 
   <category>note</category> 
   <category>perl</category>  <category>podcast</category>  <category>glue-languages-stick-with-you</category> 
  <content:encoded><![CDATA[<p><a href="https://hypercritical.co/">John Siracusa</a>, on the <a href="https://www.redhat.com/en/command-line-heroes/season-3/diving-for-perl">Diving for Perl</a> episode of the <a href="https://www.redhat.com/en/command-line-heroes">Command Line Heroes</a> podcast:</p>
<blockquote>
<p>My hope for Perl 5 is that people don&rsquo;t dismiss it, because despite all the other more popular languages, there are still problems today to which Perl 5 is the best solution. Very often those are sort of glue type problems. If you find yourself ever writing a shell script, and you&rsquo;re like, &ldquo;Well, I&rsquo;m not going to use my &lsquo;real programming language&rsquo; for this.&rdquo; Whether it&rsquo;s Python, or Ruby, or whatever. But a shell script can let me connect together a bunch of stuff. Perl is a better tool for that job. It is easier to write a correct Perl script than it is to write a correct shell script.</p>
</blockquote>
<p>Having written a few glue tasks with <a href="https://www.gnu.org/software/coreutils/coreutils.html">GNU Coreutils</a> and some shell scripts, I agree with that point. Even just glueing together Coreutils can be easier with <a href="/card/perl/">card/Perl</a>.</p>
<p>And <a href="/card/raku/">card/Raku</a>:</p>
<blockquote>
<p>That&rsquo;s the great thing about open source, and programming languages. No one&rsquo;s going to make you stop. You can just keep working on Perl 6 the same way you have been.</p>
</blockquote>
<p>I won&rsquo;t say whether I installed a fresh build of <a href="https://rakudo.org">Rakudo</a> and played around with Raku after listening to the podcast, but — I installed a fresh build of Rakudo and played around with Perl 6 after listening to this episode.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Making A Mojo Link Checker</title>
  <link>https://randomgeekery.org/post/2017/04/making-a-mojo-link-checker/</link>
  <pubDate>Tue, 11 Apr 2017 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/04/making-a-mojo-link-checker/</guid>
  <description>I wrote a card/Perl script using utility features in Mojolicious to check all of the links in my site.
Nothing lasts forever. Sites get reorganized, move, or disappear. As my own site has gotten older — some of these pages are over fifteen years old — links from old posts stop working. link rot is a fact of life on the Internet. I want to minimize it here.
Instead of manually checking each of the 245 posts on this site, I chose to write some code that identifies the dead end links.</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>site</category>  <category>mojolicious</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p>I wrote a <a href="/card/perl/">card/Perl</a> script using utility features in Mojolicious to check all of the links in my site.</p>
<p>Nothing lasts forever. Sites get reorganized, move, or disappear. As my own site has gotten older — some of these pages are over fifteen years old — links from old posts stop working. <a href="https://en.wikipedia.org/wiki/Link_rot">link rot</a> is a fact of life on the Internet. I want to minimize it here.</p>
<p>Instead of manually checking each of the 245 posts on this site, I chose to write some code that identifies the dead end links. Then I could manually adjust the bad links. Yay! That’s hand-crafted automation there.</p>
<h2 id="use-mojo">use Mojo!</h2>
<p><a href="/card/mojolicious/">card/Mojolicious</a> is a Perl framework for making Web applications. It also happens to provide <a href="http://mojolicious.org/perldoc#REFERENCE">excellent support</a> for a wide range of Web-related programming.</p>
<p>I mentioned Mojolicious here before. I use it as a part of my daily dev toolkit, even though I <em>still</em> haven’t made a real Web app with it.</p>
<h2 id="the-code">The code</h2>
<p>I could just dump the script here and go on with my day, but I feel like typing a lot for some reason. Let’s go through the major chunks of the code.</p>
<h3 id="the-setup">The setup</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">use</span> <span class="mf">5.24.0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">warnings</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">experimental</span> <span class="s">&#39;signatures&#39;</span><span class="p">;</span>
</span></span></code></pre></div><p>Whenever possible, I specify the latest version of Perl (currently <a href="http://perldoc.perl.org/perl5240delta.html">5.24</a>. It enables some features and deprecates others. If nothing else, it reminds me when I last worked on the code. Recent Perl versions automatically enable <a href="http://perldoc.perl.org/strict.html"><code>strict</code></a>, but it’s useful for me to also turn on <a href="http://perldoc.perl.org/warnings.html"><code>warnings</code></a>.</p>
<p>The <a href="https://metacpan.org/pod/experimental"><code>experimental</code></a> CPAN module saves some boiler plate when using Perl features that have not fully stabilized — such as function <a href="http://perldoc.perl.org/feature.html#The-%27signatures%27-feature">signatures</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Mojo::DOM</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Mojo::File</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Mojo::JSON</span> <span class="sx">qw(decode_json)</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Mojo::URL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Mojo::UserAgent</span><span class="p">;</span>
</span></span></code></pre></div><p>Mojolicious provides a remarkable amount of functionality for such a small installation. This is just what I’m explicitly using.</p>
<dl>
<dt><a href="http://mojolicious.org/perldoc/Mojo/DOM">Mojo::DOM</a></dt>
<dd>HTML/XML DOM parser that supports <a href="https://www.w3.org/TR/CSS2/selector.html">CSS Selectors</a></dd>
<dt><a href="http://mojolicious.org/perldoc/Mojo/File">Mojo::File</a></dt>
<dd>for handling filepaths and easy reading / writing files.</dd>
<dt><a href="http://mojolicious.org/perldoc/Mojo/JSON">Mojo::JSON</a></dt>
<dd><code>decode_json</code> lets me turn the <a href="http://gohugo.io/">Hugo</a> <code>config.json</code> file into a Perl structure.</dd>
<dt><a href="http://mojolicious.org/perldoc/Mojo/URL">Mojo::URL</a></dt>
<dd>understands the components of Uniform Resource Locators</dd>
<dt><a href="http://mojolicious.org/perldoc/Mojo/UserAgent">Mojo::UserAgent</a></dt>
<dd>makes HTTP and WebSocket requests (similar to <a href="https://metacpan.org/pod/LWP::UserAgent">LWP::UserAgent</a>, or <a href="http://docs.python-requests.org/en/master/">Requests</a> for Python people)</dd>
</dl>
<h3 id="from-the-top">From the top</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$config_file</span>   <span class="o">=</span> <span class="s">&#34;config.json&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$config</span>        <span class="o">=</span> <span class="n">decode_json</span><span class="p">(</span><span class="nn">Mojo::File</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$config_file</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">slurp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$site</span>          <span class="o">=</span> <span class="nn">Mojo::URL</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">$config</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">BaseURL</span><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$root</span>          <span class="o">=</span> <span class="nv">$config</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">publishDir</span><span class="p">}</span> <span class="o">||</span> <span class="s">&#39;public&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$checked_links</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$ua</span>            <span class="o">=</span> <span class="nn">Mojo::UserAgent</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ua</span><span class="o">-&gt;</span><span class="n">max_redirects</span><span class="p">(</span> <span class="mi">5</span> <span class="p">);</span> <span class="c1"># some sites love lots of redirects</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$test_file</span> <span class="o">=</span> <span class="nb">shift</span> <span class="nv">@ARGV</span> <span class="sr">//</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span> <span class="nv">$test_file</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">check_links_in</span><span class="p">(</span> <span class="nv">$test_file</span><span class="p">,</span> <span class="nv">$ua</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$path</span> <span class="o">=</span> <span class="nn">Mojo::File</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="nv">$root</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$files</span> <span class="o">=</span> <span class="nv">$path</span><span class="o">-&gt;</span><span class="nn">list_tree</span><span class="o">-&gt;</span><span class="nb">grep</span><span class="p">(</span> <span class="sx">qr{ \. (?:html|xml )$ }</span><span class="n">x</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nv">$files</span><span class="o">-&gt;</span><span class="nb">each</span><span class="p">(</span> <span class="k">sub</span> <span class="p">{</span> <span class="n">check_links_in</span><span class="p">(</span><span class="nv">$_</span><span class="p">);</span> <span class="p">}</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>This is the important bit: load the config, create a user agent, and check links in one or all of the generated HTML files. I checked the generated HTML files in <code>public</code> because I didn’t feel like messing with <code>hugo server</code> or a Mojolicious mini-app. Scraping a local server could be an option later.</p>
<p>Using Mojolicious for everything was so much fun that I rewrote <code>config.yaml</code> as <code>config.json</code> to allow using <code>Mojo::JSON</code> here. Hugo’s built-in support for different <a href="http://gohugo.io/overview/configuration/">configuration format</a> made that a painless shift. Then Mojo lets me <a href="http://mojolicious.org/perldoc/Mojo/File#slurp"><code>slurp</code></a> the contents of the config file into a single string, which <a href="http://mojolicious.org/perldoc/Mojo/JSON#decode_json"><code>decode_json</code></a> turns into a hash reference.</p>
<p><a href="http://mojolicious.org/perldoc/Mojo/File#list_tree"><code>list_tree</code></a> gives a recursive directory listing of everything under <code>$root</code> as a <a href="http://mojolicious.org/perldoc/Mojo/Collection">Mojo::Collection</a>. Collections provide a tidy toolkit of list handling functionality without requiring me to go back and forth between arrays and array references.
I could find and iterate over all the HTML and XML files in vanilla Perl 5, but I like this better.</p>
<p>After a few runs, I added the ability to specify a single file in <a href="http://perldoc.perl.org/perlvar.html#%40ARGV"><code>@ARGV</code></a>. That way I can figure things out when that one link in that one file causes trouble.</p>
<h3 id="checking-links-in-a-file">Checking links in a file</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">check_links_in</span><span class="p">($filename) {</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$html</span> <span class="o">=</span> <span class="nn">Mojo::File</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="nv">$filename</span> <span class="p">)</span><span class="o">-&gt;</span><span class="n">slurp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$dom</span> <span class="o">=</span> <span class="nn">Mojo::DOM</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="nv">$html</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$links</span> <span class="o">=</span> <span class="nv">$dom</span><span class="o">-&gt;</span><span class="n">find</span><span class="p">(</span> <span class="s">&#39;[href], [src]&#39;</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nv">$links</span><span class="o">-&gt;</span><span class="nb">each</span><span class="p">(</span> <span class="n">sub</span><span class="p">(</span><span class="nv">$link</span><span class="p">,</span> <span class="nv">$n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="nv">$target</span> <span class="o">=</span> <span class="nv">$link</span><span class="o">-&gt;</span><span class="n">attr</span><span class="p">(</span> <span class="s">&#34;href&#34;</span> <span class="p">)</span> <span class="o">||</span> <span class="nv">$link</span><span class="o">-&gt;</span><span class="n">attr</span><span class="p">(</span> <span class="s">&#34;src&#34;</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Assume status will not change during the same run.</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">if</span> <span class="nb">exists</span> <span class="nv">$checked_links</span><span class="o">-&gt;</span><span class="p">{</span> <span class="nv">$target</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nv">$checked_links</span><span class="o">-&gt;</span><span class="p">{</span> <span class="nv">$target</span> <span class="p">}</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nn">Mojo::URL</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="nv">$target</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Ignore email links</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">if</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">scheme</span> <span class="o">&amp;&amp;</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">scheme</span> <span class="ow">eq</span> <span class="s">&#39;mailto&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nv">$checked_links</span><span class="o">-&gt;</span><span class="p">{</span> <span class="nv">$target</span> <span class="p">}</span> <span class="o">=</span> <span class="n">file_exists_for</span><span class="p">(</span> <span class="nv">$url</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="sr">//</span> <span class="n">external_link_works_for</span><span class="p">(</span> <span class="nv">$url</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="sr">//</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># In this version we only care about invalid links.</span>
</span></span><span class="line"><span class="cl">    <span class="k">unless</span> <span class="p">(</span> <span class="nv">$checked_links</span><span class="o">-&gt;</span><span class="p">{</span> <span class="nv">$target</span> <span class="p">}</span> <span class="p">)</span> <span class="p">{</span> <span class="n">say</span> <span class="n">summary_for</span><span class="p">(</span> <span class="nv">$target</span><span class="p">,</span> <span class="nv">$filename</span> <span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Once again I <code>slurp</code> a file into a string. This time it gets handed off to <code>Mojo::DOM</code> so it can <a href="http://mojolicious.org/perldoc/Mojo/DOM#find"><code>find</code></a> any elements with <code>src</code> or <code>href</code> attributes, and then create a <code>Mojo::URL</code> from the appropriate <a href="http://mojolicious.org/perldoc/Mojo/DOM#attr"><code>attr</code></a>. <code>Mojo::URL</code> does the tedious work of parsing URLs and making components like <a href="http://mojolicious.org/perldoc/Mojo/URL#scheme"><code>scheme</code></a> available.</p>
<p>Leaning on the <code>//</code> defined-or logical shortcut lets me take advantage of the three boolean states of Perl: truthy, falsey, and &ldquo;I dunno.&rdquo; Each URL-testing subroutine can return <code>undef</code> to indicate that it doesn’t know what to do with the URL, and let the next subroutine in line handle it. If nobody knows what to do with it, then that’s a bad link and gets remembered as a falsey value.</p>
<p><a href="http://mojolicious.org/perldoc/Mojo/Collection#each"><code>each</code></a> hands two items to the subroutine it invokes: an item in the collection and what number in the collection that item is (starting from 1). No, I don’t use <code>$n</code>, but I wanted you to see that it’s available. You can also access the item as <code>$_</code> as I did earlier. You can even do your subroutine arguments the old fashioned way with <code>@_</code>.</p>
<h3 id="is-it-an-internal-link">Is it an internal link?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">file_exists_for</span><span class="p">($url) {</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Ignore full urls that aren&#39;t pointed at my site.</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">host</span> <span class="o">&amp;&amp;</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">host</span> <span class="ow">ne</span> <span class="nv">$site</span><span class="o">-&gt;</span><span class="n">host</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">fragment</span> <span class="o">&amp;&amp;</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">path</span> <span class="ow">eq</span> <span class="s">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Points to a URL fragment within itself</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Today I don&#39;t care about those.</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># If I did, I&#39;d remember what file $url came from, load it, and check the DOM.</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$path</span> <span class="o">=</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">path</span>
</span></span><span class="line"><span class="cl">    <span class="ow">or</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="nv">$path</span> <span class="ow">eq</span> <span class="s">&#39;/&#39;</span> <span class="o">||</span> <span class="nv">$path</span><span class="o">-&gt;</span><span class="n">trailing_slash</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$path</span> <span class="o">=</span> <span class="nv">$path</span><span class="o">-&gt;</span><span class="n">merge</span><span class="p">(</span><span class="s">&#34;index.html&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$file</span> <span class="o">=</span> <span class="nv">$root</span> <span class="o">.</span> <span class="nv">$path</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="o">-</span><span class="n">f</span> <span class="nv">$file</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>I would check for <code>../</code> abuse if this was a general purpose script, but it’s mostly links I added by hand and checked manually at some point in the last fifteen years. So - assuming past me was not acting maliciously or foolishly, we rule out more likely situations:</p>
<ul>
<li>The URL <a href="http://mojolicious.org/perldoc/Mojo/URL#host"><code>host</code></a> points to something besides my site, which means it can’t be a local file.</li>
<li>The link has a <a href="http://mojolicious.org/perldoc/Mojo/URL#fragment"><code>fragment</code></a> pointing to a named anchor and nothing else. I only have that on <a href="/post/2014/10/blog-writing-in-org-mode/">one page</a> right now, and I don’t feel like complicating this script for a single page.</li>
<li>The <a href="http://mojolicious.org/perldoc/Mojo/URL#path"><code>path</code></a> isn’t set, which at this point means an empty link. That can’t be good.</li>
<li>If the link <em>is</em> to a local file, we check whether it exists.</li>
</ul>
<p><a href="http://mojolicious.org/perldoc/Mojo/Path">Mojo::Path</a> manipulation delights me. Sure, this could be a regular expression substitution with fewer characters of code, but someone else seeing <a href="http://mojolicious.org/perldoc/Mojo/Path#merge"><code>merge</code></a> after a check for a <a href="http://mojolicious.org/perldoc/Mojo/Path#trailing_slash">trailing slash</a> would probably understand that I’m adjusting for the common practice of <code>/thing/</code> being a link to <code>/thing/index.html</code>. They might understand even if they weren’t Perl developers!</p>
<h3 id="is-it-a-working-external-link">Is it a working external link?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">external_link_works_for</span><span class="p">($url, $ua) {</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$response</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Ignore tutorial demo links</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">host</span> <span class="o">&amp;&amp;</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">host</span> <span class="ow">eq</span> <span class="s">&#39;localhost&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Ex: //www.youtube.com/embed/bWqSuBg8AMo</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Produced by some Hugo shortcodes.</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$is_protocol_relative</span> <span class="o">=</span> <span class="o">!</span><span class="nv">$url</span><span class="o">-&gt;</span><span class="n">scheme</span> <span class="o">&amp;&amp;</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">host</span> <span class="o">&amp;&amp;</span> <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">host</span> <span class="ow">ne</span> <span class="nv">$site</span><span class="o">-&gt;</span><span class="n">host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="nv">$is_protocol_relative</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Use my site&#39;s choice of HTTP / HTTPS</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$url</span><span class="o">-&gt;</span><span class="n">scheme</span><span class="p">(</span> <span class="nv">$site</span><span class="o">-&gt;</span><span class="n">scheme</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nb">eval</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$ua</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">(</span> <span class="nv">$url</span> <span class="p">)</span><span class="o">-&gt;</span><span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="vg">$@</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">warn</span> <span class="s">&#34;When checking $url: $@&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="n">is_success</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>After some quick checks to ensure I’m not looking at a blog demo link and that I handle <a href="https://www.paulirish.com/2010/the-protocol-relative-url/">protocol-relative URLs</a> correctly, I wrap a simple <a href="http://mojolicious.org/perldoc/Mojo/UserAgent#head"><code>head</code></a> request in an <code>eval</code> block.</p>
<p>I use <a href="https://ochronus.com/http-head-request-good-uses/"><code>HTTP HEAD</code></a> because I only care about whether the link is valid. I don’t want the full content at the link. <code>eval</code> lets me catch timeouts and requests being sent to Web sites which no longer exist. Assuming no errors, this eventually returns whether the <a href="http://mojolicious.org/perldoc/Mojo/Transaction#result"><code>result</code></a> of the <a href="http://mojolicious.org/perldoc/Mojo/Transaction/HTTP">HTTP transaction</a> succeeded with <a href="http://mojolicious.org/perldoc/Mojo/Message/Response#is_success"><code>is_success</code></a>.</p>
<h3 id="summarize-it">Summarize it</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">summary_for</span><span class="p">($target, $filename) {</span>
</span></span><span class="line"><span class="cl">  <span class="nb">die</span> <span class="s">&#34;Didn&#39;t check [$target]?&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">unless</span> <span class="nb">exists</span> <span class="nv">$checked_links</span><span class="o">-&gt;</span><span class="p">{</span> <span class="nv">$target</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$status</span> <span class="o">=</span> <span class="nv">$checked_links</span><span class="o">-&gt;</span><span class="p">{</span> <span class="nv">$target</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">?</span> <span class="s">&#34;+&#34;</span>  <span class="c1"># It worked!</span>
</span></span><span class="line"><span class="cl">    <span class="p">:</span> <span class="s">&#34;-&#34;</span>  <span class="c1"># Something went wrong.</span>
</span></span><span class="line"><span class="cl">    <span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="s">&#34;$status $filename $target&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Today I only looked for bad links, but it can be useful to know the status of <em>all</em> links in my site. I used it a few times during development. May as well leave that bit of logic in.</p>
<h2 id="whats-that-do">What’s That Do?</h2>
<pre tabindex="0"><code>$ ./scripts/link-checker &gt; links.txt
</code></pre><p>A couple hundred lines like this, basically.</p>
<pre tabindex="0"><code>When checking http://coolnamehere.com: Premature connection close at scripts/check-links.pl line 53.
- public/categories/blogspot/index.html http://coolnamehere.com
- public/categories/blogspot/index.html http://blogspot.com
When checking http://vim.org/: Can&#39;t connect: Name or service not known at scripts/check-links.pl line 53.
- public/categories/blogspot/index.html http://vim.org/
When checking http://jruby.codehaus.org: Connect timeout at scripts/check-links.pl line 53.
- public/categories/blogspot/index.html http://jruby.codehaus.org
- public/categories/blogspot/index.html http://devzone.zend.com/article/2262-Zend-Framework-1.0.0-production-release
When checking http://jruby.codehaus.org/: Connect timeout at scripts/check-links.pl line 53.
- public/categories/coolnamehere/index.html http://jruby.codehaus.org/
</code></pre><p>Goodness those are embarrassing.</p>
<p>Okay I’m gonna go fix this.</p>
<p>Some links just won’t work with this code. I may revisit this later, but I got what I need. All links should at least work in a browser for now.</p>
<p>An added bonus that I didn’t expect: this code also ran on Windows 10 with no  changes needed.</p>
<h2 id="more-ideas">More Ideas</h2>
<p>Improvements that I thought of while putting this together, which I may eventually try out.</p>
<ul>
<li>Be a good bot citizen by paying attention to <a href="http://www.robotstxt.org/robotstxt.html"><code>robots.txt</code></a>. I tried that in an early version of the script, but hardly any of the sites provided one. I’ll ponder and try not to run the script too often for now.</li>
<li>Wrap things up in a <a href="http://mojolicious.org/perldoc/Mojo/Base">Mojo::Base</a> class for organization.</li>
<li>Run an instance and scrape that live - see if it makes a difference!</li>
<li>Use non-blocking requests, since <a href="http://mojolicious.org/perldoc/Mojo/UserAgent">Mojo::UserAgent</a> supports them.</li>
<li>Cache results to disk, since working links tend to stay that way for <em>at least</em> a few days.</li>
<li>Find out why some URLs didn’t work. Was it a <code>robots.txt</code> thing? A weird redirect? They worked in the browser, after all.</li>
</ul>
<p>Honestly the script does what I need it to, and I might never implement these other ideas.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Converting OGG To MP3</title>
  <link>https://randomgeekery.org/post/2017/02/converting-ogg-to-mp3/</link>
  <pubDate>Sat, 25 Feb 2017 00:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2017/02/converting-ogg-to-mp3/</guid>
  <description>I have ignored my MacBook Pro for a few months. Now my iTunes and Rhythmbox music libraries are out of sync. The Rhythmbox library includes a handful of Ogg Vorbis files. Because iTunes does not support Ogg by default, I will use FFmpeg to convert those files to MP3. For the sake of novelty, card/Raku is the glue language for the task.
I know. I could go digging in the box at the bottom of the back of the closet and re-rip those CDs.</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>raku-lang</category>  <category>perl-6</category>  <category>music</category>  <category>programming</category> 
  <content:encoded><![CDATA[<p>I have ignored my MacBook Pro for a few months. Now my iTunes and   Rhythmbox music libraries are out of sync. The Rhythmbox library includes a handful of <a href="http://vorbis.com/">Ogg Vorbis</a> files. Because iTunes does not support Ogg by default, I will use <a href="http://ffmpeg.org/">FFmpeg</a> to convert those files to MP3. For the sake of novelty, <a href="/card/raku/">card/Raku</a> is the glue language for the task.</p>
<p>I know. I could go digging in the box at the bottom of the back of the closet
and re-rip those CDs. But the closet is all the way over there. I’m right here. I
don’t feel like getting up, and I do feel like using Perl 6 for something.</p>
<p>Don’t you judge me.</p>
<p>This is a quick journey into Raku for my own amusement, and not a tutorial. I linger on the stuff that caught my attention rather than explain all the details. Still &ndash; hopefully it’s useful to you!</p>
<h2 id="perl-6-star-notes">Perl 6 Star Notes</h2>
<p>I installed <a href="http://rakudo.org/downloads/star/">Rakudo Star</a> 2017.01 from source. Some of this information may be useful to others poking at a new <a href="http://rakudo.org/">Rakudo</a> installation.</p>
<h3 id="did-i-set-up-my-path-correctly">Did I Set Up My Path Correctly?</h3>
<p>I misread the path setup instructions after <code>make</code> finished, and ended up flailing in confusion for several minutes before I double-checked the Makefile. You can skip the flailing by reading correctly or by rerunning the &ldquo;welcome message.&rdquo;</p>
<pre tabindex="0"><code>$ make welcome-message

Rakudo Star has been built and installed successfully.
Please make sure that the following directories are in PATH:
  /home/random/src/rakudo-star-2017.01/install/bin
  /home/random/src/rakudo-star-2017.01/install/share/perl6/site/bin
</code></pre><h3 id="what-version-of-perl-6-do-i-have">What Version Of Perl 6 Do I Have?</h3>
<p>Just throwing it in so you can see what I’m working with.</p>
<pre tabindex="0"><code>$ perl6 --version
This is Rakudo version 2017.01 built on MoarVM version 2017.01
implementing Perl 6.c.
</code></pre><h3 id="what-modules-do-i-have">What Modules Do I Have?</h3>
<p>As of version 2017.01, Rakudo includes <a href="https://github.com/ugexe/zef">zef</a> as its default package manager. See its <a href="https://github.com/ugexe/zef#usage">usage summary</a> for details of finding and installing modules. For the moment I want to know what came with my Rakudo Star installation.</p>
<pre tabindex="0"><code>$ zef list --installed
===&gt; Found via /home/random/src/rakudo-star-2017.01/install/share/perl6
CORE:ver(&#39;6.c&#39;):auth(&#39;perl&#39;)
===&gt; Found via /home/random/src/rakudo-star-2017.01/install/share/perl6/site
Test::Mock:ver(&#39;1.3&#39;)
LWP::Simple:ver(&#39;0.090&#39;):auth(&#39;Cosimo Streppone&#39;)
Pod::To::HTML:ver(&#39;0.3.7&#39;)
panda:ver(&#39;2016.02&#39;)
NativeHelpers::Blob:ver(&#39;0.1.10&#39;):auth(&#39;github:salortiz&#39;)
SVG
JSON::Tiny
Grammar::Debugger
zef:auth(&#39;github:ugexe&#39;)
HTTP::Easy:ver(&#39;1.1.0&#39;)
XML::Writer
Template::Mojo:ver(&#39;0.1&#39;)
File::Which
File::Temp
File::Directory::Tree:auth(&#39;labster&#39;)
TAP::Harness::Prove6:ver(&#39;0.0.1&#39;):auth(&#39;Leon Timmermans&#39;)
Terminal::ANSIColor:ver(&#39;0.2&#39;)
DBIish:ver(&#39;0.5.9&#39;)
SVG::Plot
Template::Mustache:auth(&#39;github:softmoth&#39;)
File::Find:ver(&#39;0.1&#39;)
Debugger::UI::CommandLine
Grammar::Profiler::Simple:ver(&#39;0.01&#39;):auth(&#39;Jonathan Scott Duff&#39;)
Pod::To::BigPage:ver(&#39;0.2.1&#39;):auth(&#39;Wenzel P. P. Peppmeyer&#39;)
PSGI:ver(&#39;1.2.0&#39;)
p6doc
HTTP::Status
Linenoise:ver(&#39;0.1.1&#39;):auth(&#39;Rob Hoelz&#39;)
JSON::Fast:ver(&#39;0.7&#39;)
Native::Resources:ver(&#39;0.1.0&#39;):auth(&#39;Rob Hoelz&#39;)
Shell::Command
LibraryMake:ver(&#39;1.0.0&#39;):auth(&#39;github:retupmoca&#39;)
MIME::Base64:ver(&#39;1.2&#39;):auth(&#39;github:retupmoca&#39;)
Digest::MD5:ver(&#39;0.05&#39;):auth(&#39;Cosimo Streppone&#39;)
URI:ver(&#39;0.1.2&#39;)
JSON::RPC:ver(&#39;0.17.1&#39;):auth(&#39;Pawel Pabian&#39;)
</code></pre><p>It would be nice if the output had a sort option. I can sort myself, though I’d lose information about where the modules were found.</p>
<pre tabindex="0"><code>$ zef list --installed | sort
</code></pre><p>I’m sure pull requests are welcome.</p>
<h3 id="how-do-i-get-at-the-documentation">How Do I Get At The Documentation?</h3>
<p>Once you stop flailing with your setup and know what modules are installed, use <a href="https://github.com/perl6/doc">p6doc</a> to read module documentation.</p>
<pre tabindex="0"><code>$ p6doc File::Find
</code></pre><p>Okay I have my Rakudo Star installation sorted out. Time for the task at hand.</p>
<h2 id="quick-question-how-many">Quick question: How many?</h2>
<p>How many Ogg files do I have, anyways?</p>
<pre tabindex="0"><code>$ find ~/Music/ -name &#39;*.ogg&#39; | wc -l
212
</code></pre><p>More than a handful, but still - that’s not too bad. Let’s take a minute to look at the Perl 6 I used.</p>
<h3 id="count-the-files-from-perl-6">Count The Files From Perl 6</h3>
<p>In order to get a feel for what I’m doing in Perl 6, I’m going to use Perl 6 to count the Ogg files. This task relies on <a href="https://github.com/tadzik/File-Find">File::Find</a>, which comes with Rakudo Star. Perl 6 File::Find works like Perl 5’s <a href="https://metacpan.org/pod/File::Find::Rule">File::Find::Rule</a>. You describe characteristics of the files you’re looking for, and it hands you back a <a href="https://docs.perl6.org/language/list.html#Lazy_Lists">lazy list</a> of files that match.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="k">v</span><span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Find</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$music_dir</span> <span class="o">=</span> <span class="vg">%*ENV</span><span class="p">&lt;</span><span class="s">HOME</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#34;</span><span class="s2">/Music</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@ogg_files</span> <span class="o">=</span> <span class="nb">find</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">dir</span>  <span class="o">=&gt;</span> <span class="nv">$music_dir</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">name</span> <span class="o">=&gt;</span> <span class="p">/</span><span class="se">\</span><span class="sr">.ogg</span><span class="ni">$</span><span class="p">/</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$count</span> <span class="o">=</span> <span class="nv">@ogg_files</span><span class="o">.</span><span class="nb">elems</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nb">say</span> <span class="p">&#34;</span><span class="s2">I see </span><span class="nv">$count</span><span class="s2"> Ogg files</span><span class="p">&#34;;</span>
</span></span></code></pre></div><p>This does the same as the one-liner: look in <code>$HOME/Music</code> for and files suffixed with <code>.ogg</code>, and tell me how many matches it found.</p>
<pre tabindex="0"><code>$ perl6 ogg-to-mp3.p6
I see 212 Ogg files
</code></pre><p>Yay I get exactly the same number of files that <code>find</code> found! Okay now I’m going to convert them to MP3. I’ll put them in a working directory so that I don’t confuse Rhythmbox.</p>
<p>FFmpeg can handle conversion, but my string starts looking a bit funky thanks to funky Perl quoting rules. Anyways.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="k">v</span><span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Find</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Audio::Taglib::Simple</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$music_dir</span> <span class="o">=</span> <span class="vg">%*ENV</span><span class="p">&lt;</span><span class="s">HOME</span><span class="p">&gt;</span> <span class="o">~</span> <span class="p">&#34;</span><span class="s2">/Music</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">@ogg_files</span> <span class="o">=</span> <span class="nb">find</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="s">dir</span>  <span class="o">=&gt;</span> <span class="nv">$music_dir</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">  <span class="s">name</span> <span class="o">=&gt;</span> <span class="p">/</span><span class="se">\</span><span class="sr">.ogg</span><span class="ni">$</span><span class="p">/</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nv">@ogg_files</span> <span class="k">-&gt;</span> <span class="nv">$ogg_file</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$path</span> <span class="o">=</span> <span class="kt">IO::Path</span><span class="o">.</span><span class="nb">new</span><span class="p">(</span><span class="nv">$ogg_file</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Where will the converted file go?</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$working_dir</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">converted</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$new_dir</span> <span class="o">=</span> <span class="nv">$path</span><span class="o">.</span><span class="nb">dirname</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span><span class="nv">$music_dir</span><span class="o">,</span> <span class="nv">$working_dir</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$new_file</span> <span class="o">=</span> <span class="nv">$path</span><span class="o">.</span><span class="nb">basename</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span><span class="nv">$path</span><span class="o">.</span><span class="nb">extension</span><span class="o">,</span> <span class="p">&#34;</span><span class="s2">mp3</span><span class="p">&#34;);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$mp3_file</span> <span class="o">=</span> <span class="p">&#34;</span><span class="nv">$new_dir</span><span class="s2">/</span><span class="nv">$new_file</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Create the directory path if needed</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># (still returns True if $new_dir already exists)</span>
</span></span><span class="line"><span class="cl">  <span class="nb">mkdir</span> <span class="nv">$new_dir</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Ask ffmpeg to convert.</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   -y                    &lt;- overwrite if $mp3_file exists</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   -v warning            &lt;- report warnings &amp; errors but not general info</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   -i &#34;$ogg_file&#34;        &lt;- Read from here (quoted for spaces)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   -map_metadata &#34;0:s:0&#34; &lt;- include title, artist, etc (quoted for P6 interpolation oddness)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   &#34;$mp3_file&#34;           &lt;- write to here (quoted for spaces)</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$captured</span> <span class="o">=</span> <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2">ffmpeg -y -v warning -i &#34;</span><span class="nv">$ogg_file</span><span class="s2">&#34; -map_metadata &#34;0:s:0&#34; &#34;</span><span class="nv">$mp3_file</span><span class="s2">&#34;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span> <span class="nv">$captured</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span> <span class="p">&#34;</span><span class="s2">.</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">say</span> <span class="p">&#34;</span><span class="s2">DONE</span><span class="p">&#34;;</span>
</span></span></code></pre></div><p><a href="https://docs.perl6.org/type/IO::Path">IO::Path</a> objects understand how file and directory paths work. Constructing the <code>$mp3_file</code> filename was easy enough thanks to a little string substitution on the Path components.</p>
<p><a href="https://docs.perl6.org/language/quoting#Shell_quoting_with_interpolation:_qqx"><code>qqx</code></a> shell quoting allows variable interpolation, though Perl 6 saw <code>0:s:0</code> as a thing it needed to interpolate until I wrapped it in quotes. It took me a while to figure out the correct FFmpeg invocation, so breaking it down in the comments made sense. Oh and if there’s any output from the conversion I print it.</p>
<blockquote>
<p>[!NOTE]
I need to remind myself that I’m putting down notes here and not writing a  tutorial, but I suggest newcomers to Perl 6 explore the <a href="https://docs.perl6.org/type.html">types</a> and <a href="https://docs.perl6.org/routine.html">routines</a>.</p>
<p>Yes, Perl 6 syntax can be strange and intimidating. You don’t need to learn all the syntax to get stuff done. The types and routines hold most of what you need for daily work. Can’t find it there? Look at the <a href="https://modules.perl6.org/">modules</a>. Easy stuff should still be easy. This is Perl, after all.</p>
</blockquote>
<h3 id="quality-control">Quality Control</h3>
<p>I used <a href="https://github.com/zoffixznet/perl6-audio-taglib-simple">Audio::Taglib::Simple</a> to double-check my work while figuring out the correct <code>ffmpeg</code> incantaion.</p>
<pre tabindex="0"><code>$ sudo apt-get install libtagc0
$ zef install Audio::Taglib::Simple
</code></pre><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="k">v</span><span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Audio::Taglib::Simple</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="vg">@*ARGS</span> <span class="k">-&gt;</span> <span class="nv">$mp3_file</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$mp3_tags</span> <span class="o">=</span> <span class="n">Audio::Taglib::Simple</span><span class="o">.</span><span class="nb">new</span><span class="p">(&#34;</span><span class="nv">$mp3_file</span><span class="p">&#34;);</span>
</span></span><span class="line"><span class="cl">  <span class="nb">say</span> <span class="p">&#34;</span><span class="nv">$mp3_file:</span><span class="s2"> </span><span class="p">{</span><span class="nv">$mp3_tags</span><span class="o">.</span><span class="nf">title</span><span class="p">}</span><span class="s2"> - </span><span class="p">{</span><span class="nv">$mp3_tags</span><span class="o">.</span><span class="nf">album</span><span class="p">}</span><span class="s2"> - </span><span class="p">{</span><span class="nv">$mp3_tags</span><span class="o">.</span><span class="nf">artist</span><span class="p">}&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$mp3_tags</span><span class="o">.</span><span class="nf">free</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>This takes any command line arguments and presents a summary of track information for each argument. It will choke if I hand it anything that’s not an MP3 file, but for an idle weekend thing on my own machine it’s fine.</p>
<pre tabindex="0"><code>$ perl6 check-mp3.p6 converted/Melvins/Houdini/*
converted/Melvins/Houdini/01 - Hooch.mp3
Hooch - Houdini - Melvins
converted/Melvins/Houdini/02 - Night Goat.mp3
Night Goat - Houdini - Melvins
converted/Melvins/Houdini/03 - Lizzy.mp3
Lizzy - Houdini - Melvins
converted/Melvins/Houdini/04 - Going Blind.mp3
Going Blind - Houdini - Melvins
converted/Melvins/Houdini/05 - Honey Bucket.mp3
Honey Bucket - Houdini - Melvins
converted/Melvins/Houdini/06 - Hag Me.mp3
Hag Me - Houdini - Melvins
converted/Melvins/Houdini/07 - Set Me Straight.mp3
Set Me Straight - Houdini - Melvins
converted/Melvins/Houdini/08 - Sky Pup.mp3
Sky Pup - Houdini - Melvins
converted/Melvins/Houdini/09 - Joan of Arc.mp3
Joan of Arc - Houdini - Melvins
converted/Melvins/Houdini/10 - Teet.mp3
Teet - Houdini - Melvins
converted/Melvins/Houdini/11 - Copache.mp3
Copache - Houdini - Melvins
converted/Melvins/Houdini/12 - Pearl Bomb.mp3
Pearl Bomb - Houdini - Melvins
converted/Melvins/Houdini/13 - Spread Eagle Beagle.mp3
Spread Eagle Beagle - Houdini - Melvins
</code></pre><p>Cool. It worked.</p>
<h3 id="what-now">What Now?</h3>
<p>I move the converted files to my <code>~/Sync</code> folder and let <a href="https://syncthing.net/">Syncthing</a> handle copying them to the Mac. They import into iTunes and I’m all done!</p>
<p>Wait. I still have to sync the files that were imported to Rhythmbox as MP3 but aren’t on iTunes yet.</p>
<p>Not today, though.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Hello Dancer2</title>
  <link>https://randomgeekery.org/post/2016/07/hello-dancer2/</link>
  <pubDate>Mon, 11 Jul 2016 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2016/07/hello-dancer2/</guid>
  <description>The PerlDancer team’s Dancer2 project is a card/Perl framework for writing Web applications with less boilerplate code than other Web frameworks. I am slowly exploring what it offers. Feel free to follow along.
This is sort of a tutorial. I assume you know Perl and maybe a bit about Web server programming, but not that you have mastered either. My pace may annoy you if you have mastered Perl, Web programming, or Dancer2.</description>
   <category>post</category> 
   <category>post</category> 
   <category>perl</category>  <category>dancer</category>  <category>learn</category>  <category>programming</category> 
  <content:encoded><![CDATA[<h2>Some simple first steps with the Perl 5 Dancer2 web framework</h2><p>The <a href="https://github.com/PerlDancer/">PerlDancer</a> team’s <a href="https://metacpan.org/pod/Dancer2">Dancer2</a> project is a <a href="/card/perl/">card/Perl</a> framework for writing Web applications with less <a href="https://en.wikipedia.org/wiki/Boilerplate_code">boilerplate code</a> than other Web frameworks. I am slowly exploring what it offers. Feel free to follow along.</p>
<p>This is sort of a tutorial. I assume you know Perl and maybe a bit about Web server programming, but not that you have mastered either. My pace may annoy you if you <em>have</em> mastered Perl, Web programming, or Dancer2.</p>
<h2 id="installation">Installation</h2>
<p>I use Perl 5.24.0 and <a href="https://metacpan.org/pod/App::cpanminus">cpanm</a> via <a href="http://perlbrew.pl/">Perlbrew</a>. Installation of Dancer2 and its dependencies requires a single command.</p>
<pre tabindex="0"><code>$ cpanm Dancer2
</code></pre><h2 id="hey">Hey</h2>
<p>You do not need much code to create a Dancer2 application.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Dancer2</span><span class="p">;</span>     <span class="c1"># Load Dancer2 and its keywords</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">get</span> <span class="s">&#39;/hey&#39;</span> <span class="o">=&gt;</span> <span class="k">sub</span> <span class="p">{</span> <span class="c1"># Define some routes</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="s">&#39;Hey!&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">start</span><span class="p">;</span>           <span class="c1"># Run the application</span>
</span></span></code></pre></div><p>Even better: you can hand this code to Perl and it starts a server!</p>
<pre tabindex="0"><code>$ perl hey.pl
&gt;&gt; Dancer2 v0.200002 server 15388 listening on http://0.0.0.0:3000
</code></pre><p>Loading <code>http://localhost:3000/hey</code> in a browser shows our simple message.</p>
<p><img src="/post/2016/07/attachments/img/2016/dancer2-hey.png" title="Hey from Dancer2!" alt="Hey from Dancer2"/></p>
<p>Dancer2 gives you a <a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL</a> — Domain-Specific Language — to describe your application. These DSL <a href="https://metacpan.org/pod/distribution/Dancer2/lib/Dancer2/Manual.pod#DSL-KEYWORDS">keywords</a> cut down the boilerplate code common in some Web development frameworks.</p>
<h3 id="get"><code>get</code></h3>
<p>The <a href="https://metacpan.org/pod/distribution/Dancer2/lib/Dancer2/Manual.pod#get">get</a> keyword defines a <a href="https://metacpan.org/pod/Dancer2::Core::Route">route</a> for Dancer2. Routes tell Dancer2 how to respond when someone requests a path — the /hey bit — from your application. <code>get</code> is also a method from <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">HTTP</a>. Use it when you only want to &ldquo;get&rdquo; something from the application. Dancer2 has keywords for more HTTP methods, but <code>get</code> is fine for now.</p>
<p>What happens if someone requests a path that you did not define?</p>
<p>Your Dancer2 application returns an error page informing them that the path does not exist.</p>
<p>With the HTTP method and path defined, the last important part of our route is the code. Your application runs that code and sends its return value to the visitor. Our first route code example is an anonymous subroutine that returns the text &ldquo;Hello!&rdquo;, but they can be as complicated as you need.</p>
<h3 id="start"><code>start</code></h3>
<p><a href="https://metacpan.org/pod/distribution/Dancer2/lib/Dancer2/Manual.pod#start">start</a> tells Dancer2 that you finished defining your application and it can begin serving to the world.</p>
<p>DSL = Keywords + Sugar</p>
<p>Keywords make the Dancer2 DSL work, but the code style takes advantage of Perl’s flexible syntax. Our route looks like this with less <a href="https://en.wikipedia.org/wiki/Syntactic_sugar">syntactic sugar</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="n">get</span><span class="p">(</span><span class="s">&#39;/hey&#39;</span><span class="p">,</span> <span class="k">sub</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&#39;Hey!&#39;</span><span class="p">;</span> <span class="p">});</span>
</span></span></code></pre></div><h2 id="hey-you">Hey You</h2>
<p>How about greeting the visitor by name? Since form processing involves more steps than I want to think about today, we use route parameters instead.</p>
<p>Dancer2 allows placeholders in route paths. The simplest placeholders are tokens prefixed with a colon, such as <code>:name</code> or <code>:id</code>. When you make a request that matches, such as <code>/hey/brian</code>, Dancer2 saves the matching path part. Here, look at some code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Dancer2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># A simple greeting: /hey</span>
</span></span><span class="line"><span class="cl"><span class="n">get</span> <span class="s">&#39;/hey&#39;</span> <span class="o">=&gt;</span> <span class="k">sub</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="s">&#39;Hey!&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># A personalized greeting: /hey/Brian</span>
</span></span><span class="line"><span class="cl"><span class="n">get</span> <span class="s">&#39;/hey/:name&#39;</span> <span class="o">=&gt;</span> <span class="k">sub</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$name</span> <span class="o">=</span> <span class="nn">route_parameters</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="s">&#34;Hey $name!&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">start</span><span class="p">;</span>
</span></span></code></pre></div><p>Route handlers can get <a href="https://metacpan.org/pod/distribution/Dancer2/lib/Dancer2/Manual.pod#Route-Handlers">much more complicated</a>, but not today. Our application treats a general greeting and a greeting with a distinct name at two different actions, so we use two different routes.</p>
<p>In order to use the new code, we need to stop the Perl process. <code>Control-C</code> should do it. Then launch it again, and the new code will be loaded.</p>
<pre tabindex="0"><code>$ perl hey.pl
&gt;&gt; Dancer2 v0.200002 server 31385 listening on http://0.0.0.0:3000
</code></pre><p>Now we should be able to see <a href="http://localhost:3000/hey/Brian">http://localhost:3000/hey/Brian</a> — or whatever name you prefer.</p>
<p><img src="/post/2016/07/attachments/img/2016/dancer2-hey-brian.png" alt="&ldquo;Hey Brian!&rdquo; in Dancer2"/></p>
<h3 id="route_parameters"><code>route_parameters</code></h3>
<p><a href="https://metacpan.org/pod/distribution/Dancer2/lib/Dancer2/Manual.pod#route_parameters">route_parameters</a> returns a <a href="https://metacpan.org/pod/Hash::MultiValue">hash-like object</a> which stores tokens and their values from a route match. Use the <code>get</code> method when you need those values in your route code.</p>
<h2 id="wrap-it-up">Wrap It Up</h2>
<p>We installed Dancer2, made just about the simplest Web application I could think of, and explored a little bit about declaring routes.</p>
<p>What’s next? I plan to look at using template files to produce real Web pages.</p>
]]></content:encoded>
</item>
</channel>
</rss>
