<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>dataonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/data/</link>
    <description>
      Recent contentindata on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sat, 06 Jun 2020 17:40:07 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/data/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: CSV and Data Tables in Hugo</title>
  <link>https://randomgeekery.org/post/2020/06/csv-and-data-tables-in-hugo/</link>
  <pubDate>Sat, 06 Jun 2020 17:40:07 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/06/csv-and-data-tables-in-hugo/</guid>
  <description>I’ve been looking at screenshots all day. Here’s Loud Dog instead.
tldr: Use Hugo’s transform.Unmarshal to turn strings into data structures, which you can feed into a table template. But sometimes split makes more sense.
I figured out how to write Hugo shortcodes to generate tables from CSV and other formats. Didn’t even occur to me that it was possible — or this easy — so I had to share.</description>
   <category>post</category> 
   <category>post</category> 
   <category>hugo</category>  <category>data</category>  <category>showing-it-anyways</category>  <category>csv</category>  <category>rst</category>  <category>and-a-dog</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>Am I reinventing reStructuredText with shortcodes? Don't judge me.</h2><p><img src="/post/2020/06/../../../attachments/img/2020/cover-2020-06-06.jpg" alt="attachments/img/2020/cover-2020-06-06.jpg"/>
I&rsquo;ve been looking at screenshots all day. Here&rsquo;s Loud Dog instead.</p>
<p><a href="/card/tldr/">tldr</a>: Use <a href="/card/hugo/">Hugo</a>’s <a href="https://gohugo.io/functions/transform.unmarshal/"><code>transform.Unmarshal</code></a> to turn strings into data structures, which you can feed into a table template. But sometimes <a href="https://gohugo.io/functions/split/"><code>split</code></a> makes more sense.</p>
<p>I figured out how to write Hugo <a href="https://gohugo.io/templates/shortcode-templates/">shortcodes</a> to generate <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table">tables</a> from <a href="/card/csv/">CSV</a> and other formats. Didn’t even occur to me that it was possible — or this easy — so I had to share.</p>
<p>This approach only works as-is for uniform, shallow structures: every row has the same number of fields, and every field translates cleanly to a string. If you have more complex structures, you need more complex templates.</p>
<h2 id="why">Why?</h2>
<p>Most Markdown parsers include some way to handle tables. Usually it involves
drawing your table with ASCII characters. Something like this, from an older
post of mine about <a href="/post/2017/01/elscreen/">elscreen</a>:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">Function            | Keys    | Description
</span></span><span class="line"><span class="cl">--------------------|---------|-------------------------------------
</span></span><span class="line"><span class="cl"><span class="sb">`elscreen-create`</span>   | <span class="sb">`C-z c`</span> | Create a new screen and switch to it.
</span></span><span class="line"><span class="cl"><span class="sb">`elscreen-next`</span>     | <span class="sb">`C-z n`</span> | Cycle to the next screen
</span></span><span class="line"><span class="cl"><span class="sb">`elscreen-previous`</span> | <span class="sb">`C-z p`</span> | Cycle to the previous screen
</span></span><span class="line"><span class="cl"><span class="sb">`elscreen-kill`</span>     | <span class="sb">`C-z k`</span> | Kill the current screen
</span></span><span class="line"><span class="cl"><span class="sb">`elscreen-help`</span>     | <span class="sb">`C-z ?`</span> | Show ElScreen key bindings</span></span></code></pre>
</figure><p>I can read it just fine, but I find managing Markdown tables tedious without editor extensions. I want easy tables. I don’t care if they look like a table while I’m editing them. If I can copy and paste something into a shortcode? Even better.</p>
<p><a href="/card/restructuredtext/">card/reStructuredText</a> and <a href="/card/asciidoctor/">card/Asciidoctor</a> both provide table-handling approaches beyond drawing ASCII, though the default <a href="https://docutils.sourceforge.io/rst.html">rst table</a> is lovely if you <em>do</em> like fiddling with columns. I looked at them for shortcode inspiration — particularly rst’s <a href="https://docutils.sourceforge.io/docs/ref/rst/directives.html#id4">csv-table</a> and <a href="https://docutils.sourceforge.io/docs/ref/rst/directives.html#list-table">list-table</a> directives.</p>
<h2 id="csv-tables">CSV tables</h2>
<p>First up: CSV, &ldquo;Comma-Separated Values&rdquo;. I work a fair amount with CSV on the command line. I may want to copy and paste something into a table for a blog post every once in a while.</p>
<p>A <code>csv-table</code> shortcode could contain any CSV data. Maybe something from the <a href="https://github.com/awesomedata/awesome-public-datasets">Awesome Public Datasets</a>? Nah, I’ll just use my <a href="https://plausible.io">https://plausible.io</a> visitor count for the last week.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">csv-table</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">Date,Visitors
</span></span><span class="line"><span class="cl">2020-05-28,66
</span></span><span class="line"><span class="cl">2020-05-29,43
</span></span><span class="line"><span class="cl">2020-05-30,33
</span></span><span class="line"><span class="cl">2020-05-31,44
</span></span><span class="line"><span class="cl">2020-06-01,74
</span></span><span class="line"><span class="cl">2020-06-02,62
</span></span><span class="line"><span class="cl">2020-06-03,73
</span></span><span class="line"><span class="cl">2020-06-04,28
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">csv-table</span> <span class="p">&gt;</span>}}</span></span></code></pre>
</figure><p>My shortcode receives that data as a string in the <a href="https://gohugo.io/templates/shortcode-templates/#inner"><code>.Inner</code></a> variable. How to turn that string into a table?</p>
<h3 id="just-use-transformunmarshal">Just use <code>transform.Unmarshal</code></h3>
<p>Give <code>transform.Unmarshal</code> a formatted string, and it gives you back a data structure. CSV text becomes an array of arrays, which we turn into a table by iterating through everything with <a href="https://gohugo.io/functions/range/"><code>range</code></a>.</p>
<figure class="highlight">
  <figcaption><tt>layouts/shortcodes/csv-table.html</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">code</span> <span class="na">file</span><span class="o">=</span><span class="s">&#34;layouts/shortcodes/csv-table.html&#34;</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">{{ $rows := .Inner | transform.Unmarshal }}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ range $rows }}
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      {{ range . }} <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{ . }}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span> {{ end }}
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ end }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">code</span> <span class="p">&gt;</span>}}</span></span></code></pre>
</figure><p>Voila! Instant table!</p>
<p><img src="/post/2020/06/attachments/img/2020/csv-table-no-header.png" alt="A CSV table"/></p>
<p>Not bad, but it could be better.</p>
<ul>
<li>that first row provides column names, which works better as table headers than just another row</li>
<li>I prefer a particular style for numeric columns</li>
<li>what about a summary caption?</li>
</ul>
<p>Give me a minute.</p>
<h3 id="fine-tuning-the-table-with-parameters">Fine-tuning the table with parameters</h3>
<p>I’ll add a parameter for the caption. Maybe another parameter indicating whether to expect a header row, since the first row of CSV doesn’t <em>always</em> contain column names.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">csv-table</span> <span class="na">caption</span><span class="o">=</span><span class="s">&#34;Site visitors, 2020-05-28 to 2020-06-04&#34;</span> <span class="na">header</span><span class="o">=</span><span class="s">true</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">Date,Visitors
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">csv-table</span> <span class="p">&gt;</span>}}</span></span></code></pre>
</figure><p>Now that I know how I want to use the shortcode, it’s time to implement the details.</p>
<figure class="highlight">
  <figcaption><tt>layouts/shortcodes/csv/table.html</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{ $caption := .Get &#34;caption&#34; }}
</span></span><span class="line"><span class="cl">{{ $useHeaderRow := .Get &#34;header&#34; }}
</span></span><span class="line"><span class="cl">{{ $rows := .Inner | transform.Unmarshal }}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ with $caption }}<span class="p">&lt;</span><span class="nt">caption</span><span class="p">&gt;</span>{{ . }}<span class="p">&lt;/</span><span class="nt">caption</span><span class="p">&gt;</span>{{ end }}
</span></span><span class="line"><span class="cl">  {{ if $useHeaderRow }}
</span></span><span class="line"><span class="cl">    {{ $headerRow := index $rows 0 }}
</span></span><span class="line"><span class="cl">    {{ $rows = after 1 $rows }}
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span> {{ range $headerRow }} <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>{{ . }}<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span> {{ end }} <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ end }}
</span></span><span class="line"><span class="cl">  {{ range $rows }}
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      {{ range . }}
</span></span><span class="line"><span class="cl">        {{ if (findRE &#34;^\\d+$&#34; .) }}
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">td</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;numeric&#34;</span><span class="p">&gt;</span>{{ . }}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        {{ else }}
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{ . }}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        {{ end }}
</span></span><span class="line"><span class="cl">      {{ end }}
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ end }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span></span></span></code></pre>
</figure><ul>
<li>if there’s a header row, <a href="https://gohugo.io/functions/after/"><code>after</code></a> lets me skip past it when building the data rows</li>
<li>The regular expression I hand to <a href="https://gohugo.io/functions/findre/"><code>findRE</code></a> is a little naive, but it works for today</li>
</ul>
<p>Better!</p>
<p><img src="/post/2020/06/attachments/img/2020/csv-table.png" alt="A CSV table with headers and a caption"/></p>
<p>I still need to fiddle with my styles. This table’s a little wide for these
values. Maybe later.</p>
<p>CSV is great, but <code>transform.Unmarshal</code> supports other formats. What about those?</p>
<h2 id="digression-data-tables">Digression: data tables</h2>
<p>I got a little carried away when I learned how much <code>transform.Unmarshal</code> can
do. You could get a data structure from CSV, <a href="https://json.org">JSON</a>, <a href="/card/toml/">card/TOML</a>, or <a href="/card/yaml/">card/YAML</a>!</p>
<p>What about — what about a <strong>data</strong> table? Mind you, I’m not talking about Hugo <a href="https://gohugo.io/templates/data-templates/">data files</a> or <a href="https://gohugo.io/templates/data-templates/#data-driven-content"><code>getJSON</code></a>. That’s a great idea for later.</p>
<p>No, I’m talking about something similar to the <code>csv-table</code> case: arrays of JSON objects you paste in from somewhere else to add a little information to your blog post.</p>
<p>Heck, you don’t even need parameters. You could put caption and header details <em>in</em> the data! Might be a good idea to use a list of desired columns instead of a simple flag. That way we can pick and choose columns without editing the row objects.</p>
<p>Suppose I extracted details for the US and a couple neighbors from <a href="https://covid19api.com/">COVID19API</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">data-table</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">  &#34;caption&#34;: &#34;COVID-19 updates for 6 Jun 2020&#34;,
</span></span><span class="line"><span class="cl">  &#34;headers&#34;: [
</span></span><span class="line"><span class="cl">      &#34;Country&#34;,
</span></span><span class="line"><span class="cl">      &#34;NewConfirmed&#34;,
</span></span><span class="line"><span class="cl">      &#34;TotalConfirmed&#34;,
</span></span><span class="line"><span class="cl">      &#34;NewDeaths&#34;,
</span></span><span class="line"><span class="cl">      &#34;TotalDeaths&#34;,
</span></span><span class="line"><span class="cl">      &#34;NewRecovered&#34;,
</span></span><span class="line"><span class="cl">      &#34;TotalRecovered&#34;
</span></span><span class="line"><span class="cl">  ],
</span></span><span class="line"><span class="cl">  &#34;rows&#34;: [
</span></span><span class="line"><span class="cl">    {
</span></span><span class="line"><span class="cl">      &#34;Country&#34;: &#34;Canada&#34;,
</span></span><span class="line"><span class="cl">      &#34;CountryCode&#34;: &#34;CA&#34;,
</span></span><span class="line"><span class="cl">      &#34;Slug&#34;: &#34;canada&#34;,
</span></span><span class="line"><span class="cl">      &#34;NewConfirmed&#34;: 1356,
</span></span><span class="line"><span class="cl">      &#34;TotalConfirmed&#34;: 191894,
</span></span><span class="line"><span class="cl">      &#34;NewDeaths&#34;: 122,
</span></span><span class="line"><span class="cl">      &#34;TotalDeaths&#34;: 15554,
</span></span><span class="line"><span class="cl">      &#34;NewRecovered&#34;: 890,
</span></span><span class="line"><span class="cl">      &#34;TotalRecovered&#34;: 53074,
</span></span><span class="line"><span class="cl">      &#34;Date&#34;: &#34;2020-06-06T23:48:14Z&#34;
</span></span><span class="line"><span class="cl">    },
</span></span><span class="line"><span class="cl">    {
</span></span><span class="line"><span class="cl">      &#34;Country&#34;: &#34;Mexico&#34;,
</span></span><span class="line"><span class="cl">      &#34;CountryCode&#34;: &#34;MX&#34;,
</span></span><span class="line"><span class="cl">      &#34;Slug&#34;: &#34;mexico&#34;,
</span></span><span class="line"><span class="cl">      &#34;NewConfirmed&#34;: 4346,
</span></span><span class="line"><span class="cl">      &#34;TotalConfirmed&#34;: 110026,
</span></span><span class="line"><span class="cl">      &#34;NewDeaths&#34;: 625,
</span></span><span class="line"><span class="cl">      &#34;TotalDeaths&#34;: 13170,
</span></span><span class="line"><span class="cl">      &#34;NewRecovered&#34;: 3083,
</span></span><span class="line"><span class="cl">      &#34;TotalRecovered&#34;: 77841,
</span></span><span class="line"><span class="cl">      &#34;Date&#34;: &#34;2020-06-06T23:48:14Z&#34;
</span></span><span class="line"><span class="cl">    },
</span></span><span class="line"><span class="cl">    {
</span></span><span class="line"><span class="cl">      &#34;Country&#34;: &#34;United States of America&#34;,
</span></span><span class="line"><span class="cl">      &#34;CountryCode&#34;: &#34;US&#34;,
</span></span><span class="line"><span class="cl">      &#34;Slug&#34;: &#34;united-states&#34;,
</span></span><span class="line"><span class="cl">      &#34;NewConfirmed&#34;: 24720,
</span></span><span class="line"><span class="cl">      &#34;TotalConfirmed&#34;: 1897380,
</span></span><span class="line"><span class="cl">      &#34;NewDeaths&#34;: 921,
</span></span><span class="line"><span class="cl">      &#34;TotalDeaths&#34;: 109132,
</span></span><span class="line"><span class="cl">      &#34;NewRecovered&#34;: 6704,
</span></span><span class="line"><span class="cl">      &#34;TotalRecovered&#34;: 491706,
</span></span><span class="line"><span class="cl">      &#34;Date&#34;: &#34;2020-06-06T23:48:14Z&#34;
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">  ]
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">data-table</span> <span class="p">&gt;</span>}}</span></span></code></pre>
</figure><p>The logic looks similar to <code>csv-table</code>, with adjustments for data format differences.</p>
<figure class="highlight">
  <figcaption><tt>layouts/shortcodes/data-table.html</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{ $table := .Inner | transform.Unmarshal }}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  {{ with $table.caption }} <span class="p">&lt;</span><span class="nt">caption</span><span class="p">&gt;</span>{{ . | markdownify }}<span class="p">&lt;/</span><span class="nt">caption</span><span class="p">&gt;</span> {{ end }}
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">thead</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      {{ range $table.headers }} <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>{{ . | humanize }}<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span> {{ end }}
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">thead</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    {{ range $table.rows }}
</span></span><span class="line"><span class="cl">      {{ $row := . }}
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        {{ range $table.headers }}
</span></span><span class="line"><span class="cl">          {{ with (index $row .) }}
</span></span><span class="line"><span class="cl">            {{ if (findRE &#34;^\\d+$&#34; .) }}
</span></span><span class="line"><span class="cl">              <span class="p">&lt;</span><span class="nt">td</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;numeric&#34;</span><span class="p">&gt;</span>{{ . | lang.NumFmt 0 }}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            {{ else }}
</span></span><span class="line"><span class="cl">              <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>{{ . }}<span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            {{ end }}
</span></span><span class="line"><span class="cl">          {{ end }}
</span></span><span class="line"><span class="cl">        {{ end }}
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    {{ end }}
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">tbody</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>These header fields use <a href="https://en.wikipedia.org/wiki/Camel_case">camel case</a> names like &ldquo;TotalRecovered&rdquo;. Piping them through <a href="https://gohugo.io/functions/humanize/"><code>humanize</code></a> and <a href="https://gohugo.io/functions/title/"><code>title</code></a> transforms them into distinct capitalized words: &ldquo;Total Recovered.&rdquo; That’s easier for me to read in a formatted table.</p>
<p>And — sadly, considering that the topic is <a href="https://www.mayoclinic.org/diseases-conditions/coronavirus/symptoms-causes/syc-20479963">COVID-19</a> cases — <a href="https://gohugo.io/functions/numfmt/"><code>lang.NumFmt</code></a> makes large numbers more readable.</p>
<p><img src="/post/2020/06/attachments/img/2020/data-table.png" alt="A data table"/></p>
<p>Wonderful! Wonderful formatting, anyways. The details are pretty sobering. People! Wash your hands and wear a mask!</p>
<p>There’s really only one <em>slight</em> problem with <code>data-table</code>. I don’t need it. Not today, anyways.</p>
<h2 id="what-i-need-list-tables">What I need: list tables</h2>
<p>What about that first table I mentioned? You know, the <code>elscreen</code> quick reference? <em>That</em> is the kind of table I need a shortcode for. Something like a reStructuredText <code>list-table</code>, or <a href="https://asciidoctor.org/docs/asciidoc-syntax-quick-reference/#tables">Asciidoctor tables</a>.</p>
<p>I tried different approaches with <code>transform.Unmarshal</code> and mashing YAML, TOML, or JSON lists into something useful. That got frustratingly brittle. Time to step back and reevaluate. What’s the simplest structure that still does what I want?</p>
<p>Maybe something line-oriented?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="nt">list-table</span> <span class="na">caption</span><span class="o">=</span><span class="s">&#34;Common `elscreen` commands&#34;</span> <span class="na">header</span><span class="o">=</span><span class="s">true</span> <span class="p">&gt;</span>}}
</span></span><span class="line"><span class="cl">Function
</span></span><span class="line"><span class="cl">Keys
</span></span><span class="line"><span class="cl">Description
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">`elscreen-create`
</span></span><span class="line"><span class="cl">`C-z c`
</span></span><span class="line"><span class="cl">Create a new screen and switch to it.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">`elscreen-next`
</span></span><span class="line"><span class="cl">`C-z n`
</span></span><span class="line"><span class="cl">Cycle to the next screen
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">`elscreen-previous`
</span></span><span class="line"><span class="cl">`C-z p`
</span></span><span class="line"><span class="cl">Cycle to the previous screen
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">`elscreen-kill`
</span></span><span class="line"><span class="cl">`C-z k`
</span></span><span class="line"><span class="cl">Kill the current screen
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">`elscreen-help`
</span></span><span class="line"><span class="cl">`C-z ?`
</span></span><span class="line"><span class="cl">Show ElScreen key bindings
</span></span><span class="line"><span class="cl">{{<span class="p">&lt;</span> <span class="p">/</span><span class="nt">list-table</span> <span class="p">&gt;</span>}}</span></span></code></pre>
</figure><p>Every line contains one field. Blank lines separate table rows. No special prefix characters needed, since everything’s already in a shortcode.</p>
<p>I like it. Easy to write, easy to read, and easy to parse with <a href="https://gohugo.io/functions/split/"><code>split</code></a>. Well — you need to <a href="https://gohugo.io/functions/trim/"><code>trim</code></a> a leading newline because of how <code>.Inner</code> gets handed off, but that’s the only wrinkle so far.</p>
<figure class="highlight">
  <figcaption><tt>layouts/shortcodes/list-table.html</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">{{ $caption := .Get &#34;caption&#34; }}
</span></span><span class="line"><span class="cl">{{ $useHeaderRow := .Get &#34;header&#34; }}
</span></span><span class="line"><span class="cl">{{ $rows := split (trim .Inner &#34;\n&#34;) &#34;\n\n&#34; }}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;table&gt;
</span></span><span class="line"><span class="cl">  {{ with $caption }}
</span></span><span class="line"><span class="cl">    &lt;caption&gt;{{ . }}&lt;/caption&gt;
</span></span><span class="line"><span class="cl">  {{ end }}
</span></span><span class="line"><span class="cl">  {{ if $useHeaderRow }}
</span></span><span class="line"><span class="cl">    {{ $headerRow := index $rows 0 }}
</span></span><span class="line"><span class="cl">    {{ $rows = after 1 $rows }}
</span></span><span class="line"><span class="cl">    &lt;tr&gt;
</span></span><span class="line"><span class="cl">      {{ range (split $headerRow &#34;\n&#34;) }} &lt;th&gt;{{ . | markdownify }}&lt;/th&gt; {{ end }}
</span></span><span class="line"><span class="cl">    &lt;/tr&gt;
</span></span><span class="line"><span class="cl">  {{ end }}
</span></span><span class="line"><span class="cl">  {{ range $rows }}
</span></span><span class="line"><span class="cl">    &lt;tr&gt;
</span></span><span class="line"><span class="cl">      {{ range (split . &#34;\n&#34;) }}
</span></span><span class="line"><span class="cl">        {{ if (findRE &#34;^\\d+$&#34; .) }}
</span></span><span class="line"><span class="cl">          &lt;td class=&#34;numeric&#34;&gt;{{ . }}&lt;/td&gt;
</span></span><span class="line"><span class="cl">        {{ else }}
</span></span><span class="line"><span class="cl">          &lt;td&gt;{{ . | markdownify }}&lt;/td&gt;
</span></span><span class="line"><span class="cl">        {{ end }}
</span></span><span class="line"><span class="cl">      {{ end }}
</span></span><span class="line"><span class="cl">    &lt;/tr&gt;
</span></span><span class="line"><span class="cl">  {{ end }}
</span></span><span class="line"><span class="cl">&lt;/table&gt;</span></span></code></pre>
</figure><p><img src="/post/2020/06/attachments/img/2020/list-table.png" alt="A list table!"/></p>
<p>Perfect. This will keep me going for a while. Time to stop before I get too clever.</p>
<p>Try to keep the original goal in mind when working on a thing. I could try making a universal data table shortcode. I don’t <em>need</em> a universal data table shortcode. Not yet, anyways.</p>
<h2 id="what-next">What Next?</h2>
<ul>
<li>Make a universal data table shortcode.</li>
</ul>
<p>Okay not really, but I can see a few specific conveniences I’d like to add eventually:</p>
<ul>
<li>improve the numeric value handling to recognize and properly format decimal values, including money.</li>
<li>format dates and timestamps</li>
<li>support building a simple table from <code>.Site.Data</code> or <code>getJSON</code></li>
<li>control column widths</li>
<li>control column alignment</li>
<li>refactor into partials where I can, so there’s less duplication between <code>csv-table</code>, <code>list-table</code>, and <code>data-table</code></li>
</ul>
<p>I might steal more ideas from reStructuredText. It’s fun!</p>
<p>Speaking of fun, the dog wants to go outside again.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Debugging My Site With a Little Help From My Friends</title>
  <link>https://randomgeekery.org/post/2020/05/debugging-my-site-with-a-little-help-from-my-friends/</link>
  <pubDate>Fri, 08 May 2020 20:25:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/05/debugging-my-site-with-a-little-help-from-my-friends/</guid>
  <description>It’s probably redundant to test HTML structure for my pages, but what the heck.
– Me, a couple months ago
There’s no rule, but obviously every webmention to my site will have full author info including photo.
– Me, a few weeks ago
Look honey I added inbox/Webmention data to my Datasette dashboard!
– Me, this morning
Sweet, jmac liked my mention! Wait why are tests failing? Maybe check the dashboard?</description>
   <category>post</category> 
   <category>note</category> 
   <category>indieweb</category>  <category>data</category>  <category>i-fixed-it</category>  <category>before-i-pushed-it</category>  <category>yay-for-tests</category> 
  <content:encoded><![CDATA[<p><img src="/post/2020/05/../../../attachments/img/2020/cover-2020-05-08.png" alt="attachments/img/2020/cover-2020-05-08.png"/></p>
<blockquote>
<p>It’s probably redundant to test HTML structure for my pages, but <a href="/post/2020/03/passing-tests-is-now-required-to-push/">what the heck</a>.</p>
<p>&ndash; <cite>Me, a couple months ago</cite></p>
</blockquote>
<blockquote>
<p>There’s no rule, but <em>obviously</em> every webmention to my site will have
full author info including photo.</p>
<p>&ndash; <cite>Me, a few weeks ago</cite></p>
</blockquote>
<blockquote>
<p>Look honey I added <em>inbox/Webmention</em> data to my <a href="/post/2020/05/datasette-sure-is-nifty/">Datasette dashboard</a>!</p>
<p>&ndash; <cite>Me, this morning</cite></p>
</blockquote>
<blockquote>
<p>Sweet, jmac liked my <a href="/post/2020/05/pondering-my-indieweb-guinea-pig/">mention</a>!  Wait why are tests failing? Maybe check
the dashboard?</p>
<p>&ndash; <cite>Me, an hour ago</cite></p>
</blockquote>
<blockquote>
<p>I fixed it!</p>
<p>&ndash; <cite>Me, a few minutes ago</cite></p>
</blockquote>
<p>The fix is reasonable defaults for response author info. I got other fixes in mind, including a default &ldquo;card&rdquo; for anonymous response authors. Also, inferring author info from source site. Thanks for the help and the ideas, <a href="https://jmac.org">Jason McIntosh</a>!</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Querying Hugo Content With Python</title>
  <link>https://randomgeekery.org/post/2020/05/querying-hugo-content-with-python/</link>
  <pubDate>Wed, 06 May 2020 23:37:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/05/querying-hugo-content-with-python/</guid>
  <description>My blogging output by year – bet you didn’t know there were blogs in 1 CE
The plan Use Simon Williamson’s Datasette tools — and maybe the rest of and maybe the rest of Datasette too — to replace an existing data script and perhaps gain new insight into site contents.
Also: puttering is fun.
Background I incorporated in my site workflow a while back because of fRew Schmidt. See, he wrote an interesting post about his Hugo / Unix / Vim blogging workflow.</description>
   <category>post</category> 
   <category>post</category> 
   <category>hugo</category>  <category>python</category>  <category>site</category>  <category>data</category>  <category>workflow</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>I had entirely too much fun replacing my site metadata script with sqlite-utils
</h2><p><img src="/post/2020/05/../../../attachments/img/2020/cover-2020-05-06.png" alt="attachments/img/2020/cover-2020-05-06.png"/>
My blogging output by year – bet you didn’t know there were blogs in 1 CE</p>
<h2 id="the-plan">The plan</h2>
<p>Use Simon Williamson’s <a href="https://datasette.readthedocs.io/en/stable/ecosystem.html#ecosystem">Datasette tools</a> — and maybe the rest of and maybe the rest of <a href="https://datasette.readthedocs.io/en/stable/">Datasette</a> too — to replace an existing data script and perhaps gain new insight into site contents.</p>
<p>Also: puttering is fun.</p>
<h2 id="background">Background</h2>
<p>I incorporated in my site workflow a while back because of <a href="https://blog.afoolishmanifesto.com/">fRew Schmidt</a>.  See, he wrote an interesting post about his Hugo / Unix / Vim <a href="https://blog.afoolishmanifesto.com/posts/hugo-unix-vim-integration/">blogging workflow</a>. I immediately copied <a href="https://blog.afoolishmanifesto.com/posts/hugo-unix-vim-integration/#advanced-unix-tools"><code>q</code></a>, a <a href="/card/perl/">card/Perl</a> script he wrote for querying site metadata via an in-memory <a href="https://sqlite.org">SQLite</a> database.</p>
<p><code>q</code> is ridiculously fast and convenient if you know the query you want to ask.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> q --sql <span class="s1">&#39;select count(1) from articles where title like &#34;%perl%&#34;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go">22
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> q --sql <span class="s1">&#39;select count(1) from articles where title like &#34;%python%&#34;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go">25
</span></span></span></code></pre>
</figure><p>Is your query too awkward to comfortably type on a command line? Put it in a shell script, like fREW’s <code>tag-count</code> example.</p>
<figure class="highlight">
  <figcaption><tt>tag-count</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nb">exec</span> scripts/q <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --sql <span class="s1">&#39;SELECT COUNT(*) AS c, tag FROM _ GROUP BY tag ORDER BY COUNT(*), tag&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --formatter <span class="s1">&#39;sprintf &#34;%3d %s&#34;, $r{c}, $r{tag}&#39;</span></span></span></code></pre>
</figure><p>That gets you a list of all the tags in your entries, ordered by number of appearances.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> tag-count
</span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span><span class="line"><span class="cl"><span class="go"> 29 ruby
</span></span></span><span class="line"><span class="cl"><span class="go"> 33 perl
</span></span></span><span class="line"><span class="cl"><span class="go"> 38 python
</span></span></span><span class="line"><span class="cl"><span class="go"> 43 learn
</span></span></span><span class="line"><span class="cl"><span class="go"> 45 drawing
</span></span></span><span class="line"><span class="cl"><span class="go"> 77 site
</span></span></span></code></pre>
</figure><p>I converted it to <a href="/card/python/">card/Python</a> eventually, of course. <a href="https://github.com/kennethreitz-archive/records">Records</a> produced nice-looking output while letting me stick to SQL syntax. Noticeably slower than <code>q</code>, but acceptable. A bit later, I added a table for aliases. Then, another table for announcements — my tweets and toots about new content.</p>
<p>Aside from answering idle questions like &ldquo;how many drawings have I posted?&rdquo; my little database streamlines the process of publishing site updates and automatically announcing new posts.</p>
<h2 id="whats-the-problem">What’s the problem?</h2>
<p>I’m thinking about adding more tables to improve <a href="/card/indieweb/">card/IndieWeb</a> integration. But to be honest, my creation has grown unwieldy. And <em>slow</em>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nb">time</span> query <span class="s1">&#39;select date, title from articles order by date&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span><span class="line"><span class="cl"><span class="go">Skinny Lines and Flat Colors                             |2020-05-02T21:11:00-07:00
</span></span></span><span class="line"><span class="cl"><span class="go">Pondering My Indieweb Guinea Pig                         |2020-05-03T20:30:00-07:00
</span></span></span><span class="line"><span class="cl"><span class="go">Got a Working glitch-soc Rails Dev Environment           |2020-05-04T23:26:21-07:00
</span></span></span><span class="line"><span class="cl"><span class="go">445 rows
</span></span></span><span class="line"><span class="cl"><span class="go">query &#39;select title, published_at from contents order by published_at&#39;  \
</span></span></span><span class="line"><span class="cl"><span class="go">2.64s user 0.13s system 101% cpu 2.730 total
</span></span></span></code></pre>
</figure><p>Compared to the original Perl script?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nb">time</span> q --sql <span class="s1">&#39;select date, title from articles where date is not null is not null order by date&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span><span class="line"><span class="cl"><span class="go">2020-05-02T21:11:00-07:00    Skinny Lines and Flat Colors
</span></span></span><span class="line"><span class="cl"><span class="go">2020-05-03T15:46:00-07:00    Sending Webmentions
</span></span></span><span class="line"><span class="cl"><span class="go">2020-05-03T20:30:00-07:00    Pondering My Indieweb Guinea Pig
</span></span></span><span class="line"><span class="cl"><span class="go">2020-05-04 23:26:21-07:00    Got a Working glitch-soc Rails Dev Environment
</span></span></span><span class="line"><span class="cl"><span class="go">q --sql   0.17s user 0.02s system 99% cpu 0.197 total
</span></span></span></code></pre>
</figure><p>I’m tempted to gut my Python workflow. Start fresh from <code>q</code> and Perl again. But no. That would be a lot of work — duplicated work, at that.</p>
<p>I’ll stick to Python for now. But surely we can do better than the duct tape script I’ve been using.</p>
<p><a href="https://simonwillison.net/">Simon Willison</a>&rsquo;s <code>sqlite-utils</code> may be just the thing.</p>
<h2 id="whats-sqlite-utils">What’s <code>sqlite-utils</code>?</h2>
<p><a href="https://sqlite-utils.readthedocs.io/"><code>sqlite-utils</code></a> provides both a Python library and a command
line too for building and querying SQLite databases. It can guess a schema from
structures as you insert them — though you can be explicit if you prefer. It’s
particularly useful for bulk inserting or exporting data dumps in JSON or <a href="/card/csv/">CSV</a>.</p>
<p>Makes sense. It’s part of the <a href="https://datasette.readthedocs.io/en/stable/ecosystem.html#ecosystem">Datasette ecosystem</a>.  Willison’s Datasette project simplifies exploring and publishing data for folks who understand data but not necessarily databases.</p>
<p>And although it’s slower than <code>q</code> for SQL queries, it’s much closer than what I came up with!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nb">time</span> sqlite-utils site.db <span class="s1">&#39;select publishDate, title from entries order by publishDate&#39;</span> --table
</span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span><span class="line"><span class="cl"><span class="go">2020-05-03T04:11:00+00:00  Skinny Lines and Flat Colors
</span></span></span><span class="line"><span class="cl"><span class="go">2020-05-03T22:46:00+00:00  Sending Webmentions
</span></span></span><span class="line"><span class="cl"><span class="go">2020-05-04T03:30:00+00:00  Pondering My Indieweb Guinea Pig
</span></span></span><span class="line"><span class="cl"><span class="go">2020-05-05T06:26:21+00:00  Got a Working glitch-soc Rails Dev Environment
</span></span></span><span class="line"><span class="cl"><span class="go">sqlite-utils site.db  --table  0.54s user 0.16s system 158% cpu 0.442 total
</span></span></span></code></pre>
</figure><h2 id="creating-sitedb-with-sqlite-utils">Creating <code>site.db</code> with <code>sqlite-utils</code></h2>
<p>Okay! Let’s do this. I want to load and prepare details from my content entries before I let <code>sqlite-utils</code> turn it into a database.</p>
<h3 id="getting-metadata-from-hugo-and-front-matter">Getting metadata from Hugo and front matter</h3>
<p>We could recursively walk through the <code>content/</code> folder, collecting front matter details about everything we find. Most of the time, this is more than I want. <a href="https://gohugo.io/content-management/organization/">Hugo site organization</a> includes supplemental material like page bundles and <code>_index</code> pages. That’s distracting when I only want to focus on my posts and notes. If you just want core content — posts, pages, stuff like that — ask Hugo.</p>
<p>I <a href="/post/2020/03/listing-hugo-content-extensions-with-raku/">mentioned</a> the <code>hugo list</code> commands before. <a href="https://gohugo.io/commands/hugo_list_all/"><code>hugo list all</code></a> prints summaries of all your main content entries, as comma-separated text. Python’s standard <a href="https://docs.python.org/3/library/subprocess.html">subprocess</a> and <a href="https://docs.python.org/3/library/csv.html">csv</a> are all I need to turn that into something useful.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">csv</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">subprocess</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">list_hugo_content</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return a listing of hugo content entries&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="s2">&#34;hugo&#34;</span><span class="p">,</span> <span class="s2">&#34;list&#34;</span><span class="p">,</span> <span class="s2">&#34;all&#34;</span><span class="p">],</span> <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">check</span><span class="o">=</span><span class="kc">True</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span><span class="o">.</span><span class="n">stdout</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictReader</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">))</span></span></span></code></pre>
</figure><p><a href="https://docs.python.org/3/library/csv.html#csv.DictReader">csv.DictReader</a> gives me a collection of manageable dictionaries.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;date&#39;</span><span class="p">:</span> <span class="s1">&#39;2020-04-28T01:36:54-07:00&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;draft&#39;</span><span class="p">:</span> <span class="s1">&#39;false&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;expiryDate&#39;</span><span class="p">:</span> <span class="s1">&#39;0001-01-01T00:00:00Z&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;path&#39;</span><span class="p">:</span> <span class="s1">&#39;content/post/2020/04/from-dotfiles-to-org-file/index.adoc&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;permalink&#39;</span><span class="p">:</span> <span class="s1">&#39;https://randomgeekery.org/post/2020/04/from-dotfiles-to-org-file/&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;publishDate&#39;</span><span class="p">:</span> <span class="s1">&#39;2020-04-28T01:36:54-07:00&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;slug&#39;</span><span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;title&#39;</span><span class="p">:</span> <span class="s1">&#39;From Dotfiles to Org File&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>That’s useful for a high level overview of <a href="/post/2020/04/from-dotfiles-to-org-file/">that post</a>, but I want more. I want tags, categories, aliases, etc. I keep those details as <a href="https://yaml.org/">YAML</a> text in content <a href="https://gohugo.io/content-management/front-matter/">front matter</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="l">From Dotfiles to Org File</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">uuid</span><span class="p">:</span><span class="w"> </span><span class="l">f03e5f2f-70a8-4988-92cd-595c8e3fdc97</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="l">at 1:30am they&#39;re all good ideas</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">year</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;2020&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">date</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;2020-04-28 01:36:54-07:00&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tags</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="l">emacs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="l">shell</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="l">org</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">draft</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">categories</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="l">Tools</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">aliases</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="l">/2020/04/28/from-dotfiles-to-org-file/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">announcements</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mastodon</span><span class="p">:</span><span class="w"> </span><span class="l">https://hackers.town/@randomgeek/104075340897518607</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">twitter</span><span class="p">:</span><span class="w"> </span><span class="l">https://twitter.com/brianwisti/status/1255056188087111681</span></span></span></code></pre>
</figure><p><a href="https://pyyaml.org">PyYAML</a> moves quick when powered by <a href="https://pyyaml.org/wiki/LibYAML">libYAML</a>.  So I make sure I have both installed on my Manjaro machine.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> pamac install libyaml
</span></span><span class="line"><span class="cl"><span class="gp">$</span> pip install pyyaml
</span></span></code></pre>
</figure><p>I can’t think of a pretty way to get at an entry’s front matter, so let’s just get it out of the way.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>It’s not worth rewriting a whole blog post just yet, but in the years since writing this I use <a href="https://github.com/eyeseast/python-frontmatter">python-frontmatter</a> to handle frontmatter.</p>
</blockquote>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">yaml</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">DELIMITER</span> <span class="o">=</span> <span class="s2">&#34;---</span><span class="se">\n</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_frontmatter</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Get dictionary from a file&#39;s YAML frontmatter&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_</span><span class="p">,</span> <span class="n">yaml_text</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">DELIMITER</span><span class="p">,</span> <span class="n">maxsplit</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">yaml</span><span class="o">.</span><span class="n">safe_load</span><span class="p">(</span><span class="n">yaml_text</span><span class="p">)</span></span></span></code></pre>
</figure><ol>
<li>read the file</li>
<li>grab the front matter YAML</li>
<li>hand back a dictionary based on that front matter text</li>
</ol>
<p>Why a function? It’s only a couple lines of code.</p>
<p>Sure, but it’s an ugly couple of lines. Plus it hides the YAML-specific details away in case I switch my front matter to TOML, JSON, or some other format.</p>
<p>Okay, now to mash entry and relevant front matter bits together. I prefer <a href="https://arrow.readthedocs.io/">Arrow</a> &rsquo;s interface to <a href="https://docs.python.org/3.8/library/datetime.html">datetime</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> pip install arrow
</span></span></code></pre>
</figure><figure class="highlight">
  <figcaption><span>Import entry dependencies</span></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">namedtuple</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">arrow</span></span></span></code></pre>
</figure><figure class="highlight">
  <figcaption><span>Prepare entry</span></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">SiteEntry</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s2">&#34;SiteEntry&#34;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&#34;entry&#34;</span><span class="p">,</span> <span class="s2">&#34;tags&#34;</span><span class="p">,</span> <span class="s2">&#34;announcements&#34;</span><span class="p">,</span> <span class="s2">&#34;aliases&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">prepare_entry</span><span class="p">(</span><span class="n">entry</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Return a SiteEntry with details about a single content entry&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="n">entry</span><span class="p">[</span><span class="s2">&#34;path&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">frontmatter</span> <span class="o">=</span> <span class="n">get_frontmatter</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">entry</span><span class="p">[</span><span class="s2">&#34;draft&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span> <span class="k">if</span> <span class="n">entry</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;draft&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&#34;true&#34;</span> <span class="k">else</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Convert date strings to native datetime objects.</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="p">(</span><span class="s2">&#34;date&#34;</span><span class="p">,</span> <span class="s2">&#34;expiryDate&#34;</span><span class="p">,</span> <span class="s2">&#34;publishDate&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">entry</span><span class="p">[</span><span class="n">f</span><span class="p">]</span> <span class="o">=</span> <span class="n">arrow</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">entry</span><span class="p">[</span><span class="n">f</span><span class="p">])</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s2">&#34;utc&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">datetime</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sections</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&#34;note&#34;</span><span class="p">,</span> <span class="s2">&#34;post&#34;</span><span class="p">,</span> <span class="s2">&#34;draft&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">section_fragment</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">sep</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry</span><span class="p">[</span><span class="s2">&#34;section&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">section_fragment</span> <span class="k">if</span> <span class="n">section_fragment</span> <span class="ow">in</span> <span class="n">sections</span> <span class="k">else</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Extract important fields from frontmatter</span>
</span></span><span class="line"><span class="cl">    <span class="n">simple_fields</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&#34;caption&#34;</span><span class="p">,</span> <span class="s2">&#34;category&#34;</span><span class="p">,</span> <span class="s2">&#34;description&#34;</span><span class="p">,</span> <span class="s2">&#34;series&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="n">simple_fields</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">entry</span><span class="p">[</span><span class="n">field</span><span class="p">]</span> <span class="o">=</span> <span class="n">frontmatter</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">field</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">tags</span> <span class="o">=</span> <span class="p">[{</span><span class="s2">&#34;entry_path&#34;</span><span class="p">:</span> <span class="n">path</span><span class="p">,</span> <span class="s2">&#34;tag&#34;</span><span class="p">:</span> <span class="n">tag</span><span class="p">}</span> <span class="k">for</span> <span class="n">tag</span> <span class="ow">in</span> <span class="n">frontmatter</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;tags&#34;</span><span class="p">,</span> <span class="p">[])]</span>
</span></span><span class="line"><span class="cl">    <span class="n">announcements</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="s2">&#34;entry_path&#34;</span><span class="p">:</span> <span class="n">path</span><span class="p">,</span> <span class="s2">&#34;service&#34;</span><span class="p">:</span> <span class="n">service</span><span class="p">,</span> <span class="s2">&#34;url&#34;</span><span class="p">:</span> <span class="n">url</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">service</span><span class="p">,</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">frontmatter</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;announcements&#34;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">aliases</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="s2">&#34;entry_path&#34;</span><span class="p">:</span> <span class="n">path</span><span class="p">,</span> <span class="s2">&#34;url&#34;</span><span class="p">:</span> <span class="n">alias</span><span class="p">}</span> <span class="k">for</span> <span class="n">alias</span> <span class="ow">in</span> <span class="n">frontmatter</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;aliases&#34;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SiteEntry</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="n">tags</span><span class="p">,</span> <span class="n">announcements</span><span class="p">,</span> <span class="n">aliases</span><span class="p">)</span></span></span></code></pre>
</figure><ul>
<li>A <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple">namedtuple</a> helps when you want some structure but not a full class.</li>
<li>Always make sure times are in <a href="https://en.wikipedia.org/wiki/Coordinated_Universal_Time">UTC</a> when saving to the database!</li>
<li>Hugo determines <a href="https://gohugo.io/content-management/sections/">sections</a> from a file’s location under <code>content/</code>, so let’s do the same.</li>
<li><code>entry_path</code> will help connect tags to entries when creating the database</li>
</ul>
<p>I got everything tidy and pretty. We’re ready for the database.</p>
<h3 id="loading-the-data">Loading the data</h3>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> pip install sqlite-utils
</span></span></code></pre>
</figure><p>The <code>sqlite-utils</code> <a href="https://sqlite-utils.readthedocs.io/en/stable/python-api.html">Python API</a> ends up taking hardly any code at all, thanks partly to the work spent massaging the entries. You treat the database as a dictionary, with each table name as a field. Tables get created when you insert something.</p>
<p>I think we called that &ldquo;autovivification&rdquo; in Perl. It’s nice.</p>
<figure class="highlight">
  <figcaption><span>import sqlite-utils</span></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlite_utils</span> <span class="kn">import</span> <span class="n">Database</span></span></span></code></pre>
</figure><figure class="highlight">
  <figcaption><span>build databse</span></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">DB_NAME</span> <span class="o">=</span>  <span class="s2">&#34;site.db&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">build_db</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Build the database&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">entries</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">tags</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">announcements</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">aliases</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">list_hugo_content</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">site_entry</span> <span class="o">=</span> <span class="n">prepare_entry</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">entries</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">site_entry</span><span class="o">.</span><span class="n">entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">tags</span> <span class="o">+=</span> <span class="n">site_entry</span><span class="o">.</span><span class="n">tags</span>
</span></span><span class="line"><span class="cl">        <span class="n">announcements</span> <span class="o">+=</span> <span class="n">site_entry</span><span class="o">.</span><span class="n">announcements</span>
</span></span><span class="line"><span class="cl">        <span class="n">aliases</span> <span class="o">+=</span> <span class="n">site_entry</span><span class="o">.</span><span class="n">aliases</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">site</span> <span class="o">=</span> <span class="n">Database</span><span class="p">(</span><span class="n">DB_NAME</span><span class="p">,</span> <span class="n">recreate</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">site</span><span class="p">[</span><span class="s2">&#34;entries&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">insert_all</span><span class="p">(</span><span class="n">entries</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="s2">&#34;path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">site</span><span class="p">[</span><span class="s2">&#34;tags&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">insert_all</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">tags</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="p">(</span><span class="s2">&#34;entry_path&#34;</span><span class="p">,</span> <span class="s2">&#34;tag&#34;</span><span class="p">),</span> <span class="n">foreign_keys</span><span class="o">=</span><span class="p">[(</span><span class="s2">&#34;entry_path&#34;</span><span class="p">,</span> <span class="s2">&#34;entries&#34;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">site</span><span class="p">[</span><span class="s2">&#34;announcements&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">insert_all</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">announcements</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">pk</span><span class="o">=</span><span class="p">(</span><span class="s2">&#34;entry_path&#34;</span><span class="p">,</span> <span class="s2">&#34;url&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">foreign_keys</span><span class="o">=</span><span class="p">[(</span><span class="s2">&#34;entry_path&#34;</span><span class="p">,</span> <span class="s2">&#34;entries&#34;</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">site</span><span class="p">[</span><span class="s2">&#34;aliases&#34;</span><span class="p">]</span><span class="o">.</span><span class="n">insert_all</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">aliases</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="s2">&#34;url&#34;</span><span class="p">,</span> <span class="n">foreign_keys</span><span class="o">=</span><span class="p">[(</span><span class="s2">&#34;entry_path&#34;</span><span class="p">,</span> <span class="s2">&#34;entries&#34;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span></span></span></code></pre>
</figure><ul>
<li>Rebuild the database from scratch every time this runs. Alternately, leave this out and <code>upsert_all</code> to do an insert or update.</li>
<li>Setting <code>path</code> as the primary key, since every filename should be unique.</li>
<li>A tuple <code>pk</code> specifies a compound primary key — each pair must be unique.</li>
<li><code>sqlite-utils</code> hides the details of foreign keys in SQLite. Just use a list of <code>FIELD_NAME</code> / <code>TABLE_NAME</code> pairs.</li>
</ul>
<p>All that works makes <code>build_db</code> a convenient starting point for <code>build-db.py</code>.</p>
<figure class="highlight">
  <figcaption><span>define script execution</span></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">build_db</span><span class="p">()</span></span></span></code></pre>
</figure><p>I <em>could</em> specify an in-memory database, but no. For the moment I’ll settle on creating a database file. That way I can more easily play with the <code>sqlite-utils</code> command line interface.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> sqlite-utils tables site.db --counts --json-cols <span class="p">|</span> python -m json.tool
</span></span><span class="line"><span class="cl"><span class="go">[
</span></span></span><span class="line"><span class="cl"><span class="go">    {
</span></span></span><span class="line"><span class="cl"><span class="go">        &#34;table&#34;: &#34;entries&#34;,
</span></span></span><span class="line"><span class="cl"><span class="go">        &#34;count&#34;: 467
</span></span></span><span class="line"><span class="cl"><span class="go">    },
</span></span></span><span class="line"><span class="cl"><span class="go">    {
</span></span></span><span class="line"><span class="cl"><span class="go">        &#34;table&#34;: &#34;tags&#34;,
</span></span></span><span class="line"><span class="cl"><span class="go">        &#34;count&#34;: 1043
</span></span></span><span class="line"><span class="cl"><span class="go">    },
</span></span></span><span class="line"><span class="cl"><span class="go">    {
</span></span></span><span class="line"><span class="cl"><span class="go">        &#34;table&#34;: &#34;announcements&#34;,
</span></span></span><span class="line"><span class="cl"><span class="go">        &#34;count&#34;: 299
</span></span></span><span class="line"><span class="cl"><span class="go">    },
</span></span></span><span class="line"><span class="cl"><span class="go">    {
</span></span></span><span class="line"><span class="cl"><span class="go">        &#34;table&#34;: &#34;aliases&#34;,
</span></span></span><span class="line"><span class="cl"><span class="go">        &#34;count&#34;: 900
</span></span></span><span class="line"><span class="cl"><span class="go">    }
</span></span></span><span class="line"><span class="cl"><span class="go">]
</span></span></span></code></pre>
</figure><p>I’m content. But I’m also curious. What does my site metadata look like in Datasette?</p>
<h2 id="exploring-sitedb-with-datasette">Exploring <code>site.db</code> with Datasette</h2>
<p>I don’t have any great insights here. I just wanted to look at the pretty
tables. Played with <a href="https://datasette.readthedocs.io/en/stable/metadata.html">metadata</a> and checked out the results.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> pip install datasette
</span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> datasette serve --metadata datasette.json site.db
</span></span></code></pre>
</figure><p>The basic interface is pleasant enough, especially when you apply some <a href="https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a> Of course, <a href="https://www.niche-museums.com/">Niche Museums</a> shows you can go a <em>long</em> ways past &ldquo;some CSS&rdquo; with Datasette.</p>
<p>Oh and more on the pleasant interface. It allows you to edit the SQL for your current view.</p>
<p><img src="/post/2020/05/attachments/img/2020/datasette-sql.png" alt="lightly styled with custom SQL"/></p>
<p>There are detail pages for each row. Again, the Niche Museums site shows that <a href="https://www.niche-museums.com/browse/museums/21">detail view</a> can be heavily tweaked.</p>
<p><img src="/post/2020/05/attachments/img/2020/datasette-entry.png" alt="Datasette detail view of a post"/></p>
<p><a href="https://datasette.readthedocs.io/en/stable/ecosystem.html#datasette-plugins">Plugins</a> add all sorts of functionality. <a href="https://github.com/simonw/datasette-vega">datasette-vega</a> draws graphs of query results.</p>
<p><img src="/post/2020/05/attachments/img/2020/datasette-graph.png" alt="Charting interface with entries posted per year"/></p>
<p>Year 0001? Hang on, let me check that in my shiny new Datasette server.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">path</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">title</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">publishDate</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">draft</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">section</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">category</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">entries</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="s2">&#34;publishDate&#34;</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="s1">&#39;0001%&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">publishDate</span><span class="w"> </span><span class="k">desc</span></span></span></code></pre>
</figure><h3 id="year-0001-content">Year 0001 content</h3>
<table>
<thead>
<tr>
<th>path</th>
<th>title</th>
<th>publishDate</th>
<th>draft</th>
<th>section</th>
<th>category</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>content/about/index.adoc</code></td>
<td>About</td>
<td>0001-01-01T00:00:00+00:00</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>content/contact.adoc</code></td>
<td>Contact</td>
<td>0001-01-01T00:00:00+00:00</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>content/follow.adoc</code></td>
<td>Follow</td>
<td>0001-01-01T00:00:00+00:00</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>content/error.adoc</code></td>
<td>uh oh</td>
<td>0001-01-01T00:00:00+00:00</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>content/now/index.adoc</code></td>
<td>Now</td>
<td>0001-01-01T00:00:00+00:00</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>…and a bunch of drafts</td>
<td><em>[redacted]</em></td>
<td>0001-01-01T00:00:00+00:00</td>
<td>1</td>
<td>draft</td>
<td><em>[redacted]</em></td>
</tr>
</tbody>
</table>
<p>Oh that’s right. Non-dated pages and drafts.</p>
<p>No I’m too embarrassed to share the full list. I get lots of ideas, okay? Then I’m afraid to throw any of them away. Sometimes they mutate. A couple months ago, this post was going to be about playing with <code>hugo list</code> in Python.</p>
<p>Yep. Datasette is pretty nifty. I’m not missing <code>q</code> at all. And I’m <em>really</em> not missing my Python <code>query</code> script.</p>
<h2 id="whats-next">What’s next?</h2>
<p>That was fun! Still got a lot ahead of me.</p>
<ul>
<li>Figuring out the quickest way to refresh the database</li>
<li>Adding those IndieWeb tables, so I can review <em>inbox/Webmention</em> updates</li>
<li>New <em>inbox/Pyinvoke</em> tasks to build, query, and explore the database</li>
<li>Fixing those tasks that still call out to my old and busted <code>query</code> Python</li>
<li>Make my Datasette site dashboard pretty</li>
</ul>
<h2 id="explore">Explore</h2>
<p>Check out some other <a href="https://github.com/simonw/datasette/wiki/Datasettes">datasettes</a> available online!</p>
<ul>
<li><a href="https://nyc-cultural-institutions.now.sh/">New York City Cultural Institutions</a></li>
<li><a href="https://fivethirtyeight.datasettes.com/fivethirtyeight/hip-hop-candidate-lyrics%2Fgenius_hip_hop_lyrics">Every mention of 2016 primary candidates in hip-hop songs</a></li>
<li><a href="https://san-francisco.datasettes.com/sf-trees-ebc2ad9/Street_Tree_List">the location of every tree in San Francisco</a> — you need to page through to see all 189,144 locations</li>
</ul>
]]></content:encoded>
</item>
<item>
  <title>Post: Datasette Sure Is Nifty</title>
  <link>https://randomgeekery.org/post/2020/05/datasette-sure-is-nifty/</link>
  <pubDate>Tue, 05 May 2020 22:39:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/05/datasette-sure-is-nifty/</guid>
  <description>Datasette showing what sqlite-utils put together
So uh yeah. See I was stumbling my way through using sqlite-utils to collect site content metadata. Finally figured that out but then made the mistake of looking at that data through Datasette.
Okay not really a mistake. Helped me find a few dozen front matter typos. Simon Willison makes cool stuff.</description>
   <category>post</category> 
   <category>note</category> 
   <category>python</category>  <category>data</category>  <category>ooh-a-sparkly</category> 
  <content:encoded><![CDATA[<p><img src="/post/2020/05/../../../attachments/img/2020/cover-2020-05-05.png" alt="attachments/img/2020/cover-2020-05-05.png"/>
Datasette showing what sqlite-utils put together</p>
<p>So uh yeah. See I was stumbling my way through using <a href="https://sqlite-utils.readthedocs.io">sqlite-utils</a> to collect site content metadata. Finally figured that out but then made the mistake of looking at that data through <a href="https://datasette.readthedocs.io">Datasette</a>.</p>
<p>Okay not really a mistake. Helped me find a few dozen front matter typos. <a href="https://simonwillison.net/">Simon Willison</a> makes cool stuff.</p>
]]></content:encoded>
</item>
</channel>
</rss>
