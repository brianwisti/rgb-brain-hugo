<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>i-fixed-itonRandom Geekery</title>
    <link>https://randomgeekery.org/tags/i-fixed-it/</link>
    <description>
      Recent contentini-fixed-it on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Tue, 21 Jun 2022 15:03:53 -0700</lastBuildDate><atom:link href="https://randomgeekery.org/tags/i-fixed-it/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: [2022-06-21 Tue 15:03]</title>
  <link>https://randomgeekery.org/post/2022/06/2022-06-21-tue-1503/</link>
  <pubDate>Tue, 21 Jun 2022 15:03:53 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/06/2022-06-21-tue-1503/</guid>
  <description>&lt;p&gt;I’m not dead yet! Site wasn’t updating because Netlify failed with an &lt;code&gt;exit code 2&lt;/code&gt;. Bit vague. Finally had a few minutes to look closer.&lt;/p&gt;</description>
   <category>post</category> 
   <category>note</category> 
   <category>hugo</category>  <category>i-fixed-it</category> 
  <content:encoded><![CDATA[<p>I&rsquo;m not dead yet! Site wasn&rsquo;t updating because Netlify failed with an <code>exit code 2</code>. Bit vague. Finally had a few minutes to look closer.</p>
<p>Turns out it&rsquo;s because I&rsquo;ve been keeping up locally with <a href="/card/hugo/">card/Hugo</a> releases and syntax changes, but not telling Netlify. They need the same version of Hugo that I use.</p>
<p>So now I&rsquo;ve got a basic <code>netlify.toml</code> based on <a href="https://docs.netlify.com/integrations/frameworks/hugo/">Netlify Hugo docs</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">build</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">command</span> <span class="p">=</span> <span class="s2">&#34;hugo&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">publish</span> <span class="p">=</span> <span class="s2">&#34;public&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">build</span><span class="p">.</span><span class="nx">environment</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">HUGO_VERSION</span> <span class="p">=</span> <span class="s2">&#34;0.101.0&#34;</span></span></span></code></pre>
</figure><p>Looks like everything is good again.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Joplin CLI Batch Processing With Raku</title>
  <link>https://randomgeekery.org/post/2021/05/joplin-cli-batch-processing-with-raku/</link>
  <pubDate>Mon, 24 May 2021 20:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/05/joplin-cli-batch-processing-with-raku/</guid>
  <description>don’t get excited; these are the only notes I took
NOTE
This sidetracks enough for three blog posts, mostly about card/Raku. Sorry about that. No time to make it shorter. You know how it is. There’s a little card/Joplin stuff in here.
This is embarrassing. I fired up the Joplin desktop app this morning and it told me there was an update. Makes sense. I haven’t loaded the desktop app in a couple months.</description>
   <category>post</category> 
   <category>post</category> 
   <category>tools</category>  <category>joplin</category>  <category>raku-lang</category>  <category>regular-expressions</category>  <category>shell</category>  <category>oops</category>  <category>i-fixed-it</category> 
  <content:encoded><![CDATA[<h2>In which a minor update veers off on a Raku regex tangent</h2><p><img src="/post/2021/05/../../../attachments/img/2021/cover-2021-05-24.jpg" alt="attachments/img/2021/cover-2021-05-24.jpg"/>
don&rsquo;t get excited; these are the only notes I took</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>This sidetracks enough for three blog posts, mostly about <a href="/card/raku/">card/Raku</a>.  Sorry about that.  No time to make it shorter.  You know how it is.  There&rsquo;s a little <a href="/card/joplin/">card/Joplin</a> stuff in here.</p>
</blockquote>
<p>This is embarrassing.  I fired up the Joplin <a href="https://joplinapp.org/desktop/">desktop app</a> this morning and it told me there was an update.  Makes sense.  I haven&rsquo;t loaded the desktop app in a couple months.</p>
<p>Oh hang on.  What about the <a href="https://joplinapp.org/terminal/">terminal app</a> which I was just writing about over the last couple posts?</p>
<p>Yep.  The <a href="https://joplinapp.org/changelog_cli">Changelog</a> shows updates, one of which includes batch processing.  Batch processing sounds like exactly the thing to address my many complaints about performance.</p>
<h2 id="update-joplin-with-volta">Update Joplin with Volta</h2>
<p>I use <a href="https://volta.sh">Volta</a> to manage my<a href="/card/node.js/">card/Node.js</a> resources.  Volta treats installing and updating as the same action.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">volta install joplin</span></span></code></pre>
</figure><p>This is what I have now:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> joplin version
</span></span><span class="line"><span class="cl"><span class="go">joplin 1.8.1 (prod)
</span></span></span></code></pre>
</figure><p>Now I&rsquo;m up to date.  Let&rsquo;s see what changes I can make to my journaling code.</p>
<h2 id="fix-the-one-liners">Fix the one-liners</h2>
<p>The one-liner for adding journal entries works fine as-is.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin use Journal <span class="o">&amp;&amp;</span> joplin edit <span class="k">$(</span>date --iso<span class="o">=</span>minute<span class="k">)</span></span></span></code></pre>
</figure><p>Reading the entries needs improvement.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">raku -e <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">  qqx{joplin cat $_}.subst(/^(&lt;[\dT:\-]&gt;+)/, { &#34;# $0&#34; }).say for qx{ joplin ls }.lines.sort
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="p">|</span> python -m rich.markdown -</span></span></code></pre>
</figure><p>Joplin CLI v1.8.1 added a <code>batch</code> command, which executes commands from a text file.  My challenge: <code>joplin batch</code> does not appear to have an option for standard input.  This means I can&rsquo;t casually pipe output from another process.  Here&rsquo;s what I came up with:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">joplin batch &lt;<span class="o">(</span>raku -e <span class="s1">&#39;qx{joplin ls}.lines.sort.map({ &#34;cat $_&#34; }).join(&#34;\n&#34;).say&#39;</span><span class="o">)</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> raku -ne <span class="s1">&#39;.subst(/^(&lt;[\dT:\-]&gt;+)$/, { &#34;# $0&#34; }).say&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> python -m rich.markdown -</span></span></code></pre>
</figure><p>We take advantage of a little shell magic to treat the output of another process as a file.</p>
<p>Don&rsquo;t ask me to understand the shell magic.  In <a href="https://www.gnu.org/software/bash/">GNU Bash</a>, <code>command &lt;(stuff)</code> means something along the lines of &ldquo;evaluate <em>stuff</em> and hand the output of that evaluation to <code>command</code> as if it was a file.&rdquo;</p>
<p>It&rsquo;s all a little inside-out and twisty.  It might help if we break up the chunks.</p>
<table>
<thead>
<tr>
<th>Chunk</th>
<th>What it does</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>qx{joplin ls}.lines.sort</code></td>
<td>collect the sorted entry list from this notebook</td>
</tr>
<tr>
<td><code>.map{ &quot;cat $_&quot; }</code></td>
<td>create a Joplin command to display this entry</td>
</tr>
<tr>
<td><code>.join(&quot;\n&quot;).say</code></td>
<td>print those commands as one multi-line string</td>
</tr>
<tr>
<td><code>joplin batch &lt;(...)</code></td>
<td>send <code>raku</code>&rsquo;s output to <code>joplin batch</code></td>
</tr>
<tr>
<td><code>... | .subst(...)</code></td>
<td>turn timestamp lines from output into Markdown headers</td>
</tr>
<tr>
<td><code>... | python -m rich.markdown -</code></td>
<td>format the output for terminal display</td>
</tr>
</tbody>
</table>
<p>We pull Raku in twice: once to build the command and again to parse the output. On the other hand we&rsquo;re only calling Joplin twice instead of forty or so times.</p>
<p>That makes the one-liner downright zippy, all things considered.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time joplin batch &lt;(raku -e &#39;qx{joplin ls}.lines.sort.map({ &#34;cat $_&#34; }).join(&#34;\n&#34;).say&#39;) \
</span></span><span class="line"><span class="cl">  | raku -ne &#39;.subst(/^(&lt;[\dT:\-]&gt;+)$/, { &#34;# $0&#34; }).say&#39; \
</span></span><span class="line"><span class="cl">  | python -m rich.markdown -
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m1.407s
</span></span><span class="line"><span class="cl">user    0m1.608s
</span></span><span class="line"><span class="cl">sys     0m0.140s</span></span></code></pre>
</figure><p>One and a half seconds for a formatted display of every journal entry.  Not bad, considering that I&rsquo;m running on <a href="https://docs.microsoft.com/en-us/windows/wsl/">WSL</a>.  Plus I don&rsquo;t really know one-liners, Raku, or Joplin.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>The documentation for <code>joplin ls</code> mentions a <code>--sort</code> flag, but as of v1.8.1 I got no difference when using <code>joplin ls --sort title</code>. Didn&rsquo;t see a mention of the specific issue, so I overcame my shyness and filed <a href="https://github.com/laurent22/joplin/issues/5004">#5004</a>.</p>
</blockquote>
<h2 id="fix-the-script">Fix the script</h2>
<p>Splitting up the Raku script into logical pieces the other day means that today I only need to fix a single function.  Thank goodness.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin cat </span><span class="nv">$_</span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>How much does this function need to improve?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time jj today
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m3.001s
</span></span><span class="line"><span class="cl">user    0m3.281s
</span></span><span class="line"><span class="cl">sys     0m0.390s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ time jj all
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m31.253s
</span></span><span class="line"><span class="cl">user    0m31.779s
</span></span><span class="line"><span class="cl">sys     0m4.616s</span></span></code></pre>
</figure><p>Lots.  This function needs to be lots quicker.  It took three seconds to display today&rsquo;s lone entry, and over 30 seconds to display all 40 journal entries.  Every new entry slows the whole thing down, because every new entry means a new call to <code>joplin</code>.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>I don&rsquo;t jot <em>that</em> many notes in a day. Some of that&rsquo;s from reorganizing my Joplin notebooks, putting daily journals in with the quick entries.</p>
</blockquote>
<p>I tried mimicking the shell magic but couldn&rsquo;t figure out how in the time I allowed myself.  This isn&rsquo;t work code where you have to get things just so. This is a fun little utility for my own amusement.</p>
<p><code>joplin batch</code> expects a file?  Let&rsquo;s give it a file.  But I want that file to go away when I&rsquo;m done, so let&rsquo;s find a module to handle temporary files.</p>
<p>Poking through the directory of <a href="https://modules.raku.org">Raku modules</a> quickly showed me two possibilities:</p>
<dl>
<dt><a href="https://modules.raku.org/dist/Temp::Path:cpan:UFOBAT"><code>Temp::Path</code></a></dt>
<dd>gives you a friendly object you can write to or stringify when you need a filename</dd>
<dt><a href="https://modules.raku.org/dist/File::Temp:cpan:RBT"><code>File::Temp</code></a></dt>
<dd>presents a more utilitarian interface, providing filename and filehandle as separate variables</dd>
</dl>
<p>The end result is the same: a file that goes away when you no longer need it.</p>
<p>I like friendly. Let&rsquo;s see how <code>Temp::Path</code> does.</p>
<h3 id="try-temppath">Try <code>Temp::Path</code></h3>
<p>Need to install it, of course.  <a href="https://github.com/ugexe/zef"><code>zef</code></a> handles Raku modules.  I set that up a while back with [[post/2020/05/setting-up-raku-with-rakubrew|<code>rakubrew</code>]].</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">zef install Temp::Path</span></span></code></pre>
</figure><p>Then we let Raku know we&rsquo;re using the module.  That traditionally goes near the top of our script.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Temp::Path</span><span class="p">;</span></span></span></code></pre>
</figure><p>More or less following along Temp::Path&rsquo;s sample usage.  <a href="https://docs.raku.org/language/control#index-entry-control_flow_with"><code>with</code></a> creates a block for our temporary file.  It even sets the <a href="https://docs.raku.org/language/variables#The_$__variable">topic variable</a> <code>$_</code>.  Don&rsquo;t need to come up with a temporary variable name for our temporary file.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">with</span> <span class="n">make-temp-path</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="nb">spurt</span><span class="p">(</span><span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="p">&#34;</span><span class="s2">cat </span><span class="nv">$_</span><span class="p">&#34;</span> <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="se">\n</span><span class="p">&#34;));</span>
</span></span><span class="line"><span class="cl">    <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin batch </span><span class="nv">$_</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span> <span class="p">/</span><span class="ni">^^</span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)</span><span class="ni">$$</span><span class="p">/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>The regular expression is starting to look interesting.  <code>joplin batch</code> hands everything to us as one string.  We need to adjust the entry-oriented logic we had before.  Now we find any <em>line</em> containing a lone ISO-8601 timestamp, and convert it to a top-level Markdown header.  The <code>:g</code> flag tells <code>.subst</code> to replace every occurrence.</p>
<blockquote>
<p>[!NOTE] <code>^..$</code> vs <code>^^..$$</code>
Regular expressions in other languages treat <code>^</code> and <code>$</code> differently depending on whether you&rsquo;re applying the expression in a single-line or multiple-line context. Raku&rsquo;s <a href="https://docs.raku.org/language/regexes#Anchors">anchors</a> treat every expression as multi-line.</p>
<p>That&rsquo;s a nice consistency point in Raku&rsquo;s favor. Instead of memorizing more flags and contexts, and more special anchors for when the flags and context make things unclear, we get these two paired anchors.</p>
<table>
<thead>
<tr>
<th>Anchor</th>
<th>Where it matches</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>beginning of the string</td>
</tr>
<tr>
<td><code>$</code></td>
<td>end of the string</td>
</tr>
<tr>
<td><code>^^</code></td>
<td>beginning of a line</td>
</tr>
<tr>
<td><code>$$</code></td>
<td>end of a line</td>
</tr>
</tbody>
</table>
<p>There are plenty of other things for us to memorize, of course.</p>
<p>If you&rsquo;re more of a visual person, here&rsquo;s a quality page from my extensive notebook.</p>
<p><img src="/post/2021/05/attachments/img/2021/cover-2021-05-24.jpg" alt="diagram of multi-line string showing where these anchors match"/></p>
<p>So what if my Raku notebook only has this one page with this one diagram. It&rsquo;s a good diagram.  Very professional.  High quality learning aid.</p>
</blockquote>
<p>Those few lines don&rsquo;t change anything for me as a user.  Maybe the speed?</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time jj today
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m2.969s
</span></span><span class="line"><span class="cl">user    0m3.385s
</span></span><span class="line"><span class="cl">sys     0m0.303s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ time jj all
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m3.034s
</span></span><span class="line"><span class="cl">user    0m3.328s
</span></span><span class="line"><span class="cl">sys     0m0.505s</span></span></code></pre>
</figure><p>Huh. It&rsquo;s not any faster than the best case for the initial script, with a single entry taking roughly the same amount of time to load and display.  Then again, <code>batch</code> is clearly doing its job.  One entry takes almost exactly the same amount of time as 40.  Since most days I&rsquo;ll have multiple entries, that is an effective optimization for the common case.</p>
<p>But why is my one-liner twice as fast?  Is it Temp::Path?  Raku?  Joplin? Something to do with file I/O on WSL 2?  No idea.</p>
<p>Let&rsquo;s find out if File::Temp does any better.</p>
<h3 id="try-filetemp">Try File::Temp</h3>
<p>Out comes <code>zef</code>…</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">zef install File::Temp</span></span></code></pre>
</figure><p>…then use File::Temp instead of Temp::Path…</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Temp</span><span class="p">;</span></span></span></code></pre>
</figure><p>…then rewrite <code>read-entries</code> one more time…</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="p">(</span><span class="nv">$filename</span><span class="o">,</span> <span class="nv">$filehandle</span><span class="p">)</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$filehandle</span><span class="o">.</span><span class="nb">spurt</span><span class="p">(</span> <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="p">&#34;</span><span class="s2">cat </span><span class="nv">$_</span><span class="p">&#34;</span> <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="se">\n</span><span class="p">&#34;)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin batch </span><span class="nv">$filename</span><span class="s2"> </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^^</span><span class="sr"> </span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)</span><span class="sr"> </span><span class="ni">$$</span><span class="p">/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><blockquote>
<p>[!NOTE] Space is insignificant in regular expressions
Did you catch that?  Raku ignores whitespace in regular expressions unless you say otherwise with <a href="https://docs.raku.org/language/regexes#Sigspace"><code>:sigspace</code></a>.  Means you can make a regex easier to read.  This wasn&rsquo;t <em>much</em> easier to read, but at least we can tell where the anchors are and what I hope to find between those anchors.</p>
<p>For Perl folks, this plus the multi-line thing is like giving every regex <code>/mx</code>.  For  Python folks, like <code>re.MULTILINE</code> and <code>re.VERBOSE</code>.  For JavaScript folks — um — it&rsquo;s like having useful regular expressions.  Okay, it&rsquo;s like having <a href="https://xregexp.com">XRegExp</a> installed and using <code>'x'</code>.</p>
</blockquote>
<p>…and try it out.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ time jj today
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m2.502s
</span></span><span class="line"><span class="cl">user    0m2.771s
</span></span><span class="line"><span class="cl">sys     0m0.326s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ time jj all
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">real    0m2.611s
</span></span><span class="line"><span class="cl">user    0m2.911s
</span></span><span class="line"><span class="cl">sys     0m0.381s</span></span></code></pre>
</figure><p>Ran each version a few times, just to be sure.  The version with File::Temp consistently finished a noticeable fraction of a section quicker than using Temp::Path.  Still nowhere near the one-liner&rsquo;s performance, but good enough
that I&rsquo;ll stick with File::Temp until I come up with something better.</p>
<p>Do I care enough to reboot into Linux and see how much of a difference that makes?</p>
<p>Not really.</p>
<p>I can probably optimize this, but it&rsquo;s not urgent or important.  So far I only skim my entries when I already have a few moments to spare.  Besides, the real optimizations almost definitely lie with using the Joplin API.</p>
<p>What I&rsquo;m saying is don&rsquo;t get hung up on trivia.</p>
<p>Speaking of trivia…</p>
<h2 id="about-that-regular-expression">About that regular expression</h2>
<p>I need to do something about this.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> ... </span><span class="p">}</span><span class="o">.</span><span class="nb">subst</span><span class="p">(/</span><span class="ni">^^</span><span class="sr"> </span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)</span><span class="sr"> </span><span class="ni">$$</span><span class="p">/</span><span class="o">,</span> <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">);</span></span></span></code></pre>
</figure><p>We already know that regular expressions are their own little language embedded in whatever programming language we happen to be getting work done in.  With Raku, we can treat regular expressions as part of the Raku language itself.</p>
<p>Let&rsquo;s tackle this backwards.  Top-down.  Whatever it is the fancy people say. I&rsquo;m going to split it out into its own function.  Makes it easier to think of this transformation in isolation.</p>
<h3 id="hide-it-in-a-function">Hide it in a function</h3>
<p>What do I want this function to do?  I want it to give me my <em>journal text</em>, but with <em>formatted headers</em> in the right places.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">format-headers</span><span class="p">(</span><span class="nv">$journal-text</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$journal-text</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">/</span><span class="ni">^^</span><span class="sr"> </span><span class="p">(&lt;[</span><span class="se">\d</span><span class="sr">T:</span><span class="se">\</span><span class="sr">-</span><span class="p">]&gt;</span><span class="o">+</span><span class="p">)</span><span class="sr"> </span><span class="ni">$$</span><span class="p">/</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># </span><span class="nv">$0</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h3 id="use-a-named-capture">Use a named capture</h3>
<p>Do I want to format every <code>$0</code>? No. I want to format every <em>entry title</em>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">format-journal</span><span class="p">(</span><span class="nv">$journal-text</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$journal-text</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="o">...,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># $&lt;entry-title&gt;</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>Of course Raku supports <a href="https://docs.raku.org/language/regexes#Named_captures">named captures</a>.  The part we care about is stored in the match object.  Behind the scenes, <code>$&lt;entry-title&gt;</code> is getting the value stored under the key <code>&quot;entry-title&quot;</code>.</p>
<h2 id="an-rx-block-for-legibility">An <code>rx{}</code> block for legibility</h2>
<p>How do I know the <em>entry title</em>?  I know the <em>entry title</em> because I found a
<em>lone timestamp</em>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">format-journal</span><span class="p">(</span><span class="nv">$journal-text</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$journal-text</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">rx</span><span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      </span><span class="nv">$&lt;entry-title&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="p">(</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">lone-timestamp</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">)</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="p">}</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># $&lt;entry-title&gt;</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p><code>rx{ ... }</code> indicates an <a href="https://docs.raku.org/language/regexes#Anonymous_regex_definition_syntax">anonymous regex</a>.  &ldquo;Anonymous&rdquo; as opposed to what exactly?  I&rsquo;m getting there.  As our expressions get more complex, take advantage of all useful quoting mechanisms.</p>
<p>Notice that instead of a <code>(?&lt;name&gt; pattern)</code> approach to named captures, in Raku it looks a lot more like assigning a pattern to a variable.  Okay fine. Assigning a pattern to the match object&rsquo;s hash, under the key <code>&quot;entry-title&quot;</code>.  But still.  It looks like a more familiar programming language assignment.</p>
<p>But rather than the expected elaborate chain of metacharacters, the pattern we store is — another identifier?</p>
<p>I told you I was getting there.</p>
<h3 id="name-your-regex-not-just-your-capture">Name your regex, not just your capture</h3>
<p>What&rsquo;s a <em>lone timestamp</em>? It&rsquo;s a <em>timestamp</em> on a line by itself.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">lone-timestamp</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="ni">^^</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">timestamp</span><span class="p">&gt;</span><span class="sr"> </span><span class="ni">$$</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span></span></span></code></pre>
</figure><p>Now we have a regular expression as its own scoped code object.  The <a href="https://docs.raku.org/language/regexes#Named_regex_definition_syntax">regex</a> is the rawest component of a family that includes tokens, rules, and entire <a href="https://docs.raku.org/language/grammar_tutorial">grammars</a>.  I&rsquo;m not ready to get into grammars yet, but I am absolutely getting closer.</p>
<h3 id="its-not-an-expression-its-a-composition">It&rsquo;s not an expression; it&rsquo;s a composition</h3>
<p>What does a <em>timestamp</em> look like?  Well, a <a href="https://docs.raku.org/type/DateTime#method_Str">DateTime String</a> holds an <em>ISO 8601 date</em>, a <em>clock time</em>, and and <em>offset</em>, with a <code>'T'</code> between the date and the clock time.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">timestamp</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">iso8601-date</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">T</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">clock-time</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">offset</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span></span></span></code></pre>
</figure><p>If we&rsquo;re looking for a literal string, it&rsquo;s okay to use a string literal.</p>
<p>Now we have a few regex patterns to define.  An <em>ISO 8601 date</em> includes a <em>year</em>, a <em>month</em>, and a <em>day of the month</em>, separated by <code>'-'</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">iso8601-date</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">year</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">month</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">day-of-month</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span></span></span></code></pre>
</figure><p>Playing more with a language gives me a feel for how to use it based on what it makes easy.  Raku makes it easy to create a program by composing it from small pieces.  Tiny pieces, even.</p>
<p>Mind you, I have no idea if that&rsquo;s what <code>raku</code> the <em>compiler</em> likes.  But the <em>syntax</em> loves it.</p>
<p>A <em>year</em> is four digits, a <em>month</em> is two digits, and the <em>day of the month</em> is two digits.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">year</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">4</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">month</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">day-of-month</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span></span></span></code></pre>
</figure><p>The <a href="https://docs.raku.org/language/regexes#General_quantifier:_**_min..max">general quantifier</a> <code>**</code> indicates how many times you expect a chunk to appear.  To this day I can&rsquo;t remember the exact syntax for quantifiers in old-school regular expressions.  But I can remember the number 4.</p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>This regex is wrong for verifying real dates. It&rsquo;s not wrong enough to worry about today. I&rsquo;m identifying header lines, not validating forms. But if some day I decide to enforce zero-padded months from <code>01</code> to <code>12</code>, I know exactly which block to edit.</p>
</blockquote>
<p>Looks like <em>clock time</em> gets saved as <em>hours</em>, <em>minutes</em>, and <em>seconds</em>.  In the interest of time, we&rsquo;ll oversimplify those too.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">hours</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">minutes</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">seconds</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">clock-time</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">hours</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">minutes</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">seconds</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span></span></span></code></pre>
</figure><p>And my offset holds an indicator, some <em>hours</em>, and some <em>minutes</em>.  Hey, I can reuse my existing regex definitions for those!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">offset</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;[</span><span class="sr">+-</span><span class="p">]&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">hours</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">minutes</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span></span></span></code></pre>
</figure><p>All right.  I think that covers it.  I enjoyed reusing my expressions for <em>hours</em> and <em>minutes</em> like that.  Actual code reuse, in a regular expression. Who would&rsquo;ve thought?</p>
<p>When I take this <code>lone-timestamp</code> regex and match it against <code>&quot;2021-05-24T08:11:00-07:00&quot;</code> we can see those named expressions at work. The potential really starts to sink in for me.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">｢2021-05-24T08:11:00-07:00｣
</span></span><span class="line"><span class="cl"> lone-timestamp =&gt; ｢2021-05-24T08:11:00-07:00｣
</span></span><span class="line"><span class="cl">  timestamp =&gt; ｢2021-05-24T08:11:00-07:00｣
</span></span><span class="line"><span class="cl">   iso8601-date =&gt; ｢2021-05-24｣
</span></span><span class="line"><span class="cl">    year =&gt; ｢2021｣
</span></span><span class="line"><span class="cl">    month =&gt; ｢05｣
</span></span><span class="line"><span class="cl">    day-of-month =&gt; ｢24｣
</span></span><span class="line"><span class="cl">   clock-time =&gt; ｢08:11:00｣
</span></span><span class="line"><span class="cl">    hours =&gt; ｢08｣
</span></span><span class="line"><span class="cl">    minutes =&gt; ｢11｣
</span></span><span class="line"><span class="cl">    seconds =&gt; ｢00｣
</span></span><span class="line"><span class="cl">   offset =&gt; ｢-07:00｣
</span></span><span class="line"><span class="cl">    hours =&gt; ｢07｣
</span></span><span class="line"><span class="cl">    minutes =&gt; ｢00｣</span></span></code></pre>
</figure><p>And this is just me composing regex objects.  Eventually I&rsquo;m going to try grammars and then look out world!</p>
<blockquote>
<p>[!NOTE] but why?
This may all seem a little ridiculous, and for this use case — parsing my own entry titles — it is.  So why am I going through all this work? Aside from it being fun, of course.</p>
<p>Raku&rsquo;s sibling language Perl got a bad reputation for being dense and unreadable. Regular expressions factored heavily into that density. By providing language-level structures for defining our expressions, Raku gives us an opportunity to use their full power for handling text without resorting to the infamous density of 1990s regexen.</p>
<p>We should absolutely use that opportunity and encourage new languages to steal <em>these</em> regular expressions rather than the stuff that impressed us twenty years ago.</p>
</blockquote>
<h3 id="ship-it">Ship it!</h3>
<p>What am I doing on this soapbox? Time to step down.</p>
<p>My script works. It&rsquo;s still not fast, but at least it&rsquo;s never slow. It&rsquo;s readable. And most important of all, I had fun.</p>
<h2 id="the-complete-script">The complete script</h2>
<p>Includes a couple more steps into composition that I didn&rsquo;t feel merited extra blog post paragraphs.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env raku</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">File::Temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$notebook</span>     <span class="o">=</span> <span class="p">&#34;</span><span class="s2">Journal</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl"><span class="k">constant</span> <span class="nv">$entry-window</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">minute</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">digit</span> <span class="p">{</span><span class="sr"> </span><span class="se">\d</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">two-digits</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">digit</span><span class="p">&gt;</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">2</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">year</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">digit</span><span class="p">&gt;</span><span class="sr"> </span><span class="o">**</span><span class="sr"> </span><span class="mi">4</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">month</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">day-of-month</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">hours</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">minutes</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">seconds</span> <span class="p">{</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">two-digits</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">iso8601-date</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">year</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">month</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">-</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">day-of-month</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">clock-time</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">hours</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">minutes</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">seconds</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">offset</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;[</span><span class="sr">+-</span><span class="p">]&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">hours</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">:</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">minutes</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">timestamp</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="p">&lt;</span><span class="nf">iso8601-date</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&#39;</span><span class="s1">T</span><span class="p">&#39;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">clock-time</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">offset</span><span class="p">&gt;</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">my</span> <span class="k">regex</span> <span class="nf">lone-timestamp</span> <span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">  </span><span class="ni">^^</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">timestamp</span><span class="p">&gt;</span><span class="sr"> </span><span class="ni">$$</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">add-entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$timestamp</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">truncated-to</span><span class="p">(</span><span class="nv">$entry-window</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$command</span> <span class="o">=</span> <span class="p">&#34;</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin edit </span><span class="nv">$timestamp</span><span class="p">&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">shell</span><span class="p">(</span> <span class="nv">$command</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">all-entries</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2">joplin use </span><span class="nv">$notebook</span><span class="s2"> &amp;&amp; joplin ls</span><span class="p">}</span><span class="o">.</span><span class="nb">lines</span><span class="o">.</span><span class="nb">sort</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">filtered-entries</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">all-entries</span><span class="o">.</span><span class="nb">grep</span><span class="p">({</span> <span class="o">.</span><span class="nb">starts-with</span><span class="p">(</span><span class="nv">$date-funnel</span><span class="p">)</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-today</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">entries-for-yesterday</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$yesterday</span> <span class="o">=</span> <span class="kt">DateTime</span><span class="o">.</span><span class="nb">now</span><span class="o">.</span><span class="nb">earlier</span><span class="p">(</span><span class="s">days</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1"># or :1day for the terse</span>
</span></span><span class="line"><span class="cl">  <span class="n">filtered-entries</span> <span class="nv">$yesterday</span><span class="o">.</span><span class="nb">yyyy-mm-dd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">read-entries</span><span class="p">(</span><span class="nv">@entries</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="p">(</span><span class="nv">$filename</span><span class="o">,</span> <span class="nv">$filehandle</span><span class="p">)</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$filehandle</span><span class="o">.</span><span class="nb">spurt</span><span class="p">(</span> <span class="nv">@entries</span><span class="o">.</span><span class="nb">map</span><span class="p">({</span> <span class="p">&#34;</span><span class="s2">cat </span><span class="nv">$_</span><span class="p">&#34;</span> <span class="p">})</span><span class="o">.</span><span class="nb">join</span><span class="p">(&#34;</span><span class="se">\n</span><span class="p">&#34;)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">format-headers</span><span class="p">(</span> <span class="k">qq</span><span class="sa">x</span><span class="p">{</span><span class="s2"> joplin batch </span><span class="nv">$filename</span><span class="s2"> </span><span class="p">}</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">format-headers</span><span class="p">(</span><span class="nv">$journal-text</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nv">$journal-text</span> <span class="o">~~</span> <span class="p">/&lt;</span><span class="nf">lone-timestamp</span><span class="p">&gt;/</span> <span class="p">{</span> <span class="nv">$/</span><span class="o">.</span><span class="nb">say</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nv">$journal-text</span><span class="o">.</span><span class="nb">subst</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">rx</span><span class="p">{</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">      </span><span class="nv">$&lt;entry-title&gt;</span><span class="sr"> </span><span class="o">=</span><span class="sr"> </span><span class="p">[</span><span class="sr"> </span><span class="p">&lt;</span><span class="nf">lone-timestamp</span><span class="p">&gt;</span><span class="sr"> </span><span class="p">]</span><span class="sr">
</span></span></span><span class="line"><span class="cl"><span class="sr">    </span><span class="p">}</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="p">&#34;</span><span class="s2"># $&lt;entry-title&gt;</span><span class="p">&#34;</span> <span class="p">}</span><span class="o">,</span> <span class="p">:</span><span class="s">g</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">add</span><span class="p">&#34;)</span> <span class="p">{</span>   <span class="k">#= </span><span class="sd">Add an entry
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="n">add-entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">today</span><span class="p">&#34;)</span> <span class="p">{</span>  <span class="k">#= </span><span class="sd">Read today&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-today</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">yesterday</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read yesterday&#39;s entries
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">entries-for-yesterday</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">multi</span> <span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(&#34;</span><span class="s2">all</span><span class="p">&#34;)</span> <span class="p">{</span> <span class="k">#= </span><span class="sd">Read all entries (SLOW!)
</span></span></span><span class="line"><span class="cl"><span class="sd"></span>  <span class="nb">say</span> <span class="nf">read-entries</span><span class="p">(</span> <span class="n">all-entries</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Post: So here&#39;s my first Statamic tip: don&#39;t forget xml_handler in your RSS template</title>
  <link>https://randomgeekery.org/post/2021/05/statamic-xml-handler-rss/</link>
  <pubDate>Sat, 08 May 2021 00:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/05/statamic-xml-handler-rss/</guid>
  <description>@brianwisti what&#39;s the proper way to subscribe to https://t.co/6QUV8FCUgL now? Not finding an RSS.
— Captain Macho Pirate Mick Rackam (@tw2113) May 8, 2021 Yeah, the link was at /index.xml, but card/Statamic wasn’t outputting valid XML until I replaced my raw &lt;?xml with the xml_handler tag:
{{ xml_handler }} Should be all better now. Or at least better than it was.</description>
   <category>post</category> 
   <category>note</category> 
   <category>site</category>  <category>statamic</category>  <category>i-fixed-it</category> 
  <content:encoded><![CDATA[<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://twitter.com/brianwisti?ref_src=twsrc%5Etfw">@brianwisti</a> what&#39;s the proper way to subscribe to <a href="https://t.co/6QUV8FCUgL">https://t.co/6QUV8FCUgL</a> now? Not finding an RSS.</p>&mdash; Captain Macho Pirate Mick Rackam (@tw2113) <a href="https://twitter.com/tw2113/status/1390887717261561857?ref_src=twsrc%5Etfw">May 8, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Yeah, the link was at <code>/index.xml</code>, but <a href="/card/statamic/">card/Statamic</a> wasn&rsquo;t outputting valid XML until I replaced my raw <code>&lt;?xml</code> with the <code>xml_handler</code> tag:</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >{{ xml_handler }}</code></pre>
</figure><p>Should be all better now. Or at least better than it was.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: yay fresh webmentions again</title>
  <link>https://randomgeekery.org/post/2021/02/yay-fresh-webmentions-again/</link>
  <pubDate>Tue, 23 Feb 2021 21:39:41 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2021/02/yay-fresh-webmentions-again/</guid>
  <description>Finally reconnected the site flow bits that grab and file fresh Webmentions. Probably going to tweak rendering of the Bridgy bits that feed reactions from bigger social networks. It’s that or add threading here for conversation that happens there. No thank you.
Anyways yay!</description>
   <category>post</category> 
   <category>note</category> 
   <category>indieweb</category>  <category>site</category>  <category>i-fixed-it</category> 
  <content:encoded><![CDATA[<p>Finally reconnected the site flow bits that grab and file fresh <a href="https://webmention.io">Webmentions</a>. Probably going to tweak rendering of the <a href="https://brid.gy/">Bridgy</a> bits that feed reactions from bigger social networks. It&rsquo;s that or add threading <em>here</em> for conversation that happens <em>there</em>. No thank you.</p>
<p>Anyways yay!</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Alias Templates in Hugo</title>
  <link>https://randomgeekery.org/post/2020/05/alias-templates-in-hugo/</link>
  <pubDate>Wed, 20 May 2020 15:15:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/05/alias-templates-in-hugo/</guid>
  <description>It’s not a redirect anymore
[!WARNING] Don’t do this This was an interesting experiment, but messed with results on search engine pages. Nothing but “This Page Has Moved!” as far as the eye can see after a few months.
Use regular card/Hugo alias frontmatter and leave it at that.
Yesterday I wrote about using rakubrew, a tool for managing installations of the card/Raku programming language. It’s an okay post. I liked my little shoutout to Jeff Goff.</description>
   <category>post</category> 
   <category>post</category> 
   <category>hugo</category>  <category>accessibility</category>  <category>indieweb</category>  <category>i-fixed-it</category>  <category>hopefully</category>  <category>site</category>  <category>tools</category> 
  <content:encoded><![CDATA[<h2>I killed some redirects for accessibility and likes</h2><p><img src="/post/2020/05/../../../attachments/img/2020/cover-2020-05-20.png" alt="attachments/img/2020/cover-2020-05-20.png"/>
It&rsquo;s not a redirect anymore</p>
<blockquote>
<p>[!WARNING] Don&rsquo;t do this
This was an interesting experiment, but messed with results on search engine pages. Nothing but &ldquo;This Page Has Moved!&rdquo; as far as the eye can see after a few months.</p>
<p>Use regular <a href="/card/hugo/">card/Hugo</a> alias frontmatter and leave it at that.</p>
</blockquote>
<p>Yesterday I <a href="/post/2020/05/setting-up-raku-with-rakubrew/">wrote</a> about using <a href="https://rakubrew.org/">rakubrew</a>, a tool for managing installations of the <a href="/card/raku/">card/Raku</a> programming language.  It’s an okay post.  I liked my little shoutout to <a href="https://web.archive.org/web/20200212094016/http://theperlfisher.com/">Jeff Goff</a>.  Those who knew him better shared <a href="https://wendyga.wordpress.com/2020/04/06/jeff-goff-thanks-for-being-a-friend/">better words</a>.</p>
<p>Anyways — the post!  People responded on Twitter and Mastodon.  It was great.</p>
<p>Except none of those responses show up in the &ldquo;IndieWeb Reactions&rdquo; section of the post here on the site.</p>
<h2 id="a-problem">A problem</h2>
<p>I know why — basically.</p>
<p>My post title and URL referenced Rakubrew’s predecessor &ldquo;Rakudobrew,&rdquo; which I considered an unacceptable faux pas.  So I fixed it.</p>
<h2 id="hugo-aliases-a-solution-to-for-my-url-typo">Hugo aliases: A solution to for my URL typo</h2>
<p>This faux pas was easily corrected with <a href="https://gohugo.io/content-management/urls/#aliases">Hugo Aliases</a>.  Move your content where it needs to be, and add an alias for the old link to content front matter.</p>
<figure class="highlight">
  <figcaption><span>Front matter for my Rakubrew post</span></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="l">Setting up Raku with Rakubrew</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">stub</span><span class="p">:</span><span class="w"> </span><span class="l">setting-up-raku-with-rakubrew</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">⋮</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">aliases</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="l">/post/2020/05/setting-up-raku-with-rakudobrew/</span></span></span></code></pre>
</figure><p>With default configuration, Hugo generates an HTML redirect page for every alias.</p>
<figure class="highlight">
  <figcaption><span>HTML generated by Hugo for the alias</span></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>https://randomgeekery.org/post/2020/05/setting-up-raku-with-rakubrew/<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;canonical&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://randomgeekery.org/post/2020/05/setting-up-raku-with-rakubrew/&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;robots&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;noindex&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;refresh&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;0; url=https://randomgeekery.org/post/2020/05/setting-up-raku-with-rakubrew/&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>The visitor may briefly see a blank page.  Browsers visiting the old URL see the <code>http-equiv=&quot;refresh&quot;</code> element and immediately go to the new <code>url</code>. Normally, this is fine.</p>
<h2 id="now-for-todays-problem">Now for today’s problem</h2>
<p>Now my <em>inbox/Webmention</em> feed is busted.  The syndication links all point to the old URL.  Visitors get corrected, but Webmention senders don’t.  <a href="https://brid.gy/">Brid.gy</a> — a lovely service which forwards social network reactions to your webmention handler — saw nothing to forward to!</p>
<p><img src="/post/2020/05/attachments/img/2020/bridgy.png" alt="Bridgy dashboard showing &ldquo;No webmention support&rdquo; in responses to my old URL"/></p>
<p>Well of <em>course</em> there’s no Webmention support.  The generated alias files have no <code>link rel=&quot;webmention&quot;</code>!</p>
<p>Took me a solid hour to figure that one out.</p>
<h2 id="use-a-custom-alias-template-for-my-webmention-problem">Use a custom alias template for my webmention problem</h2>
<p>Oh thank goodness. Hugo supports <a href="https://gohugo.io/content-management/urls/#customize">custom alias templates</a>.</p>
<p>What’s the least I can do to get things working?</p>
<figure class="highlight">
  <figcaption><tt>layouts/alias.html</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>{{ .Permalink }}<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;canonical&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;{{ .Permalink }}&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;webmention&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://webmention.io/randomgeekery.org/webmention&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;pingback&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://webmention.io/randomgeekery.org/xmlrpc&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;robots&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;noindex&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;refresh&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;0; url={{ .Permalink }}&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span></span></span></code></pre>
</figure><blockquote>
<p><strong>NOTE</strong></p>
<p>I was going to do a whole post on receiving webmentions, but that’s basically it  right there. Sign up at <a href="https://webmention.io">Webmention.io</a> and add the <code>&lt;link&gt;</code> to your pages.</p>
</blockquote>
<p>Brid.gy now sees the webmention link at the old URL.  I can manually resend the relevant mentions.  All is well.</p>
<p>Almost.  Now that I’m looking at my templates, I see problems.</p>
<h2 id="this-afternoons-problem-accessibility">This afternoon’s problem: accessibility</h2>
<p>Non-essential page refreshes cause accessibility issues.  Visitors may not have enough time to read the page before it redirects them.  And what if the refresh doesn’t happen, either due to user preference or browser bug?  The blank page offers no clue as to what they should expect.</p>
<p>So I go read the <a href="https://www.w3.org/TR/WCAG21/">Web Content Accessibility Guidelines</a>.  Okay I skimmed it. We already know there’s plenty more I could be doing for accessibility.  No need to get overwhelmed.</p>
<p>Oh heck — the WCAG figures client-side page refreshes should be treated as <a href="https://www.w3.org/TR/WCAG10-CORE-TECHS/#auto-page-refresh">deprecated</a>.</p>
<blockquote>
<p>Until user agents provide the ability to stop auto-redirect, do not use markup to redirect pages automatically.  Instead, configure the server to perform redirects.</p>
</blockquote>
<p>I tried that, and it still caused confusion about webmentions.  Services out there expect to interact with the link they have, and they don’t all understand redirect.  I don’t have to like it, but I should acknowledge it.</p>
<p>They list specific tests for client-side page refreshes.  I could compare what I have to the list.</p>
<figure class="border-primary border-left pl-9 container-9 centered">
  <blockquote
    cite="https://www.w3.org/WAI/WCAG21/Techniques/failures/F41.html">
<p>For a page that uses <code>meta http-equiv=&quot;refresh&quot;</code>:</p>
<ol>
<li>Check that the numerical value for seconds until refresh in the content attribute is present.</li>
<li>Check that the numerical value for seconds until refresh in the content attribute is less than one or greater than 72,000.</li>
<li>Check if the page qualifies for Real-time or Essential Exceptions in Success Criterion 2.2.1 Timing Adjustable.</li>
<li>Check if the user is provided an opportunity to turn off, extend, or adjust the timing of the page refresh.</li>
<li>Check if the page does not refresh after the duration specified in the content attribute.</li>
</ol>
  </blockquote><figcaption class="align-right">
    &mdash;
    WCAG21, <a href="https://www.w3.org/WAI/WCAG21/Techniques/failures/F41.html">Failure of Success Criterion 2.2.1, 2.2.4, and 3.2.5 due to using meta refresh to reload the page</a>
  </figcaption></figure>
<ul>
<li>There is a numerical value: <code>0</code>. Yay!</li>
<li>zero is less than one. Yay!</li>
<li>Nothing about my page requires real-time interaction, and while <em>I</em> may think   it’s <a href="https://www.w3.org/TR/WCAG21/#dfn-essential">essential</a> to get you at the updated address, you could get the same   result if I give you a link.  Even more unnerving for me: you could <em>choose</em>   not to follow that link.</li>
<li>How would I let a user control an automatic refresh?  Some Javascript maybe? Sure I want to add client-side functionality to the site, but I don’t want to start here.</li>
</ul>
<p>&ldquo;Ah,&rdquo; I hear you say.  &ldquo;But your alias refreshes immediately. Besides, there’s no content to read!&rdquo;</p>
<p>Right, I know.  I’m talking about what they call an &ldquo;edge case.&rdquo; Most people are used to Web pages shifting and changing address underneath them.  We’re used to doing it to them, anyways.</p>
<p>And the more I think about it, the more that empty page bugs me.  We should tell folks if we’re sending them somewhere else.  We should give them the option of not going.</p>
<p>Maybe just &ldquo;this page moved&rdquo; and a link instead of an automatic refresh.  That works for now.</p>
<p>I have no problem with automatic redirect for non-entry content: sections, pagination, archives, tag listings, and so on.  I made peace with my constant puttering on those a long time ago.  <a href="https://help.dreamhost.com/hc/en-us/articles/215747748-How-can-I-redirect-and-rewrite-my-URLs-with-an-htaccess-file-">redirect in <code>.htaccess</code></a> suffices for non-entry content.  But actual posts and pages should stay constant or at the very least tell you where they went.</p>
<p>And this post adds a new rule that they need to tell <em>you</em> — not just the browser.</p>
<p>This is what I came up with, more or less.</p>
<figure class="highlight">
  <figcaption><tt>layouts/alias.html</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>{{ .Permalink }}<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;canonical&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;{{ .Permalink }}&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;webmention&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://webmention.io/randomgeekery.org/webmention&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;pingback&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://webmention.io/randomgeekery.org/xmlrpc&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;robots&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;noindex&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    {{ if .Page }}
</span></span><span class="line"><span class="cl">      {{- $includeAnalytics := getenv &#34;INCLUDE_ANALYTICS&#34; -}} <span class="c">&lt;!-- 1 --&gt;</span>
</span></span><span class="line"><span class="cl">      {{- if eq $includeAnalytics &#34;1&#34; -}}
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">script</span> <span class="na">async</span> <span class="na">defer</span> <span class="na">data-domain</span><span class="o">=</span><span class="s">&#34;randomgeekery.org&#34;</span>
</span></span><span class="line"><span class="cl">                            <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://plausible.io/js/plausible.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      {{- end -}}
</span></span><span class="line"><span class="cl">    {{ else }}
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;refresh&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;0; url={{ .Permalink }}&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    {{ end }}
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    {{ with .Page }}
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>This Page Has Moved!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        For some reason — Web address typos and site reorganization are <span class="p">&lt;</span><span class="nt">em</span><span class="p">&gt;</span>very<span class="p">&lt;/</span><span class="nt">em</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        likely — {{ .Page.Title }} moved to <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;{{ .Permalink }}&#34;</span><span class="p">&gt;</span>{{ .Permalink }}<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>.
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    {{ else }} <span class="c">&lt;!-- 2 --&gt;</span>
</span></span><span class="line"><span class="cl">      {{/* reenable to hunt down pagination links <span class="c">&lt;!-- 3 --&gt;</span>
</span></span><span class="line"><span class="cl">        {{ warnf &#34;No page defined for %q&#34; .Permalink }}
</span></span><span class="line"><span class="cl">      */}}
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        Hugo generated this redirect to <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;{{ .Permalink }}&#34;</span><span class="p">&gt;</span>{{ .Permalink }}<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        automatically during site generation. Please follow the link if your browser
</span></span><span class="line"><span class="cl">        does not immediately redirect.
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    {{ end }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span></span></span></code></pre>
</figure><ol>
<li>Analytics for aliased pages, because I want to know if folks are clicking on
old links, but not for pagination aliases. Those are noise for me, not
information.</li>
<li>Today I learned that <a href="https://gohugo.io/functions/with/"><code>with</code></a> supports <code>else</code></li>
<li>When this <a href="https://gohugo.io/templates/introduction/#comments">comment</a> is removed, Hugo will <a href="https://gohugo.io/functions/warnf/">warn</a> me about aliases not associated with my content.</li>
</ol>
<p>It works with some tweaking.  Hugo <a href="https://gohugo.io/templates/pagination/">pagination</a> relies on aliases to setup <code>page/1</code> redirects.  Those pagination links aren’t associated with a Page, and an extra click with those would be annoying.  But in the end I have a non-refreshing informational page at the old link for page aliases, and an auto-refreshing page with context for pagination aliases.</p>
<p>Build gets much noisier with that <code>warnf</code> in place.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> make build
</span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span><span class="line"><span class="cl"><span class="go">WARN 2020/05/20 12:27:20 No page defined for &#34;https://randomgeekery.org/tags/yeah-i-know/&#34;
</span></span></span><span class="line"><span class="cl"><span class="go">WARN 2020/05/20 12:27:20 No page defined for &#34;https://randomgeekery.org/tags/unless-thats-cool/&#34;
</span></span></span><span class="line"><span class="cl"><span class="go">WARN 2020/05/20 12:27:20 No page defined for &#34;https://randomgeekery.org/tags/zentangle/&#34;
</span></span></span><span class="line"><span class="cl"><span class="go">WARN 2020/05/20 12:27:20 No page defined for &#34;https://randomgeekery.org/tags/zombie/&#34;
</span></span></span><span class="line"><span class="cl"><span class="go">⋮
</span></span></span></code></pre>
</figure><p>Kill pagination again.</p>
<p>Mind you, I have no idea what effect this will have on Search Engine Optimization. Then again, this would be a much different site if I cared about SEO.</p>
<figure class="highlight">
  <figcaption><span>The new redirect file</span></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>https://randomgeekery.org/post/2020/05/setting-up-raku-with-rakubrew/<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;canonical&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://randomgeekery.org/post/2020/05/setting-up-raku-with-rakubrew/&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;webmention&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://webmention.io/randomgeekery.org/webmention&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;pingback&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://webmention.io/randomgeekery.org/xmlrpc&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;robots&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;noindex&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;refresh&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;0; url=https://randomgeekery.org/post/2020/05/setting-up-raku-with-rakubrew/&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>This Page Has Moved!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      For one reason or another — Web address typos and site reorganization are
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">em</span><span class="p">&gt;</span>very<span class="p">&lt;/</span><span class="nt">em</span><span class="p">&gt;</span> likely — &#34;Setting up Raku with Rakubrew&#34; moved to a new address.
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      If your browser does not immediately send you to the new location,
</span></span><span class="line"><span class="cl">      you can visit <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://randomgeekery.org/post/2020/05/setting-up-raku-with-rakubrew/&#34;</span><span class="p">&gt;</span>https://randomgeekery.org/post/2020/05/setting-up-raku-with-rakubrew/<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span> yourself.
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>Now that I decided to go with an unchanging alias page, it needs to fit in stylistically with the rest of the site.  You don’t need to worry about those details though.</p>
<p>All this because I wanted to see my Twitter likes on the page.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Debugging My Site With a Little Help From My Friends</title>
  <link>https://randomgeekery.org/post/2020/05/debugging-my-site-with-a-little-help-from-my-friends/</link>
  <pubDate>Fri, 08 May 2020 20:25:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/05/debugging-my-site-with-a-little-help-from-my-friends/</guid>
  <description>It’s probably redundant to test HTML structure for my pages, but what the heck.
– Me, a couple months ago
There’s no rule, but obviously every webmention to my site will have full author info including photo.
– Me, a few weeks ago
Look honey I added inbox/Webmention data to my Datasette dashboard!
– Me, this morning
Sweet, jmac liked my mention! Wait why are tests failing? Maybe check the dashboard?</description>
   <category>post</category> 
   <category>note</category> 
   <category>indieweb</category>  <category>data</category>  <category>i-fixed-it</category>  <category>before-i-pushed-it</category>  <category>yay-for-tests</category> 
  <content:encoded><![CDATA[<p><img src="/post/2020/05/../../../attachments/img/2020/cover-2020-05-08.png" alt="attachments/img/2020/cover-2020-05-08.png"/></p>
<blockquote>
<p>It’s probably redundant to test HTML structure for my pages, but <a href="/post/2020/03/passing-tests-is-now-required-to-push/">what the heck</a>.</p>
<p>&ndash; <cite>Me, a couple months ago</cite></p>
</blockquote>
<blockquote>
<p>There’s no rule, but <em>obviously</em> every webmention to my site will have
full author info including photo.</p>
<p>&ndash; <cite>Me, a few weeks ago</cite></p>
</blockquote>
<blockquote>
<p>Look honey I added <em>inbox/Webmention</em> data to my <a href="/post/2020/05/datasette-sure-is-nifty/">Datasette dashboard</a>!</p>
<p>&ndash; <cite>Me, this morning</cite></p>
</blockquote>
<blockquote>
<p>Sweet, jmac liked my <a href="/post/2020/05/pondering-my-indieweb-guinea-pig/">mention</a>!  Wait why are tests failing? Maybe check
the dashboard?</p>
<p>&ndash; <cite>Me, an hour ago</cite></p>
</blockquote>
<blockquote>
<p>I fixed it!</p>
<p>&ndash; <cite>Me, a few minutes ago</cite></p>
</blockquote>
<p>The fix is reasonable defaults for response author info. I got other fixes in mind, including a default &ldquo;card&rdquo; for anonymous response authors. Also, inferring author info from source site. Thanks for the help and the ideas, <a href="https://jmac.org">Jason McIntosh</a>!</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Sorry if I Broke Your Rss Feed</title>
  <link>https://randomgeekery.org/post/2020/04/sorry-if-i-broke-your-rss-feed/</link>
  <pubDate>Thu, 30 Apr 2020 23:30:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/04/sorry-if-i-broke-your-rss-feed/</guid>
  <description>Gordon Dam, by Dante Aguiar. Via Good Free Photos
But hey I got my permalinks where I wanted them, without needing a UUID after all. Took a bit of juggling to get the Hugo aliases and my support data synced up. You folks got the Jamstack — JavaScript, APIs, Markup — for your static sites. I got — uh, guess I got the “Damstack” — Database, APIs, Markup — for my static site.</description>
   <category>post</category> 
   <category>note</category> 
   <category>site</category>  <category>i-fixed-it</category>  <category>damstack</category>  <category>did-i-make-a-buzzword-yet</category> 
  <content:encoded><![CDATA[<p><img src="/post/2020/04/../../../attachments/img/2020/cover-2020-04-30.jpg" alt="attachments/img/2020/cover-2020-04-30.jpg"/>
Gordon Dam, by Dante Aguiar. Via <a href="https://www.goodfreephotos.com/other-landscapes/gordon-dam-and-beautiful-landscape.jpg.php">Good Free Photos</a></p>
<p>But hey I got my permalinks where I wanted them, without needing a UUID after all. Took a bit of juggling to get the Hugo <a href="https://gohugo.io/content-management/urls/#aliases">aliases</a> and my support data synced up. You folks got the <a href="https://jamstack.org">Jamstack</a> — JavaScript, APIs, Markup — for your static sites. I got — uh, guess I got the &ldquo;Damstack&rdquo; — Database, APIs, Markup — for <em>my</em> static site.</p>
<p>Blame <a href="https://blog.afoolishmanifesto.com/posts/hugo-unix-vim-integration/#advanced-unix-tools">fREW</a>. For the idea. Not the terrible name. That’s all me, friends.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: That Is Just Embarrassing</title>
  <link>https://randomgeekery.org/post/2020/02/that-is-just-embarrassing/</link>
  <pubDate>Tue, 25 Feb 2020 21:41:36 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2020/02/that-is-just-embarrassing/</guid>
  <description>Where’s the rest of the post?
Got a inbox/Pyinvoke test task for the site. Because of that, I found a post about Jekyll collections that got truncated — before the current repo existed.
Fixed it though. Got the missing content from an old copy. Yay for Internet Archive!</description>
   <category>post</category> 
   <category>note</category> 
   <category>site</category>  <category>oops</category>  <category>i-fixed-it</category> 
  <content:encoded><![CDATA[<p><img src="/post/2020/02/../../../attachments/img/2020/cover-2020-02-25.png" alt="attachments/img/2020/cover-2020-02-25.png"/>
Where&rsquo;s the rest of the post?</p>
<p>Got a <em>inbox/Pyinvoke</em> <code>test</code> task for the site. Because of that, I found a post about <a href="/post/2015/07/making-a-jekyll-collection/">Jekyll collections</a> that got truncated — before the current repo existed.</p>
<p>Fixed it though. Got the missing content from an <a href="https://web.archive.org/web/20160318224730/http://randomgeekery.org/post/2015/making-a-jekyll-collection">old copy</a>. Yay for Internet Archive!</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Wait No Hold On</title>
  <link>https://randomgeekery.org/post/2019/07/wait-no-hold-on/</link>
  <pubDate>Thu, 11 Jul 2019 21:44:58 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/07/wait-no-hold-on/</guid>
  <description>There was a bug in the “announce” part of my “publish/announce” flow. Let me try that again.
Image via https://joinmastodon.org/</description>
   <category>post</category> 
   <category>note</category> 
   <category>notes</category>  <category>i-fixed-it</category>  <category>mastodon</category>  <category>toot</category>  <category>toot-toot</category> 
  <content:encoded><![CDATA[<p>There was a bug in the &ldquo;announce&rdquo; part of my &ldquo;publish/announce&rdquo; flow. Let me try
that again.</p>
<p><img src="/post/2019/07/../../../attachments/img/2019/cover-2019-07-11.png" alt="attachments/img/2019/cover-2019-07-11.png"/>
Image via <a href="https://joinmastodon.org/">https://joinmastodon.org/</a></p>
]]></content:encoded>
</item>
<item>
  <title>Post: make publish</title>
  <link>https://randomgeekery.org/post/2019/07/make-publish/</link>
  <pubDate>Thu, 11 Jul 2019 21:17:44 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2019/07/make-publish/</guid>
  <description>The Note list pages are paginated now, at least until I come up with a better approach. Plus I think the site has an automatic publish/announce flow now, after a few weeks of futzing around in my free time.
Let’s find out.</description>
   <category>post</category> 
   <category>note</category> 
   <category>notes</category>  <category>i-fixed-it</category>  <category>for-now</category>  <category>futzing-is-too-a-word</category> 
  <content:encoded><![CDATA[<p>The Note list pages are paginated now, at least until I come up with a
better approach. Plus I <em>think</em> the site has an automatic publish/announce flow
now, after a few weeks of futzing around in my free time.</p>
<p>Let&rsquo;s find out.</p>
]]></content:encoded>
</item>
</channel>
</rss>
