<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>postonRandom Geekery</title>
    <link>https://randomgeekery.org/category/post/</link>
    <description>
      Recent contentinpost on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 22 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://randomgeekery.org/category/post/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Post: watched Your Colors Suck (it&#39;s not your fault)</title>
  <link>https://randomgeekery.org/post/2023/10/watched-your-colors-suck-its-not-your-fault/</link>
  <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2023/10/watched-your-colors-suck-its-not-your-fault/</guid>
  <description>Hey do you want a 37 minute info dump about digital color? Of course you do.
Topics covered include: Quantization, color banding, dithering, value mapping, palette swapping, radiometry, photometry, how humans perceive color, colorimetry, spectral rendering, the rgb color model, deriving srgb, the hsl color model, gradient mapping, randomly generated color palettes, perceptual color spaces, the lab color model, oklab
tldw: use OKLAB not RGB or HSL. There’s even &#43;oklab()&#43; in CSS now.</description>
   <category>post</category> 
   <category>post</category> 
   <category>watch</category>  <category>css</category>  <category>art</category> 
  <content:encoded><![CDATA[<p>Hey do you want a 37 minute info dump about digital color? Of course you do.</p>
<p><img src="https://www.youtube.com/watch?v=fv-wlo8yVhk"/></p>
<blockquote>
<p>Topics covered include: Quantization, color banding, dithering, value mapping, palette swapping, radiometry, photometry, how humans perceive color, colorimetry, spectral rendering, the rgb color model, deriving srgb, the hsl color model, gradient mapping, randomly generated color palettes, perceptual color spaces, the lab color model, oklab</p>
</blockquote>
<p><a href="/card/tldw/">tldw</a>: use <a href="https://bottosson.github.io/posts/oklab/">OKLAB</a> not RGB or HSL. There’s even <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/oklab"><code>+oklab()+</code></a> in CSS now.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Nah on Copilot for now</title>
  <link>https://randomgeekery.org/post/2023/06/nah-on-copilot-for-now/</link>
  <pubDate>Sat, 17 Jun 2023 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2023/06/nah-on-copilot-for-now/</guid>
  <description>GitHub Copilot is a development tool from Microsoft driven by a Large Language Model (LLM) — one piece of the very big tech trend described as “AI”.
Copilot acts as a super-powered autocomplete for developers. Sort of like an LSP, but this goes much further. Where an LSP might give you an identifier or point you to a definition, Copilot generates entire expressions and blocks of code. It assembles reasonable-looking code from what it’s been fed, including your own current projects.</description>
   <category>post</category> 
   <category>post</category> 
   <category>tools</category>  <category>llm</category> 
  <content:encoded><![CDATA[<h2>Besides the ethics? The tool itself breaks my flow.</h2><p><a href="https://github.com/features/copilot">GitHub Copilot</a> is a development tool from Microsoft driven by a <a href="https://en.wikipedia.org/wiki/Large_language_model">Large Language Model (LLM)</a> — one piece of the very big tech trend described as &ldquo;AI&rdquo;.</p>
<p>Copilot acts as a super-powered autocomplete for developers. Sort of like an <a href="https://microsoft.github.io/language-server-protocol/">LSP</a>, but this goes much further. Where an LSP might give you an identifier or point you to a definition, Copilot generates entire expressions and blocks of code. It assembles reasonable-looking code from what it&rsquo;s been fed, including your own current projects.</p>
<p>Some people like Copilot.</p>
<p>{% quote
from=&ldquo;Curtis Poe&rdquo;
title=&ldquo;Using Github Copilot with Vim&rdquo;
cite=&ldquo;<a href="https://ovid.github.io/articles/using-github-copilot-with-vim.html%22">https://ovid.github.io/articles/using-github-copilot-with-vim.html"</a>
%}
This technology is in its infancy and it’s already writing code that’s better than many developers I’ve met.
{% /quote %}</p>
<p>Some people dislike it so much they are taking Microsoft to court over it.</p>
<p>{% quote
title=&ldquo;GitHub Copilot litigation · Joseph Saveri Law Firm &amp; Matthew Butterick&rdquo;
cite=&ldquo;<a href="https://githubcopilotlitigation.com/%22">https://githubcopilotlitigation.com/"</a>
%}
By training their AI sys­tems on pub­lic GitHub repos­i­to­ries (though based on their pub­lic state­ments, pos­si­bly much more) we con­tend that the defen­dants have vio­lated the legal rights of a vast num­ber of cre­ators who posted code or other work under cer­tain open-source licenses on GitHub.
{% /quote %}</p>
<p>I tried Copilot out, even though I&rsquo;m unhappy about the wholesale appropriation of publicly visible code regardless of license. Ignoring it seemed impractical. What if it really is a game-changer?</p>
<p>After a month? No. Copilot is not a useful tool for me. It&rsquo;s always offering helpful suggestions. Those suggestions are frequently incorrect. Its errors are not always obvious. But it&rsquo;ll keep offering them until you make it stop.</p>
<p>I <em>think</em> Copilot would work better if I used fewer languages and experimented with fewer frameworks. As it is, the experience is not unlike pair programming with someone who <em>always</em> tries to paste in the top result from Stack Overflow.</p>
<p>&ldquo;Here&rsquo;s some React code!&rdquo;</p>
<p>That&rsquo;s nice, but I&rsquo;m writing an Astro component.</p>
<p>&ldquo;Here&rsquo;s what that algorithm looks like!&rdquo;</p>
<p>Thank you! Wait no. This is Python. My code is Nim.</p>
<p>My Copilot trial run has been a month of occasional usefulness in a sea of interruptions just as I was typing something. It changes the game all right. And the new game is &ldquo;let me break your flow.&rdquo;</p>
<p>So no. Not for me in its current form.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Dendron is officially in maintenance mode</title>
  <link>https://randomgeekery.org/post/2023/02/dendron-is-officially-in-maintenance-mode/</link>
  <pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2023/02/dendron-is-officially-in-maintenance-mode/</guid>
  <description>My Dendron notes from Graceful.Dev Reproducible Development with Containers
{% quote( from=“Kevin Lin” cite=&#34;https://discord.com/channels/717965437182410783/737323300967022732/1072563304289030164&#34; title=&#34;#announcements on Dendron Discord&#34; ) %} …the tldr: we spent the past two years building a better way for humans to manage knowledge. While we made great strides there, as a business, we were ultimately not able to find product market fit for a venture backed business. After much soul searching, we’ve made the decision to do a pivot and pursue other business problems.</description>
   <category>post</category> 
   <category>post</category> 
   <category>second-brain</category>  <category>dendron</category> 
  <content:encoded><![CDATA[<h2>I'm gonna keep using it</h2><p><img src="/post/2023/02/../../../attachments/img/2023/cover-2023-02-08.png" alt="attachments/img/2023/cover-2023-02-08.png"/>
My Dendron notes from Graceful.Dev <a href="https://graceful.dev/courses/devcontainers/">Reproducible Development with Containers</a></p>
<p>{% quote(
from=&ldquo;Kevin Lin&rdquo;
cite=&quot;<a href="https://discord.com/channels/717965437182410783/737323300967022732/1072563304289030164">https://discord.com/channels/717965437182410783/737323300967022732/1072563304289030164</a>&quot;
title=&quot;#announcements on Dendron Discord&quot;
) %}
…the tldr: we spent the past two years building a better way for humans to manage knowledge. While we made great strides there, as a business, we were ultimately not able to find product market fit for a venture backed business. After much soul searching, we&rsquo;ve made the decision to do a pivot and pursue other business problems.
{% end %}</p>
<p>Aw, that&rsquo;s disappointing. <a href="https://www.dendron.so">Dendron</a> features prominently in my meta-note system. Dendron is the most nearly &ldquo;just Markdown&rdquo; of the &ldquo;just Markdown&rdquo; knowledge management systems out there. That makes it a safe spot to store and refactor the notes I gather with other tools. Excellent editor integration, too. Dendron kinda feels like core functionality to VS Code for me.</p>
<p>But in this time of tech layoffs and reprioritization, I guess it&rsquo;s harder to sell core functionality than shiny shiny features.</p>
<p>It&rsquo;s not the worst way to retire a project. They plan to keep the <a href="https://github.com/dendronhq/dendron">code</a> alive, fixing bugs and reviewing pull requests. The license also switched from GPLv3 to the more permissive Apache 2.0. Fewer headaches about what kind of bigger projects you can incorporate your Dendron fork into.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Hugo Render Hooks for Titled Code Blocks</title>
  <link>https://randomgeekery.org/post/2023/01/hugo-render-hooks-for-titled-code-blocks/</link>
  <pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2023/01/hugo-render-hooks-for-titled-code-blocks/</guid>
  <description>an illustrative example
I like to label my code blocks, especially when they describe the contents of a specific file.
That’s been possible with Hugo since 0.93.0, using render hooks for code blocks. Render hooks let you use custom templates for all instances of certain Markdown structures such as links, headers, images, and code! I didn’t think to try them out for labeling code until just now, though. This comment from Hugo Discourse user pamubay got me started.</description>
   <category>post</category> 
   <category>post</category> 
   <category>hugo</category> 
  <content:encoded><![CDATA[<h2>Captions more than titles, really. No problem. We'll fix it in post.</h2><p><img src="/post/2023/01/../../../attachments/img/2023/cover-2023-01-19.png" alt="attachments/img/2023/cover-2023-01-19.png"/>
an illustrative example</p>
<p>I like to label my code blocks, especially when they describe the contents of a specific file.</p>
<p>That&rsquo;s been possible with <a href="/card/hugo/">Hugo</a> since 0.93.0, using <a href="https://gohugo.io/templates/render-hooks/#render-hooks-for-code-blocks">render hooks for code blocks</a>. Render hooks let you use custom templates for all instances of certain Markdown structures such as links, headers, images, and code! I didn&rsquo;t think to try them out for labeling code until just now, though. This <a href="https://discourse.gohugo.io/t/is-there-a-good-reason-not-to-have-a-mechanism-facilitating-a-title-for-code-blocks/40554/3">comment</a> from Hugo Discourse user pamubay got me started. My template builds directly on theirs.</p>
<p>{% codeblock(
title=&ldquo;layouts/_default/render-codeblock.html&rdquo;
) %}</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{- $isVerbatim := true -}}
</span></span><span class="line"><span class="cl">{{- if isset .Attributes &#34;verbatim&#34; -}}
</span></span><span class="line"><span class="cl">  {{- $isVerbatim = .Attributes.verbatim -}}
</span></span><span class="line"><span class="cl">{{- end -}}
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">figure</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;highlight&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">{{- with .Attributes.title }}
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">figcaption</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    {{- if $isVerbatim -}}
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">tt</span><span class="p">&gt;</span>{{ . }}<span class="p">&lt;/</span><span class="nt">tt</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    {{- else -}}
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>{{ . }}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    {{- end -}}
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">figcaption</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">{{- end }}
</span></span><span class="line"><span class="cl">{{- if transform.CanHighlight .Type }}
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">pre</span> <span class="na">tabindex</span><span class="o">=</span><span class="s">&#34;0&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;chroma&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&gt;&lt;</span><span class="nt">code</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;language-{{ .Type }}&#34;</span> <span class="na">data-lang</span><span class="o">=</span><span class="s">&#34;{{ .Type }}&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    {{- with transform.HighlightCodeBlock . -}}
</span></span><span class="line"><span class="cl">      {{ .Inner }}
</span></span><span class="line"><span class="cl">    {{- end -}}
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;&lt;/</span><span class="nt">pre</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">{{- else }}
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">pre</span> <span class="na">tabindex</span><span class="o">=</span><span class="s">&#34;0&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&gt;&lt;</span><span class="nt">code</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;language-{{ .Type }}&#34;</span> <span class="na">data-lang</span><span class="o">=</span><span class="s">&#34;{{ .Type }}&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&gt;</span>{{ .Inner }}<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;&lt;/</span><span class="nt">pre</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">{{- end }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">figure</span><span class="p">&gt;</span></span></span></code></pre>
</figure><p>{% end %}</p>
<p>The HTML changes are personal aesthetics. I&rsquo;ve been using <code>&lt;figure/&gt;</code> more and more often for illustrative examples beyond — you know — illustrations.</p>
<p>My render hook looks for two attributes, <code>title</code> and <code>verbatim</code>. These attributes are added after the language identifier for the fenced code block.</p>
<p>{% codeblock(
title=&ldquo;Titled code block&rdquo;
verbatim=false
collapsed=false
)%}</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">```html{title=&#34;layouts/_default/render-codeblock.html&#34;}</span></span></code></pre>
</figure><p>{% end %}</p>
<p><code>title</code> is the intended title / caption to attach. The <code>verbatim</code> flag indicates whether I want this in a monospaced font. Grabbed that one from the Org folks since it seems like a useful differentiator between code and not-code.</p>
<p>Most of the time when I label code samples, I use a filename or identifier, and I&rsquo;m used to seeing those in monospace. So it makes sense to have code block captions as verbatim by default. So the <code>verbatim</code> flag only matters if I set it to false, such as for explanatory captions.</p>
<p>{% codeblock(
title=&ldquo;non-verbatim code block&rdquo;
verbatim=false
collapsed=false
)%}</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">```markdown{title=&#34;Titled code block&#34; verbatim=false}</span></span></code></pre>
</figure><p>{% end %}</p>
<p>So now I can rest happily with Hugo now that it can do almost exactly what I — ooh <a href="https://pandoc.org/releases.html#pandoc-3.0-2023-01-18">Pandoc 3.0</a> is out!</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Running Dart Code</title>
  <link>https://randomgeekery.org/post/2023/01/running-dart-code/</link>
  <pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate>
  
  <guid>https://randomgeekery.org/post/2023/01/running-dart-code/</guid>
  <description>I haven’t played with Dart since – oh, I don’t know, 2013 or so. It was nice, but nothing felt compelling compared to the languages I already used. I stopped hearing about Dart when I stopped using Google&#43;.
Nowadays, Dart is a bit more interesting.
The language itself has evolved, of course. So have all the other languages. What’s interesting is that Dart powers Flutter, Google’s cross-platform application development framework. You can write Flutter applications for Windows, macOS, Linux, iOS, Android, and oh yeah Web frontends.</description>
   <category>post</category> 
   <category>post</category> 
   <category>dart</category> 
  <content:encoded><![CDATA[<h2>Learning to run Dart so I can walk with it — or something</h2><p>I haven&rsquo;t played with <a href="https://dart.dev">Dart</a> since – oh, I don&rsquo;t know, 2013 or so. It was nice, but nothing felt compelling compared to the languages I already used. I stopped hearing about Dart when I stopped using Google+.</p>
<p>Nowadays, Dart is a bit more interesting.</p>
<p>The language itself has evolved, of course. So have all the other languages. What&rsquo;s interesting is that Dart powers <a href="https://flutter.dev">Flutter</a>, Google&rsquo;s cross-platform application development framework. You can write Flutter applications for Windows, macOS, Linux, iOS, Android, and oh yeah Web frontends.</p>
<p>That&rsquo;s pretty dang cool.</p>
<p>I want to look at the Dart language itself – figure out how to use it for basic command line applications before I confuse myself with multi-platform GUI development.</p>
<h2 id="writing-a-dart-script">Writing a Dart script</h2>
<p>I start exploring a new or forgotten language by answering a few questions:</p>
<ul>
<li>How do I print something out in a terminal?</li>
<li>How do I get user input in a terminal?</li>
<li>How do I print variables such as user input?</li>
</ul>
<p>There are nearly always multiple answers to each, but here&rsquo;s a start.</p>
<p>{% codeblock(title=&ldquo;greet_me.dart&rdquo;) %}</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="k">import</span> <span class="s1">&#39;dart:io&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">print</span><span class="p">(</span><span class="s1">&#39;What is your name?&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kd">final</span> <span class="n">name</span> <span class="o">=</span> <span class="n">stdin</span><span class="p">.</span><span class="n">readLineSync</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">print</span><span class="p">(</span><span class="s1">&#39;Hello, </span><span class="si">$</span><span class="n">name</span><span class="s1">!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>{% end %}</p>
<p>The basic answers to my basic questions:</p>
<ul>
<li><a href="https://api.dart.dev/stable/2.18.7/dart-io/dart-io-library.html">dart:io</a> gives us handles for standard output, standard error, and standard input</li>
<li><code>print()</code> prints a string of text on its own line</li>
<li><a href="https://api.dart.dev/stable/2.18.7/dart-io/Stdin/readLineSync.html">Stdin.readLineSync()</a> gets us a line of input from the user</li>
<li>Dart strings support variable interpolation</li>
</ul>
<p>The big question though is how do I even run the dang thing</p>
<h3 id="running-my-dart-script">Running my Dart script</h3>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> dart run greet_me.dart
</span></span><span class="line"><span class="cl"><span class="go">What is your name?
</span></span></span><span class="line"><span class="cl"><span class="go">Brian
</span></span></span><span class="line"><span class="cl"><span class="go">Hello, Brian!
</span></span></span></code></pre>
</figure><p>I <em>could</em> give it a <code>#!/usr/bin/env</code>​ shebang line at the top and <code>chmod 755 hello.dart</code>​. Then I&rsquo;d have a nice traditional script executable on any machine with the Dart runtime. But there&rsquo;s a better way, and that starts with using the Dart compiler.</p>
<h3 id="using-the-dart-compiler">Using the Dart compiler</h3>
<p>Compiling this Dart code into an executable for my current machine takes one line.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> dart compile exe greet_me.dart
</span></span><span class="line"><span class="cl"><span class="go">Info: Compiling with sound null safety
</span></span></span><span class="line"><span class="cl"><span class="go">Generated: /Users/random/Projects/dart/running_dart_code/script/greet_me.exe
</span></span></span></code></pre>
</figure><p>Dart&rsquo;s executable compilation adds an <code>.exe</code>​ extension to the output file regardless of platforn by default. That extension doesn&rsquo;t matter to macOS or Linux – a filename is just a filename on those platforms – but I dislike seeing a <code>.exe</code>​ anywhere but on Windows.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> dart compile exe greet_me.dart -o greet_me
</span></span><span class="line"><span class="cl"><span class="go">Info: Compiling with sound null safety
</span></span></span><span class="line"><span class="cl"><span class="go">Generated: /Users/random/Projects/dart/running_dart_code/script/greet_me
</span></span></span></code></pre>
</figure><p>Anyways! I have an executable file. I can run it.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> ./greet_me
</span></span><span class="line"><span class="cl"><span class="go">What is your name?
</span></span></span><span class="line"><span class="cl"><span class="go">Brian
</span></span></span><span class="line"><span class="cl"><span class="go">Hello, Brian!
</span></span></span></code></pre>
</figure><p>I can put that on any macOS device and run it without installing Dart on it. Of course, I only have one macOS device, and it has Dart installed on it. But the <em>idea</em> is the important part.</p>
<p>And the idea here is a simpler one: the same commands will compile the same code, regardless of what machine I&rsquo;m on. I wrote most of this post on a Windows desktop. I edited and fine-tuned on an Apple laptop. The code worked as-is. The only invocation change I made was the <code>-o</code>​ option for personal taste.</p>
<blockquote>
<p>[!NOTE] Compile Targets
Dart cannot cross-compile for other platforms yet. Compiling an executable on Windows gets you a Windows executable. But <code>dart compile</code>​ <a href="https://dart.dev/tools/dart-compile">subcommands</a> provide multiple targets in a Dart context. Some will run on any device. Some can run without a Dart runtime.</p>
<table>
<thead>
<tr>
<th>Subcommand</th>
<th>Explanation</th>
<th>Run without Dart?</th>
<th>Multi-Platform?</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>exe</code></td>
<td>standalone executable</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td><code>jit-snapshot</code></td>
<td>just-in-time snapshot with hot reloading</td>
<td>no</td>
<td>no</td>
</tr>
<tr>
<td><code>aot-snapshot</code></td>
<td>ahead-of-time snapshot</td>
<td>no</td>
<td>no</td>
</tr>
<tr>
<td><code>kernel</code></td>
<td>intermediate representation of code</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td><code>js</code></td>
<td>JavaScript <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></td>
<td>yes</td>
<td>yes</td>
</tr>
</tbody>
</table>
<p>Oh, and trivia: <code>dart run greet_me.dart</code> compiles a JIT snapshot in the background and runs that.</p>
</blockquote>
<p>Next problem: I&rsquo;m coming in from Python and <a href="https://rich.readthedocs.io/en/stable/text.html">Rich</a> for CLI applications. That name prompt should look so much better. I&rsquo;m not ready to port Rich and Textual to Dart just yet. Maybe somebody has put some kind of console prompt handler on <a href="https://pub.dev">pub.dev</a>, the Dart package repository?</p>
<p>Looks like <a href="https://dcli.onepub.dev">DCli</a> has what I&rsquo;m looking for today, and functions for stuff I want to do later as well. Let&rsquo;s try it out!</p>
<p>Time to move from a standalone script file to a project, so I can more easily manage dependencies.</p>
<h2 id="building-a-dart-project">Building a Dart Project</h2>
<p><a href="https://dart.dev/tools/dart-create"><code>dart create</code></a> generates a project scaffold. It needs at least a project name. By default it creates what you need for a command line application, and those defaults are exactly what I need today. More than I need today, really.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">$ dart create greet_me
</span></span><span class="line"><span class="cl">Creating greet_me using template console...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  .gitignore
</span></span><span class="line"><span class="cl">  analysis_options.yaml
</span></span><span class="line"><span class="cl">  CHANGELOG.md
</span></span><span class="line"><span class="cl">  pubspec.yaml
</span></span><span class="line"><span class="cl">  README.md
</span></span><span class="line"><span class="cl">  bin/greet_me.dart
</span></span><span class="line"><span class="cl">  lib/greet_me.dart
</span></span><span class="line"><span class="cl">  test/greet_me_test.dart
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Running pub get...
</span></span><span class="line"><span class="cl">  ...
</span></span><span class="line"><span class="cl">  Changed 46 dependencies!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Created project greet_me in greet_me! In order to get started, run the following commands:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  cd greet_me
</span></span><span class="line"><span class="cl">  dart run</span></span></code></pre>
</figure><p>There&rsquo;s a lot going on in there, most of which I ignore in my dedicated pursuit of &ldquo;running some Dart code.&rdquo;</p>
<h3 id="add-a-project-dependency">Add a project dependency</h3>
<p>The <a href="https://dart.dev/tools/pub/cmd"><code>dart pub</code></a> commands handle dependency management and publishing your project to Pub. So let&rsquo;s use that to add Dcli as a dependency.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">dart pub add dcli</span></span></code></pre>
</figure><p>Since this is a <code>pub</code>​ command, it does not surprise me that this dependency detail has been added to <code>pubspec.yaml</code>​. That&rsquo;s where I&rsquo;ll find most information <em>about</em> the project.</p>
<p>{% codeblock(title=&ldquo;greet_me/pubspec.yaml&rdquo;) %}</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">greet_me</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="l">A sample command-line application.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">1.0.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># homepage: https://www.example.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">sdk</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;&gt;=2.18.6 &lt;3.0.0&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">dev_dependencies</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">lints</span><span class="p">:</span><span class="w"> </span><span class="l">^2.0.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">test</span><span class="p">:</span><span class="w"> </span><span class="l">^1.16.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">dependencies</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dcli</span><span class="p">:</span><span class="w"> </span><span class="l">^1.36.0</span></span></span></code></pre>
</figure><p>{% end %}</p>
<p>Back to the code! I&rsquo;ll write a cute little greeter function in <code>lib/greet_me.dart</code>​ which adds a lightly formatted prompt to my name request.</p>
<figure class="highlight">
  <figcaption><tt>greet_me/lib/greet_me.dart</tt></figcaption>
  <pre tabindex="0" class="chroma"
    ><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="k">import</span> <span class="s1">&#39;package:dcli/dcli.dart&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">greetMe</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">final</span> <span class="n">prompt</span> <span class="o">=</span> <span class="n">red</span><span class="p">(</span><span class="s1">&#39;What is your name?&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kd">final</span> <span class="n">name</span> <span class="o">=</span> <span class="n">ask</span><span class="p">(</span><span class="n">prompt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">print</span><span class="p">(</span><span class="s1">&#39;Hello, </span><span class="si">$</span><span class="n">name</span><span class="s1">!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>I can just have <code>main</code>​ use that greeter function. When I start thinking in terms of projects rather than scripts, I tend to make the application entrypoint minimal, with the logic out in project library files where they&rsquo;re easier to test.</p>
<p>{% codeblock(title=&ldquo;greet_me/bin/greet_me.dart&rdquo;) %}</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="k">import</span> <span class="s1">&#39;package:greet_me/greet_me.dart&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">main</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span> <span class="n">arguments</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">greetMe</span><span class="p">();</span></span></span></code></pre>
</figure><p>{% end %}</p>
<p>Not that I&rsquo;m writing any test code today.</p>
<h3 id="run-the-project-application">Run the project application</h3>
<p>​<code>dart run</code>​ works without arguments here, probably because I only have a single file with <code>main()</code>​ defined.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> dart run
</span></span><span class="line"><span class="cl"><span class="go">Building package executable...
</span></span></span><span class="line"><span class="cl"><span class="go">Built greet_me:greet_me.
</span></span></span><span class="line"><span class="cl"><span class="go">What is your name? Brian
</span></span></span><span class="line"><span class="cl"><span class="go">Hello, Brian!
</span></span></span></code></pre>
</figure><p>Neat. Okay there&rsquo;s not much in a straight paste of output. Here&rsquo;s a screenshot, so you can see the visual effect from <code>red()</code>​.</p>
<p><img src="/post/2023/01/attachments/img/2023/dcli-dart-run.png" alt="The same output, with red bold text for the user prompt"/></p>
<p>That&rsquo;s better than what I had.</p>
<h3 id="compile-the-project-application">Compile the project application</h3>
<p>What if I want to compile it? That&rsquo;s pretty much the same process as with the script. Dart doesn&rsquo;t make any assumptions about files when it comes to compiling an executable.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">dart compile exe bin/greet_me.dart -o ./greet_me</span></span></code></pre>
</figure><p>I&rsquo;m sure there&rsquo;s some kind of build tool out there to simplify the process, but my knowledge hasn&rsquo;t gotten that far yet. Until then, this invocation could be put in a <a href="https://just.systems/man/en/">justfile</a>``​ for my normal project flow.</p>
<h2 id="what-now">What now?</h2>
<p>I&rsquo;m still early in my exploration of Dart and Flutter, learning not just what Dart code looks like but what it <em>should</em> look like. I may add some notes about linting and code analysis tools later. I&rsquo;m sure to explore DCli, which has a wealth of functions relevant to command line utility scripts. And I definitely want to learn more about how big cross-platform Dart projects are handled.</p>
<p>Meanwhile, I need to see more of the Dart world.</p>
<ul>
<li>connect to some Dart <a href="https://dart.dev/community">community resources</a></li>
<li>check out the <a href="https://github.com/yissachar/awesome-dart">Awesome Dart</a> repository to see cool things other folks do with the language</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>use <a href="https://dart.dev/tools/webdev">webdev</a> instead for JS targets&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
</item>
<item>
  <title>Post: Nanoc builds sites faster with 3.2.0</title>
  <link>https://randomgeekery.org/post/2022/12/nanoc-builds-faster-with-3-2-0/</link>
  <pubDate>Sun, 25 Dec 2022 11:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/12/nanoc-builds-faster-with-3-2-0/</guid>
  <description>just the numbers
Today is Christmas, which means version 3.2.0 of Ruby has been released. I read Peter Solnica’s post about Benchmarking Ruby 3.2 with YJIT. One bit of feedback he got was that YJIT — the now official Just In Time compiler — kicks in for frequently called methods:
{% quote( from=“Noah Gibbs” cite=&#34;https://ruby.social/@codefolio/109573860732354569&#34; ) %} By default, YJIT optimizes a method on the 30th time you call it.</description>
   <category>post</category> 
   <category>post</category> 
   <category>ruby</category>  <category>nanoc</category> 
  <content:encoded><![CDATA[<h2>Ain't no benchmark like an unscientific ad hoc benchmark</h2><p><img src="/post/2022/12/../../../attachments/img/2022/cover-2022-12-25.png" alt="attachments/img/2022/cover-2022-12-25.png"/>
just the numbers</p>
<p>Today is Christmas, which means version <a href="https://www.ruby-lang.org/en/news/2022/12/25/ruby-3-2-0-released/">3.2.0</a> of <a href="/card/ruby/">Ruby</a> has been released. I read Peter Solnica&rsquo;s post about <a href="https://www.solnic.dev/p/benchmarking-ruby-32-with-yjit">Benchmarking Ruby 3.2 with YJIT</a>. One bit of feedback he got was that YJIT — the now official Just In Time compiler — kicks in for frequently called methods:</p>
<p>{% quote(
from=&ldquo;Noah Gibbs&rdquo;
cite=&quot;<a href="https://ruby.social/@codefolio/109573860732354569">https://ruby.social/@codefolio/109573860732354569</a>&quot;
) %}
By default, YJIT optimizes a method on the 30th time you call it.
{% end %}</p>
<p>Well hey. The <a href="https://nanoc.app">Nanoc</a> iteration of my site has a few hundred pages. Nanoc probably calls some of its methods 30 or more times for that. Let&rsquo;s find out if 3.2.0 makes a difference.</p>
<h2 id="i-should-probably-install-320">I should probably install 3.2.0</h2>
<p>This is in my Windows 11 + WSL2 workspace. I wouldn&rsquo;t be surprised if Linux and macOS tests went faster.</p>
<p>Installed 3.2.0 on my system using <code>rbenv</code>. Worth mentioning that I had to <code>export CC=/home/linuxbrew/.linuxbrew/bin/gcc-12</code> for <code>rbenv install</code> to work at all. For some reason I had a <code>brew</code>-installed Ruby floating around, too. Removed that with <code>brew uninstall ruby</code> so <code>rbenv install 3.2.0</code> would work.</p>
<p>I have a very fiddly system.</p>
<h2 id="the-test">The &ldquo;test&rdquo;</h2>
<ol>
<li>Switch to the right version</li>
<li>Install dependencies for that version</li>
<li>Build the site</li>
<li>Build it again, to see how long things take when nothing&rsquo;s changed</li>
<li>Remove the build folder and move on to the next case</li>
</ol>
<p>First in 3.1.3 to set a baseline of sorts.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> rbenv <span class="nb">local</span> 3.1.3
</span></span><span class="line"><span class="cl"><span class="gp">$</span> bundle
</span></span><span class="line"><span class="cl"><span class="gp">$</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 50.39s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">Site compiled in 43.87s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> rm -r output/
</span></span></code></pre>
</figure><p>Don&rsquo;t judge those numbers too harshly. Nanoc site configuration is Ruby code, and mine was very sloppy Ruby code. Regardless, it&rsquo;s way slower than <a href="https://gohugo.io">Hugo</a>.</p>
<p>Now in 3.2.0 without enabling YJIT, to see if just the plain old upgrade is quicker.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> rbenv <span class="nb">local</span> 3.2.0
</span></span><span class="line"><span class="cl"><span class="gp">$</span> bundle
</span></span><span class="line"><span class="cl"><span class="gp">$</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 43.58s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 37.30s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> rm -r output/
</span></span></code></pre>
</figure><p>There&rsquo;s variation from one invocation to the next in 3.1.3, but 3.2.0&rsquo;s first build is consistently a sliver faster than 3.1.3&rsquo;s second build.</p>
<p>Finally with YJIT.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nv">RUBY_YJIT_ENABLE</span><span class="o">=</span><span class="m">1</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 29.51s.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> <span class="nv">RUBY_YJIT_ENABLE</span><span class="o">=</span><span class="m">1</span> bundle <span class="nb">exec</span> nanoc
</span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">Site compiled in 23.28s.
</span></span></span></code></pre>
</figure><p>That is an impressive difference. We&rsquo;re still not talking Hugo numbers, of course.
But under 30 seconds means I might be able to pay attention long enough to fix
my terrible site configuration code.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Testing Justfile Recipe Arguments</title>
  <link>https://randomgeekery.org/post/2022/12/testing-justfile-recipe-arguments/</link>
  <pubDate>Mon, 05 Dec 2022 20:00:00 -0800</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/12/testing-justfile-recipe-arguments/</guid>
  <description>card/tldr:
add TITLE: bundle exec ruby _scripts/add-post --title &#39;{{ TITLE }}&#39; Time to fiddle with my site setup some more.
My site posts are organized by file slug: simplified file paths based on a title. Hugo itself directly supports creating new content by path.
hugo new content/post/2022/testing-justfile-recipe-arguments/index.adoc.txt It takes thinking to map from a title to a slug. Sometimes I’m not in the mood for that kind of thinking. And I’m not always great about consistency in my slug choices.</description>
   <category>post</category> 
   <category>post</category> 
   <category>site</category>  <category>just</category> 
  <content:encoded><![CDATA[<h2>In which I make my justfile just a little fancier</h2><p><a href="/card/tldr/">card/tldr</a>:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-justfile" data-lang="justfile"><span class="line"><span class="cl"><span class="nf">add TITLE</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  bundle <span class="nb">exec</span> ruby _scripts/add-post --title <span class="s1">&#39;{{ TITLE }}&#39;</span>
</span></span></code></pre>
</figure><p>Time to fiddle with my site setup some more.</p>
<p>My site posts are organized by file slug: simplified file paths based on a title. <a href="https://gohugo.io">Hugo</a> itself directly supports creating new content by path.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">hugo new content/post/2022/testing-justfile-recipe-arguments/index.adoc.txt</span></span></code></pre>
</figure><p>It takes thinking to map from a title to a slug. Sometimes I&rsquo;m not in the mood for that kind of thinking. And I&rsquo;m not always great about consistency in my slug choices.</p>
<p>So I use a <a href="https://ruby-lang.org">Ruby</a> script to streamline adding new posts. I won&rsquo;t talk about that today. Maybe another day. All it does is use <a href="https://ttytoolkit.org">TTY::Toolkit</a> to save me a couple seconds of thought compared to <code>hugo new</code>, then fires up <code>$EDITOR</code> for me so I don&rsquo;t have to think about that either. Sometimes two seconds is the difference between writing an impulse post and writing a tweet.</p>
<p>Right now the script needs a <code>--title</code> string it can use for frontmatter and file slug.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">bundle <span class="nb">exec</span> ruby _scripts/add-post --title <span class="s1">&#39;Testing Justfile Recipe Arguments&#39;</span></span></span></code></pre>
</figure><p>I don&rsquo;t have to figure out the slug, but it&rsquo;s still rather tedious. I use <a href="https://just.systems">just</a> to simplify those tedious site tasks. Putting the repeated bits of this invocation in a recipe — that&rsquo;s what <code>just</code> calls tasks — would cut down on the tedium. What about the title? Started thinking about TTY::Toolkit interactive prompts. Maybe some other time, because <code>just</code> lets you specify arguments for a recipe.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-justfile" data-lang="justfile"><span class="line"><span class="cl"><span class="nf">add TITLE</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  bundle <span class="nb">exec</span> ruby _scripts/add-post --title <span class="s1">&#39;{{ TITLE }}&#39;</span>
</span></span></code></pre>
</figure><p>Now I can <code>just add</code> a post.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">just add <span class="s1">&#39;Testing Justfile Recipe Arguments&#39;</span></span></span></code></pre>
</figure><p>And here we are!</p>
<p>I use a couple other Ruby scripts. Might as well refactor that <code>bundle exec ruby</code>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-justfile" data-lang="justfile"><span class="line"><span class="cl"><span class="nv">ruby</span> <span class="o">:=</span> <span class="s1">&#39;bundle exec ruby&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">add TITLE</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="o">{{</span> ruby <span class="o">}}</span> _scripts/add-post --title <span class="s1">&#39;{{ TITLE }}&#39;</span>
</span></span></code></pre>
</figure><p>All right. This is better than what I had before. Sure I&rsquo;ve got multiple helpful layers to track now. That&rsquo;ll bite me if I get carried away. On the other hand, I actually wrote something for the site today.</p>
<p>Sometimes two seconds makes the difference.</p>
]]></content:encoded>
</item>
<item>
  <title>Post: Emoji Breakdowns With Raku</title>
  <link>https://randomgeekery.org/post/2022/08/emoji-breakdowns-with-raku/</link>
  <pubDate>Sun, 14 Aug 2022 13:00:31 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/08/emoji-breakdowns-with-raku/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;https://randomgeekery.org/post/2022/08/../../../attachments/img/2022/cover-2022-08-14.png&#34; alt=&#34;attachments/img/2022/cover-2022-08-14.png&#34;/&gt;
If you think that’s weird, you should see what all these emoji have done to my neovim session.&lt;/p&gt;
&lt;p&gt;Had to share, but gotta make this quick because I am about three tangents removed from the stuff I planned to do today. This Raku script prints out code points for emoji characters with a little help from &lt;a href=&#34;https://raku.land/cpan:ANTONOV/Pretty::Table&#34;&gt;Pretty::Table&lt;/a&gt;.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>raku-lang</category> 
  <content:encoded><![CDATA[<h2>In which I write a Raku emoji reverse lookup tool.</h2><p><img src="/post/2022/08/../../../attachments/img/2022/cover-2022-08-14.png" alt="attachments/img/2022/cover-2022-08-14.png"/>
If you think that&rsquo;s weird, you should see what all these emoji have done to my neovim session.</p>
<p>Had to share, but gotta make this quick because I am about three tangents removed from the stuff I planned to do today. This Raku script prints out code points for emoji characters with a little help from <a href="https://raku.land/cpan:ANTONOV/Pretty::Table">Pretty::Table</a>.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-raku" data-lang="raku"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env raku</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nn">Pretty::Table</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nf">emoji-table</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$emoji</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">my</span> <span class="nv">$table</span> <span class="o">=</span> <span class="n">Pretty::Table</span><span class="o">.</span><span class="nb">new</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="s">title</span> <span class="o">=&gt;</span> <span class="p">&#34;</span><span class="s2">Emoji Breakdown</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">field-names</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">&#34;</span><span class="s2">Name</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">&#34;</span><span class="s2">Code</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">&#34;</span><span class="s2">Hex Code</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">&#34;</span><span class="s2">Emoji</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="o">],</span>
</span></span><span class="line"><span class="cl">    <span class="s">border</span> <span class="o">=&gt;</span> <span class="kt">False</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">align</span> <span class="o">=&gt;</span> <span class="nv">%</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="s">Code</span> <span class="o">=&gt;</span> <span class="p">&#34;</span><span class="s2">r</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">&#34;</span><span class="s2">Hex Code</span><span class="p">&#34;</span> <span class="o">=&gt;</span> <span class="p">&#34;</span><span class="s2">r</span><span class="p">&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="nv">$emoji</span><span class="o">.</span><span class="nb">ords</span> <span class="k">-&gt;</span> <span class="nv">$ord</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">my</span> <span class="nv">$chr</span> <span class="o">=</span> <span class="nv">$ord</span><span class="o">.</span><span class="nb">chr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$table</span><span class="o">.</span><span class="nf">add-row</span><span class="o">:</span> <span class="o">[</span>
</span></span><span class="line"><span class="cl">      <span class="nv">$chr</span><span class="o">.</span><span class="nb">uniname</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="nv">$ord</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="nv">$ord</span><span class="o">.</span><span class="nb">base</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="nv">$chr</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="o">]</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nv">$table</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">sub</span> <span class="nb">MAIN</span><span class="p">(</span><span class="kt">Str</span> <span class="nv">$emoji</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">say</span> <span class="p">&#34;&#34;;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">say</span> <span class="nf">emoji-table</span><span class="p">(</span><span class="nv">$emoji</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>And here&rsquo;s what it looks like in action:</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">bsh ❯ rakumoji 🦋
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">| Emoji Breakdown |
</span></span><span class="line"><span class="cl">    Name      Code  Hex Code  Emoji
</span></span><span class="line"><span class="cl"> BUTTERFLY  129419     1F98B    🦋</span></span></code></pre>
</figure><h2 id="why">Why?</h2>
<p>So I&rsquo;m doing a thing with a CSS stylesheet involving display of emojis. You don&rsquo;t want the emoji in a stylesheet though. More portable to use code points, the numeric value or values a computer uses to identify the character.</p>
<p>The problem: I don&rsquo;t know the code point. I use a convenient emoji picker. All it gives me is a character.</p>
<p>I&rsquo;ve had some luck looking this stuff up online. But why spend 10 seconds <a href="https://unicode-table.com/en/1F98B/">looking it up</a> when I could spend half an hour writing code and another hour rationalizing my decision in a blog post?</p>
<p><a href="https://docs.raku.org/type/Str#%28Cool%29_routine_ord"><code>Str.ord</code></a> gets me the ordinal for a single character. That&rsquo;s not always what I need though. What looks like a single character could be composed of several codepoints.</p>
<p>Unicode is weird.</p>
<p><a href="https://docs.raku.org/type/Str#%28Cool%29_routine_ords"><code>Str.ords</code></a> gives me a list of all code points in the string, whether one or several. I get the name of the emoji as well with <a href="https://docs.raku.org/type/Str#%28Cool%29_routine_uniname"><code>str.uniname</code></a>. I can use that name with <a href="https://docs.raku.org/type/Str#routine_uniparse"><code>Str.uniparse</code></a> to get the emoji again.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">bsh ❯ raku -e &#39;say &#34;butterfly&#34;.uniparse;&#39;
</span></span><span class="line"><span class="cl">🦋</span></span></code></pre>
</figure><p>Pretty::Table makes it look nice — or as nice as my terminal can manage — no matter how many code points are in the emoji.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-text" data-lang="text"><span class="line"><span class="cl">bsh ❯ rakumoji 🏄‍♀️
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">| Emoji Breakdown |
</span></span><span class="line"><span class="cl">          Name            Code  Hex Code  Emoji
</span></span><span class="line"><span class="cl">         SURFER         127940     1F3C4    🏄
</span></span><span class="line"><span class="cl">   ZERO WIDTH JOINER      8205      200D    ‍
</span></span><span class="line"><span class="cl">      FEMALE SIGN         9792      2640    ♀
</span></span><span class="line"><span class="cl"> VARIATION SELECTOR-16   65039      FE0F    ️</span></span></code></pre>
</figure><p>I helped the terminal out by putting the emoji character at the end of each line. Otherwise the pretty table layouts get offset weird.</p>
<p>Anyways I had fun. And now I&rsquo;m only two tangents away from the day&rsquo;s intended tasks.</p>]]></content:encoded>
</item>
<item>
  <title>Post: Customizing a Trilium Report</title>
  <link>https://randomgeekery.org/post/2022/08/customizing-a-trilium-report/</link>
  <pubDate>Tue, 09 Aug 2022 11:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/08/customizing-a-trilium-report/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;https://randomgeekery.org/post/2022/08/../../../attachments/img/2022/cover-2022-08-09.png&#34; alt=&#34;attachments/img/2022/cover-2022-08-09.png&#34;/&gt;
Trilium also embeds its scripting as notes, which takes some getting used to.&lt;/p&gt;
&lt;p&gt;Been exploring &lt;a href=&#34;https://github.com/zadam/trilium&#34;&gt;Trilium&lt;/a&gt; for notes. One thing I’ll say is the nerdy features are directly accessible to my existing skills.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>second-brain</category>  <category>trilium-notes</category>  <category>sqlite</category> 
  <content:encoded><![CDATA[<h2>In which I frolic with a note system that lets me use SQL</h2><p><img src="/post/2022/08/../../../attachments/img/2022/cover-2022-08-09.png" alt="attachments/img/2022/cover-2022-08-09.png"/>
Trilium also embeds its scripting as notes, which takes some getting used to.</p>
<p>Been exploring <a href="https://github.com/zadam/trilium">Trilium</a> for notes. One thing I&rsquo;ll say is the nerdy features are directly accessible to my existing skills.</p>
<p>See, each note system has some way — or a plugin providing some way — to query information about your collected notes. Logseq <a href="https://docs.logseq.com/#/page/advanced%20queries">uses</a> Datascript, which is uh Lisp-ish? Obsidian — if you add the <a href="https://blacksmithgu.github.io/obsidian-dataview/">Dataview</a> plugin — has DQL, which is SQL-ish.</p>
<p>Trilium keeps everything in a <a href="https://sqlite.org">SQLite</a> database that you can query directly.</p>
<p><img src="/post/2022/08/attachments/img/2022/trilium-sql-console.png" alt="Trilium in-app SQL console"/></p>
<p>My immediate reaction on realizing what I was seeing? Look I don&rsquo;t usually communicate on this site via memes and image captions, but:</p>
<p><img src="/post/2022/08/attachments/img/2022/its-a-unix-system-I-know-this.jpg" alt="Jurassic Park: &ldquo;It&rsquo;s a UNIX system. I know this.&rdquo;"/></p>
<p>I know the gist of SQL. Let&rsquo;s play with this.</p>
<p>Made a custom <a href="https://github.com/zadam/trilium/wiki/Template">template</a> for notes about people. Assigned that template to the appropriate notes. Got curious about how my template-using notes were spread out.</p>
<p>Copied the query from <em>Trilium Demo / Statistics / Note type count</em> and tweaked it a little for my needs.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">templateNote</span><span class="p">.</span><span class="n">title</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">SUM</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">CASE</span><span class="w"> </span><span class="k">WHEN</span><span class="w"> </span><span class="n">note</span><span class="p">.</span><span class="n">isDeleted</span><span class="o">=</span><span class="mi">0</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">ELSE</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">END</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">countNotDeleted</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">SUM</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">CASE</span><span class="w"> </span><span class="k">WHEN</span><span class="w"> </span><span class="n">note</span><span class="p">.</span><span class="n">isDeleted</span><span class="o">=</span><span class="mi">1</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">ELSE</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">END</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">countDeleted</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">attributes</span><span class="w"> </span><span class="n">attr</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INNER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">notes</span><span class="w"> </span><span class="n">note</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">ON</span><span class="w"> </span><span class="n">note</span><span class="p">.</span><span class="n">noteId</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">attr</span><span class="p">.</span><span class="n">noteId</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">INNER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">notes</span><span class="w"> </span><span class="n">templateNote</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">ON</span><span class="w"> </span><span class="n">attr</span><span class="p">.</span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">templateNote</span><span class="p">.</span><span class="n">noteId</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">attr</span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;template&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">attr</span><span class="p">.</span><span class="n">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">countNotDeleted</span><span class="w"> </span><span class="k">desc</span></span></span></code></pre>
</figure><table>
<thead>
<tr>
<th>title</th>
<th>countNotDeleted</th>
<th>countDeleted</th>
</tr>
</thead>
<tbody>
<tr>
<td>Day template</td>
<td>182</td>
<td>18</td>
</tr>
<tr>
<td>Person Template</td>
<td>120</td>
<td>0</td>
</tr>
<tr>
<td>task template</td>
<td>6</td>
<td>0</td>
</tr>
<tr>
<td>Biography template</td>
<td>4</td>
<td>0</td>
</tr>
<tr>
<td>Book template</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>NOTE</strong></p>
<p>I renamed the Trilium demo&rsquo;s included <em>People template</em> to <em>Biography template</em>
for clarity here.</p>
</blockquote>
<p>I duplicated <em>Note type count</em>, pasted my new query, then adjusted the layout JS to reflect the tweaked query.</p>
<p>The result:</p>
<p><img src="/post/2022/08/attachments/img/2022/trilium-template-usage-report.png" alt="Trilium Notes showing pie chart of template usage"/></p>
<p>The demo graph uses <a href="https://www.chartjs.org">Chart.js</a>, which is fine. I&rsquo;m already thinking about using <a href="https://vega.github.io">Vega</a> instead.</p>
<p>One thing at a time.</p>
<p>Trilium. It&rsquo;s got SQL. I like that.</p>]]></content:encoded>
</item>
<item>
  <title>Post: My Three(ish) Favorite Nushell Features</title>
  <link>https://randomgeekery.org/post/2022/07/my-three-ish-favorite-nushell-features/</link>
  <pubDate>Mon, 04 Jul 2022 18:00:00 -0700</pubDate>
  
  <guid>https://randomgeekery.org/post/2022/07/my-three-ish-favorite-nushell-features/</guid>
  <description>&lt;p&gt;&lt;img src=&#34;https://randomgeekery.org/post/2022/07/../../../attachments/img/2022/cover-2022-07-04.png&#34; alt=&#34;attachments/img/2022/cover-2022-07-04.png&#34;/&gt;
histogram for post frequency by year using Nushell built-ins&lt;/p&gt;
&lt;p&gt;Been using the &lt;a href=&#34;https://www.nushell.sh&#34;&gt;Nushell&lt;/a&gt; cross-platform user shell more and more over the last couple years. Might as well start learning it.&lt;/p&gt;</description>
   <category>post</category> 
   <category>post</category> 
   <category>nushell</category>  <category>hugo</category> 
  <content:encoded><![CDATA[<h2>In which I once again spend all day decomposing one-liners, this time for Nushell</h2><p><img src="/post/2022/07/../../../attachments/img/2022/cover-2022-07-04.png" alt="attachments/img/2022/cover-2022-07-04.png"/>
histogram for post frequency by year using Nushell built-ins</p>
<p>Been using the <a href="https://www.nushell.sh">Nushell</a> cross-platform user shell more and more over the last couple years. Might as well start learning it.</p>
<p>Today I use Nushell for one of my favorite learning tasks: examining my site. I made a throwaway one-liner when setting up <a href="/post/2022/04/trying-nushell-on-windows/">Nushell on Windows</a>. I want to try again, and think through the process a little more this time.</p>
<p>This post, and any that may follow on the topic, won&rsquo;t be any kind of deep dive or contrast with other shells. Oh sure. I&rsquo;ll point out things that surprise me. But I use maybe 20% of a shell&rsquo;s features for 80% of my needs, and a Web search for the rest. Check the Nushell book&rsquo;s <a href="https://www.nushell.sh/book/coming_from_bash.html">Coming from Bash</a> page if you want a more explicit comparison.</p>
<p>Let&rsquo;s get started.</p>
<h2 id="nushell-feature-zero-showing-program-output">Nushell feature zero: showing program output</h2>
<p>If you can&rsquo;t easily run a program and see its output, you are in a REPL, not a shell. I have not come across a command shell that fails that test yet, but I use it as an immediate reassurance that I haven&rsquo;t confused myself by launching <code>ipython</code> again.</p>
<p>I&rsquo;m on <a href="https://gohugo.io">Hugo</a> again, which means I have the Hugo CLI. <code>hugo list all</code> prints out a <a href="/card/csv/">CSV</a> summary of your site, ready for processing by some other program.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >hugo list all</code></pre>
</figure><p><img src="/post/2022/07/attachments/img/2022/hugo-list-all.png" title="Yep that&#39;s CSV all right." alt="output of command is a dense blast of CSV text"/></p>
<h2 id="nushell-feature-zero-point-five-piping-output">Nushell feature zero point five: Piping output</h2>
<p>Most shells let you pipe between processes, using the output of one as the input of the next. Nushell provides that functionality. No problem.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >hugo list all | from csv</code></pre>
</figure><p>Of course, the result of that pipe is something a little different from other shells.</p>
<h2 id="nushell-feature-one-tables">Nushell feature one: tables</h2>
<p><img src="/post/2022/07/attachments/img/2022/from-csv.png" title="It&#39;s pretty. Just needs a little tidying up." alt="screenshot of nushell table display of hugo articles"/></p>
<p>There&rsquo;s the table output that I find so appealing. Course, a pretty table is not so unusual these days. You can pipe from <code>hugo</code> to any number of CSV processing tools and pretty printers available to install on your machine.</p>
<p>But Nushell tables aren&rsquo;t just pretty printing. They are core to working with the shell. The table you see is a visual representation of a table in memory, which can be further processed however you need.</p>
<p>Also? Nushell doesn&rsquo;t need me to install an extra CSV processing tool. It can turn that output into something useful without any extra help thanks to an abundance of built-in commands.</p>
<h2 id="nushell-feature-two-the-built-in-commands-and-interactive-help">Nushell feature two: the built-in commands and interactive help</h2>
<p>Nushell includes <em>many</em> commands. You can see for yourself skimming through the <a href="https://www.nushell.sh/book/command_reference.html">Command Reference</a>. Or see what&rsquo;s available to you in your current version with <code>help commands</code>.</p>
<p><img src="/post/2022/07/attachments/img/2022/nushell-tab.png" title="or hit TAB on a blank line" alt="initial tab-completion display of functions available in Nushell"/></p>
<p>How many? Let&rsquo;s ask the shell by piping <code>help commands</code> to the <code>length</code> command.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >help commands | length</code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >421</code></pre>
</figure><p>That&rsquo;s a little overwhelming. Let&rsquo;s see if we can narrow it down. That gives me a chance to show off some of the table processing I got so excited about.</p>
<h3 id="listing-command-categories-by-grouping">Listing command categories by grouping</h3>
<p>All these commands are organized into categories. To see what categories, we can <code>group</code> the help table.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >help commands | group-by category</code></pre>
</figure><p><img src="/post/2022/07/attachments/img/2022/group-by-category.png" title="Not sorted or anything, but you get the idea" alt="all of the Nushell command categories"/></p>
<h3 id="listing-only-commands-in-a-specific-category-with-where">Listing only commands in a specific category with <code>where</code></h3>
<p>I read ahead, so I know that <code>from csv</code> is under the &ldquo;formats&rdquo; category. We use <code>where</code> to narrow the command list down so it only contains the format commands.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >help commands | where category =~ formats</code></pre>
</figure><p><img src="/post/2022/07/attachments/img/2022/format-commands.png" title="`to md`? Interesting!" alt="a table of commands in the &ldquo;formats&rdquo; category"/></p>
<blockquote>
<p><strong>NOTE</strong></p>
<p>I bet the Perl devs perked up seeing that <code>=~</code>. Yes it&rsquo;s a regular expression! But it&rsquo;s almost definitely not a Perl regular expression. I haven&rsquo;t gone past literal substring matches yet, and the Nushell <a href="https://www.nushell.sh/book/regular_expressions.html#regular-expressions">regex documentation</a> page is basically a placeholder. I can only suggest you follow their suggestion to read the Rust <a href="https://docs.rs/regex/latest/regex/">regex crate</a> documentation and figure out the differences yourself.</p>
</blockquote>
<h3 id="viewing-only-select-columns-with-select">Viewing only select columns with <code>select</code></h3>
<p>That&rsquo;s still a little busy. How about we <code>select</code> the name and usage? And heck — tables make for great screenshots, but let&rsquo;s try see what <code>to md</code> gives us.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >help commands | where category =~ formats | select name usage | to md</code></pre>
</figure><table>
<thead>
<tr>
<th>name</th>
<th>usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>from</td>
<td>Parse a string or binary data into structured data</td>
</tr>
<tr>
<td>from csv</td>
<td>Parse text as .csv and create table.</td>
</tr>
<tr>
<td>from eml</td>
<td>Parse text as .eml and create table.</td>
</tr>
<tr>
<td>from ics</td>
<td>Parse text as .ics and create table.</td>
</tr>
<tr>
<td>from ini</td>
<td>Parse text as .ini and create table</td>
</tr>
<tr>
<td>from json</td>
<td>Convert from json to structured data</td>
</tr>
<tr>
<td>from ods</td>
<td>Parse OpenDocument Spreadsheet(.ods) data and create table.</td>
</tr>
<tr>
<td>from ssv</td>
<td>Parse text as space-separated values and create a table. The default minimum number of spaces counted as a separator is 2.</td>
</tr>
<tr>
<td>from toml</td>
<td>Parse text as .toml and create table.</td>
</tr>
<tr>
<td>from tsv</td>
<td>Parse text as .tsv and create table.</td>
</tr>
<tr>
<td>from url</td>
<td>Parse url-encoded string as a table.</td>
</tr>
<tr>
<td>from vcf</td>
<td>Parse text as .vcf and create table.</td>
</tr>
<tr>
<td>from xlsx</td>
<td>Parse binary Excel(.xlsx) data and create table.</td>
</tr>
<tr>
<td>from xml</td>
<td>Parse text as .xml and create table.</td>
</tr>
<tr>
<td>from yaml</td>
<td>Parse text as .yaml/.yml and create table.</td>
</tr>
<tr>
<td>from yml</td>
<td>Parse text as .yaml/.yml and create table.</td>
</tr>
<tr>
<td>to</td>
<td>Translate structured data to a format</td>
</tr>
<tr>
<td>to csv</td>
<td>Convert table into .csv text</td>
</tr>
<tr>
<td>to html</td>
<td>Convert table into simple HTML</td>
</tr>
<tr>
<td>to json</td>
<td>Converts table data into JSON text.</td>
</tr>
<tr>
<td>to md</td>
<td>Convert table into simple Markdown</td>
</tr>
<tr>
<td>to text</td>
<td>Converts data into simple text.</td>
</tr>
<tr>
<td>to toml</td>
<td>Convert table into .toml text</td>
</tr>
<tr>
<td>to tsv</td>
<td>Convert table into .tsv text</td>
</tr>
<tr>
<td>to url</td>
<td>Convert table into url-encoded text</td>
</tr>
<tr>
<td>to xml</td>
<td>Convert table into .xml text</td>
</tr>
<tr>
<td>to yaml</td>
<td>Convert table into .yaml/.yml text</td>
</tr>
</tbody>
</table>
<p>Awesome. All that and we&rsquo;re still in the realm of Nushell built-in commands.</p>
<p>Note the pattern of commands and subcommands. The &ldquo;formats&rdquo; category includes two primary commands, <code>from</code> and <code>to</code>. Then many subcommands for converting <em>from</em> assorted formats to a table, and their counterparts for converting from a table <em>to</em> assorted formats.</p>
<h3 id="getting-help-for-a-specific-command">Getting help for a specific command</h3>
<p>We can ask for help with a specific command. Most shells offer this in one form or another, though they don&rsquo;t generally provide the command discovery path we just walked down.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >help to md</code></pre>
</figure><p>One more screenshot, because Nushell help is just so <em>pretty</em>.</p>
<p><img src="/post/2022/07/attachments/img/2022/help-to-md.png" title="syntax highlighted examples? yes please" alt="screenshot of Nushell builtin help, with usage, flags, and examples"/></p>
<h3 id="applying-what-weve-got-to-the-hugo-list">Applying what we&rsquo;ve got to the Hugo list</h3>
<p>Let&rsquo;s see if we can apply some of what we just used with our Hugo article list.</p>
<p>Remember Hugo? This was supposed to be a post about Hugo.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >hugo list all | from csv | last 5 | select title publishDate | to md</code></pre>
</figure><table>
<thead>
<tr>
<th>title</th>
<th>publishDate</th>
</tr>
</thead>
<tbody>
<tr>
<td>Editors</td>
<td>2001-07-11T00:00:00-07:00</td>
</tr>
<tr>
<td>Geekery</td>
<td>2001-07-11T00:00:00-07:00</td>
</tr>
<tr>
<td>Python</td>
<td>2001-01-17T00:00:00-08:00</td>
</tr>
<tr>
<td>Python Babysteps Tutorial</td>
<td>2001-01-17T00:00:00-08:00</td>
</tr>
<tr>
<td>coolnamehere</td>
<td>2000-12-06T00:00:00-08:00</td>
</tr>
</tbody>
</table>
<p>That&rsquo;s better. Sort of. I expected the last few posts to be a bit more recent. I need to do some intentional filtering and sorting. In order to do that, I need a real date instead of Hugo&rsquo;s timestamp string. You can use a block for that.</p>
<h2 id="nushell-feature-two-blocks">Nushell feature two: blocks</h2>
<p>The really basic idea is that <a href="https://www.nushell.sh/book/types_of_data.html#blocks">blocks</a> run arbitrary commands on a parameter, and let us do what we like with the result.</p>
<p>I&rsquo;m going to do sort of a <a href="https://databricks.com/glossary/what-are-dataframes">dataframe</a> type of action here. That&rsquo;s not a normal state for my brain so I need to step through this slowly.</p>
<p><code>hugo list all</code> gave me some CSV text.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >hugo list all</code></pre>
</figure><p><code>from csv</code> turned that text into a table.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-" data-lang=""
      >hugo list all | from csv</code></pre>
</figure><p>The <code>publishDate</code> column describes a date and time, but it contains text strings — not dates. To simplify filtering posts by date range, I want to add a column for the published date described by <code>publishDate</code>.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >hugo list all | from csv | insert published-at ...</code></pre>
</figure><p>That <code>published-at</code> column contains the result of running a block of commands. I hand my current table to the block as a parameter.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >hugo list all | from csv | insert published-at { |it| ... }</code></pre>
</figure><p>Nushell blocks look and work a bit like <a href="/card/ruby/">Ruby</a> blocks. That means they also work similar to lambdas in <a href="/card/python/">card/Python</a> and anonymous functions in other languages — cosmetic and shell-specific details aside.</p>
<p>The block returns a column with dates for every value in my table&rsquo;s <code>publishDate</code> column.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >(
  hugo list all |
  from csv |
  insert published-at { |it| $it.publishDate | into datetime }
)</code></pre>
</figure><p>Nushell uses the shell-like pattern of prefixing variable names with <code>$</code> when we reference them.</p>
<blockquote>
<p>[!NOTE] Where did the parentheses come from?
That&rsquo;s how Nushell does multi-line one-liners.</p>
<p>See, my one-liner&rsquo;s getting a little long. Over in other shells, I&rsquo;d be pulling out a backslash &lsquo;\&rsquo; to indicate line continuation. But Nushell is expression-oriented. Ending a line with a backslash is just an error. So we turn the whole thing into a subexpression by wrapping it in parentheses. Nushell treats the evaluated result as a single expression, however many lines it takes to get there.</p>
<p>Yes, fine. I <em>should</em> be thinking about scripts at this point. I may get to those eventually. Until then I use parentheses to create a multiline subexpression.</p>
</blockquote>
<p>Where were we? Oh right. I have a table with more columns than I care about.</p>
<p>I only want the post titles and the dates they were published.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >(
  hugo list all |
  from csv |
  insert published-at { |it| $it.publishDate | into datetime } |
  select title published-at
)</code></pre>
</figure><p>And I&rsquo;m writing a blog post, so let&rsquo;s keep a readable number of rows in markdown format.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >(
  hugo list all |
  from csv |
  insert published-at { |it| $it.publishDate | into datetime } |
  select title published-at |
  last 5 |
  to md
)</code></pre>
</figure><p>Okay I think that covers it.</p>
<table>
<thead>
<tr>
<th>title</th>
<th>published-at</th>
</tr>
</thead>
<tbody>
<tr>
<td>Editors</td>
<td>Wed, 11 Jul 2001 00:00:00 -0700 (20 years ago)</td>
</tr>
<tr>
<td>Geekery</td>
<td>Wed, 11 Jul 2001 00:00:00 -0700 (20 years ago)</td>
</tr>
<tr>
<td>Python</td>
<td>Wed, 17 Jan 2001 00:00:00 -0800 (21 years ago)</td>
</tr>
<tr>
<td>Python Babysteps Tutorial</td>
<td>Wed, 17 Jan 2001 00:00:00 -0800 (21 years ago)</td>
</tr>
<tr>
<td>coolnamehere</td>
<td>Wed, 06 Dec 2000 00:00:00 -0800 (21 years ago)</td>
</tr>
</tbody>
</table>
<p>Yeesh I have been writing this stuff down for a long time.</p>
<h2 id="nushell-feature-three-data-types">Nushell feature three: data types</h2>
<p>My experience with data types in shells is limited and mostly unpleasant: values are strings that can be interchangeably treated as strings or numbers. Sometimes you can treat them like lists. Oops you broke something.</p>
<p>Nushell <a href="https://www.nushell.sh/book/types_of_data.html">data type</a> support goes past that. For starters, values declared in the shell itself have the appropriate type.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >1.2 | describe</code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-result" data-lang="result"
      >float</code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >&#34;1.2&#34; | describe</code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-result" data-lang="result"
      >string</code></pre>
</figure><p>It also supports more complex structured types like records and of course tables. Nushell may not define as many types as <a href="https://github.com/red/docs/blob/master/en/datatypes.adoc">Red</a> — yet? — but it has far more than I&rsquo;m accustomed to seeing from a shell.</p>
<p>What about conversions? In my fiddling so far, Nushell treats output from external programs like a string until you tell it otherwise, like a moment ago piping Hugo&rsquo;s output <code>from csv</code> and then the <code>publishDate</code> column <code>into datetime</code>.</p>
<h3 id="date-math">Date math</h3>
<p>All right. Let&rsquo;s figure this out. What datetime is it right now?</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >date now</code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-result" data-lang="result"
      >Mon, 04 Jul 2022 18:08:26 -0700 (now)</code></pre>
</figure><p>Happy Fourth of July to those who celebrate by the way. Unless you celebrate by letting off fireworks in your or especially my neighborhood after midnight.</p>
<p>I arbitrarily picked three months as my threshold. Nushell provides numerous shorthands for durations, but so far nothing at an appropriate scale for ancient blogs. I haven&rsquo;t found a lazy way to say &ldquo;three months ago,&rdquo; but I can say &ldquo;90 days ago.&rdquo; Close enough for today.</p>
<p>Need to make a subexpression out of <code>date now</code> so Nushell has a date it can use for the math.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >(date now) - 90day</code></pre>
</figure><figure class="highlight">
  <pre tabindex="0"
    ><code class="language-result" data-lang="result"
      >Tue, 05 Apr 2022 18:09:31 -0700 (3 months ago)</code></pre>
</figure><p>Since <code>((date now) - 90day)</code> is a date and <code>published-at</code> is a date, I can do a direct comparison.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >(
  hugo list all |
  from csv |
  insert published-at { |it| $it.publishDate | into datetime } |
  where published-at &gt; ((date now) - 90day) |
  select title published-at |
  to md
)</code></pre>
</figure><table>
<thead>
<tr>
<th>title</th>
<th>published-at</th>
</tr>
</thead>
<tbody>
<tr>
<td>My Three(ish) Favorite Nushell Features</td>
<td>Mon, 04 Jul 2022 18:00:00 -0700 (10 minutes ago)</td>
</tr>
<tr>
<td>I Talked About My Site on Test &amp; Code in Python</td>
<td>Fri, 01 Jul 2022 15:04:02 -0700 (3 days ago)</td>
</tr>
<tr>
<td>Now</td>
<td>Wed, 11 May 2022 08:33:00 -0700 (2 months ago)</td>
</tr>
<tr>
<td>How About a Tumblelog</td>
<td>Tue, 03 May 2022 19:58:29 -0700 (2 months ago)</td>
</tr>
<tr>
<td>Added a Neighborhood Blogroll Thing</td>
<td>Wed, 27 Apr 2022 19:47:55 -0700 (2 months ago)</td>
</tr>
<tr>
<td>Config Tweaks for Nushell</td>
<td>Sun, 24 Apr 2022 15:00:33 -0700 (2 months ago)</td>
</tr>
<tr>
<td>Trying Nushell on Windows</td>
<td>Fri, 22 Apr 2022 21:15:00 -0700 (2 months ago)</td>
</tr>
<tr>
<td>Didn&rsquo;t I do this last year too?</td>
<td>Sun, 17 Apr 2022 22:15:00 -0700 (2 months ago)</td>
</tr>
</tbody>
</table>
<p>Yeah I fibbed on the publish date for the post I&rsquo;m writing. Figured it would be quicker than adding and explaining another filter for draft posts.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>True confession time: my three or so favorite features in Nushell are also the only features I&rsquo;ve played with, and much of that was today.
Just realized it&rsquo;s been about a year since I started poking at Nushell as more than &ldquo;that thing with cool <code>ls</code> output.&rdquo;</p>
<p>It&rsquo;s not my login <code>$SHELL</code> or anything yet — still need to figure out things like <code>pyenv</code> and <code>nvm</code> — but yeah I like using Nushell.
Especially under Windows, where I know little enough about PowerShell that I can set up Nushell on Windows Terminal and pretend it&rsquo;s a login shell.</p>
<p>Now I just need something that would make a cool cover image screenshot.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-nushell" data-lang="nushell"
      >(
    hugo list all |
    from csv |
    insert year { |it| $it.publishDate | into datetime | date to-record | get year } |
    where year &gt; 1 |
    histogram year --percentage-type relative |
    sort-by year
)</code></pre>
</figure>]]></content:encoded>
</item>
</channel>
</rss>
