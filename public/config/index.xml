<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>My ConfigonRandom Geekery</title>
    <link>https://randomgeekery.org/config/</link>
    <description>
      Recent contentinMy Config on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 21 Jan 2024 21:46:52 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/config/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Config: My Config-Generating Justfile</title>
  <link>https://randomgeekery.org/config/justfile/</link>
  <pubDate>Sun, 21 Jan 2024 21:46:53 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/justfile/</guid>
  <description>Using inbox/Yarner to tangle the file that drives the whole process? I should be ashamed of myself. Iâ€™m not, but I feel like I should be.
Building everything with Yarner I let Yarner do its thing. Then I copy my newly generated justfile and dotbot configs to the project root, making sure to back up the current copies. If I screw up, I can always go to the backup. If I screw up bad, I can always go back to Git history.</description>
   <category>config</category> 
  
  
  <content:encoded><![CDATA[<p>Using <em>inbox/Yarner</em> to tangle the file that drives the whole process? I should be ashamed of myself. I&rsquo;m not, but I feel like I should be.</p>
<h2 id="building-everything-with-yarner">Building everything with Yarner</h2>
<p>I let Yarner do its thing. Then I copy my newly generated <code>justfile</code> and dotbot configs to the project root, making sure to back up the current copies. If I screw up, I can always go to the backup. If I screw up bad, I can always go back to Git history. If I screw up <em>real</em> bad, I have another computer.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-justfile" data-lang="justfile"><span class="line"><span class="cl"><span class="nf">build</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  yarner
</span></span><span class="line"><span class="cl">  cp -b code/justfile ./
</span></span><span class="line"><span class="cl">  cp -b code/install.conf.yaml ./
</span></span></code></pre>
</figure><h2 id="installing-my-configs-with-dotbot">Installing my configs with dotbot</h2>
<p>Invoke dotbot to link with files and directories.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-justfile" data-lang="justfile"><span class="line"><span class="cl"><span class="nf">install</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  ./install -v
</span></span></code></pre>
</figure><h2 id="cleaning">Cleaning</h2>
<p>Remove the build artifacts if they exist. Better be careful about running this, as it <em>will</em> confuse Dotbot.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-justfile" data-lang="justfile"><span class="line"><span class="cl"><span class="nf">clean</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="o">[</span> -d code <span class="o">]</span> <span class="o">&amp;&amp;</span> rm -r code
</span></span><span class="line"><span class="cl">  <span class="o">[</span> -d docs <span class="o">]</span> <span class="o">&amp;&amp;</span> rm -r docs
</span></span></code></pre>
</figure><h2 id="checking-window-managers">Checking window managers</h2>
<p>It&rsquo;s a manual process: run a nested X server with <code>awesome</code> or <code>qtile</code>.
If anything is off, fix it and reload from inside the nested server.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-justfile" data-lang="justfile"><span class="line"><span class="cl"><span class="nf">awesome</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  Xephyr :5 <span class="p">&amp;</span> sleep <span class="m">1</span> <span class="p">;</span> <span class="nv">DISPLAY</span><span class="o">=</span>:5 awesome
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">qtile</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  Xephyr :5 <span class="p">&amp;</span> sleep <span class="m">1</span> <span class="p">;</span> <span class="nv">DISPLAY</span><span class="o">=</span>:5 qtile start
</span></span></code></pre>
</figure><h2 id="anything-else">Anything else?</h2>
<p>I need some kind of test process, but better think about what that would look like before I try.</p>
]]></content:encoded>
</item>
<item>
  <title>Config: My Dotbot config</title>
  <link>https://randomgeekery.org/config/install.conf.yaml/</link>
  <pubDate>Sun, 21 Jan 2024 21:46:53 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/install.conf.yaml/</guid>
  <description>After Yarner extracts code and Markdown from my Config sources, inbox/Dotbot creates symlinks from generated code files to their expected locations in my home folder.
I adjust my defaults to allow creation of parent directories when they do not already exist.
- defaults: link: create: true Then I define my links!
- link: ~/.config/nvim/init.lua: code/editor/nvim/init.lua ~/.tmux.conf: code/tmux.conf ~/.config/starship.toml: code/starship.toml ~/.config/systemd/user/autostart.target: code/systemd/user/autostart.target ~/.config/wezterm: code/wezterm ~/.config/nushell/config.nu: code/shell/nushell/config.nu ~/.config/nushell/env.nu: code/shell/nushell/env.nu ~/.config/nushell/login.nu: code/shell/nushell/login.nu ~/.config/nushell/lib: code/nushell/lib ~/.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p>After <em>Yarner</em> extracts code and Markdown from my <a href="/config/">Config</a> sources, <em>inbox/Dotbot</em> creates symlinks from generated code files to their expected locations in my home folder.</p>
<p>I adjust my defaults to allow creation of parent directories when they do not already exist.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">- <span class="nt">defaults</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">link</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">create</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span></span></span></code></pre>
</figure><p>Then I define my links!</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">- <span class="nt">link</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/nvim/init.lua</span><span class="p">:</span><span class="w"> </span><span class="l">code/editor/nvim/init.lua</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.tmux.conf</span><span class="p">:</span><span class="w"> </span><span class="l">code/tmux.conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/starship.toml</span><span class="p">:</span><span class="w"> </span><span class="l">code/starship.toml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/systemd/user/autostart.target</span><span class="p">:</span><span class="w"> </span><span class="l">code/systemd/user/autostart.target</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/wezterm</span><span class="p">:</span><span class="w"> </span><span class="l">code/wezterm</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/nushell/config.nu</span><span class="p">:</span><span class="w"> </span><span class="l">code/shell/nushell/config.nu</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/nushell/env.nu</span><span class="p">:</span><span class="w"> </span><span class="l">code/shell/nushell/env.nu</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/nushell/login.nu</span><span class="p">:</span><span class="w"> </span><span class="l">code/shell/nushell/login.nu</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/nushell/lib</span><span class="p">:</span><span class="w"> </span><span class="l">code/nushell/lib</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/awesome/rc.lua</span><span class="p">:</span><span class="w"> </span><span class="l">code/linux/awesome/rc.lua</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/awesome/main</span><span class="p">:</span><span class="w"> </span><span class="l">code/linux/awesome/main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/awesome/autorun.sh</span><span class="p">:</span><span class="w"> </span><span class="l">code/linux/awesome/autorun.sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/qtile/config.py</span><span class="p">:</span><span class="w"> </span><span class="l">code/linux/qtile/config.py</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/qtile/autostart.sh</span><span class="p">:</span><span class="w"> </span><span class="l">code/linux/qtile/autostart.sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/qtile/modules</span><span class="p">:</span><span class="w"> </span><span class="l">code/linux/qtile/modules</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.config/dunst/dunstrc</span><span class="p">:</span><span class="w"> </span><span class="l">code/linux/dunst/dunstrc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.bash_profile</span><span class="p">:</span><span class="w"> </span><span class="l">code/shell/bash/bash_profile</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.bashrc</span><span class="p">:</span><span class="w"> </span><span class="l">code/shell/bash/bashrc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">~/.bash_aliases</span><span class="p">:</span><span class="w"> </span><span class="l">code/shell/bash/bash_aliases</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
</channel>
</rss>
