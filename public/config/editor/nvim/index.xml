<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>My Neovim configonRandom Geekery</title>
    <link>https://randomgeekery.org/config/editor/nvim/</link>
    <description>
      Recent contentinMy Neovim config on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Mon, 22 Jan 2024 14:33:49 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/config/editor/nvim/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Config: My init.lua for Neovim</title>
  <link>https://randomgeekery.org/config/editor/nvim/init.lua/</link>
  <pubDate>Mon, 22 Jan 2024 14:33:49 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/editor/nvim/init.lua/</guid>
  <description>A snapshot of my Neovim config, literate programming style.
Right now, everything goes in init.lua. I may tidy that up later.
init.lua global prep Most Neovim Lua functionality is contained in the vim module. Pull some of the frequently used ones into the current namespace, to save a little typing for our fingers.
vim.cmd vim commands (eg cmd(&#39;pwd&#39;)) vim.fn vim functions (eg fn.buffer()) vim.g a table for global variables vim.opt vim options local cmd = vim.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p>A snapshot of my <a href="/card/neovim/">Neovim</a> config, literate programming style.</p>
<p>Right now, everything goes in <code>init.lua</code>. I may tidy that up later.</p>
<h2 id="initlua-global-prep"><code>init.lua</code> global prep</h2>
<p>Most Neovim Lua functionality is contained in the <code>vim</code> module. Pull some of
the frequently used ones into the current namespace, to save a little typing
for our fingers.</p>
<dl>
<dt><code>vim.cmd</code></dt>
<dd>vim commands (eg <code>cmd('pwd')</code>)</dd>
<dt><code>vim.fn</code></dt>
<dd>vim functions (eg <code>fn.buffer()</code>)</dd>
<dt><code>vim.g</code></dt>
<dd>a table for global variables</dd>
<dt><code>vim.opt</code></dt>
<dd>vim options</dd>
</dl>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">vim.cmd</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">fn</span> <span class="o">=</span> <span class="n">vim.fn</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">g</span> <span class="o">=</span> <span class="n">vim.g</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">opt</span> <span class="o">=</span> <span class="n">vim.opt</span></span></span></code></pre>
</figure><h2 id="helper-functions">Helper functions</h2>
<p>There&rsquo;s just <code>map</code> for the moment.
It creates mappings with <code>noremap</code> option enabled by default.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="kr">function</span> <span class="nf">map</span><span class="p">(</span><span class="n">mode</span><span class="p">,</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">local</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{</span><span class="n">noremap</span> <span class="o">=</span> <span class="kc">true</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">if</span> <span class="n">opts</span> <span class="kr">then</span> <span class="n">options</span> <span class="o">=</span> <span class="n">vim.tbl_extend</span><span class="p">(</span><span class="s1">&#39;force&#39;</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span> <span class="kr">end</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_set_keymap</span><span class="p">(</span><span class="n">mode</span><span class="p">,</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span></span></span></code></pre>
</figure><h2 id="bootstrap-packernvim">Bootstrap <code>packer.nvim</code></h2>
<p>Make sure the <a href="https://github.com/wbthomason/packer.nvim">Packer</a> plugin manager is instealled and ready.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">install_path</span> <span class="o">=</span> <span class="n">fn.stdpath</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">)</span><span class="o">..</span><span class="s1">&#39;/site/pack/packer/start/packer.nvim&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="n">fn.empty</span><span class="p">(</span><span class="n">fn.glob</span><span class="p">(</span><span class="n">install_path</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">  <span class="n">packer_bootstrap</span> <span class="o">=</span> <span class="n">fn.system</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;git&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;clone&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;--depth&#39;</span><span class="p">,</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;https://github.com/wbthomason/packer.nvim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">install_path</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s1">&#39;packer&#39;</span><span class="p">).</span><span class="n">startup</span><span class="p">(</span><span class="kr">function</span><span class="p">(</span><span class="n">use</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">use</span> <span class="s2">&#34;wbthomason/packer.nvim&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Specify</span> <span class="n">my</span> <span class="n">packages</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">if</span> <span class="n">packer_bootstrap</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">    <span class="n">require</span><span class="p">(</span><span class="s1">&#39;packer&#39;</span><span class="p">).</span><span class="n">sync</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span><span class="p">)</span></span></span></code></pre>
</figure><h2 id="the-packages">The Packages</h2>
<p>It&rsquo;s mostly <code>use &quot;source/repo&quot;</code>.
I&rsquo;ll pull the more interesting bits out into their own blocks.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Specify</span> <span class="n">my</span> <span class="n">packages</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;nvim-lua/popup.nvim&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;nvim-lua/plenary.nvim&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;kyazdani42/nvim-web-devicons&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;neovim/nvim-lspconfig&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;EdenEast/nightfox.nvim&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;RRethy/nvim-base16&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span> <span class="s2">&#34;catppuccin/nvim&#34;</span><span class="p">,</span> <span class="n">as</span> <span class="o">=</span> <span class="s2">&#34;catpuccin&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s1">&#39;folke/tokyonight.nvim&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;meliora-theme/neovim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">requires</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;rktjmp/lush.nvim&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s1">&#39;pineapplegiant/spaceduck&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Load</span> <span class="n">treesitter</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Load</span> <span class="n">filetype.nvim</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Load</span> <span class="n">telescope.nvim</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Load</span> <span class="n">null</span><span class="o">-</span><span class="n">ls.nvim</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Load</span> <span class="n">which</span><span class="o">-</span><span class="n">key.nvim</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Load</span> <span class="n">lualine.nvim</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Load</span> <span class="n">programming</span> <span class="n">language</span> <span class="n">support</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Load</span> <span class="n">riv.vim</span><span class="p">.</span></span></span></code></pre>
</figure><h3 id="treesitter">Treesitter</h3>
<p><a href="https://github.com/nvim-treesitter/nvim-treesitter"><code>nvim-treesitter</code></a> is an experimental binding for Neovim. Something to do with syntax highlighting? Both it and the plugins that use it change frequently. So I better follow the instructions about keeping everything up to date when I sync.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Load</span> <span class="n">treesitter</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;nvim-treesitter/nvim-treesitter&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">run</span> <span class="o">=</span> <span class="s2">&#34;:TSUpdate&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">require</span><span class="p">(</span><span class="s2">&#34;nvim-treesitter.configs&#34;</span><span class="p">).</span><span class="n">setup</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">ensure_installed</span> <span class="o">=</span> <span class="s2">&#34;all&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">highlight</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">enable</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="n">additional_vim_regex_highlighting</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">local</span> <span class="n">parser_config</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s2">&#34;nvim-treesitter.parsers&#34;</span><span class="p">).</span><span class="n">get_parser_configs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser_config.just</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">install_info</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;https://github.com/IndianBoy42/tree-sitter-just&#34;</span><span class="p">,</span> <span class="c1">-- local path or git repo</span>
</span></span><span class="line"><span class="cl">        <span class="n">files</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&#34;src/parser.c&#34;</span><span class="p">,</span> <span class="s2">&#34;src/scanner.cc&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="n">branch</span> <span class="o">=</span> <span class="s2">&#34;main&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="n">maintainers</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&#34;@IndianBoy42&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h2 id="filetype">filetype</h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Load</span> <span class="n">filetype.nvim</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;nathom/filetype.nvim&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">require</span><span class="p">(</span><span class="s2">&#34;filetype&#34;</span><span class="p">).</span><span class="n">setup</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">overrides</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">extensions</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">tf</span> <span class="o">=</span> <span class="s2">&#34;terraform&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">tfvars</span> <span class="o">=</span> <span class="s2">&#34;terraform&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">tfstate</span> <span class="o">=</span> <span class="s2">&#34;json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h3 id="telescope">Telescope</h3>
<p><a href="https://github.com/nvim-telescope/telescope.nvim"><code>telescope.nvim</code></a> is a ridiculously fancy fuzzy-finder.</p>
<p>Not sure if I <em>must</em> specify <code>plenary.nvim</code> as a requirement when I&rsquo;m already loading it. Better safe than sorry.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Load</span> <span class="n">telescope.nvim</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span> <span class="s2">&#34;nvim-telescope/telescope.nvim&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">requires</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span><span class="s2">&#34;nvim-lua/plenary.nvim&#34;</span><span class="p">}</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h4 id="global-key-bindings-for-telescopenvim">Global key bindings for <code>telescope.nvim</code></h4>
<p>Showing the global <code>telescope.nvim</code> key bindings here, though Yarner will be
inserting them outside all this plugin definition stuff. I haven&rsquo;t figured out
how to do global keybindings in a plugin setup quite yet.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Add</span> <span class="n">global</span> <span class="n">bindings</span> <span class="kr">for</span> <span class="n">telescope.nvim</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;leader&gt;ff&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;cmd&gt;lua require(&#39;telescope.builtin&#39;).find_files()&lt;cr&gt;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;leader&gt;fg&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;cmd&gt;lua require(&#39;telescope.builtin&#39;).live_grep()&lt;cr&gt;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;leader&gt;fb&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;cmd&gt;lua require(&#39;telescope.builtin&#39;).buffers()&lt;cr&gt;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;leader&gt;fh&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;cmd&gt;lua require(&#39;telescope.builtin&#39;).help_tags()&lt;cr&gt;&#34;</span><span class="p">)</span></span></span></code></pre>
</figure><h3 id="null-ls">null-ls</h3>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Load</span> <span class="n">null</span><span class="o">-</span><span class="n">ls.nvim</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;jose-elias-alvarez/null-ls.nvim&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">require</span><span class="p">(</span><span class="s2">&#34;null-ls&#34;</span><span class="p">).</span><span class="n">setup</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="n">sources</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">require</span><span class="p">(</span><span class="s2">&#34;null-ls&#34;</span><span class="p">).</span><span class="n">builtins.formatting</span><span class="p">.</span><span class="n">stylua</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">require</span><span class="p">(</span><span class="s2">&#34;null-ls&#34;</span><span class="p">).</span><span class="n">builtins.code_actions</span><span class="p">.</span><span class="n">proselint</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h3 id="which-key">which-key</h3>
<p>I first bumped into the <a href="https://github.com/folke/which-key.nvim"><code>which-key</code></a> help menu in <a href="https://github.com/hlissner/doom-emacs">Doom Emacs</a>. Start a chained key binding like <code>SPC</code>, a menu pops up showing what chains are available. Indispensable there. Indispensable here. Thank goodness folks are porting so many Emacs packages to Neovim.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Load</span> <span class="n">which</span><span class="o">-</span><span class="n">key.nvim</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;folke/which-key.nvim&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">require</span><span class="p">(</span><span class="s2">&#34;which-key&#34;</span><span class="p">).</span><span class="n">setup</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h3 id="lualine">lualine</h3>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Load</span> <span class="n">lualine.nvim</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span> <span class="s1">&#39;nvim-lualine/lualine.nvim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">requires</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;kyazdani42/nvim-web-devicons&#39;</span><span class="p">,</span> <span class="n">opt</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">require</span><span class="p">(</span><span class="s1">&#39;lualine&#39;</span><span class="p">).</span><span class="n">setup</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="c1">-- options = { theme = &#34;duskfox&#34;, }</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h3 id="programming-languages">Programming Languages</h3>
<p>A couple of the tools I use regularly require some special handling.</p>
<ul>
<li><a href="https://github.com/psf/black">Black</a> adds Python code formatting</li>
<li><a href="https://github.com/LhKipp/nvim-nu">nvim-nu</a> adds support for <a href="/card/nushell/">Nushell</a> scripts</li>
<li><a href="https://github.com/habamax/vim-asciidoctor">vim-asciidoctor</a> improves support for <a href="/card/asciidoctor/">Asciidoctor</a> — with block folding</li>
<li><a href="https://github.com/vim-crystal/vim-crystal">vim-crystal</a> for <a href="/card/crystal/">Crystal</a> programming</li>
<li><a href="https://github.com/Glench/Vim-Jinja2-Syntax">Vim-Jinja2-Syntax</a> highlights the Jinja / Nunjucks / Tera family of text template languages</li>
</ul>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Load</span> <span class="n">programming</span> <span class="n">language</span> <span class="n">support</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;habamax/vim-asciidoctor&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;vim-crystal/vim-crystal&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="s2">&#34;glench/vim-jinja2-syntax&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;LhKipp/nvim-nu&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">run</span> <span class="o">=</span> <span class="s2">&#34;:TSInstall nu&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">require</span><span class="p">(</span><span class="s2">&#34;nu&#34;</span><span class="p">).</span><span class="n">setup</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span> <span class="s2">&#34;psf/black&#34;</span><span class="p">,</span> <span class="n">cmd</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;Black&#34;</span><span class="p">}}</span></span></span></code></pre>
</figure><h3 id="rivvim">Riv.vim</h3>
<p>I bounce way too much between systems. Right now I use <a href="https://github.com/gu-fan/riv.vim">Riv</a> when in Neovim. What can I say? I like reStructuredText.</p>
<dl>
<dt><code>g:riv_file_link_style</code></dt>
<dd>use Riv&rsquo;s <code>:doc:</code> role instead of <code>[[...]]</code> for wiki links</dd>
</dl>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="o">//-</span> <span class="n">Load</span> <span class="n">riv.vim</span>
</span></span><span class="line"><span class="cl"><span class="n">use</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Rykka/riv.vim&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">riv_main</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">path</span> <span class="o">=</span> <span class="s2">&#34;~/Dropbox/riv/main&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">vim.g</span><span class="p">.</span><span class="n">riv_projects</span> <span class="o">=</span> <span class="p">{</span><span class="n">riv_main</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">vim.g</span><span class="p">.</span><span class="n">riv_file_link_style</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="n">vim.g</span><span class="p">.</span><span class="n">riv_highlight_code</span> <span class="o">=</span> <span class="s2">&#34;lua,python,cpp,javascript,sh,terraform|hcl&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><h2 id="global-options">Global options</h2>
<aside class="info">
    <header>
      <h3>Note to self</h3>
    </header>
<p>Some of this can be handled by plugins, particularly <code>filetype.nvim</code>.</p>
</aside>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">opt.autoread</span> <span class="o">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.background</span> <span class="o">=</span> <span class="s1">&#39;dark&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.completeopt</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;menuone&#39;</span><span class="p">,</span> <span class="s1">&#39;noinsert&#39;</span><span class="p">,</span> <span class="s1">&#39;noselect&#39;</span><span class="p">}</span>  <span class="c1">-- completion options (for deoplete)</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.cursorline</span> <span class="o">=</span> <span class="kc">true</span>               <span class="c1">-- highlight current line</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.encoding</span> <span class="o">=</span> <span class="s2">&#34;utf-8&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.expandtab</span> <span class="o">=</span> <span class="kc">true</span>                <span class="c1">-- spaces instead of tabs</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.hidden</span> <span class="o">=</span> <span class="kc">true</span>                   <span class="c1">-- enable background buffers</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.ignorecase</span> <span class="o">=</span> <span class="kc">true</span>               <span class="c1">-- ignore case in search</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.joinspaces</span> <span class="o">=</span> <span class="kc">false</span>              <span class="c1">-- no double spaces with join</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.list</span> <span class="o">=</span> <span class="kc">true</span>                     <span class="c1">-- show some invisible characters</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.maxmempattern</span> <span class="o">=</span> <span class="mi">1000</span>            <span class="c1">-- for Riv</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.mouse</span> <span class="o">=</span> <span class="s2">&#34;nv&#34;</span>                    <span class="c1">-- Enable mouse in normal and visual modes</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.number</span> <span class="o">=</span> <span class="kc">true</span>                   <span class="c1">-- show line numbers</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.relativenumber</span> <span class="o">=</span> <span class="kc">true</span>           <span class="c1">-- number relative to current line</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.scrolloff</span> <span class="o">=</span> <span class="mi">4</span>                   <span class="c1">-- lines of context</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.shiftround</span> <span class="o">=</span> <span class="kc">true</span>               <span class="c1">-- round indent</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.shiftwidth</span> <span class="o">=</span> <span class="mi">2</span>                  <span class="c1">-- size of indent</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.sidescrolloff</span> <span class="o">=</span> <span class="mi">8</span>               <span class="c1">-- columns of context</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.smartcase</span> <span class="o">=</span> <span class="kc">true</span>                <span class="c1">-- do not ignore case with capitals</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.smartindent</span> <span class="o">=</span> <span class="kc">true</span>              <span class="c1">-- insert indents automatically</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.splitbelow</span> <span class="o">=</span> <span class="kc">true</span>              <span class="c1">-- put new windows below current</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.splitright</span> <span class="o">=</span> <span class="kc">true</span>               <span class="c1">-- put new vertical splits to right</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.termguicolors</span> <span class="o">=</span> <span class="kc">true</span>            <span class="c1">-- truecolor support</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.wildmode</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;list&#39;</span><span class="p">,</span> <span class="s1">&#39;longest&#39;</span><span class="p">}</span>  <span class="c1">-- command-line completion mode</span>
</span></span><span class="line"><span class="cl"><span class="n">opt.wrap</span> <span class="o">=</span> <span class="kc">false</span>  <span class="c1">-- disable line wrap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cmd</span><span class="s">[[filetype plugin on]]</span>
</span></span><span class="line"><span class="cl"><span class="n">cmd</span><span class="s">[[autocmd FileType * setlocal formatoptions-=cro]]</span>
</span></span><span class="line"><span class="cl"><span class="n">cmd</span><span class="s">[[autocmd FocusGained * checktime]]</span>
</span></span><span class="line"><span class="cl"><span class="n">cmd</span><span class="s">[[colorscheme nightfox]]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cmd</span><span class="s">[[autocmd BufWritePre *.py execute &#39;Black&#39;]]</span>
</span></span><span class="line"><span class="cl"><span class="n">cmd</span><span class="s">[[autocmd BufEnter *.astro set ft=astro]]</span></span></span></code></pre>
</figure><h2 id="global-variables">Global variables</h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">g.mapleader</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">g.maplocalleader</span> <span class="o">=</span> <span class="s1">&#39;,&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">g.python3_host_prog</span> <span class="o">=</span> <span class="s1">&#39;~/.pyenv/versions/neovim/bin/python&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">g.markdown_fenced_languages</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;bash=sh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;python&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;lua&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">g.rst_syntax_code_list</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&#34;python&#34;</span> <span class="p">}</span></span></span></code></pre>
</figure><h2 id="diagnostics">Diagnostics</h2>
<p>Because I dislike unexpected floating text in my terminal.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">vim.diagnostic</span><span class="p">.</span><span class="n">config</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="n">virtual_text</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre>
</figure><h2 id="keybindings">Keybindings</h2>
<ul>
<li><code>&lt;bs&gt;</code> clears search highlights</li>
</ul>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="s2">&#34;&lt;bs&gt;&#34;</span><span class="p">,</span> <span class="s2">&#34;:nohlsearch&lt;cr&gt;&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">//</span> <span class="o">==&gt;</span> <span class="n">Add</span> <span class="n">global</span> <span class="n">bindings</span> <span class="kr">for</span> <span class="n">telescope.nvim</span><span class="p">.</span></span></span></code></pre>
</figure><h2 id="language-server-protocol-lsp">Language Server Protocol (LSP)</h2>
<p>For a fancy IDE-like experience when editing code.
And other structured text, if you&rsquo;re so inclined.</p>
<p>I pretty much use the standard suggested config.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">lsp_opts</span> <span class="o">=</span> <span class="p">{</span> <span class="n">noremap</span><span class="o">=</span><span class="kc">true</span><span class="p">,</span> <span class="n">silent</span><span class="o">=</span><span class="kc">true</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;e&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.diagnostic.open_float()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;[d&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.diagnostic.goto_prev()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;]d&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.diagnostic.goto_next()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;q&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.diagnostic.setloclist()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">-- Use an on_attach function to only map the following keys</span>
</span></span><span class="line"><span class="cl"><span class="c1">-- after the language server attaches to the current buffer</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">lspconfig_on_attach</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">bufnr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">-- Enable completion triggered by &lt;c-x&gt;&lt;c-o&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_option</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;omnifunc&#39;</span><span class="p">,</span> <span class="s1">&#39;v:lua.vim.lsp.omnifunc&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">-- Mappings.</span>
</span></span><span class="line"><span class="cl">  <span class="c1">-- See `:help vim.lsp.*` for documentation on any of the below functions</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;gD&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.declaration()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;gd&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.definition()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;K&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;gi&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.implementation()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;C-k&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.signature_help()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;wa&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.add_workspace_folder()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;wr&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.remove_workspace_folder()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;wl&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;D&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.type_definition()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;rn&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.rename()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;ca&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.code_action()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;gr&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.references()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_set_keymap</span><span class="p">(</span><span class="n">bufnr</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;space&gt;f&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;cmd&gt;lua vim.lsp.buf.formatting()&lt;CR&gt;&#39;</span><span class="p">,</span> <span class="n">lsp_opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s2">&#34;lspconfig&#34;</span><span class="p">).</span><span class="n">pyright.setup</span> <span class="p">{</span> <span class="n">on_attach</span> <span class="o">=</span> <span class="n">lspconfig_on_attach</span><span class="p">,</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s2">&#34;lspconfig&#34;</span><span class="p">).</span><span class="n">tsserver.setup</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">on_attach</span> <span class="o">=</span> <span class="n">lspconfig_on_attach</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</figure><p>And that&rsquo;s it!</p>
]]></content:encoded>
</item>
</channel>
</rss>
