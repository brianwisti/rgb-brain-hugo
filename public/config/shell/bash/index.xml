<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>My GNU Bash ConfigonRandom Geekery</title>
    <link>https://randomgeekery.org/config/shell/bash/</link>
    <description>
      Recent contentinMy GNU Bash Config on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 21 Jan 2024 21:46:52 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/config/shell/bash/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Config: My Bash aliases</title>
  <link>https://randomgeekery.org/config/shell/bash/bash_aliases/</link>
  <pubDate>Sun, 21 Jan 2024 21:46:52 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/shell/bash/bash_aliases/</guid>
  <description>Some of these are specific to specific machines. If I cared more about my GNU Bash setup, I would tidy a bit.
alias realias=&#39;$EDITOR ~/.aliases; source ~/.aliases&#39; alias bbd=&#39;brew bundle dump --force --describe --global&#39; alias be=&#39;bundle exec&#39; alias blf=&#39;beet ls -f &#34;$BF&#34; album&#43; track&#43;&#39; alias dnuke=&#39;docker kill $(docker ps -q);docker system prune --all --volumes -f&#39; alias e=&#39;emacs -nw&#39; alias kexp=&#39;mplayer http://live-aacplus-64.kexp.org/kexp64.aac&#39; alias ll=&#39;lsd -lF&#39; alias l=&#39;lsd -lahF&#39; alias ls=&#39;lsd&#39; alias pr=&#39;poetry run&#39; alias pri=&#39;poetry run invoke&#39; alias rire=&#39;ripit &amp;&amp; beet import ~/mp3 &amp;&amp; rmdir ~/mp3 &amp;&amp; eject&#39; alias tsite=&#39;task project:Site&#39; alias tt=&#39;task &#43;ticket&#39; alias ttw=&#39;task &#43;ticket &#43;Work &#43;prl&#39; alias tw=&#39;task &#43;Work &#43;prl&#39; alias unflicker=&#39;xrandr --output DisplayPort-0 --mode 2560x1440 --rate 59.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p>Some of these are specific to specific machines.
If I cared more about my GNU Bash setup, I would tidy a bit.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">realias</span><span class="o">=</span><span class="s1">&#39;$EDITOR ~/.aliases; source ~/.aliases&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">bbd</span><span class="o">=</span><span class="s1">&#39;brew bundle dump --force --describe --global&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">be</span><span class="o">=</span><span class="s1">&#39;bundle exec&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">blf</span><span class="o">=</span><span class="s1">&#39;beet ls -f &#34;$BF&#34; album+ track+&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">dnuke</span><span class="o">=</span><span class="s1">&#39;docker kill $(docker ps -q);docker system prune --all --volumes -f&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">e</span><span class="o">=</span><span class="s1">&#39;emacs -nw&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">kexp</span><span class="o">=</span><span class="s1">&#39;mplayer http://live-aacplus-64.kexp.org/kexp64.aac&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">ll</span><span class="o">=</span><span class="s1">&#39;lsd -lF&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">l</span><span class="o">=</span><span class="s1">&#39;lsd -lahF&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">ls</span><span class="o">=</span><span class="s1">&#39;lsd&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">pr</span><span class="o">=</span><span class="s1">&#39;poetry run&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">pri</span><span class="o">=</span><span class="s1">&#39;poetry run invoke&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">rire</span><span class="o">=</span><span class="s1">&#39;ripit &amp;&amp; beet import ~/mp3 &amp;&amp; rmdir ~/mp3 &amp;&amp; eject&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">tsite</span><span class="o">=</span><span class="s1">&#39;task project:Site&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">tt</span><span class="o">=</span><span class="s1">&#39;task +ticket&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">ttw</span><span class="o">=</span><span class="s1">&#39;task +ticket +Work +prl&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">tw</span><span class="o">=</span><span class="s1">&#39;task +Work +prl&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">unflicker</span><span class="o">=</span><span class="s1">&#39;xrandr --output DisplayPort-0 --mode 2560x1440 --rate 59.95&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">ymd</span><span class="o">=</span><span class="s1">&#39;date +&#34;%Y%m%d&#34;&#39;</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Config: My bashrc</title>
  <link>https://randomgeekery.org/config/shell/bash/bashrc/</link>
  <pubDate>Sun, 21 Jan 2024 21:46:52 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/shell/bash/bashrc/</guid>
  <description>GNU Bash runs this for non-login shells. So if we aren’t running interactively, skip the rest of the file.
# If not running interactively, don&#39;t do anything case $- in *i*) ;; *) return;; esac Manage the command history. Only include unique commands that don’t start with a space. Append to the history file so it grows over time, but don’t let it get too big.
HISTCONTROL=ignoreboth shopt -s histappend HISTSIZE=1000 HISTFILESIZE=2000 Check the window size after each command and update the values of LINES and COLUMNS.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p>GNU Bash runs this for non-login shells.
So if we aren&rsquo;t running interactively, skip the rest of the file.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># If not running interactively, don&#39;t do anything</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="nv">$-</span> in
</span></span><span class="line"><span class="cl">    *i*<span class="o">)</span> <span class="p">;;</span>
</span></span><span class="line"><span class="cl">      *<span class="o">)</span> <span class="k">return</span><span class="p">;;</span>
</span></span><span class="line"><span class="cl"><span class="k">esac</span></span></span></code></pre>
</figure><p>Manage the command history.
Only include unique commands that don&rsquo;t start with a space.
Append to the history file so it grows over time,
but don&rsquo;t let it get <em>too</em> big.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">HISTCONTROL</span><span class="o">=</span>ignoreboth
</span></span><span class="line"><span class="cl"><span class="nb">shopt</span> -s histappend
</span></span><span class="line"><span class="cl"><span class="nv">HISTSIZE</span><span class="o">=</span><span class="m">1000</span>
</span></span><span class="line"><span class="cl"><span class="nv">HISTFILESIZE</span><span class="o">=</span><span class="m">2000</span></span></span></code></pre>
</figure><p>Check the window size after each command and update the values of LINES and COLUMNS.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">shopt</span> -s checkwinsize</span></span></code></pre>
</figure><p>I&rsquo;m accustomed to <code>**</code> meaning a recursive match in globs.
Just making sure that carries over to interactive shell sessions.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">shopt</span> -s globstar</span></span></code></pre>
</figure><p>Track those shell aliases I&rsquo;m so fond of assembling.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span> -f ~/.bash_aliases <span class="o">]</span> <span class="o">&amp;&amp;</span> . ~/.bash_aliases</span></span></code></pre>
</figure><p>Enable tab-completion features in case they weren&rsquo;t already.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">if</span> ! <span class="nb">shopt</span> -oq posix<span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[</span> -f /usr/share/bash-completion/bash_completion <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    . /usr/share/bash-completion/bash_completion
</span></span><span class="line"><span class="cl">  <span class="k">elif</span> <span class="o">[</span> -f /etc/bash_completion <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    . /etc/bash_completion
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span></span></span></code></pre>
</figure><p>Add Homebrew completions when I&rsquo;ve got that available.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">if</span> which brew <span class="p">&amp;</span>&gt; /dev/null<span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">export</span> <span class="nv">BREW_PREFIX</span><span class="o">=</span><span class="sb">`</span>brew --prefix<span class="sb">`</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[</span> -f <span class="s2">&#34;</span><span class="nv">$BREW_PREFIX</span><span class="s2">/etc/bash_completion&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    . <span class="s2">&#34;</span><span class="nv">$BREW_PREFIX</span><span class="s2">/etc/bash_completion.d/git-completion.bash&#34;</span>
</span></span><span class="line"><span class="cl">    . <span class="s2">&#34;</span><span class="nv">$BREW_PREFIX</span><span class="s2">/etc/bash_completion.d/git-prompt.sh&#34;</span>
</span></span><span class="line"><span class="cl">    . <span class="s2">&#34;</span><span class="nv">$BREW_PREFIX</span><span class="s2">/etc/bash_completion&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span></span></span></code></pre>
</figure><p>Run the <code>keychain</code> OpenSSH key manager for my shell sessions.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">if</span> which keychain &gt; /dev/null<span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">eval</span> <span class="sb">`</span>keychain --eval --agents ssh id_rsa<span class="sb">`</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span></span></span></code></pre>
</figure><p>Load Direnv hooks if available.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">if</span> which direnv &gt; /dev/null<span class="p">;</span> <span class="k">then</span> <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>direnv hook bash<span class="k">)</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">fi</span></span></span></code></pre>
</figure><p>Load hooks for the <code>fzf</code> fuzzy finder.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span> -f ~/.fzf.bash <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">source</span> ~/.fzf.bash</span></span></code></pre>
</figure><p>I sometimes have things to run locally that don&rsquo;t need to be in my universal config.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span> -f ~/.bashrc_local_after <span class="o">]</span> <span class="o">&amp;&amp;</span> . ~/.bashrc_local_after</span></span></code></pre>
</figure><p>Try to get tmux playing nice with existing sessions.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> -n <span class="s2">&#34;\$PS1&#34;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="o">[[</span> -z <span class="s2">&#34;\$TMUX&#34;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="o">[[</span> -n <span class="s2">&#34;\$SSH_CONNECTION&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  tmux attach-session -t remote <span class="o">||</span> tmux new-session -s remote
</span></span><span class="line"><span class="cl"><span class="k">fi</span></span></span></code></pre>
</figure><p>And finally, show my pretty prompt from Starship.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>starship init bash<span class="k">)</span><span class="s2">&#34;</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Config: My GNU Bash Profile</title>
  <link>https://randomgeekery.org/config/shell/bash/bash_profile/</link>
  <pubDate>Sun, 21 Jan 2024 21:46:52 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/shell/bash/bash_profile/</guid>
  <description>I use my ~/.bash_profile to set environment variables and load config for assorted package managers.
For a while there, tmux gave me nested login shells. This confused $PATH handling in all sorts of ways.
PATH=&#34;/usr/bin:/bin:/usr/sbin:/sbin&#34; source /etc/profile Some little convenience functions for viewing and managing the path.
showpath() { perl -E &#39;say for split /:/, $ENV{PATH}&#39; } pathadd() { if [ -d &#34;$1&#34; ] &amp;&amp; [[ &#34;:$PATH:&#34; != *&#34;:$1:&#34;* ]]; then PATH=&#34;$1${PATH:&#43;&#34;:$PATH&#34;}&#34; fi } Ah, Linuxbrew Homebrew — the solution to, and cause of, so many shell problems.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p>I use my <code>~/.bash_profile</code> to set environment variables and load config for assorted
package managers.</p>
<p>For a while there, tmux gave me nested login shells.
This confused <code>$PATH</code> handling in all sorts of ways.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;/usr/bin:/bin:/usr/sbin:/sbin&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> /etc/profile</span></span></code></pre>
</figure><p>Some little convenience functions for viewing and managing the path.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">showpath<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  perl -E <span class="s1">&#39;say for split /:/, $ENV{PATH}&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pathadd<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[[</span> <span class="s2">&#34;:</span><span class="nv">$PATH</span><span class="s2">:&#34;</span> !<span class="o">=</span> *<span class="s2">&#34;:</span><span class="nv">$1</span><span class="s2">:&#34;</span>* <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$1</span><span class="si">${</span><span class="nv">PATH</span><span class="p">:+</span><span class="s2">&#34;:</span><span class="nv">$PATH</span><span class="s2">&#34;</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre>
</figure><p>Ah, <del>Linuxbrew</del> Homebrew — the solution to, and cause of, so many shell problems.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;/home/linuxbrew&#34;</span> <span class="o">]</span> <span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># For Homebrew on Linux</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Output to `/home/linuxbrew/.linuxbrew/bin/brew shellenv`</span>
</span></span><span class="line"><span class="cl">  <span class="nb">eval</span> <span class="k">$(</span>/home/linuxbrew/.linuxbrew/bin/brew shellenv<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;/home/linuxbrew/.linuxbrew/lib/ruby/gems/3.1.0/bin&#34;</span> <span class="o">]</span> <span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    pathadd <span class="s2">&#34;/home/linuxbrew/.linuxbrew/lib/ruby/gems/3.1.0/bin&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nb">export</span> <span class="nv">BREW_PYTHON_HOME</span><span class="o">=</span><span class="s2">&#34;/home/linuxbrew/.linuxbrew/Cellar/python@3.10/3.10.8/libexec/bin&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">fi</span></span></span></code></pre>
</figure><p>Set a few preferences for openers and editors.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PAGER</span><span class="o">=</span><span class="s2">&#34;less -FRX&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">EDITOR</span><span class="o">=</span>nvim
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">NNN_FALLBACK_OPENER</span><span class="o">=</span>xdg-open</span></span></code></pre>
</figure><p>Make sure <code>doom</code> is available if I&rsquo;ve got it that week.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">DOOM_HOME</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/emacs-configs/emacs-doom&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$DOOM_HOME</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  pathadd <span class="s2">&#34;</span><span class="nv">$DOOM_HOME</span><span class="s2">/bin&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span></span></span></code></pre>
</figure><h2 id="programming-language-managers">Programming Language Managers</h2>
<p>GHCup for Haskell.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span> -f <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.ghcup/env&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">source</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.ghcup/env&#34;</span></span></span></code></pre>
</figure><p>Plenv for managing Perl versions.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PLENV_HOME</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.plenv&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$PLENV_HOME</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  pathadd <span class="s2">&#34;</span><span class="nv">$PLENV_HOME</span><span class="s2">/bin&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> which plenv &gt; /dev/null<span class="p">;</span> <span class="k">then</span> <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>plenv init -<span class="k">)</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">fi</span></span></span></code></pre>
</figure><p>Pyenv for managing Python versions.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PYENV_ROOT</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.pyenv&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$PYENV_ROOT</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  pathadd <span class="s2">&#34;</span><span class="nv">$PYENV_ROOT</span><span class="s2">/bin&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> which pyenv &gt; /dev/null<span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>pyenv init --path<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>pyenv init -<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> which pyenv-virtualenv-init &gt; /dev/null<span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>pyenv virtualenv-init -<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span></span></span></code></pre>
</figure><p>Poetry for managing Python projects and their language versions.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.poetry/bin&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> pathadd <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.poetry/bin&#34;</span></span></span></code></pre>
</figure><p>Rakubrew for managing Raku versions.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">RAKUBREW_HOME</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.rakubrew&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$RAKUBREW_HOME</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  pathadd <span class="s2">&#34;</span><span class="nv">$RAKUBREW_HOME</span><span class="s2">/bin&#34;</span>
</span></span><span class="line"><span class="cl">  pathadd <span class="s2">&#34;</span><span class="nv">$RAKUBREW_HOME</span><span class="s2">/shims&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>rakubrew init Bash<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span></span></span></code></pre>
</figure><p>Rbenv for managing Ruby versions.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">if</span> which rbenv &gt; /dev/null<span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  pathadd <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.rbenv/shims&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>rbenv init - bash<span class="k">)</span><span class="s2">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span></span></span></code></pre>
</figure><p>Cargo for managing Rust versions.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span> -f <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.cargo/env&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> . <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.cargo/env&#34;</span></span></span></code></pre>
</figure><p>Volta for managing Node.js versions and global commands.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">VOLTA_HOME</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.volta&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$VOLTA_HOME</span><span class="s2">&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> pathadd <span class="s2">&#34;</span><span class="nv">$VOLTA_HOME</span><span class="s2">/bin&#34;</span></span></span></code></pre>
</figure><p>Better make sure <code>~/bin</code> and <code>~/.local/bin</code> are in my path.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/bin&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> pathadd <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/bin&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.local/bin&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> pathadd <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.local/bin&#34;</span></span></span></code></pre>
</figure><p>Then at the end of the whole thing, if I&rsquo;m running bash I source my <code>~/.bashrc</code>?
Well, okay.
I guess it made sense at the time.</p>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -n <span class="s2">&#34;</span><span class="nv">$BASH_VERSION</span><span class="s2">&#34;</span> -a -n <span class="s2">&#34;</span><span class="nv">$PS1</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[</span> -f <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.bashrc&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    . <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.bashrc&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
</channel>
</rss>
