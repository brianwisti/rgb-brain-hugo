<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Shells and Shell UtilitiesonRandom Geekery</title>
    <link>https://randomgeekery.org/config/shell/</link>
    <description>
      Recent contentinShells and Shell Utilities on Random Geekery
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
      
      <lastBuildDate>Sun, 21 Jan 2024 21:46:52 -0800</lastBuildDate><atom:link href="https://randomgeekery.org/config/shell/index.xml" rel="self" type="application/rss+xml" /><item>
  <title>Config: My $ZDOTDIR</title>
  <link>https://randomgeekery.org/config/shell/zsh/</link>
  <pubDate>Sun, 21 Jan 2024 21:46:52 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/shell/zsh/</guid>
  <description>Warning I don’t use Zsh much at the moment. These files are in for the sake of completeness. That way I have all my dotfiles in this collection. But consider it untested while this warning is up.
zshenv //- file:zshenv # Runs in all sessions export CARGO_HOME=&#34;$HOME/.cargo&#34; export CLICOLOR=1 export DOOM_HOME=&#34;$HOME/.emacs.doom.d&#34; export EDITOR=&#34;nvim&#34; export GOPATH=&#34;$HOME/go&#34; # See brian d foy&#39;s &#34;Preparing for Perl 7&#34; # export PERL5OPT=&#34;-Mv5.32 -Mstrict -Mwarnings \ # -Mfeature=signatures -M-warnings=experimental::signatures \ # -M-feature=indirect \ # -M-bareword::filehandles \ # -M-multidimensional&#34; export PLENV_HOME=&#34;$HOME/.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<aside class="info">
    <header>
      <h3>Warning</h3>
    </header>
<p>I don&rsquo;t use Zsh much at the moment.
These files are in for the sake of completeness.
That way I have all my dotfiles in this collection.
But consider it untested while this warning is up.</p>
</aside>
<h2 id="zshenv"><code>zshenv</code></h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">//- file:zshenv
</span></span><span class="line"><span class="cl"><span class="c1"># Runs in all sessions</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CARGO_HOME</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.cargo&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CLICOLOR</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">DOOM_HOME</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.emacs.doom.d&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">EDITOR</span><span class="o">=</span><span class="s2">&#34;nvim&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">GOPATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/go&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># See brian d foy&#39;s &#34;Preparing for Perl 7&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># export PERL5OPT=&#34;-Mv5.32 -Mstrict -Mwarnings \</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   -Mfeature=signatures -M-warnings=experimental::signatures \</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   -M-feature=indirect \</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   -M-bareword::filehandles \</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   -M-multidimensional&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PLENV_HOME</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.plenv&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PYENV_ROOT</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.pyenv&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PYENV_HOME_BIN</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.pyenv/bin&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Starship takes care of this for me.</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PYENV_VIRTUALENV_DISABLE_PROMPT</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">RBENV_HOME</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.rbenv&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">VOLTA_HOME</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.volta&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">DOTNET_ROOT</span><span class="o">=</span><span class="s2">&#34;/usr/local/opt/dotnet/libexec&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>/Users/random/.rakubrew/bin/rakubrew init Zsh<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> -d <span class="s2">&#34;</span><span class="nv">$CARGO_HOME</span><span class="s2">&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">source</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.cargo/env&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -e /home/random/.nix-profile/etc/profile.d/nix.sh <span class="o">]</span><span class="p">;</span> <span class="k">then</span> . /home/random/.nix-profile/etc/profile.d/nix.sh<span class="p">;</span> <span class="k">fi</span> <span class="c1"># added by Nix installer</span>
</span></span><span class="line"><span class="cl">. <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.cargo/env&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -n <span class="s2">&#34;</span><span class="nv">$PYTHONPATH</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">export</span> <span class="nv">PYTHONPATH</span><span class="o">=</span><span class="s1">&#39;/opt/homebrew/Cellar/pdm/2.2.1/libexec/lib/python3.11/site-packages/pdm/pep582&#39;</span>:<span class="nv">$PYTHONPATH</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="nb">export</span> <span class="nv">PYTHONPATH</span><span class="o">=</span><span class="s1">&#39;/opt/homebrew/Cellar/pdm/2.2.1/libexec/lib/python3.11/site-packages/pdm/pep582&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span></span></span></code></pre>
</figure><h2 id="zshrc"><code>zshrc</code></h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">//- file:zshrc
</span></span><span class="line"><span class="cl">bindkey -e
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;/opt/homebrew/opt/bison/bin:</span><span class="nv">$PATH</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">&#34;-L/opt/homebrew/opt/bison/lib&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">&#34;-L/opt/homebrew/opt/libffi/lib&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CPPFLAGS</span><span class="o">=</span><span class="s2">&#34;-I/opt/homebrew/opt/libffi/include&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PKG_CONFIG_PATH</span><span class="o">=</span><span class="s2">&#34;/opt/homebrew/opt/libffi/lib/pkgconfig&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">vterm_printf<span class="o">(){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&#34;</span><span class="nv">$TMUX</span><span class="s2">&#34;</span>  <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Tell tmux to pass the escape sequences through</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#</span>
</span></span><span class="line"><span class="cl">        <span class="nb">printf</span> <span class="s2">&#34;\ePtmux;\e\e]%s\007\e\\&#34;</span> <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">TERM</span><span class="p">%%-*</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">=</span> <span class="s2">&#34;screen&#34;</span>  <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># GNU screen (screen, screen-256color, screen-256color-bce)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#</span>
</span></span><span class="line"><span class="cl">        <span class="nb">printf</span> <span class="s2">&#34;\eP\e]%s\007\e\\&#34;</span> <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="nb">printf</span> <span class="s2">&#34;\e]%s\e\\&#34;</span> <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ssh keychain manager</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> which keychain &gt; /dev/null<span class="p">;</span> <span class="k">then</span> <span class="nb">eval</span> <span class="sb">`</span>keychain --eval --agents ssh id_rsa<span class="sb">`</span><span class="p">;</span> <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> which plenv &gt; /dev/null<span class="p">;</span> <span class="k">then</span> <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>plenv init - zsh<span class="k">)</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> which pyenv &gt; /dev/null<span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>pyenv init --path<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>pyenv init -<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>pyenv virtualenv-init -<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> which rbenv &gt; /dev/null<span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>rbenv init -<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> -d <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.rakubrew&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span> <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span><span class="nv">$HOME</span>/.rakubrew/bin/rakubrew init Zsh<span class="k">)</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> which direnv &gt; /dev/null<span class="p">;</span> <span class="k">then</span> <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>direnv hook zsh<span class="k">)</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">BROOT_LAUNCHER</span><span class="o">=</span><span class="s2">&#34;~/.config/broot/launcher/bash/br&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> -e <span class="s2">&#34;</span><span class="nv">$BROOT_LAUNCHER</span><span class="s2">&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">source</span> <span class="s2">&#34;</span><span class="nv">$BROOT_LAUNCHER</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">source</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.aliases&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>starship init zsh<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.poetry/bin:</span><span class="nv">$PATH</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/apps/sublime_text:</span><span class="nv">$PATH</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.config/composer/vendor/bin:</span><span class="nv">$PATH</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> -e <span class="nv">$HOME</span>/.asdf/asdf.sh <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  . <span class="nv">$HOME</span>/.asdf/asdf.sh
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span> -f ~/.fzf.zsh <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">source</span> ~/.fzf.zsh
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;/Applications/WezTerm.app/Contents/MacOS:</span><span class="nv">$PATH</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">VOLTA_HOME</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.volta&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$VOLTA_HOME</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">&#34;</span></span></span></code></pre>
</figure><h2 id="zprofile"><code>zprofile</code></h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">//- file:zprofile
</span></span><span class="line"><span class="cl"><span class="c1"># Apple does weird things to path after I define it in zshenv, so define it here instead.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#zmodload zsh/pcre</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># setopt REMATCH_PCRE</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">typeset</span> <span class="nv">system_paths</span><span class="o">=(</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;/usr/local/bin&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;/Applications/Postgres.app/Contents/Versions/latest/bin&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;/Library/Frameworks/Mono.framework/Versions/Current/Commands&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;/Applications/Keybase.app/Contents/SharedSupport/bin&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;/Library/Apple/usr/bin&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;/usr/sbin&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;/usr/bin&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;/bin&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">typeset</span> <span class="nv">macports_paths</span><span class="o">=(</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;/opt/local/sbin&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;/opt/local/bin&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">typeset</span> <span class="nv">linux_paths</span><span class="o">=(</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;/snap/bin&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">typeset</span> <span class="nv">app_paths</span><span class="o">=()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> -d <span class="s2">&#34;</span><span class="nv">$PYENV_HOME_BIN</span><span class="s2">&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span> <span class="nv">app_paths</span><span class="o">+=</span><span class="s2">&#34;</span><span class="nv">$PYENV_HOME_BIN</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> -d <span class="s2">&#34;</span><span class="nv">$DOOM_HOME</span><span class="s2">&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span> <span class="nv">app_paths</span><span class="o">+=</span><span class="s2">&#34;</span><span class="nv">$DOOM_HOME</span><span class="s2">/bin&#34;</span><span class="p">;</span> <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> -d <span class="s2">&#34;</span><span class="nv">$VOLTA_HOME</span><span class="s2">&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span> <span class="nv">app_paths</span><span class="o">+=</span><span class="s2">&#34;</span><span class="nv">$VOLTA_HOME</span><span class="s2">/bin&#34;</span><span class="p">;</span> <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;/home/linuxbrew&#34;</span> <span class="o">]</span> <span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># For Homebrew on Linux</span>
</span></span><span class="line"><span class="cl">  <span class="nv">linux_paths</span><span class="o">+=(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;/home/linuxbrew/.linuxbrew/bin&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;/home/linuxbrew/.linuxbrew/sbin&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Output to `/home/linuxbrew/.linuxbrew/bin/brew shellenv`</span>
</span></span><span class="line"><span class="cl">  <span class="nb">eval</span> <span class="k">$(</span>/home/linuxbrew/.linuxbrew/bin/brew shellenv<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[[</span> -e <span class="k">$(</span>brew --prefix asdf<span class="k">)</span>/asdf.sh <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    . <span class="k">$(</span>brew --prefix asdf<span class="k">)</span>/asdf.sh
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.local/bin&#34;</span> <span class="o">]</span> <span class="p">;</span> <span class="k">then</span> <span class="nv">app_paths</span><span class="o">+=(</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.local/bin&#34;</span><span class="o">)</span><span class="p">;</span> <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;/usr/local/go&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="nv">app_paths</span><span class="o">+=(</span><span class="s2">&#34;/usr/local/go/bin&#34;</span><span class="o">)</span><span class="p">;</span> <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/bin&#34;</span> <span class="o">]</span> <span class="p">;</span> <span class="k">then</span> <span class="nv">app_paths</span><span class="o">+=(</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/bin&#34;</span><span class="o">)</span><span class="p">;</span> <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.perl6/bin&#34;</span> <span class="o">]</span> <span class="p">;</span> <span class="k">then</span> <span class="nv">app_paths</span><span class="o">+=(</span><span class="s2">&#34;HOME/.perl6/bin&#34;</span><span class="o">)</span><span class="p">;</span> <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$PLENV_ROOT</span><span class="s2">&#34;</span> <span class="o">]</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">then</span> <span class="nv">app_paths</span><span class="o">+=(</span><span class="s2">&#34;</span><span class="nv">$PLENV_ROOT</span><span class="s2">/bin&#34;</span><span class="o">)</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>pyenv init --path<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$RBENV_HOME</span><span class="s2">&#34;</span> <span class="o">]</span> <span class="p">;</span> <span class="k">then</span> <span class="nv">app_paths</span><span class="o">+=(</span><span class="s2">&#34;</span><span class="nv">$RBENV_HOME</span><span class="s2">/bin&#34;</span><span class="o">)</span><span class="p">;</span> <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">app_paths</span><span class="o">+=(</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.poetry/bin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">app_paths</span><span class="o">+=(</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.emacs.d/bin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$CARGO_HOME</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="nv">app_paths</span><span class="o">+=</span><span class="s2">&#34;</span><span class="nv">$CARGO_HOME</span><span class="s2">/bin&#34;</span><span class="p">;</span> <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&#34;</span><span class="nv">$DOOM_HOME</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="nv">app_paths</span><span class="o">+=</span><span class="s2">&#34;</span><span class="nv">$DOOM_HOME</span><span class="s2">/bin&#34;</span><span class="p">;</span> <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> <span class="s2">&#34;</span><span class="nv">$OSTYPE</span><span class="s2">&#34;</span> <span class="o">=</span>~ <span class="s2">&#34;darwin&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nv">path</span><span class="o">=(</span><span class="nv">$app_paths</span> <span class="nv">$macports_paths</span> <span class="nv">$system_paths</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">  <span class="nb">export</span> <span class="nv">PKG_CONFIG_PATH</span><span class="o">=</span><span class="s2">&#34;/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nv">path</span><span class="o">=(</span><span class="nv">$app_paths</span> <span class="nv">$linux_paths</span> <span class="nv">$system_paths</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">source</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.aliases&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># MacPorts Installer addition on 2020-12-27_at_21:06:54: adding an appropriate DISPLAY variable for use with MacPorts.</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">DISPLAY</span><span class="o">=</span>:0
</span></span><span class="line"><span class="cl"><span class="c1"># Finished adapting your DISPLAY environment variable for use with MacPorts.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>/opt/homebrew/bin/brew shellenv<span class="k">)</span><span class="s2">&#34;</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Config: My fish config</title>
  <link>https://randomgeekery.org/config/shell/fish/</link>
  <pubDate>Sun, 21 Jan 2024 21:46:52 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/shell/fish/</guid>
  <description>config.fish //- file:fish/config.fish # use status --is-interactive to determine if interactive # use status --is-login to determine if login shell set -x COLORTERM truecolor set -x PATH /usr/bin /bin /usr/sbin /sbin set -x PATH /usr/local/bin /usr/local/sbin $PATH set -x PATH /opt/local/sbin /opt/local/bin $PATH set -x EDITOR nvim set CARGO_BIN ~/.cargo/bin set DART_LIB /usr/lib/dart set EMACS_BIN ~/.emacs.d/bin set KITTY_HOME $HOME/.local/kitty.app set LINUXBREW_HOME /home/linuxbrew/.linuxbrew/bin set HOMEBREW_BUNDLE_FILE ~/.dotfiles/Brewfile set POETRY_HOME $HOME/.poetry set RAKUBREW_HOME ~/.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<h2 id="configfish"><code>config.fish</code></h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-fish" data-lang="fish"><span class="line"><span class="cl">//- file:<span class="nb">fish</span>/config.<span class="nb">fish</span>
</span></span><span class="line"><span class="cl"><span class="c"># use status --is-interactive to determine if interactive
</span></span></span><span class="line"><span class="cl"><span class="c"># use status --is-login to determine if login shell
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="na">-x</span> <span class="nv">COLORTERM</span> truecolor
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="na">-x</span> <span class="nv">PATH</span> /usr/bin /bin /usr/sbin /sbin
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="na">-x</span> <span class="nv">PATH</span> /usr/local/bin /usr/local/sbin <span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="na">-x</span> <span class="nv">PATH</span> /opt/local/sbin /opt/local/bin <span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="na">-x</span> <span class="nv">EDITOR</span> nvim
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="nv">CARGO_BIN</span> ~/.cargo/bin
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="nv">DART_LIB</span> /usr/lib/dart
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="nv">EMACS_BIN</span> ~/.emacs.d/bin
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="nv">KITTY_HOME</span> <span class="nv">$HOME</span>/.local/kitty.app
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="nv">LINUXBREW_HOME</span> /home/linuxbrew/.linuxbrew/bin
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="nv">HOMEBREW_BUNDLE_FILE</span> ~/.dotfiles/Brewfile
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="nv">POETRY_HOME</span> <span class="nv">$HOME</span>/.poetry
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="nv">RAKUBREW_HOME</span> ~/.rakubrew/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="na">-U</span> <span class="nv">FZF_DEFAULT_COMMAND</span> <span class="s1">&#39;fd --type f --hidden --follow --exclude .git&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="na">-U</span> <span class="nv">FZF_FIND_FILE_COMMAND</span> <span class="s1">&#39;fd --type f --hidden --follow --exclude .git . \$dir&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="na">-U</span> <span class="nv">FZF_CTRL_T_COMMAND</span> <span class="nv">$FZF_DEFAULT_COMMAND</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">test</span> <span class="na">-d</span> <span class="nv">$LINUXBREW_HOME</span>
</span></span><span class="line"><span class="cl">  <span class="k">set</span> <span class="na">-x</span> <span class="nv">PATH</span> <span class="nv">$LINUXBREW_HOME</span> <span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl">  <span class="k">set</span> <span class="na">-Ux</span> <span class="nv">BREW_PREFIX</span> <span class="o">(</span><span class="nf">brew</span> <span class="na">--prefix</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">set</span> <span class="nv">BREW_PYTHON_HOME</span> <span class="s2">&#34;</span><span class="nv">$BREW_PREFIX</span><span class="s2">/Cellar/python@3.9/3.9.0/libexec/bin&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="k">test</span> <span class="na">-d</span> <span class="nv">$BREW_PYTHON_HOME</span>
</span></span><span class="line"><span class="cl">    <span class="k">set</span> <span class="na">-gx</span> <span class="nv">PATH</span> <span class="nv">$BREW_PYTHON_HOME</span> <span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">test</span> <span class="na">-d</span> <span class="nv">$DART_LIB</span>
</span></span><span class="line"><span class="cl">  <span class="k">set</span> <span class="na">-x</span> <span class="nv">PATH</span> <span class="nv">$DART_LIB</span>/bin <span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">test</span> <span class="na">-d</span> <span class="nv">$EMACS_BIN</span>
</span></span><span class="line"><span class="cl">  <span class="k">set</span> <span class="na">-x</span> <span class="nv">PATH</span> <span class="nv">$EMACS_BIN</span> <span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">test</span> <span class="na">-d</span> <span class="nv">$KITTY_HOME</span>
</span></span><span class="line"><span class="cl">  <span class="k">set</span> <span class="na">-x</span> <span class="nv">PATH</span> <span class="nv">$KITTY_HOME</span>/bin <span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl">  <span class="c"># Kitty not picking this up in Awesome?
</span></span></span><span class="line"><span class="cl"><span class="c"></span>  <span class="k">set</span> <span class="na">-x</span> <span class="nv">KITTY_CONFIG_DIRECTORY</span> ~/.config/kitty
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">test</span> <span class="na">-d</span> <span class="nv">$RAKUBREW_HOME</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$RAKUBREW_HOME</span>/bin/rakubrew init Fish <span class="o">|</span> <span class="nb">source
</span></span></span><span class="line"><span class="cl"><span class="nb"></span><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">test</span> <span class="na">-d</span> <span class="nv">$POETRY_HOME</span>
</span></span><span class="line"><span class="cl">  <span class="k">set</span> <span class="na">-x</span> <span class="nv">PATH</span> <span class="nv">$POETRY_HOME</span>/bin <span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">test</span> <span class="na">-d</span> <span class="nv">$CARGO_BIN</span>
</span></span><span class="line"><span class="cl">  <span class="k">set</span> <span class="na">-x</span> <span class="nv">PATH</span> <span class="nv">$CARGO_BIN</span> <span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">test</span> <span class="na">-d</span> ~/bin
</span></span><span class="line"><span class="cl">  <span class="k">set</span> <span class="na">-x</span> <span class="nv">PATH</span> ~/bin <span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">#if status --is-interactive
</span></span></span><span class="line"><span class="cl"><span class="c">#  keychain --eval --agents ssh id_rsa randomgeek_rsa | source
</span></span></span><span class="line"><span class="cl"><span class="c">#end
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">test</span> <span class="na">-d</span> ~/.asdf
</span></span><span class="line"><span class="cl">  <span class="nb">source</span> ~/.asdf/asdf.<span class="nb">fish
</span></span></span><span class="line"><span class="cl"><span class="nb"></span><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">source</span> ~/.config/<span class="nb">fish</span>/aliases.<span class="nb">fish
</span></span></span><span class="line"><span class="cl"><span class="nb">
</span></span></span><span class="line"><span class="cl"><span class="nb">eval</span> <span class="o">(</span><span class="nf">direnv</span> hook <span class="nb">fish</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">starship</span> init <span class="nb">fish</span> <span class="o">|</span> <span class="nb">source
</span></span></span><span class="line"><span class="cl"><span class="nb"></span><span class="k">set</span> <span class="na">-gx</span> <span class="nv">VOLTA_HOME</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.volta&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">set</span> <span class="na">-gx</span> <span class="nv">PATH</span> <span class="s2">&#34;</span><span class="nv">$VOLTA_HOME</span><span class="s2">/bin&#34;</span> <span class="nv">$PATH</span></span></span></code></pre>
</figure><h2 id="aliasesfish"><code>aliases.fish</code></h2>
<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-fish" data-lang="fish"><span class="line"><span class="cl">//- file:<span class="nb">fish</span>/aliases.<span class="nb">fish
</span></span></span><span class="line"><span class="cl"><span class="nb">alias </span>rgpy <span class="s1">&#39;rg --type=py&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>bbd <span class="s1">&#39;brew bundle dump --force --describe --global&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>be <span class="s1">&#39;bundle exec&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>e <span class="s1">&#39;emacs -nw&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>kexp <span class="s1">&#39;mplayer http://live-aacplus-64.kexp.org/kexp64.aac&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>ls <span class="s1">&#39;lsd&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>ll <span class="s1">&#39;lsd -la&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>pr <span class="s1">&#39;poetry run&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>pri <span class="s1">&#39;poetry run invoke&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>realias <span class="s2">&#34;</span><span class="nv">$EDITOR</span><span class="s2"> ~/.config/fish/aliases.fish; source ~/.config/fish/aliases.fish&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>rire <span class="s1">&#39;ripit &amp;&amp; beet import ~/mp3 &amp;&amp; rmdir ~/mp3 &amp;&amp; eject&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>tlema <span class="s1">&#39;task project:Lema +Work&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>tilema <span class="s1">&#39;task project:Lema +Work +issue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>ttlema <span class="s1">&#39;task project:Lema +Work +ticket&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>tn <span class="s1">&#39;task-note&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>tickets <span class="s1">&#39;task +ticket&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>unflicker <span class="s1">&#39;xrandr --output DP-1 --mode 2560x1440 --rate 59.95&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>work <span class="s1">&#39;task +Work&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias </span>ymd <span class="s1">&#39;date +&#34;%Y%m%d&#34;&#39;</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Config: My Starship config</title>
  <link>https://randomgeekery.org/config/shell/starship/</link>
  <pubDate>Sun, 21 Jan 2024 21:46:52 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/shell/starship/</guid>
  <description> //- file:starship.toml # Insert a blank line between shell prompts add_newline = true [package] format = &#34;via [🎁 $version](208 bold) &#34; [shell] disabled = false </description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<figure class="highlight">
  <pre tabindex="0" class="chroma"
    ><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="err">//</span><span class="nx">-</span> <span class="nx">file</span><span class="err">:</span><span class="nx">starship</span><span class="p">.</span><span class="nx">toml</span>
</span></span><span class="line"><span class="cl"><span class="c"># Insert a blank line between shell prompts</span>
</span></span><span class="line"><span class="cl"><span class="nx">add_newline</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">package</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">format</span> <span class="p">=</span> <span class="s2">&#34;via [🎁 $version](208 bold) &#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">shell</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">disabled</span> <span class="p">=</span> <span class="kc">false</span></span></span></code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Config: My Taskwarrior taskrc</title>
  <link>https://randomgeekery.org/config/shell/taskwarrior/</link>
  <pubDate>Sun, 21 Jan 2024 21:46:52 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/shell/taskwarrior/</guid>
  <description>How I use Taskwarrior.
Oh I need to go through and explain this.
//- file:taskrc // ==&gt; Define contexts. // ==&gt; Set verbosity. // ==&gt; Adjust task urgency. // ==&gt; Configure a &#39;top&#39; report. // ==&gt; Define a &#39;points&#39; UDA. // ==&gt; Configure a &#39;pointed&#39; report. // ==&gt; Configure an &#39;unpointed&#39; report. // ==&gt; Configure sync. // ==&gt; Adjust reviewed report. include ~/Dropbox/Settings/task/dark-green-256.theme task/contexts //- Define contexts context.blog=-Work -pay -finances -personal context.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p>How I use <a href="/card/taskwarrior/">Taskwarrior</a>.</p>
<p>Oh I need to go through and explain this.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-config" data-lang="config"
      >//- file:taskrc

// ==&gt; Define contexts.
// ==&gt; Set verbosity.
// ==&gt; Adjust task urgency.
// ==&gt; Configure a &#39;top&#39; report.
// ==&gt; Define a &#39;points&#39; UDA.
// ==&gt; Configure a &#39;pointed&#39; report.
// ==&gt; Configure an &#39;unpointed&#39; report.
// ==&gt; Configure sync.
// ==&gt; Adjust reviewed report.

include ~/Dropbox/Settings/task/dark-green-256.theme</code></pre>
</figure><h2 id="taskcontexts">task/contexts</h2>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-config" data-lang="config"
      >//- Define contexts
context.blog=-Work -pay -finances -personal
context.bucket=&#43;idea
context.focused=(priority:H or priority:M) -idea -shelved -finances urgency &gt; 5.0
context.work=&#43;Work -idea -personal
context.offwork=-Work</code></pre>
</figure><h2 id="taskset-verbosity">task/set-verbosity</h2>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-config" data-lang="config"
      >//- Set verbosity
verbose=header,footnote,label,new-id,affected,edit,special,project,filter,unwait</code></pre>
</figure><h2 id="taskadjust-urgency">task/adjust-urgency</h2>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-config" data-lang="config"
      >//- Adjust task urgency
urgency.user.tag.work.coefficient=2.0
urgency.user.tag.idea.coefficient=0.5</code></pre>
</figure><h2 id="tasktop-report">task/top-report</h2>
<p>The most important tasks, presented in a useful format for me.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-config" data-lang="config"
      >//- Configure a &#39;top&#39; report
report.top.columns=id,priority,project,tags,description.count
report.top.description=&#39;Minimal details of tasks&#39;
report.top.filter=status:pending (priority:H or priority:M)
report.top.labels=ID,Pri,Project,Tags,Description
report.top.sort=priority-/,project-,description&#43;</code></pre>
</figure><h2 id="taskpoints-for-tasks">task/points-for-tasks</h2>
<p>The idea was to give me a little practice with task estimates.
I haven&rsquo;t used it since the first week I tried it out.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-config" data-lang="config"
      >//- Define a &#39;points&#39; UDA
uda.points.type=numeric
uda.points.label=Points</code></pre>
</figure><h2 id="display-pending-tasks-that-have-been-pointed">Display pending tasks that have been pointed</h2>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-config" data-lang="config"
      >//- Configure a &#39;pointed&#39; report
report.pointed.description=&#39;Open tasks that have point estimates&#39;
report.pointed.columns=id,points,priority,due,description
report.pointed.sort=urgency-
report.pointed.filter=status:pending points &gt; 0</code></pre>
</figure><h2 id="display-pending-tasks-that-have-not-been-pointed">Display pending tasks that have <em>not</em> been pointed</h2>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-config" data-lang="config"
      >//- Configure an &#39;unpointed&#39; report
report.unpointed.description=&#39;Open tasks that have point estimates&#39;
report.unpointed.columns=id,project,tags,priority,due,description
report.unpointed.sort=urgency-
report.unpointed.filter=status:pending -idea points:</code></pre>
</figure><h2 id="tasksync">task/sync</h2>
<p>Since inthe.AM and freecinc have both shut down, I&rsquo;m not using any kind of sync right now. I may eventually set up my own <code>taskd</code> server on the Raspberry Pi again.</p>
<h2 id="adjust-reviewed-report">Adjust reviewed report</h2>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-config" data-lang="config"
      >//- Adjust reviewed report
uda.reviewed.type=date
uda.reviewed.label=Reviewed
report._reviewed.description=Tasksh review report.  Adjust the filter to your needs.
report._reviewed.columns=uuid
report._reviewed.sort=reviewed&#43;,modified&#43;
report._reviewed.filter=( reviewed.none: or reviewed.before:now-6days ) and ( &#43;PENDING or &#43;WAITING )</code></pre>
</figure>]]></content:encoded>
</item>
<item>
  <title>Config: My tmux.conf</title>
  <link>https://randomgeekery.org/config/shell/tmux/</link>
  <pubDate>Sun, 21 Jan 2024 21:46:52 -0800</pubDate>
  
  <guid>https://randomgeekery.org/config/shell/tmux/</guid>
  <description>Got it happy a while ago and haven’t messed with it much since.
//- file:tmux.conf // ==&gt; Define terminal settings. // ==&gt; Handle the clipboard. // ==&gt; Manage display. // ==&gt; Define keybindings. // ==&gt; Configure the status bar. // ==&gt; Set theme colors. Figuring out terminal support Always a bit of struggle with me for some reason.
//- Define terminal settings # The terminal supports true color set-option -g default-terminal &#34;tmux-256color&#34; set-option -sa terminal-overrides &#34;,*:RGB&#34; set-option -sa terminal-overrides &#34;,xterm*:RGB&#34; Clipboard and system integration //- Handle the clipboard # See /opt/local/share/doc/tmux-pasteboard/Usage.</description>
   <category>config</category> 
  
   <category>config</category> 
  <content:encoded><![CDATA[<p>Got it happy a while ago and haven&rsquo;t messed with it much since.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >//- file:tmux.conf

// ==&gt; Define terminal settings.
// ==&gt; Handle the clipboard.
// ==&gt; Manage display.
// ==&gt; Define keybindings.
// ==&gt; Configure the status bar.
// ==&gt; Set theme colors.</code></pre>
</figure><h2 id="figuring-out-terminal-support">Figuring out terminal support</h2>
<p>Always a bit of struggle with me for some reason.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >//- Define terminal settings
# The terminal supports true color
set-option -g default-terminal &#34;tmux-256color&#34;
set-option -sa terminal-overrides &#34;,*:RGB&#34;
set-option -sa terminal-overrides &#34;,xterm*:RGB&#34;</code></pre>
</figure><h2 id="clipboard-and-system-integration">Clipboard and system integration</h2>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >//- Handle the clipboard
# See /opt/local/share/doc/tmux-pasteboard/Usage.md
#if-shell &#39;test &#34;$(uname -s)&#34; = Darwin&#39; &#39;set-option -g default-command &#34;exec reattach-to-user-namespace -l zsh&#34;&#39;
set -s escape-time 1
set -g mouse on

if-shell &#34;uname | grep -q Darwin&#34; {
  bind-key -T copy-mode-vi &#39;y&#39; \
    send -X copy-pipe-and-cancel &#39;reattach-to-user-namespace pbcopy&#39;
  bind-key -T copy-mode-vi Enter \
    send -X copy-pipe-and-cancel &#39;reattach-to-user-namespace pbcopy&#39;
} {
  bind-key -T copy-mode-vi &#39;y&#39; \
    send -X copy-pipe-and-cancel &#39;xclip -in -selection clipboard&#39;
  bind-key -T copy-mode-vi Enter \
    send -X copy-pipe-and-cancel &#39;xclip -in -selection clipboard&#39;
}

set-option -g focus-events on</code></pre>
</figure><h2 id="display">Display</h2>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >//- Manage display
# via https://github.com/gpakosz/.tmux/blob/master/.tmux.conf
set -g base-index 1          # window numbering
setw -g pane-base-index 1    # pane numbering
set -g renumber-windows on   # renumber when a window closed?
setw -g automatic-rename on # rename window to reflect current program?
set -g set-titles on         # set terminal title

set -g monitor-activity on
set -g visual-activity on</code></pre>
</figure><h2 id="key-bindings">Key bindings</h2>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >//- Define keybindings
set-window-option -g xterm-keys on
set-window-option -g mode-keys vi

bind c new-window -c &#34;#{pane_current_path}&#34;
bind C new-window -- nu
bind r source-file ~/.tmux.conf \; display &#34;Reloaded!&#34;

bind \\ split-window -h -c &#34;#{pane_current_path}&#34;
unbind %

bind - split-window -v -c &#34;#{pane_current_path}&#34;
unbind &#39;&#34;&#39;

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R</code></pre>
</figure><h2 id="status-bar">Status bar</h2>
<p>And its widgets.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >//- Configure the status bar
set -g status on
set -g status-interval 10    # redraw status line after n seconds
set-window-option -g status-position top

# See also: https://github.com/samoshkin/tmux-config/blob/master/tmux/tmux.conf
wg_date=&#34;#[$color_secondary]%Y-%m-%d %H:%M%z#[default]&#34;
#set -g status-right &#34;#{prefix-highlight} #(task-counts) $wg_date&#34;
set -g status-right &#34;#{prefix-highlight} $wg_date&#34;</code></pre>
</figure><h2 id="colors">Colors</h2>
<p>Sort of a Fairyfloss / SpaceDuck-friendly color scheme.</p>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >//- Set theme colors

// ==&gt; Set default bar color.
// ==&gt; Set active pane color.
// ==&gt; Set inactive pane color.
// ==&gt; Set active window color.
// ==&gt; Set message color.
// ==&gt; Set color when commands are run.</code></pre>
</figure><h3 id="default-bar-color">Default bar color</h3>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >//- Set default bar color
set-option -g status-style &#34;bg=#1b1c36, fg=#ecf0c1&#34;</code></pre>
</figure><h3 id="active-pane">Active pane</h3>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >//- Set active pane color
set -g pane-active-border-style &#34;fg=#fccc96&#34;</code></pre>
</figure><h3 id="inactive-pane">Inactive pane</h3>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >//- Set inactive pane color
set -g pane-border-style &#34;fg=#686f9a&#34;</code></pre>
</figure><h3 id="active-window">Active window</h3>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >//- Set active window color
set-option -g window-status-current-style &#34;bg=#686f9a, fg=#ffffff&#34;</code></pre>
</figure><h3 id="message">Message</h3>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >//- Set message color
set-option -g message-style &#34;bg=#686f9a, fg=#ecf0c1&#34;
set-option -g message-command-style &#34;bg=#686f9a, fg=#ecf0c1&#34;</code></pre>
</figure><h3 id="when-commands-are-run">When commands are run</h3>
<figure class="highlight">
  <pre tabindex="0"
    ><code class="language-conf" data-lang="conf"
      >//- Set color when commands are run
set -g message-style &#34;fg=#0f11b0, bg=#686f9a&#34;</code></pre>
</figure>]]></content:encoded>
</item>
</channel>
</rss>
